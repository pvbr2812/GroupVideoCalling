import { AzureLogger } from '@azure/logger';
import { CommunicationIdentifierKind } from '@azure/communication-common';
import { CommunicationTokenCredential } from '@azure/communication-common';
import { CommunicationUserIdentifier } from '@azure/communication-common';
import { CommunicationUserKind } from '@azure/communication-common';
import { MicrosoftTeamsUserIdentifier } from '@azure/communication-common';
import { MicrosoftTeamsUserKind } from '@azure/communication-common';
import { PhoneNumberIdentifier } from '@azure/communication-common';
import { PhoneNumberKind } from '@azure/communication-common';
import { UnknownIdentifier } from '@azure/communication-common';
import { UnknownIdentifierKind } from '@azure/communication-common';

/**
 * Options for accepting a call.
 * Pass video streams that will be used to accept a call.
 * If videoOptions is undefined, then call will be started with local video off.
 * @public
 */
export declare interface AcceptCallOptions {
    videoOptions?: VideoOptions;
}

/**
 * Options for making an outgoing PSTN call
 * @public
 */
export declare interface AddPhoneNumberOptions {
    /**
     * A phone number in E.164 format that will be used to represent callers identity.
     * For example, using the alternateCallerId to add a participant using PSTN, this number will
     * be used as the caller id in the PSTN call.
     */
    alternateCallerId?: PhoneNumberIdentifier;
}

/**
 * Information about a microphone or speaker device.
 * @public
 */
export declare interface AudioDeviceInfo {
    /**
     * Get the name of this video device.
     */
    readonly name: string;
    /**
     * Get Id of this video device.
     */
    readonly id: string;
    /**
     * Is this the systems default audio device
     */
    readonly isSystemDefault: boolean;
    /**
     * Get this audio device type
     */
    readonly deviceType: AudioDeviceType;
}

/**
 * Type of an audio device
 * @public
 */
export declare type AudioDeviceType = 'Microphone' | 'Speaker' | 'CompositeAudioDevice';

/**
 * Audio options provided when making an outgoing call or joining a group call
 * @public
 */
export declare interface AudioOptions {
    /**
     * Whether to start the call muted
     */
    muted?: boolean;
}

/**
 * Represents a Call
 * @public
 */
export declare interface Call {
    /**
     * Get the unique Id for this Call.
     */
    readonly id: string;
    
    /**
     * Caller Information if the call is incoming.
     */
    readonly callerInfo: CallerInfo;
    /**
     * Get the state of this Call.
     */
    readonly state: CallState;
    /**
     * Containing code/subCode indicating how call ended
     */
    readonly callEndReason?: CallEndReason;
    /**
     * Get the call direction, whether Incoming or Outgoing.
     */
    readonly direction: CallDirection;
    /**
     * Whether local user is muted, locally or remotely
     */
    readonly isMuted: boolean;
    /**
     * Whether screen sharing is on
     */
    readonly isScreenSharingOn: boolean;
    /**
     * Collection of video streams sent to other participants in a call.
     */
    readonly localVideoStreams: ReadonlyArray<LocalVideoStream>;
    /**
     * Collection of remote participants participating in this call.
     */
    readonly remoteParticipants: ReadonlyArray<RemoteParticipant>;
    
    /**
     * Hang up the call.
     * @param options? - HangUp options.
     */
    hangUp(options?: HangUpOptions): Promise<void>;
    /**
     * Mute local microphone.
     */
    mute(): Promise<void>;
    /**
     * Unmute local microphone.
     */
    unmute(): Promise<void>;
    /**
     * Send DTMF tone.
     */
    sendDtmf(dtmfTone: DtmfTone): Promise<void>;
    /**
     * Start sending video stream in the call.
     * @param localVideoStream - Represents a local video stream and takes a camera in constructor.
     */
    startVideo(localVideoStream: LocalVideoStream): Promise<void>;
    /**
     * Stop local video, pass localVideoStream you got from call.startVideo() API call.
     * @param localVideoStream - The local video stream to stop streaming.
     */
    stopVideo(localVideoStream: LocalVideoStream): Promise<void>;
    /**
     * Add a participant to this Call.
     * @param identifier - The identifier of the participant to add.
     * @param options - Additional options for managing the PSTN call. For example, setting the Caller Id phone number in a PSTN call.
     * @returns The RemoteParticipant object associated with the successfully added participant.
     */
    addParticipant(identifier: CommunicationUserIdentifier | MicrosoftTeamsUserIdentifier): RemoteParticipant;
    addParticipant(identifier: PhoneNumberIdentifier, options?: AddPhoneNumberOptions): RemoteParticipant;
    /**
     * Remove a participant from this Call.
     * @param identifier - The identifier of the participant to remove.
     * @param options - options
     */
    removeParticipant(identifier: CommunicationUserIdentifier | PhoneNumberIdentifier | MicrosoftTeamsUserIdentifier | UnknownIdentifier): Promise<void>;
    /**
     * Put this Call on hold.
     */
    hold(): Promise<void>;
    /**
     * Resume this Call.
     */
    resume(): Promise<void>;
    /**
     * Start local screen sharing, browser handles screen/window enumeration and selection.
     */
    startScreenSharing(): Promise<void>;
    /**
     * Stop local screen sharing.
     */
    stopScreenSharing(): Promise<void>;
    /**
     * Subscribe function for stateChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'stateChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for idChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'idChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for isMutedChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'isMutedChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for isScreenSharingChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'isScreenSharingOnChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for remoteParticipantsUpdated event
     * @param event - event name
     * @param listener - callback fn that will be called when this collection will change,
     * it will pass arrays of added and removed elements
     */
    on(event: 'remoteParticipantsUpdated', listener: CollectionUpdatedEvent<RemoteParticipant>): void;
    /**
     * Subscribe function for localVideoStreamsUpdated event
     * @param event - event name
     * @param listener - callback fn that will be called when this collection will change,
     * it will pass arrays of added and removed elements
     */
    on(event: 'localVideoStreamsUpdated', listener: CollectionUpdatedEvent<LocalVideoStream>): void;
    /**
     * Unsubscribe function for stateChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'stateChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for idChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'idChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for isMutedChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    off(event: 'isMutedChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for isScreenSharingChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'isScreenSharingOnChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for remoteParticipantsUpdated event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'remoteParticipantsUpdated', listener: CollectionUpdatedEvent<RemoteParticipant>): void;
    /**
     * Unsubscribe function for localVideoStreamsUpdated event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'localVideoStreamsUpdated', listener: CollectionUpdatedEvent<LocalVideoStream>): void;
}

/**
 * The CallAgent is used to handle calls.
 * @public
 */
export declare interface CallAgent {
    /**
     * Get the calls.
     */
    readonly calls: ReadonlyArray<Call>;
    /**
     * Specify the display name of the local participant for all new calls.
     */
    readonly displayName?: string;
    /**
     * Initiates a call to the participants provided.
     * @param participants[] - User Identifiers (Callees) to make a call to.
     * @param options? - Start Call options.
     * @returns The Call object associated with the started call.
     */
    startCall(participants: (CommunicationUserIdentifier | PhoneNumberIdentifier | UnknownIdentifier)[], options?: StartCallOptions): Call;
    /**
     * Join a group call.
     * To join a group call just use a groupId.
     * @param groupLocator - Group call information.
     * @param options - Call start options.
     * @returns The Call object associated with the call.
     */
    join(groupLocator: GroupLocator, options?: JoinCallOptions): Call;
    
    
    /**
     * Dispose this CallAgent ( required to create another new CallAgent)
     */
    dispose(): Promise<void>;
    /**
     * Subscribe function for incomingCall event.
     * @param event - event name
     * @param listener - callback fn that will be called when this callAgent will receive an incoming call
     */
    on(event: 'incomingCall', listener: IncomingCallEvent): void;
    /**
     * Unsubscribe function for incomingCall event.
     * @param event - event name.
     * @param listener - callback fn that was used to subscribe to this event.
     */
    off(event: 'incomingCall', listener: IncomingCallEvent): void;
    /**
     * Subscribe function for callsUpdated event.
     * @param event - event name
     * @param listener - callback fn that will be called when this collection will change,
     * it will pass arrays of added and removed elements
     */
    on(event: 'callsUpdated', listener: CollectionUpdatedEvent<Call>): void;
    /**
     * Unsubscribe function for callsUpdated event.
     * @param event - event name.
     * @param listener - allback fn that was used to subscribe to this event.
     */
    off(event: 'callsUpdated', listener: CollectionUpdatedEvent<Call>): void;
}

/**
 * Options for creating CallAgent.
 * @public
 */
export declare interface CallAgentOptions {
    /**
     * Specify the display name of the local participant for all new calls.
     */
    displayName?: string;
}

/**
 * The CallClient is the main entry point to the SDK.
 * The CallClient is used to create the CallAgent and to get the DeviceManager.
 * @public
 */
export declare class CallClient {
    private readonly clientId;
    private _callAgent;
    private _callStack;
    private _deviceManager;
    
    /**
     * Create a CallClient.
     * @public
     * @param callClientOptions
     */
    constructor(options?: any);
    /**
     * The CallAgent is used to handle calls.
     * To create the CallAgent, pass a CommunicationTokenCredential object provided from SDK.
     * - The CallClient can only have one active CallAgent instance at a time.
     * - You can create a new CallClient instance to create a new CallAgent.
     * - You can dispose of a CallClient's current active CallAgent, and call the CallClient's
     *   createCallAgent() method again to create a new CallAgent.
     * @public
     * @param tokenCredential - The token credential. Use AzureCommunicationTokenCredential from @azure/communication-common to create a credential.
     * @param options - The CallAgentOptions for additional options like display name.
     */
    createCallAgent(tokenCredential: CommunicationTokenCredential, options?: CallAgentOptions): Promise<CallAgent>;
    /**
     * The DeviceManager is used to handle media devices such as cameras, microphones, and speakers.
     * @public
     */
    getDeviceManager(): Promise<DeviceManager>;
    
    private sendTelemetry;
}

/**
 * Options for CallClient
 * @public
 */
export declare type CallClientOptions = {
    /**
     * Specify custom logger injected to the client,
     * Logger implementation is provided by @azure/logger package
     */
    logger?: AzureLogger;
};

/**
 * Type of the direction of a call:
 * - 'Incoming'
 * - 'Outgoing'
 * @public
 */
export declare type CallDirection = 'Incoming' | 'Outgoing';

/**
 * Event that the call has ended
 * @public
 */
export declare type CallEndedEvent = (args: {
    callEndReason: CallEndReason;
}) => void;

/**
 * Describes the reason why the call ended
 * @public
 */
export declare interface CallEndReason {
    /**
     * Get the HTTP code.
     */
    readonly code: number;
    /**
     * Get the subCode/reason code.
     */
    readonly subCode?: number;
}

/**
 * Caller Information
 * @public
 */
export declare interface CallerInfo {
    /**
    * Identifier of the caller
    */
    readonly identifier: CommunicationUserKind | PhoneNumberKind | MicrosoftTeamsUserKind | UnknownIdentifierKind | undefined;
    /**
    * Display name of caller ( optional )
    */
    readonly displayName?: string;
}

/**
 * Call states
 * @public
 */
export declare type CallState = 'None' | 'Connecting' | 'Ringing' | 'Connected' | 'LocalHold' | 'RemoteHold' | 'InLobby' | 'Disconnecting' | 'Disconnected' | 'EarlyMedia';

/**
 * Event that a collection of objects has been updated
 */
export declare type CollectionUpdatedEvent<T> = (args: {
    added: T[];
    removed: T[];
}) => void;

/**
 * Error that get's throw when API call fails.
 * @public
 */
export declare interface CommunicationServicesError {
    /**
     * Get the error name
     */
    readonly name: string;
    /**
     * Get the HTTP code.
     */
    readonly code: number;
    /**
     * Get the subCode/reason code
     */
    readonly subCode: number;
    /**
     * Get a human readable message about the error
     */
    readonly message: string;
}

/**
 * Information about a composite audio device
 * @public
 */
export declare interface CompositeAudioDeviceInfo {
    readonly microphone: AudioDeviceInfo;
    readonly speaker: AudioDeviceInfo;
    readonly compositeAudioDeviceType: CompositeAudioDeviceType;
}

/**
 * Type of a compositve audio device
 * @public
 */
export declare type CompositeAudioDeviceType = 'Speaker' | 'Headphones' | 'Headset' | 'Handset' | 'Speakerphone';

/**
 * Options for the renderer of a video stream
 * @public
 */
export declare interface CreateViewOptions {
    isMirrored?: boolean;
    scalingMode?: ScalingMode;
}

/**
 * Defines permission granted by the user
 * @public
 */
export declare interface DeviceAccess {
    audio: boolean;
    video: boolean;
}

/**
 * The Device Manager is used to handle system
 * media devices such as cameras, microphones, and speakers.
 * @public
 */
export declare interface DeviceManager {
    /**
     * Whether the device host can select speaker output
     */
    readonly isSpeakerSelectionAvailable: boolean;
    /**
     *  The microphone device that is being used.
     */
    readonly selectedMicrophone?: AudioDeviceInfo;
    /**
     * The speaker device that is being used.
     */
    readonly selectedSpeaker?: AudioDeviceInfo;
    /**
     * Get a list of available video devices for use.
     */
    getCameras(): Promise<VideoDeviceInfo[]>;
    /**
     * Get a list of available microphone devices for use.
     */
    getMicrophones(): Promise<AudioDeviceInfo[]>;
    /**
     * Get a list of available speaker devices for use.
     */
    getSpeakers(): Promise<AudioDeviceInfo[]>;
    /**
     * Selects the microphone device to use.
     * @param microphoneDevice - Microphone device information.
     */
    selectMicrophone(microphoneDevice: AudioDeviceInfo): Promise<void>;
    /**
     * Select the speaker device to use.
     * @param speakerDevice - Speaker device information.
     */
    selectSpeaker(speakerDevice: AudioDeviceInfo): Promise<void>;
    /**
     * Show browser prompt to ask the front end user for permission to use the specified device.
     * @param permissionConstraints - configures which permission (audio/video) to request
     * @returns Information about access state
     */
    askDevicePermission(permissionConstraints: PermissionConstraints): Promise<DeviceAccess>;
    /**
     * Subscribe function for videoDevicesUpdated event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'videoDevicesUpdated', listener: CollectionUpdatedEvent<VideoDeviceInfo>): void;
    /**
     * Subscribe function for audioDevicesUpdated event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'audioDevicesUpdated', listener: CollectionUpdatedEvent<AudioDeviceInfo>): void;
    /**
     * Subscribe function for selectedMicrophoneChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for selectedSpeakerChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for videoDevicesUpdated event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'videoDevicesUpdated', listener: CollectionUpdatedEvent<VideoDeviceInfo>): void;
    /**
     * Unsubscribe function for audioDevicesUpdated event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'audioDevicesUpdated', listener: CollectionUpdatedEvent<AudioDeviceInfo>): void;
    /**
     * Unsubscribe function for selectedMicrophoneChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    off(event: 'selectedMicrophoneChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for selectedSpeakerChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    off(event: 'selectedSpeakerChanged', listener: PropertyChangedEvent): void;
}

/**
 * Type of device
 * @public
 */
export declare type DeviceType = 'Camera' | 'Microphone' | 'Speaker';

/**
 * Dispose of an object
 * @public
 */
export declare interface Disposable {
    dispose(causeId?: string): void;
}

/**
 * DTMF tone for PSTN calls
 * @public
 */
export declare type DtmfTone = 'A' | 'B' | 'C' | 'D' | 'Flash' | 'Num0' | 'Num1' | 'Num2' | 'Num3' | 'Num4' | 'Num5' | 'Num6' | 'Num7' | 'Num8' | 'Num9' | 'Pound' | 'Star';

/**
 * Locator used for joining a group call.
 * @public
 */
export declare interface GroupCallLocator {
    groupId: string;
}

/**
 * Type of Group locator.
 * @public
 */
export declare type GroupLocator = GroupCallLocator;

/**
 * Options for hanging up a call
 * @public
 */
export declare interface HangUpOptions {
    /**
     * End the call for everyone
     */
    forEveryone: boolean;
}

/**
 * Represents an incoming call
 * @public
 */
export declare interface IncomingCall {
    /**
     * Get the unique Id for this Call.
     */
    readonly id: string;
    
    /**
     * Identifier of the caller
     */
    readonly callerInfo: CallerInfo;
    /**
     * Containing code/subCode indicating how call ended
     */
    readonly callEndReason?: CallEndReason;
    /**
     * Accept this incoming Call.
     * @param options - accept options.
     */
    accept(options?: AcceptCallOptions): Promise<Call>;
    /**
     * Reject this incoming Call.
     */
    reject(): Promise<void>;
    /**
    * Subscribe function for onCallEnded event
    * @param event - event name
    * @param listener - callback fn that was used to subscribe to this event
    */
    on(event: 'callEnded', listener: CallEndedEvent): void;
    /**
     * Unsubscribe function for onCallEnded event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'callEnded', listener: CallEndedEvent): void;
}

/**
 * IncomingCallEvent
 */
export declare type IncomingCallEvent = (args: {
    incomingCall: IncomingCall;
}) => void;

/**
 * Options for joining a group call.
 * Pass video streams that will be used to start a call.
 * Pass audio options weather to join the call muted or unmuted
 * If videoOptions is undefined, then call will be started with local video off.
 * @public
 */
export declare interface JoinCallOptions {
    videoOptions?: VideoOptions;
    audioOptions?: AudioOptions;
}

/**
 * Represents a local video stream for a local camera device
 * @public
 */
export declare class LocalVideoStream {
    private _source;
    private _mediaStreamType;
    private _disposed;
    
    /**
     * Create a local video stream
     * @public
     * @param source
     */
    constructor(source: VideoDeviceInfo);
    /**
     * Get the current video source for this LocalVideoStream
     * @public
     */
    get source(): VideoDeviceInfo;
    /**
     * Get the media stream type for this LocalVideoStream
     * @public
     */
    get mediaStreamType(): MediaStreamType;
    /**
     * Switch to use a different video source
     * @public
     * @param source - The new video source to use.
     */
    switchSource(source: VideoDeviceInfo): Promise<void>;
    
    
}

/**
 * Media stream type
 * @public
 */
export declare type MediaStreamType = 'Video' | 'ScreenSharing';

/**
 * Define constraints for accessing local devices
 * @public
 */
export declare interface PermissionConstraints {
    audio: boolean;
    video: boolean;
}

/**
 * Event that a property has changed
 * @public
 */
export declare type PropertyChangedEvent = () => void;

/**
 * Represents a remote participant in a call.
 * @public
 */
export declare interface RemoteParticipant {
    /**
     * Get the identifier for this remote participant.
     * Same as the one used to provision token for another user
     */
    readonly identifier: CommunicationUserKind | PhoneNumberKind | MicrosoftTeamsUserKind | UnknownIdentifierKind;
    /**
     * Optional display name, if it was set by the endpoint of
     * that remote participant
     */
    readonly displayName?: string;
    /**
     * Get state of this remote participant.
     */
    readonly state: RemoteParticipantState;
    /**
     * Reason why participant left the call, contains code/subCode/message.
     */
    readonly callEndReason?: CallEndReason;
    /**
     * Collection of video streams this participants has.
     */
    readonly videoStreams: ReadonlyArray<RemoteVideoStream>;
    /**
     * Whether this remote participant is muted or not
     */
    readonly isMuted: boolean;
    readonly isSpeaking: boolean;
    /**
     * Subscribe function for stateChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'stateChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for isMutedChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'isMutedChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for displayNameChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'displayNameChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for isSpeakingChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'isSpeakingChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for videoStreamsUpdated  event
     * @param event - event name
     * @param listener - callback fn that will be called when this collection will change,
     * it will pass arrays of added and removed elements
     */
    on(event: 'videoStreamsUpdated', listener: CollectionUpdatedEvent<RemoteVideoStream>): void;
    /**
     * Unsubscribe function for stateChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'stateChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for isMutedChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'isMutedChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for displayNameChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'displayNameChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for isSpeakingChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'isSpeakingChanged', listener: PropertyChangedEvent): void;
    /**
     * Unsubscribe function for videoStreamsUpdated event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'videoStreamsUpdated', listener: CollectionUpdatedEvent<RemoteVideoStream>): void;
}

/**
 * Remote participant states
 * @public
 */
export declare type RemoteParticipantState = 'Idle' | 'Connecting' | 'Ringing' | 'Connected' | 'Hold' | 'InLobby' | 'EarlyMedia' | 'Disconnected';

/**
 * Represents a remote participants video or screen-sharing stream
 * @public
 */
export declare interface RemoteVideoStream {
    /**
     * Id of the remote stream
     */
    readonly id: number;
    /**
     * Get this remote media stream type.
     */
    readonly mediaStreamType: MediaStreamType;
    /**
     * Whether the stream is available or not.
     */
    readonly isAvailable: boolean;
    /**
     * Subscribe function for isAvailableChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when value of this property will change
     */
    on(event: 'isAvailableChanged', listener: PropertyChangedEvent): void;
    /**
     * Subscribe function for activeRenderersChanged event
     * @param event - event name
     * @param listener - callback fn that will be called when this collection will change,
     * it will pass arrays of added and removed elements
     */
    /**
     * Unsubscribe function for isAvailableChanged event
     * @param event - event name
     * @param listener - callback fn that was used to subscribe to this event
     */
    off(event: 'isAvailableChanged', listener: PropertyChangedEvent): void;
}

/**
 * Renderer target
 * @public
 */
export declare type RenderTarget = HTMLElement;

/**
 * The scaling mode for the view of a video stream
 * @public
 */
export declare type ScalingMode = 'Stretch' | 'Crop' | 'Fit';

/**
 * Options for starting an outgoing call.
 * @public
 */
export declare interface StartCallOptions extends JoinCallOptions {
    /**
     * A phone number in E.164 format that will be used to represent callers identity.
     * For example, using the alternateCallerId to add a participant using PSTN, this number will
     * be used as the caller id in the PSTN call.
     */
    alternateCallerId?: PhoneNumberIdentifier;
}

/**
 * Stream size.
 * @public
 */
export declare interface StreamSize {
    width: number;
    height: number;
}

/**
 * Information about a camera device
 * @public
 */
export declare interface VideoDeviceInfo {
    /**
     * Get the name of this video device.
     */
    readonly name: string;
    /**
     * Get Id of this video device.
     */
    readonly id: string;
    /**
     * Get this video device type
     */
    readonly deviceType: VideoDeviceType;
}

/**
 * Type of a video device
 * @public
 */
export declare type VideoDeviceType = 'Unknown' | 'UsbCamera' | 'CaptureAdapter' | 'Virtual';

/**
 * Represents a local video stream and takes a camera in constructor.
 * @public
 */
export declare interface VideoOptions {
    localVideoStreams?: LocalVideoStream[];
}

/**
 * The renderer for a video stream
 * @public
 */
export declare class VideoStreamRenderer {
    private videoStream;
    /**
     * Dimensions of the renderer
     */
    readonly size: StreamSize;
    private views;
    private disposed;
    
    /**
     * Create a Renderer for a local camera preview or remote video stream.
     * Future APIs:
     *     getStats(): Promise<RendererStats>; // Helpful in debugging; should be included
     *     onNextFrame((IFrame) -> void) // to allow app to fetch raw frames - to be implemented later
     *     captureFrame(timeoutMs: number, bufferName?: string): Promise<IVideoFrame>; // This can come in later
     *     events/delegates are provided by IRendererEvents
     * @public
     * @param videoStream - The video stream to render
     */
    constructor(videoStream: LocalVideoStream | RemoteVideoStream);
    /**
     * Create the view for the video stream.
     * @public
     * @param options - Renderer options.
     */
    createView(options?: CreateViewOptions): Promise<VideoStreamRendererView>;
    private sendCreateViewEvent;
    /**
     * Dispose of this Renderer
     * @public
     */
    dispose(): void;
    /**
     * Attempt to dispose view, if it fails, ignore error
     * @param view
     */
    private _attemptToDisposeView;
}

/**
 * The view for a video stream.
 * @public
 */
export declare interface VideoStreamRendererView extends Disposable {
    /**
     * The current scale mode for the video.
     */
    readonly scalingMode: ScalingMode;
    /**
     * Weather to display the video stream is mirrored.
     */
    readonly isMirrored: boolean;
    /**
     * The target html element in which the video is rendering on.
     * Use this property and attach it to any UI html element. Example:
     *     document.getElement('someDiv').appendChild(rendererView.target);
     */
    readonly target: HTMLElement;
    /**
     * Update the scale mode for this view.
     * @param scalingMode - The new scale mode.
     */
    updateScalingMode(scalingMode: ScalingMode): Promise<void>;
}

export { }
