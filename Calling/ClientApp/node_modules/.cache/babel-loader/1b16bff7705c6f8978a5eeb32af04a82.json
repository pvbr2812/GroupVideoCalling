{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n/**\n * @description\n * GIFs are visual representation only so hidden unless alt or title applied.\n * Enter/space keys play and pause the gif respectively\n *\n * @specification\n * Adds role 'presentation' to 'root' slot.\n * Adds attribute 'aria-hidden=true', if there is no 'alt' property provided.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n */\n\nexport var embedBehavior = function embedBehavior(props) {\n  return {\n    attributes: {\n      root: {\n        'aria-hidden': props.alt || props.title ? undefined : true,\n        role: 'presentation',\n        tabIndex: 0\n      }\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["behaviors/Embed/embedBehavior.ts"],"names":["embedBehavior","attributes","root","props","role","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey"],"mappings":"AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAGA;;;;;;;;;;;AAUA,OAAO,IAAMA,aAAgD,GAAG,SAAnDA,aAAmD,CAAA,KAAA,EAAK;AAAA,SAAK;AACxEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJ,uBAAeC,KAAK,CAALA,GAAAA,IAAaA,KAAK,CAAlBA,KAAAA,GAAAA,SAAAA,GADX,IAAA;AAEJC,QAAAA,IAAI,EAFA,cAAA;AAGJC,QAAAA,QAAQ,EAAE;AAHN;AADI,KAD4D;AAQxEC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,IAAI,EAAE;AACJK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADV;AADI;AAR4D,GAAL;AAA9D,CAAA","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * GIFs are visual representation only so hidden unless alt or title applied.\n * Enter/space keys play and pause the gif respectively\n *\n * @specification\n * Adds role 'presentation' to 'root' slot.\n * Adds attribute 'aria-hidden=true', if there is no 'alt' property provided.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n */\nexport const embedBehavior: Accessibility<EmbedBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      'aria-hidden': props.alt || props.title ? undefined : true,\n      role: 'presentation',\n      tabIndex: 0,\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n  },\n});\n\nexport type EmbedBehaviorProps = {\n  /** Corresponds to HTML title attribute. */\n  title?: string;\n  /** Alternative text. */\n  alt?: string;\n};\n"]},"metadata":{},"sourceType":"module"}