{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport { buttonBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Box } from '../Box/Box';\nexport var alertDismissActionClassName = 'ui-alert__dismissaction';\nexport var alertDismissActionSlotClassNames = {\n  content: alertDismissActionClassName + \"__content\"\n};\n/**\n * A AlertDismissAction allows users to customize the dismissAction slot  inside the Alert component.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport var AlertDismissAction = /*#__PURE__*/function () {\n  var AlertDismissAction = function AlertDismissAction(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(AlertDismissAction.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        as = props.as,\n        children = props.children,\n        className = props.className,\n        content = props.content,\n        disabled = props.disabled,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        danger = props.danger,\n        warning = props.warning,\n        info = props.info,\n        success = props.success;\n    var hasChildren = childrenExist(children);\n    var hasContent = !!content && !_isEmpty(content);\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: AlertDismissAction.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          as: String(as),\n          disabled: disabled\n        };\n      },\n      actionHandlers: {\n        performClick: function performClick(event) {\n          event.preventDefault();\n          handleClick(event);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(AlertDismissAction.displayName, {\n      className: alertDismissActionClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          disabled: disabled,\n          danger: danger,\n          warning: warning,\n          info: info,\n          success: success,\n          hasContent: hasContent || hasChildren\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var unhandledProps = useUnhandledProps(AlertDismissAction.handledProps, props);\n    var ElementType = getElementType(props);\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var result = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), getA11Props('root', Object.assign({\n      onClick: handleClick,\n      disabled: disabled,\n      className: classes.root\n    }, unhandledProps))), hasChildren ? children : Box.create(content, {\n      defaultProps: function defaultProps() {\n        return getA11Props('content', {\n          as: 'span',\n          className: alertDismissActionSlotClassNames.content,\n          styles: resolvedStyles.content\n        });\n      }\n    }));\n    setEnd();\n    return result;\n  };\n\n  AlertDismissAction.defaultProps = {\n    as: 'button',\n    accessibility: buttonBehavior,\n    content: {}\n  };\n  AlertDismissAction.displayName = 'AlertDismissAction';\n  AlertDismissAction.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand'\n  }), {\n    disabled: PropTypes.bool,\n    danger: PropTypes.bool,\n    warning: PropTypes.bool,\n    info: PropTypes.bool,\n    onClick: PropTypes.func\n  });\n  AlertDismissAction.handledProps = Object.keys(AlertDismissAction.propTypes);\n  AlertDismissAction.create = createShorthandFactory({\n    Component: AlertDismissAction,\n    mappedProp: 'content'\n  });\n  return AlertDismissAction;\n}();","map":{"version":3,"sources":["components/Alert/AlertDismissAction.tsx"],"names":["alertDismissActionClassName","alertDismissActionSlotClassNames","content","AlertDismissAction","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","as","children","className","disabled","design","styles","variables","danger","warning","info","success","props","hasChildren","childrenExist","hasContent","getA11Props","useAccessibility","debugName","mapPropsToBehavior","String","actionHandlers","performClick","event","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","e","result","forElements","onClick","root","defaultProps","PropTypes","func","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n} from '../../utils';\n\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface AlertDismissActionProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A dismiss action can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** An alert may be formatted to display a danger message. */\n  danger?: boolean;\n\n  /** An alert can be formatted to display a warning message. */\n  warning?: boolean;\n\n  /** An alert can be formatted to display a successful message. */\n  success?: boolean;\n\n  /** An alert may be formatted to display information. */\n  info?: boolean;\n\n  /**\n   * Called after a user clicks the paddle.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AlertDismissActionProps>;\n}\n\nexport type AlertDismissActionSlotClassNames = {\n  content: string;\n};\n\nexport type AlertDismissActionStylesProps = Pick<\n  AlertDismissActionProps,\n  'disabled' | 'danger' | 'warning' | 'info' | 'success'\n> & {\n  hasContent?: boolean;\n};\n\nexport const alertDismissActionClassName = 'ui-alert__dismissaction';\nexport const alertDismissActionSlotClassNames: AlertDismissActionSlotClassNames = {\n  content: `${alertDismissActionClassName}__content`,\n};\n\n/**\n * A AlertDismissAction allows users to customize the dismissAction slot  inside the Alert component.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\nexport const AlertDismissAction: ComponentWithAs<'button', AlertDismissActionProps> &\n  FluentComponentStaticProps<AlertDismissActionProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AlertDismissAction.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    as,\n    children,\n    className,\n    content,\n    disabled,\n    design,\n    styles,\n    variables,\n    danger,\n    warning,\n    info,\n    success,\n  } = props;\n\n  const hasChildren = childrenExist(children);\n  const hasContent = !!content && !_.isEmpty(content);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AlertDismissAction.displayName,\n    mapPropsToBehavior: () => ({\n      as: String(as),\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<AlertDismissActionStylesProps>(AlertDismissAction.displayName, {\n    className: alertDismissActionClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      danger,\n      warning,\n      info,\n      success,\n      hasContent: hasContent || hasChildren,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(AlertDismissAction.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren\n        ? children\n        : Box.create(content, {\n            defaultProps: () =>\n              getA11Props('content', {\n                as: 'span',\n                className: alertDismissActionSlotClassNames.content,\n                styles: resolvedStyles.content,\n              }),\n          })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nAlertDismissAction.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n  content: {},\n};\n\nAlertDismissAction.displayName = 'AlertDismissAction';\n\nAlertDismissAction.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  disabled: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAlertDismissAction.handledProps = Object.keys(AlertDismissAction.propTypes) as any;\n\nAlertDismissAction.create = createShorthandFactory({ Component: AlertDismissAction, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}