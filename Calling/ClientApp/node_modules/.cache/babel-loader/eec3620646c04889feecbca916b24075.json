{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter } from \"tslib\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport { AutoRefreshTokenCredential } from \"./autoRefreshTokenCredential\";\n/**\n * The CommunicationTokenCredential implementation with support for proactive token refresh.\n */\n\nexport class AzureCommunicationTokenCredential {\n  constructor(tokenOrRefreshOptions) {\n    this.disposed = false;\n\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.tokenCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.tokenCredential = new AutoRefreshTokenCredential(tokenOrRefreshOptions);\n    }\n  }\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal - An implementation of `AbortSignalLike` to cancel the operation.\n   */\n\n\n  getToken(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.throwIfDisposed();\n      const token = yield this.tokenCredential.getToken(options);\n      this.throwIfDisposed();\n      return token;\n    });\n  }\n  /**\n   * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n   */\n\n\n  dispose() {\n    this.disposed = true;\n    this.tokenCredential.dispose();\n  }\n\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/communicationTokenCredential.ts"],"names":[],"mappings":"AAAA;AACA;;AAGA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SACE,0BADF,QAGO,8BAHP;AAgCA;;AAEG;;AACH,OAAM,MAAO,iCAAP,CAAwC;AAe5C,EAAA,WAAA,CAAY,qBAAZ,EAA4E;AAbpE,SAAA,QAAA,GAAW,KAAX;;AAcN,QAAI,OAAO,qBAAP,KAAiC,QAArC,EAA+C;AAC7C,WAAK,eAAL,GAAuB,IAAI,qBAAJ,CAA0B,UAAU,CAAC,qBAAD,CAApC,CAAvB;AACD,KAFD,MAEO;AACL,WAAK,eAAL,GAAuB,IAAI,0BAAJ,CAA+B,qBAA/B,CAAvB;AACD;AACF;AAED;;;AAGG;;;AACU,EAAA,QAAQ,CAAC,OAAD,EAAuC;;AAC1D,WAAK,eAAL;AACA,YAAM,KAAK,GAAG,MAAM,KAAK,eAAL,CAAqB,QAArB,CAA8B,OAA9B,CAApB;AACA,WAAK,eAAL;AACA,aAAO,KAAP;AACD,K;AAAA;AAED;;AAEG;;;AACI,EAAA,OAAO,GAAA;AACZ,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,eAAL,CAAqB,OAArB;AACD;;AAEO,EAAA,eAAe,GAAA;AACrB,QAAI,KAAK,QAAT,EAAmB;AACjB,YAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;;AA9C2C","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike, AccessToken } from \"@azure/core-http\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport {\n  AutoRefreshTokenCredential,\n  CommunicationTokenRefreshOptions\n} from \"./autoRefreshTokenCredential\";\n\nexport type TokenCredential = Pick<AzureCommunicationTokenCredential, \"getToken\" | \"dispose\">;\n\n/**\n * Options for `CommunicationTokenCredential`'s `getToken` function.\n */\nexport interface CommunicationGetTokenOptions {\n  /**\n   * An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * The Azure Communication Services token credential.\n */\nexport interface CommunicationTokenCredential {\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param options - Additional options.\n   */\n  getToken(options?: CommunicationGetTokenOptions): Promise<AccessToken>;\n  /**\n   * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n   */\n  dispose(): void;\n}\n\n/**\n * The CommunicationTokenCredential implementation with support for proactive token refresh.\n */\nexport class AzureCommunicationTokenCredential implements CommunicationTokenCredential {\n  private readonly tokenCredential: TokenCredential;\n  private disposed = false;\n\n  /**\n   * Creates an instance of CommunicationTokenCredential with a static token and no proactive refreshing.\n   * @param token - A user access token issued by Communication Services.\n   */\n  constructor(token: string);\n  /**\n   * Creates an instance of CommunicationTokenCredential with a lambda to get a token and options\n   * to configure proactive refreshing.\n   * @param refreshOptions - Options to configure refresh and opt-in to proactive refreshing.\n   */\n  constructor(refreshOptions: CommunicationTokenRefreshOptions);\n  constructor(tokenOrRefreshOptions: string | CommunicationTokenRefreshOptions) {\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.tokenCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.tokenCredential = new AutoRefreshTokenCredential(tokenOrRefreshOptions);\n    }\n  }\n\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal - An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  public async getToken(options?: CommunicationGetTokenOptions): Promise<AccessToken> {\n    this.throwIfDisposed();\n    const token = await this.tokenCredential.getToken(options);\n    this.throwIfDisposed();\n    return token;\n  }\n\n  /**\n   * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n   */\n  public dispose(): void {\n    this.disposed = true;\n    this.tokenCredential.dispose();\n  }\n\n  private throwIfDisposed(): void {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}