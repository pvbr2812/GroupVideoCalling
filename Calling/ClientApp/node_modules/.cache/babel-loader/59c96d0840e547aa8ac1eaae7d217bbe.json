{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { isBrowser, commonPropTypes } from '../../utils';\nimport { PortalBoxContext } from '../Provider/usePortalBox';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\n/**\n * A PortalInner is a container for Portal's content.\n */\n\nexport var PortalInner = /*#__PURE__*/function () {\n  var PortalInner = function PortalInner(props) {\n    var context = React.useContext(PortalBoxContext);\n    var children = props.children,\n        mountNode = props.mountNode; // PortalInner should render elements even without a context\n    // eslint-disable-next-line\n\n    var target = isBrowser() ? context || document.body : null;\n    var container = mountNode || target;\n    useIsomorphicLayoutEffect(function () {\n      _invoke(props, 'onMount', props);\n\n      return function () {\n        return _invoke(props, 'onUnmount', props);\n      };\n    }, []);\n    return container && /*#__PURE__*/ReactDOM.createPortal(children, container);\n  };\n\n  PortalInner.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    className: false,\n    content: false,\n    styled: false\n  }), {\n    mountNode: customPropTypes.domNode,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func\n  });\n  return PortalInner;\n}();","map":{"version":3,"sources":["components/Portal/PortalInner.tsx"],"names":["PortalInner","context","React","children","mountNode","props","target","isBrowser","document","container","useIsomorphicLayoutEffect","ReactDOM","accessibility","as","className","content","styled","customPropTypes","onMount","PropTypes","onUnmount","func"],"mappings":";AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,QAAA,MAAA,WAAA;AACA,SAAA,SAAA,EAAA,eAAA,QAAA,aAAA;AACA,SAAA,gBAAA,QAAA,0BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,SAAA,yBAAA,QAAA,0BAAA;AAqBA;;;;AAGA,OAAO,IAAMA,WAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,WAAuC,GAAG,SAA1CA,WAA0C,CAAA,KAAA,EAAS;AAC9D,QAAMC,OAAO,GAAGC,KAAK,CAALA,UAAAA,CAAhB,gBAAgBA,CAAhB;AAD8D,QAEtDC,QAFsD,GAE9BE,KAF8B,CAAA,QAAA;AAAA,QAE5CD,SAF4C,GAE9BC,KAF8B,CAAA,SAAA,CAAA,CAI9D;AACA;;AACA,QAAMC,MAA0B,GAAGC,SAAS,KAAKN,OAAO,IAAIO,QAAQ,CAAxB,IAAA,GAA5C,IAAA;AACA,QAAMC,SAA6B,GAAGL,SAAS,IAA/C,MAAA;AACAM,IAAAA,yBAAyB,CAAC,YAAM;AAC9B,MAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,KAAA,CAAA;;AAEA,aAAO,YAAA;AAAA,eAAM,OAAA,CAAA,KAAA,EAAA,WAAA,EAAN,KAAM,CAAN;AAAP,OAAA;AAHuB,KAAA,EAAzBA,EAAyB,CAAzBA;AAKA,WAAOD,SAAS,IAAA,aAAIE,QAAQ,CAARA,YAAAA,CAAAA,QAAAA,EAApB,SAAoBA,CAApB;AAbK,GAAA;;AAgBPX,EAAAA,WAAW,CAAXA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BY,IAAAA,aAAa,EADiB,KAAA;AAE9BC,IAAAA,EAAE,EAF4B,KAAA;AAG9BC,IAAAA,SAAS,EAHqB,KAAA;AAI9BC,IAAAA,OAAO,EAJuB,KAAA;AAK9BC,IAAAA,MAAM,EAAE;AALsB,GAA7B,CADLhB,EAAAA;AAQEI,IAAAA,SAAS,EAAEa,eAAe,CAR5BjB,OAAAA;AASEkB,IAAAA,OAAO,EAAEC,SAAS,CATpBnB,IAAAA;AAUEoB,IAAAA,SAAS,EAAED,SAAS,CAACE;AAVvBrB,GAAAA,CAAAA;AAhBO,SAAA,WAAA;AAAA,CAAA,EAAA","sourcesContent":["import * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { isBrowser, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { PortalBoxContext } from '../Provider/usePortalBox';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\n\nexport interface PortalInnerProps extends ChildrenComponentProps {\n  /** Existing element the portal should be bound to. */\n  mountNode?: HTMLElement;\n\n  /**\n   * Called when the portal is mounted on the DOM\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalInnerProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalInnerProps) => void;\n}\n\n/**\n * A PortalInner is a container for Portal's content.\n */\nexport const PortalInner: React.FC<PortalInnerProps> = props => {\n  const context = React.useContext(PortalBoxContext);\n  const { children, mountNode } = props;\n\n  // PortalInner should render elements even without a context\n  // eslint-disable-next-line\n  const target: HTMLElement | null = isBrowser() ? context || document.body : null;\n  const container: HTMLElement | null = mountNode || target;\n  useIsomorphicLayoutEffect(() => {\n    _.invoke(props, 'onMount', props);\n\n    return () => _.invoke(props, 'onUnmount', props);\n  }, []);\n  return container && ReactDOM.createPortal(children, container);\n};\n\nPortalInner.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    className: false,\n    content: false,\n    styled: false,\n  }),\n  mountNode: customPropTypes.domNode,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}