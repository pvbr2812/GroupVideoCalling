{"ast":null,"code":"import { compareDatePart } from '../dateMath/dateMath';\n/**\n * Checks if `date` happens later than max date\n * @param date - date to check\n * @param options - object with max date to check against\n */\n\nexport var isAfterMaxDate = function isAfterMaxDate(date, options) {\n  var maxDate = options.maxDate;\n  return maxDate ? compareDatePart(date, maxDate) >= 1 : false;\n};","map":{"version":3,"sources":["utils/date-time-utilities/dateGrid/isAfterMaxDate.ts"],"names":["isAfterMaxDate","maxDate","options","compareDatePart"],"mappings":"AACA,SAAA,eAAA,QAAA,sBAAA;AAEA;;;;;;AAKA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAA,OAAA,EAA2D;AAAA,MAC/EC,OAD+E,GACnEC,OADmE,CAAA,OAAA;AAEvF,SAAOD,OAAO,GAAGE,eAAe,CAAA,IAAA,EAAfA,OAAe,CAAfA,IAAH,CAAA,GAAd,KAAA;AAFK,CAAA","sourcesContent":["import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDatePart } from '../dateMath/dateMath';\n\n/**\n * Checks if `date` happens later than max date\n * @param date - date to check\n * @param options - object with max date to check against\n */\nexport const isAfterMaxDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { maxDate } = options;\n  return maxDate ? compareDatePart(date, maxDate) >= 1 : false;\n};\n"]},"metadata":{},"sourceType":"module"}