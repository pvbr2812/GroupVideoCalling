{"ast":null,"code":"import { SpacebarKey } from '@fluentui/keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @description\n *  Adds attribute 'aria-selected=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property false or undefined. Does not set anything if true.\n *  Triggers 'performClick' action with 'Spacebar' on 'root', when tree title is selectable.\n *  @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Triggers 'performClick' action with 'Spacebar' on 'root'.\n */\n\nexport var treeTitleBehavior = function treeTitleBehavior(props) {\n  var _ref;\n\n  var definition = {\n    attributes: {\n      root: Object.assign({}, !props.hasSubtree && (_ref = {\n        tabIndex: -1\n      }, _ref[IS_FOCUSABLE_ATTRIBUTE] = true, _ref.role = 'treeitem', _ref['aria-setsize'] = props.treeSize, _ref['aria-posinset'] = props.index, _ref['aria-level'] = props.level, _ref['aria-selected'] = props.selectable ? props.selected || false : undefined, _ref))\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: SpacebarKey\n          }]\n        }\n      }\n    }\n  };\n\n  if (process.env.NODE_ENV !== 'production' && props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'ExpandableTreeTitle';\n  }\n\n  return definition;\n};","map":{"version":3,"sources":["behaviors/Tree/treeTitleBehavior.ts"],"names":["treeTitleBehavior","definition","attributes","root","props","tabIndex","keyActions","performClick","keyCombinations","keyCode","SpacebarKey","process"],"mappings":"AAAA,SAAA,WAAA,QAAA,wBAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAGA;;;;;;;;;;;;;AAYA,OAAO,IAAMA,iBAAwD,GAAG,SAA3DA,iBAA2D,CAAA,KAAA,EAAS;AAAA,MAAA,IAAA;;AAC/E,MAAMC,UAAU,GAAG;AACjBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACE,CAACC,KAAK,CAAN,UAAA,KAAA,IAAA,GAAA;AACFC,QAAAA,QAAQ,EAAE,CAAC;AADT,OAAA,EAAA,IAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,EAAA,IAAA,CAAA,IAAA,GAAA,UAAA,EAAA,IAAA,CAAA,cAAA,CAAA,GAIcD,KAAK,CAJnB,QAAA,EAAA,IAAA,CAAA,eAAA,CAAA,GAKeA,KAAK,CALpB,KAAA,EAAA,IAAA,CAAA,YAAA,CAAA,GAMYA,KAAK,CANjB,KAAA,EAAA,IAAA,CAAA,eAAA,CAAA,GAOeA,KAAK,CAALA,UAAAA,GAAmBA,KAAK,CAALA,QAAAA,IAAnBA,KAAAA,GAPf,SAAA,EADF,IACE,CADF;AADM,KADK;AAcjBE,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EAAE;AACJI,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC;AAAX,WAAD;AADL;AADV;AADI;AAdK,GAAnB;;AAuBA,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IAAyCP,KAAK,CAAlD,UAAA,EAA+D;AAC7D;AACAH,IAAAA,UAAU,CAAVA,UAAAA,CAAAA,IAAAA,CAAAA,eAAAA,IAAAA,qBAAAA;AACD;;AAED,SAAA,UAAA;AA7BK,CAAA","sourcesContent":["import { SpacebarKey } from '@fluentui/keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility, AriaRole } from '../../types';\n\n/**\n * @description\n *  Adds attribute 'aria-selected=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property false or undefined. Does not set anything if true.\n *  Triggers 'performClick' action with 'Spacebar' on 'root', when tree title is selectable.\n *  @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Triggers 'performClick' action with 'Spacebar' on 'root'.\n */\nexport const treeTitleBehavior: Accessibility<TreeTitleBehaviorProps> = props => {\n  const definition = {\n    attributes: {\n      root: {\n        ...(!props.hasSubtree && {\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          'aria-level': props.level,\n          'aria-selected': props.selectable ? props.selected || false : undefined,\n        }),\n      },\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{ keyCode: SpacebarKey }],\n        },\n      },\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'ExpandableTreeTitle';\n  }\n\n  return definition;\n};\n\nexport type TreeTitleBehaviorProps = {\n  /** Indicated if tree title has a subtree */\n  hasSubtree?: boolean;\n  level?: number;\n  treeSize?: number;\n  index?: number;\n  selected?: boolean;\n  selectable?: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}