{"ast":null,"code":"import _get from \"lodash/get\";\nimport { pxToRem } from '../../../../utils';\n\nvar beforeAndAfter = function beforeAndAfter(size, variables, colors, props) {\n  return Object.assign({\n    content: '\"\"',\n    flex: 1\n  }, props.vertical ? {\n    width: size + 1 + \"px\",\n    height: '100%'\n  } : {\n    height: size + 1 + \"px\"\n  }, {\n    background: _get(colors, 'foreground', variables.dividerColor)\n  });\n};\n\nexport var dividerStyles = {\n  root: function root(_ref) {\n    var props = _ref.props,\n        variables = _ref.variables;\n    var color = props.color,\n        fitted = props.fitted,\n        size = props.size,\n        important = props.important,\n        hasContent = props.hasContent,\n        vertical = props.vertical;\n    var colors = variables.colorScheme[color];\n    return Object.assign({\n      color: _get(colors, 'foreground', variables.textColor),\n      display: 'flex',\n      alignItems: 'center'\n    }, !fitted && {\n      padding: vertical ? \"0 \" + variables.dividerPadding : variables.dividerPadding + \" 0\"\n    }, important && {\n      fontWeight: variables.importantFontWeight\n    }, vertical && {\n      height: '100%'\n    }, hasContent ? {\n      textAlign: 'center',\n      fontSize: pxToRem(12 + size),\n      lineHeight: variables.textLineHeight,\n      '::before': Object.assign({}, beforeAndAfter(size, variables, colors, props)),\n      '::after': Object.assign({}, beforeAndAfter(size, variables, colors, props))\n    } : {\n      '::before': Object.assign({}, beforeAndAfter(size, variables, colors, props))\n    });\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Divider/dividerStyles.ts"],"names":["beforeAndAfter","content","flex","width","size","height","background","variables","dividerStyles","root","props","color","fitted","important","hasContent","vertical","colors","display","alignItems","padding","fontWeight","importantFontWeight","textAlign","fontSize","pxToRem","lineHeight"],"mappings":";AAGA,SAAA,OAAA,QAAA,mBAAA;;AAKA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA,KAAA,EAAA;AAAA,SAAA,MAAA,CAAA,MAAA,CAAA;AAMrBC,IAAAA,OAAO,EANc,IAAA;AAOrBC,IAAAA,IAAI,EAAE;AAPe,GAAA,EAQjB,KAAK,CAAL,QAAA,GAAiB;AAAEC,IAAAA,KAAK,EAAKC,IAAI,GAAT,CAAKA,GAAZ,IAAA;AAA0BC,IAAAA,MAAM,EAAE;AAAlC,GAAjB,GAA8D;AAAEA,IAAAA,MAAM,EAAKD,IAAI,GAAT,CAAKA,GAAL;AAAR,GAR7C,EAAA;AASrBE,IAAAA,UAAU,EAAE,IAAA,CAAA,MAAA,EAAA,YAAA,EAA4BC,SAAS,CAArC,YAAA;AATS,GAAA,CAAA;AAAvB,CAAA;;AAYA,OAAO,IAAMC,aAAgF,GAAG;AAC9FC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,IAAA,EAAyC;AAAA,QAAtCC,KAAsC,GAAA,IAAA,CAAtCA,KAAsC;AAAA,QAA/BH,SAA+B,GAAA,IAAA,CAA/BA,SAA+B;AAAA,QACrCI,KADqC,GACoBD,KADpB,CAAA,KAAA;AAAA,QAC9BE,MAD8B,GACoBF,KADpB,CAAA,MAAA;AAAA,QACtBN,IADsB,GACoBM,KADpB,CAAA,IAAA;AAAA,QAChBG,SADgB,GACoBH,KADpB,CAAA,SAAA;AAAA,QACLI,UADK,GACoBJ,KADpB,CAAA,UAAA;AAAA,QACOK,QADP,GACoBL,KADpB,CAAA,QAAA;AAE7C,QAAMM,MAAM,GAAGT,SAAS,CAATA,WAAAA,CAAf,KAAeA,CAAf;AACA,WAAA,MAAA,CAAA,MAAA,CAAA;AACEI,MAAAA,KAAK,EAAE,IAAA,CAAA,MAAA,EAAA,YAAA,EAA4BJ,SAAS,CAD9C,SACS,CADT;AAEEU,MAAAA,OAAO,EAFT,MAAA;AAGEC,MAAAA,UAAU,EAAE;AAHd,KAAA,EAIM,CAAA,MAAA,IAAW;AACbC,MAAAA,OAAO,EAAEJ,QAAQ,GAAA,OAAQR,SAAS,CAAjB,cAAA,GAAwCA,SAAS,CAAjD,cAAwCA,GAAxC;AADJ,KAJjB,EAOMM,SAAS,IAAI;AACfO,MAAAA,UAAU,EAAEb,SAAS,CAACc;AADP,KAPnB,EAUMN,QAAQ,IAAI;AAAEV,MAAAA,MAAM,EAAE;AAAV,KAVlB,EAWMS,UAAU,GACV;AACEQ,MAAAA,SAAS,EADX,QAAA;AAEEC,MAAAA,QAAQ,EAAEC,OAAO,CAAC,KAFpB,IAEmB,CAFnB;AAGEC,MAAAA,UAAU,EAAElB,SAAS,CAHvB,cAAA;AAIE,kBAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACKP,cAAc,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EALrB,KAKqB,CADnB,CAJF;AAOE,iBAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACKA,cAAc,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EADnB,KACmB,CADnB;AAPF,KADU,GAYV;AACE,kBAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACKA,cAAc,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EADnB,KACmB,CADnB;AADF,KAvBN,CAAA;AA6BD;AAjC6F,CAAzF","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport * as _ from 'lodash';\n\nimport { pxToRem } from '../../../../utils';\nimport { StrictColorScheme, ItemType } from '../../../types';\nimport { DividerVariables, dividerColorAreas } from './dividerVariables';\nimport { DividerStylesProps } from '../../../../components/Divider/Divider';\n\nconst beforeAndAfter = (\n  size: number,\n  variables: DividerVariables,\n  colors: StrictColorScheme<ItemType<typeof dividerColorAreas>>,\n  props: DividerStylesProps,\n): ICSSInJSStyle => ({\n  content: '\"\"',\n  flex: 1,\n  ...(props.vertical ? { width: `${size + 1}px`, height: '100%' } : { height: `${size + 1}px` }),\n  background: _.get(colors, 'foreground', variables.dividerColor),\n});\n\nexport const dividerStyles: ComponentSlotStylesPrepared<DividerStylesProps, DividerVariables> = {\n  root: ({ props, variables }): ICSSInJSStyle => {\n    const { color, fitted, size, important, hasContent, vertical } = props;\n    const colors = variables.colorScheme[color];\n    return {\n      color: _.get(colors, 'foreground', variables.textColor),\n      display: 'flex',\n      alignItems: 'center',\n      ...(!fitted && {\n        padding: vertical ? `0 ${variables.dividerPadding}` : `${variables.dividerPadding} 0`,\n      }),\n      ...(important && {\n        fontWeight: variables.importantFontWeight,\n      }),\n      ...(vertical && { height: '100%' }),\n      ...(hasContent\n        ? {\n            textAlign: 'center',\n            fontSize: pxToRem(12 + size),\n            lineHeight: variables.textLineHeight,\n            '::before': {\n              ...beforeAndAfter(size, variables, colors, props),\n            },\n            '::after': {\n              ...beforeAndAfter(size, variables, colors, props),\n            },\n          }\n        : {\n            '::before': {\n              ...beforeAndAfter(size, variables, colors, props),\n            },\n          }),\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}