{"ast":null,"code":"import { pxToRem } from '../../../../utils';\nimport { carouselNavigationItemSlotClassNames } from '../../../../components/Carousel/CarouselNavigationItem';\nimport { getColorScheme } from '../../colors';\nimport { getIconFillOrOutlineStyles } from '../../getIconFillOrOutlineStyles';\nexport var carouselNavigationItemStyles = {\n  root: function root(_ref) {\n    var _Object$assign;\n\n    var p = _ref.props,\n        v = _ref.variables;\n    var active = p.active,\n        iconOnly = p.iconOnly,\n        primary = p.primary,\n        vertical = p.vertical,\n        thumbnails = p.thumbnails;\n    var colors = getColorScheme(v.colorScheme, null, primary);\n    return Object.assign({\n      color: 'inherit',\n      display: 'block',\n      cursor: 'pointer',\n      whiteSpace: 'nowrap'\n    }, iconOnly && {\n      border: pxToRem(2) + \" solid transparent\"\n    }, vertical ? {\n      padding: v.verticalItemPadding\n    } : {\n      padding: v.horizontalPadding\n    }, iconOnly && {\n      margin: pxToRem(1),\n      padding: pxToRem(5),\n      // padding works this way to get the border to only be 30x30px on focus which is the current design\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, active && iconOnly && Object.assign({\n      color: v.iconOnlyColorActive\n    }, getIconFillOrOutlineStyles({\n      outline: false\n    })), {\n      // focus styles\n      ':focus-visible': Object.assign({}, iconOnly && Object.assign({\n        borderRadius: '50%'\n      }, thumbnails && {\n        borderRadius: '0'\n      }, {\n        borderColor: v.iconOnlyColorActive\n      }, getIconFillOrOutlineStyles({\n        outline: false\n      })))\n    }, iconOnly && primary && {\n      color: 'inherit',\n      borderColor: v.borderColorActive || colors.borderActive\n    }, {\n      ':focus': {\n        outline: 0\n      },\n      // hover styles\n      ':hover': Object.assign((_Object$assign = {\n        color: 'inherit'\n      }, _Object$assign[\"& .\" + carouselNavigationItemSlotClassNames.indicator] = {\n        background: v.indicatorBackgroundColor\n      }, _Object$assign), iconOnly && getIconFillOrOutlineStyles({\n        outline: false\n      }), primary && iconOnly && {\n        color: 'inherit'\n      })\n    });\n  },\n  content: function content(_ref2) {\n    var p = _ref2.props;\n    var widthAdjust = p.hasIndicator ? 26 : 0;\n    return Object.assign({\n      whiteSpace: 'normal',\n      lineHeight: 1.5,\n      marginTop: pxToRem(-4),\n      marginBottom: pxToRem(-4),\n      display: 'inline-block'\n    }, p.thumbnails && Object.assign({\n      width: pxToRem(60)\n    }, !p.active && {\n      opacity: 0.4\n    }), p.vertical && {\n      width: 'max-content',\n      minWidth: pxToRem(46 - widthAdjust),\n      maxWidth: pxToRem(262 - widthAdjust),\n      marginRight: pxToRem(16)\n    });\n  },\n  indicator: function indicator(_ref3) {\n    var p = _ref3.props,\n        v = _ref3.variables;\n    return Object.assign({\n      borderRadius: '50%',\n      width: pxToRem(7),\n      height: pxToRem(7),\n      background: v.indicatorBackgroundColor\n    }, p.active && {\n      background: v.indicatorActiveBackgroundColor\n    }, p.hasContent && {\n      marginRight: pxToRem(10)\n    }, !p.iconOnly && {\n      // reduce margins so text has the dominant influence on the vertical height\n      marginTop: 0,\n      marginBottom: pxToRem(-8),\n      verticalAlign: 'top'\n    });\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Carousel/carouselNavigationItemStyles.ts"],"names":["carouselNavigationItemStyles","root","props","p","variables","v","active","iconOnly","primary","vertical","thumbnails","colors","getColorScheme","color","display","cursor","whiteSpace","border","pxToRem","padding","verticalItemPadding","horizontalPadding","margin","alignItems","justifyContent","iconOnlyColorActive","getIconFillOrOutlineStyles","outline","borderRadius","borderColor","borderActive","carouselNavigationItemSlotClassNames","background","indicatorBackgroundColor","content","widthAdjust","lineHeight","marginTop","marginBottom","width","opacity","minWidth","maxWidth","marginRight","indicator","height","indicatorActiveBackgroundColor","verticalAlign"],"mappings":"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","sourcesContent":["import { pxToRem } from '../../../../utils';\nimport {\n  CarouselNavigationItemStylesProps,\n  carouselNavigationItemSlotClassNames,\n} from '../../../../components/Carousel/CarouselNavigationItem';\nimport { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { CarouselNavigationVariables } from './carouselNavigationVariables';\nimport { getColorScheme } from '../../colors';\nimport { getIconFillOrOutlineStyles } from '../../getIconFillOrOutlineStyles';\n\nexport const carouselNavigationItemStyles: ComponentSlotStylesPrepared<\n  CarouselNavigationItemStylesProps,\n  CarouselNavigationVariables\n> = {\n  root: ({ props: p, variables: v }): ICSSInJSStyle => {\n    const { active, iconOnly, primary, vertical, thumbnails } = p;\n\n    const colors = getColorScheme(v.colorScheme, null, primary);\n\n    return {\n      color: 'inherit',\n      display: 'block',\n      cursor: 'pointer',\n      whiteSpace: 'nowrap',\n\n      ...(iconOnly && {\n        border: `${pxToRem(2)} solid transparent`,\n      }),\n\n      ...(vertical\n        ? { padding: v.verticalItemPadding }\n        : {\n            padding: v.horizontalPadding,\n          }),\n\n      ...(iconOnly && {\n        margin: pxToRem(1),\n        padding: pxToRem(5), // padding works this way to get the border to only be 30x30px on focus which is the current design\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }),\n\n      // active styles\n      ...(active &&\n        iconOnly && {\n          color: v.iconOnlyColorActive,\n          ...getIconFillOrOutlineStyles({ outline: false }),\n        }),\n\n      // focus styles\n      ':focus-visible': {\n        ...(iconOnly && {\n          borderRadius: '50%',\n          ...(thumbnails && { borderRadius: '0' }),\n          borderColor: v.iconOnlyColorActive,\n          ...getIconFillOrOutlineStyles({ outline: false }),\n        }),\n      },\n\n      ...(iconOnly &&\n        primary && {\n          color: 'inherit',\n          borderColor: v.borderColorActive || colors.borderActive,\n        }),\n\n      ':focus': {\n        outline: 0,\n      },\n\n      // hover styles\n      ':hover': {\n        color: 'inherit',\n\n        [`& .${carouselNavigationItemSlotClassNames.indicator}`]: {\n          background: v.indicatorBackgroundColor,\n        },\n\n        ...(iconOnly && getIconFillOrOutlineStyles({ outline: false })),\n\n        ...(primary && iconOnly && { color: 'inherit' }),\n      },\n    };\n  },\n\n  content: ({ props: p }): ICSSInJSStyle => {\n    const widthAdjust = p.hasIndicator ? 26 : 0;\n\n    return {\n      whiteSpace: 'normal',\n      lineHeight: 1.5,\n      marginTop: pxToRem(-4),\n      marginBottom: pxToRem(-4),\n      display: 'inline-block',\n      ...(p.thumbnails && { width: pxToRem(60), ...(!p.active && { opacity: 0.4 }) }),\n      ...(p.vertical && {\n        width: 'max-content',\n        minWidth: pxToRem(46 - widthAdjust),\n        maxWidth: pxToRem(262 - widthAdjust),\n        marginRight: pxToRem(16),\n      }),\n    };\n  },\n\n  indicator: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    borderRadius: '50%',\n    width: pxToRem(7),\n    height: pxToRem(7),\n    background: v.indicatorBackgroundColor,\n\n    ...(p.active && {\n      background: v.indicatorActiveBackgroundColor,\n    }),\n\n    ...(p.hasContent && {\n      marginRight: pxToRem(10),\n    }),\n\n    ...(!p.iconOnly && {\n      // reduce margins so text has the dominant influence on the vertical height\n      marginTop: 0,\n      marginBottom: pxToRem(-8),\n      verticalAlign: 'top',\n    }),\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}