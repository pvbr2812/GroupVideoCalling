{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport { embedBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Image } from '../Image/Image';\nimport { Video } from '../Video/Video';\nimport { Box } from '../Box/Box';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { getElementType, useUnhandledProps, useFluentContext, useAutoControlled, useAccessibility, useTelemetry, useStyles } from '@fluentui/react-bindings';\nexport var embedClassName = 'ui-embed';\nexport var embedSlotClassNames = {\n  control: embedClassName + \"__control\"\n};\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\n\nexport var Embed = /*#__PURE__*/function () {\n  var Embed = function Embed(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Embed.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var alt = props.alt,\n        title = props.title,\n        control = props.control,\n        iframe = props.iframe,\n        placeholder = props.placeholder,\n        video = props.video,\n        variables = props.variables,\n        styles = props.styles,\n        className = props.className,\n        design = props.design;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Embed.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Embed.displayName,\n      actionHandlers: {\n        performClick: function performClick(event) {\n          return handleClick(event);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          alt: alt,\n          title: title\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultActive,\n      value: props.active,\n      initialValue: false\n    }),\n        active = _useAutoControlled[0],\n        setACtive = _useAutoControlled[1];\n\n    var _React$useState = React.useState(false),\n        iframeLoaded = _React$useState[0],\n        setIframeLoaded = _React$useState[1];\n\n    var frameRef = React.useRef();\n\n    var handleClick = function handleClick(e) {\n      e.stopPropagation();\n      e.preventDefault();\n\n      var iframeNil = _isNil(props.iframe);\n\n      var newActive = !active;\n\n      if (iframeNil || !iframeNil && newActive) {\n        setACtive(newActive);\n\n        _invoke(props, 'onActiveChange', e, Object.assign({}, props, {\n          active: newActive\n        }));\n      }\n\n      _invoke(props, 'onClick', e, Object.assign({}, props, {\n        active: newActive\n      }));\n    };\n\n    var handleFrameOverrides = function handleFrameOverrides(predefinedProps) {\n      return {\n        onLoad: function onLoad(e) {\n          _invoke(predefinedProps, 'onLoad', e);\n\n          setIframeLoaded(true);\n          frameRef.current.contentWindow.focus();\n        }\n      };\n    };\n\n    var _useStyles = useStyles(Embed.displayName, {\n      className: embedClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          iframeLoaded: iframeLoaded,\n          active: active\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var placeholderElement = placeholder ? /*#__PURE__*/React.createElement(Image, {\n      src: placeholder,\n      styles: resolvedStyles.image,\n      variables: {\n        width: variables.width,\n        height: variables.height\n      }\n    }) : null;\n    var hasIframe = !_isNil(iframe);\n    var hasVideo = !_isNil(video);\n    var controlVisible = !active || hasVideo;\n    var placeholderVisible = !active || hasIframe && active && !iframeLoaded;\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick\n    }, unhandledProps)), active && /*#__PURE__*/React.createElement(React.Fragment, null, Video.create(video, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('video', {\n          autoPlay: true,\n          controls: false,\n          loop: true,\n          muted: true,\n          poster: placeholder,\n          styles: resolvedStyles.video,\n          variables: {\n            width: variables.width,\n            height: variables.height\n          }\n        });\n      }\n    }), iframe && /*#__PURE__*/React.createElement(Ref, {\n      innerRef: frameRef\n    }, Box.create(iframe, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('iframe', {\n          as: 'iframe',\n          styles: resolvedStyles.iframe\n        });\n      },\n      overrideProps: handleFrameOverrides\n    }))), placeholderVisible && placeholderElement, controlVisible && Box.create(control, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('control', {\n          className: embedSlotClassNames.control,\n          styles: resolvedStyles.control\n        });\n      }\n    }));\n    setEnd();\n    return element;\n  };\n\n  Embed.displayName = 'Embed';\n  Embed.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: false\n  }), {\n    active: PropTypes.bool,\n    defaultActive: PropTypes.bool,\n    control: customPropTypes.itemShorthand,\n    iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n    onActiveChange: PropTypes.func,\n    onClick: PropTypes.func,\n    placeholder: PropTypes.string,\n    video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand])\n  });\n  Embed.defaultProps = {\n    as: 'span',\n    accessibility: embedBehavior,\n    control: {},\n    variables: {}\n  };\n  Embed.handledProps = Object.keys(Embed.propTypes);\n  Embed.create = createShorthandFactory({\n    Component: Embed\n  });\n  return Embed;\n}();","map":{"version":3,"sources":["components/Embed/Embed.tsx"],"names":["embedClassName","embedSlotClassNames","control","Embed","context","useFluentContext","setStart","setEnd","useTelemetry","alt","title","iframe","placeholder","video","variables","styles","className","design","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","handleClick","mapPropsToBehavior","rtl","active","setACtive","useAutoControlled","defaultValue","value","initialValue","iframeLoaded","setIframeLoaded","React","frameRef","e","iframeNil","newActive","handleFrameOverrides","onLoad","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","placeholderElement","width","height","hasIframe","hasVideo","controlVisible","placeholderVisible","element","onClick","defaultProps","autoPlay","controls","loop","muted","poster","as","overrideProps","children","content","PropTypes","defaultActive","customPropTypes","onActiveChange","accessibility","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, embedBehavior, EmbedBehaviorProps } from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { Image } from '../Image/Image';\nimport { Video, VideoProps } from '../Video/Video';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface EmbedSlotClassNames {\n  control: string;\n}\n\nexport interface EmbedProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<EmbedBehaviorProps>;\n\n  /** Alternative text. */\n  alt?: string;\n\n  /** Corresponds to HTML title attribute. */\n  title?: string;\n\n  /** Whether the embedded object should be active. */\n  active?: boolean;\n\n  /** Whether the embedded object should start active. */\n  defaultActive?: boolean;\n\n  /** Shorthand for an control. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for an embedded iframe. */\n  iframe?: ShorthandValue<BoxProps>;\n\n  /**\n   * Event for request to change 'active' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveChange?: ComponentEventHandler<EmbedProps>;\n\n  /**\n   * Called when is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onClick?: ComponentEventHandler<EmbedProps>;\n\n  /** Image source URL for when video isn't playing. */\n  placeholder?: string;\n\n  /** Shorthand for an embedded video. */\n  video?: ShorthandValue<VideoProps>;\n}\n\nexport const embedClassName = 'ui-embed';\nexport const embedSlotClassNames: EmbedSlotClassNames = {\n  control: `${embedClassName}__control`,\n};\n\nexport type EmbedStylesProps = Required<Pick<EmbedProps, 'active'>> & { iframeLoaded: boolean };\n\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\nexport const Embed: ComponentWithAs<'span', EmbedProps> & FluentComponentStaticProps<EmbedProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Embed.displayName, context.telemetry);\n  setStart();\n  const { alt, title, control, iframe, placeholder, video, variables, styles, className, design } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Embed.handledProps, props);\n\n  const getA11yProps = useAccessibility<EmbedBehaviorProps>(props.accessibility, {\n    debugName: Embed.displayName,\n    actionHandlers: {\n      performClick: event => handleClick(event),\n    },\n    mapPropsToBehavior: () => ({\n      alt,\n      title,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [active, setACtive] = useAutoControlled({\n    defaultValue: props.defaultActive,\n    value: props.active,\n    initialValue: false,\n  });\n\n  const [iframeLoaded, setIframeLoaded] = React.useState(false);\n  const frameRef = React.useRef<HTMLFrameElement>();\n\n  const handleClick = e => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const iframeNil = _.isNil(props.iframe);\n    const newActive = !active;\n\n    if (iframeNil || (!iframeNil && newActive)) {\n      setACtive(newActive);\n      _.invoke(props, 'onActiveChange', e, { ...props, active: newActive });\n    }\n\n    _.invoke(props, 'onClick', e, { ...props, active: newActive });\n  };\n\n  const handleFrameOverrides = predefinedProps => ({\n    onLoad: (e: React.SyntheticEvent) => {\n      _.invoke(predefinedProps, 'onLoad', e);\n      setIframeLoaded(true);\n      frameRef.current.contentWindow.focus();\n    },\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<EmbedStylesProps>(Embed.displayName, {\n    className: embedClassName,\n    mapPropsToStyles: () => ({\n      iframeLoaded,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const placeholderElement = placeholder ? (\n    <Image\n      src={placeholder}\n      styles={resolvedStyles.image}\n      variables={{ width: variables.width, height: variables.height }}\n    />\n  ) : null;\n\n  const hasIframe = !_.isNil(iframe);\n  const hasVideo = !_.isNil(video);\n  const controlVisible = !active || hasVideo;\n  const placeholderVisible = !active || (hasIframe && active && !iframeLoaded);\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n    >\n      {active && (\n        <>\n          {Video.create(video, {\n            defaultProps: () =>\n              getA11yProps('video', {\n                autoPlay: true,\n                controls: false,\n                loop: true,\n                muted: true,\n                poster: placeholder,\n                styles: resolvedStyles.video,\n                variables: {\n                  width: variables.width,\n                  height: variables.height,\n                },\n              }),\n          })}\n          {iframe && (\n            <Ref innerRef={frameRef}>\n              {Box.create(iframe, {\n                defaultProps: () =>\n                  getA11yProps('iframe', {\n                    as: 'iframe',\n                    styles: resolvedStyles.iframe,\n                  }),\n                overrideProps: handleFrameOverrides,\n              })}\n            </Ref>\n          )}\n        </>\n      )}\n\n      {placeholderVisible && placeholderElement}\n      {controlVisible &&\n        Box.create(control, {\n          defaultProps: () =>\n            getA11yProps('control', {\n              className: embedSlotClassNames.control,\n              styles: resolvedStyles.control,\n            }),\n        })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nEmbed.displayName = 'Embed';\n\nEmbed.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  active: PropTypes.bool,\n  defaultActive: PropTypes.bool,\n  control: customPropTypes.itemShorthand,\n  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n  onActiveChange: PropTypes.func,\n  onClick: PropTypes.func,\n  placeholder: PropTypes.string,\n  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]),\n};\n\nEmbed.defaultProps = {\n  as: 'span',\n  accessibility: embedBehavior,\n  control: {},\n  variables: {},\n};\n\nEmbed.handledProps = Object.keys(Embed.propTypes) as any;\n\nEmbed.create = createShorthandFactory({ Component: Embed });\n"]},"metadata":{},"sourceType":"module"}