{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getElementType, getUnhandledProps, useStyles, useFluentContext, useTelemetry } from '@fluentui/react-bindings';\nimport { svgIconClassName, svgIconDisplayName, svgIconHandledProps } from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\n\nexport var SvgIcon = /*#__PURE__*/function () {\n  var SvgIcon = function SvgIcon(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(SvgIcon.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var alt = props.alt,\n        ariaLabel = props['aria-label'],\n        bordered = props.bordered,\n        circular = props.circular,\n        className = props.className,\n        design = props.design,\n        disabled = props.disabled,\n        children = props.children,\n        outline = props.outline,\n        rotate = props.rotate,\n        size = props.size,\n        styles = props.styles,\n        variables = props.variables,\n        xSpacing = props.xSpacing;\n\n    var _useStyles = useStyles(SvgIcon.displayName, {\n      className: svgIconClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          bordered: bordered,\n          circular: circular,\n          disabled: disabled,\n          outline: outline,\n          rotate: rotate,\n          size: size,\n          xSpacing: xSpacing\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({\n      role: \"img\",\n      \"aria-hidden\": alt || ariaLabel ? undefined : 'true',\n      \"aria-label\": ariaLabel,\n      className: classes.root\n    }, unhandledProps), callable(children)({\n      classes: classes,\n      rtl: context.rtl,\n      props: props\n    }));\n    setEnd();\n    return element;\n  };\n\n  SvgIcon.displayName = svgIconDisplayName;\n  SvgIcon.handledProps = [].concat(svgIconHandledProps, ['children']);\n  SvgIcon.defaultProps = {\n    as: 'span',\n    size: 'medium',\n    rotate: 0\n  };\n  return SvgIcon;\n}();","map":{"version":3,"sources":["components/SvgIcon/SvgIcon.tsx"],"names":["SvgIcon","context","useFluentContext","setStart","setEnd","useTelemetry","alt","ariaLabel","bordered","circular","className","design","disabled","children","outline","rotate","size","styles","variables","xSpacing","props","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","getUnhandledProps","element","root","as"],"mappings":"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","sourcesContent":["import {\n  ComponentWithAs,\n  getElementType,\n  getUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport {\n  SvgIconProps,\n  svgIconClassName,\n  svgIconDisplayName,\n  svgIconHandledProps,\n  SvgIconChildrenFn,\n} from '@fluentui/react-icons-northstar';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\n\nexport type SvgIconStylesProps = Required<\n  Pick<SvgIconProps, 'bordered' | 'circular' | 'disabled' | 'outline' | 'rotate' | 'size' | 'xSpacing'>\n>;\n\n/**\n * An SvgIcon displays a pictogram with semantic meaning.\n */\nexport const SvgIcon: ComponentWithAs<'span', SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }> & {\n  handledProps: (keyof (SvgIconProps & { children: SvgIconChildrenFn<SvgIconProps> }))[];\n} = props => {\n  const context = useFluentContext();\n\n  const { setStart, setEnd } = useTelemetry(SvgIcon.displayName, context.telemetry);\n  setStart();\n\n  const {\n    alt,\n    'aria-label': ariaLabel,\n    bordered,\n    circular,\n    className,\n    design,\n    disabled,\n    children,\n    outline,\n    rotate,\n    size,\n    styles,\n    variables,\n    xSpacing,\n  } = props;\n\n  const { classes } = useStyles<SvgIconStylesProps>(SvgIcon.displayName, {\n    className: svgIconClassName,\n    mapPropsToStyles: () => ({\n      bordered,\n      circular,\n      disabled,\n      outline,\n      rotate,\n      size,\n      xSpacing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = getUnhandledProps(SvgIcon.handledProps, props);\n\n  const element = (\n    <ElementType\n      role=\"img\"\n      aria-hidden={alt || ariaLabel ? undefined : 'true'}\n      aria-label={ariaLabel}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {callable(children)({ classes, rtl: context.rtl, props })}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSvgIcon.displayName = svgIconDisplayName;\nSvgIcon.handledProps = [...svgIconHandledProps, 'children'];\nSvgIcon.defaultProps = {\n  as: 'span',\n  size: 'medium',\n  rotate: 0,\n};\n"]},"metadata":{},"sourceType":"module"}