{"ast":null,"code":"import _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport _findIndex from \"lodash/findIndex\"; // TODO:\n// vertical - padding variable?\n\nimport { radioGroupBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { RadioGroupItem } from './RadioGroupItem';\nimport { useAutoControlled, useTelemetry, useFluentContext, getElementType, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var radioGroupClassName = 'ui-radiogroup';\n/**\n * A RadioGroup allows user to select a value from a small set of mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.\n */\n\nexport var RadioGroup = /*#__PURE__*/function () {\n  var RadioGroup = function RadioGroup(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(RadioGroup.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        vertical = props.vertical,\n        items = props.items,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(RadioGroup.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: RadioGroup.displayName,\n      actionHandlers: {\n        nextItem: function nextItem(event) {\n          return setCheckedItem(event, 1);\n        },\n        prevItem: function prevItem(event) {\n          return setCheckedItem(event, -1);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(RadioGroup.displayName, {\n      className: radioGroupClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultCheckedValue,\n      value: props.checkedValue,\n      initialValue: undefined\n    }),\n        checkedValue = _useAutoControlled[0],\n        setCheckedValue = _useAutoControlled[1];\n\n    var _React$useState = React.useState(false),\n        shouldFocus = _React$useState[0],\n        setShouldFocus = _React$useState[1];\n\n    var getItemProps = function getItemProps(item) {\n      return item.props || item;\n    };\n\n    var setCheckedItem = function setCheckedItem(event, direction) {\n      var nextItem = findNextEnabledCheckedItem(direction);\n\n      if (nextItem) {\n        checkedValueChange({\n          nextCheckedValue: nextItem.value,\n          shouldFocus: true,\n          event: event,\n          itemProps: nextItem\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    var findNextEnabledCheckedItem = function findNextEnabledCheckedItem(direction) {\n      if (!props.items || !props.items.length) {\n        return undefined;\n      }\n\n      var currentIndex = // if none of the values selected, set current index to the first item\n      checkedValue !== undefined ? _findIndex(props.items, function (item) {\n        return getItemProps(item).value === checkedValue;\n      }) : 0;\n\n      for (var newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {\n        if (newIndex < 0) {\n          newIndex = props.items.length - 1;\n        } else if (newIndex >= props.items.length) {\n          newIndex = 0;\n        }\n\n        if (newIndex === currentIndex) {\n          return undefined;\n        }\n\n        var itemProps = getItemProps(props.items[newIndex]);\n\n        if (!itemProps.disabled) {\n          return itemProps;\n        }\n      }\n\n      return undefined;\n    };\n\n    var handleItemOverrides = function handleItemOverrides(predefinedProps) {\n      return {\n        checked: typeof checkedValue !== 'undefined' && checkedValue === predefinedProps.value,\n        onClick: function onClick(event, itemProps) {\n          var value = itemProps.value,\n              disabled = itemProps.disabled;\n\n          if (!disabled && value !== checkedValue) {\n            checkedValueChange({\n              nextCheckedValue: value,\n              shouldFocus: false,\n              event: event,\n              itemProps: itemProps\n            });\n          }\n\n          _invoke(predefinedProps, 'onClick', event, itemProps);\n        },\n        shouldFocus: shouldFocus\n      };\n    };\n\n    var renderItems = function renderItems(vertical) {\n      var isNoneValueSelected = checkedValue === undefined;\n      return _map(items, function (item, index) {\n        return RadioGroupItem.create(item, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('item', Object.assign({\n              vertical: vertical\n            }, index === 0 && isNoneValueSelected && {\n              tabIndex: 0\n            }));\n          },\n          overrideProps: handleItemOverrides\n        });\n      });\n    };\n\n    var checkedValueChange = function checkedValueChange(_ref) {\n      var nextCheckedValue = _ref.nextCheckedValue,\n          shouldFocus = _ref.shouldFocus,\n          event = _ref.event,\n          itemProps = _ref.itemProps;\n      setCheckedValue(nextCheckedValue);\n      setShouldFocus(shouldFocus);\n\n      _invoke(props, 'onCheckedValueChange', event, itemProps);\n    };\n\n    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }))), childrenExist(children) ? children : renderItems(vertical)));\n    setEnd();\n    return element;\n  };\n\n  RadioGroup.displayName = 'RadioGroup';\n  RadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    items: customPropTypes.collectionShorthand,\n    onCheckedValueChange: PropTypes.func,\n    vertical: PropTypes.bool\n  });\n  RadioGroup.defaultProps = {\n    accessibility: radioGroupBehavior\n  };\n  RadioGroup.handledProps = Object.keys(RadioGroup.propTypes);\n  RadioGroup.Item = RadioGroupItem;\n  RadioGroup.create = createShorthandFactory({\n    Component: RadioGroup\n  });\n  return RadioGroup;\n}();","map":{"version":3,"sources":["components/RadioGroup/RadioGroup.tsx"],"names":["radioGroupClassName","RadioGroup","context","useFluentContext","setStart","setEnd","useTelemetry","children","vertical","items","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","nextItem","setCheckedItem","prevItem","rtl","classes","useStyles","mapPropsToInlineStyles","checkedValue","setCheckedValue","useAutoControlled","defaultValue","value","initialValue","undefined","shouldFocus","setShouldFocus","React","getItemProps","item","findNextEnabledCheckedItem","checkedValueChange","nextCheckedValue","event","itemProps","currentIndex","newIndex","handleItemOverrides","checked","predefinedProps","onClick","disabled","renderItems","isNoneValueSelected","defaultProps","index","tabIndex","overrideProps","element","root","forElements","childrenExist","content","PropTypes","defaultCheckedValue","customPropTypes","onCheckedValueChange","bool","accessibility","radioGroupBehavior","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["// TODO:\n// vertical - padding variable?\nimport { Accessibility, radioGroupBehavior, RadioGroupBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { RadioGroupItem, RadioGroupItemProps } from './RadioGroupItem';\nimport { ComponentEventHandler, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface RadioGroupProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<RadioGroupBehaviorProps>;\n\n  /** Value of the currently checked radio item. */\n  checkedValue?: number | string;\n\n  /**\n   * Called after radio group value is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All value props.\n   */\n  onCheckedValueChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Initial checkedValue value. */\n  defaultCheckedValue?: number | string;\n\n  /** Shorthand array of props for RadioGroup. */\n  items?: ShorthandCollection<RadioGroupItemProps>;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport const radioGroupClassName = 'ui-radiogroup';\n\nexport type RadioGrouptStylesProps = never;\n\n/**\n * A RadioGroup allows user to select a value from a small set of mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Radio Group](https://www.w3.org/TR/wai-aria-practices-1.1/#radiobutton) design pattern.\n */\nexport const RadioGroup: ComponentWithAs<'div', RadioGroupProps> &\n  FluentComponentStaticProps<RadioGroupProps> & {\n    Item: typeof RadioGroupItem;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(RadioGroup.displayName, context.telemetry);\n  setStart();\n\n  const { children, vertical, items, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(RadioGroup.handledProps, props);\n\n  const getA11yProps = useAccessibility<RadioGroupBehaviorProps>(props.accessibility, {\n    debugName: RadioGroup.displayName,\n    actionHandlers: {\n      nextItem: event => setCheckedItem(event, 1),\n      prevItem: event => setCheckedItem(event, -1),\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<RadioGrouptStylesProps>(RadioGroup.displayName, {\n    className: radioGroupClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [checkedValue, setCheckedValue] = useAutoControlled({\n    defaultValue: props.defaultCheckedValue,\n    value: props.checkedValue,\n    initialValue: undefined,\n  });\n\n  const [shouldFocus, setShouldFocus] = React.useState(false);\n\n  const getItemProps = (item): RadioGroupItemProps => {\n    return (item as React.ReactElement<RadioGroupItemProps>).props || item;\n  };\n\n  const setCheckedItem = (event, direction) => {\n    const nextItem = findNextEnabledCheckedItem(direction);\n\n    if (nextItem) {\n      checkedValueChange({\n        nextCheckedValue: nextItem.value,\n        shouldFocus: true,\n        event,\n        itemProps: nextItem,\n      });\n    }\n    event.preventDefault();\n  };\n\n  const findNextEnabledCheckedItem = (direction): RadioGroupItemProps => {\n    if (!props.items || !props.items.length) {\n      return undefined;\n    }\n\n    const currentIndex =\n      // if none of the values selected, set current index to the first item\n      checkedValue !== undefined ? _.findIndex(props.items, item => getItemProps(item).value === checkedValue) : 0;\n\n    for (let newIndex = currentIndex + direction; newIndex !== currentIndex; newIndex += direction) {\n      if (newIndex < 0) {\n        newIndex = props.items.length - 1;\n      } else if (newIndex >= props.items.length) {\n        newIndex = 0;\n      }\n\n      if (newIndex === currentIndex) {\n        return undefined;\n      }\n\n      const itemProps = getItemProps(props.items[newIndex]);\n      if (!itemProps.disabled) {\n        return itemProps;\n      }\n    }\n    return undefined;\n  };\n\n  const handleItemOverrides = predefinedProps => ({\n    checked: typeof checkedValue !== 'undefined' && checkedValue === predefinedProps.value,\n    onClick: (event, itemProps) => {\n      const { value, disabled } = itemProps;\n      if (!disabled && value !== checkedValue) {\n        checkedValueChange({ nextCheckedValue: value, shouldFocus: false, event, itemProps });\n      }\n      _.invoke(predefinedProps, 'onClick', event, itemProps);\n    },\n    shouldFocus,\n  });\n\n  const renderItems = (vertical: boolean) => {\n    const isNoneValueSelected = checkedValue === undefined;\n    return _.map(items, (item, index) =>\n      RadioGroupItem.create(item, {\n        defaultProps: () =>\n          getA11yProps('item', {\n            vertical,\n            ...(index === 0 && isNoneValueSelected && { tabIndex: 0 }),\n          }),\n        overrideProps: handleItemOverrides,\n      }),\n    );\n  };\n\n  const checkedValueChange = ({\n    nextCheckedValue,\n    shouldFocus,\n    event,\n    itemProps,\n  }: {\n    nextCheckedValue: number | string;\n    shouldFocus: boolean;\n    event: React.SyntheticEvent;\n    itemProps: RadioGroupItemProps;\n  }) => {\n    setCheckedValue(nextCheckedValue);\n    setShouldFocus(shouldFocus);\n    _.invoke(props, 'onCheckedValueChange', event, itemProps);\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n      })}\n    >\n      {childrenExist(children) ? children : renderItems(vertical)}\n    </ElementType>,\n  );\n\n  setEnd();\n  return element;\n};\n\nRadioGroup.displayName = 'RadioGroup';\n\nRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checkedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  defaultCheckedValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  items: customPropTypes.collectionShorthand,\n  onCheckedValueChange: PropTypes.func,\n  vertical: PropTypes.bool,\n};\n\nRadioGroup.defaultProps = {\n  accessibility: radioGroupBehavior,\n};\n\nRadioGroup.handledProps = Object.keys(RadioGroup.propTypes) as any;\n\nRadioGroup.Item = RadioGroupItem;\n\nRadioGroup.create = createShorthandFactory({\n  Component: RadioGroup,\n});\n"]},"metadata":{},"sourceType":"module"}