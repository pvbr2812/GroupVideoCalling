{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Teams_Clone\\\\Group_Call\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\LocalStreamMedia.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Image, ImageFit, Label } from '@fluentui/react';\nimport { VideoStreamRenderer } from '@azure/communication-calling';\nimport { videoHint, mediaContainer, localVideoContainerStyle } from './styles/StreamMedia.styles';\nimport { Constants } from '../core/constants';\nimport staticMediaSVG from \"../assets/staticmedia.svg\";\nexport default (props => {\n  const rendererViewRef = useRef();\n  const [activeStreamBeingRendered, setActiveStreamBeingRendered] = useState(false);\n  const imageProps = {\n    src: staticMediaSVG.toString(),\n    imageFit: ImageFit.contain,\n    styles: {\n      root: {\n        width: '100%',\n        height: '100%',\n        display: activeStreamBeingRendered ? 'none' : 'block'\n      }\n    }\n  };\n  const {\n    stream,\n    label\n  } = props;\n  useEffect(() => {\n    (async () => {\n      if (stream) {\n        const renderer = new VideoStreamRenderer(stream);\n        rendererViewRef.current = await renderer.createView({\n          scalingMode: 'Crop',\n          isMirrored: true\n        });\n        const container = document.getElementById(Constants.LOCAL_VIDEO_PREVIEW_ID);\n\n        if (container && container.childElementCount === 0) {\n          container.appendChild(rendererViewRef.current.target);\n          setActiveStreamBeingRendered(true);\n        }\n      } else {\n        if (rendererViewRef) {\n          var _rendererViewRef$curr;\n\n          (_rendererViewRef$curr = rendererViewRef.current) === null || _rendererViewRef$curr === void 0 ? void 0 : _rendererViewRef$curr.dispose();\n          setActiveStreamBeingRendered(false);\n        }\n      }\n    })();\n\n    return () => {\n      if (rendererViewRef) {\n        var _rendererViewRef$curr2;\n\n        (_rendererViewRef$curr2 = rendererViewRef.current) === null || _rendererViewRef$curr2 === void 0 ? void 0 : _rendererViewRef$curr2.dispose();\n        rendererViewRef.current = undefined;\n        setActiveStreamBeingRendered(false);\n      }\n    };\n  }, [stream]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: mediaContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: activeStreamBeingRendered ? 'block' : 'none'\n    },\n    className: localVideoContainerStyle,\n    id: Constants.LOCAL_VIDEO_PREVIEW_ID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Image, Object.assign({}, imageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Label, {\n    className: videoHint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, label));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/src/components/LocalStreamMedia.tsx"],"names":["React","useEffect","useRef","useState","Image","ImageFit","Label","VideoStreamRenderer","videoHint","mediaContainer","localVideoContainerStyle","Constants","props","rendererViewRef","activeStreamBeingRendered","setActiveStreamBeingRendered","imageProps","src","staticMediaSVG","toString","imageFit","contain","styles","root","width","height","display","stream","label","renderer","current","createView","scalingMode","isMirrored","container","document","getElementById","LOCAL_VIDEO_PREVIEW_ID","childElementCount","appendChild","target","dispose","undefined"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Image, ImageFit, Label } from '@fluentui/react';\r\nimport { LocalVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\r\nimport { videoHint, mediaContainer, localVideoContainerStyle } from './styles/StreamMedia.styles';\r\nimport { Constants } from '../core/constants';\r\nimport staticMediaSVG from '../assets/staticmedia.svg';\r\n\r\nexport interface LocalStreamMediaProps {\r\n  label: string;\r\n  stream: LocalVideoStream;\r\n}\r\n\r\nexport default (props: LocalStreamMediaProps): JSX.Element => {\r\n  const rendererViewRef = useRef<VideoStreamRendererView>();\r\n\r\n  const [activeStreamBeingRendered, setActiveStreamBeingRendered] = useState(false);\r\n\r\n  const imageProps = {\r\n    src: staticMediaSVG.toString(),\r\n    imageFit: ImageFit.contain,\r\n    styles: {\r\n      root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: activeStreamBeingRendered ? 'none' : 'block'\r\n      }\r\n    }\r\n  };\r\n\r\n  const { stream, label } = props;\r\n\r\n  useEffect(() => {\r\n    (async (): Promise<void> => {\r\n      if (stream) {\r\n        const renderer: VideoStreamRenderer = new VideoStreamRenderer(stream);\r\n        rendererViewRef.current = await renderer.createView({ scalingMode: 'Crop', isMirrored: true });\r\n\r\n        const container = document.getElementById(Constants.LOCAL_VIDEO_PREVIEW_ID);\r\n\r\n        if (container && container.childElementCount === 0) {\r\n          container.appendChild(rendererViewRef.current.target);\r\n          setActiveStreamBeingRendered(true);\r\n        }\r\n      } else {\r\n        if (rendererViewRef) {\r\n          rendererViewRef.current?.dispose();\r\n          setActiveStreamBeingRendered(false);\r\n        }\r\n      }\r\n    })();\r\n\r\n    return (): void => {\r\n      if (rendererViewRef) {\r\n        rendererViewRef.current?.dispose();\r\n        rendererViewRef.current = undefined;\r\n        setActiveStreamBeingRendered(false);\r\n      }\r\n    };\r\n  }, [stream]);\r\n\r\n  return (\r\n    <div className={mediaContainer}>\r\n      <div\r\n        style={{ display: activeStreamBeingRendered ? 'block' : 'none' }}\r\n        className={localVideoContainerStyle}\r\n        id={Constants.LOCAL_VIDEO_PREVIEW_ID}\r\n      />\r\n      <Image {...imageProps} />\r\n      <Label className={videoHint}>{label}</Label>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}