{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __generator } from \"tslib\";\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n */\n\nvar AccessTokenRefresher =\n/** @class */\nfunction () {\n  function AccessTokenRefresher(credential, scopes, requiredMillisecondsBeforeNewRefresh) {\n    if (requiredMillisecondsBeforeNewRefresh === void 0) {\n      requiredMillisecondsBeforeNewRefresh = 30000;\n    }\n\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n\n\n  AccessTokenRefresher.prototype.isReady = function () {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n  };\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n\n\n  AccessTokenRefresher.prototype.getToken = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.lastCalled = Date.now();\n            return [4\n            /*yield*/\n            , this.credential.getToken(this.scopes, options)];\n\n          case 1:\n            token = _a.sent();\n            this.promise = undefined;\n            return [2\n            /*return*/\n            , token || undefined];\n        }\n      });\n    });\n  };\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n\n\n  AccessTokenRefresher.prototype.refresh = function (options) {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  };\n\n  return AccessTokenRefresher;\n}();\n\nexport { AccessTokenRefresher };","map":{"version":3,"sources":["../../../src/credentials/accessTokenRefresher.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA;;AAEG;;AACH,IAAA,oBAAA;AAAA;AAAA,YAAA;AAIE,WAAA,oBAAA,CACU,UADV,EAEU,MAFV,EAGU,oCAHV,EAG8D;AAApD,QAAA,oCAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,oCAAA,GAAA,KAAA;AAAoD;;AAFpD,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,oCAAA,GAAA,oCAAA;AALF,SAAA,UAAA,GAAa,CAAb;AAMJ;AAEJ;;;AAGG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE;AACA,WACE,CAAC,KAAK,UAAN,IAAoB,IAAI,CAAC,GAAL,KAAa,KAAK,UAAlB,GAA+B,KAAK,oCAD1D;AAGD,GALM;AAOP;;;;;AAKG;;;AACW,EAAA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAd,UAAuB,OAAvB,EAA+C;;;;;;AAC7C,iBAAK,UAAL,GAAkB,IAAI,CAAC,GAAL,EAAlB;AACc,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,UAAL,CAAgB,QAAhB,CAAyB,KAAK,MAA9B,EAAsC,OAAtC,CAAN,CAAA;;;AAAR,YAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;AACN,iBAAK,OAAL,GAAe,SAAf;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,IAAI,SAAhB,CAAA;;;;AACD,GALa;AAOd;;;AAGG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,OAAf,EAAuC;AACrC,QAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,WAAK,OAAL,GAAe,KAAK,QAAL,CAAc,OAAd,CAAf;AACD;;AAED,WAAO,KAAK,OAAZ;AACD,GANM;;AAOT,SAAA,oBAAA;AAAC,CA7CD,EAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential, GetTokenOptions } from \"@azure/core-auth\";\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n */\nexport class AccessTokenRefresher {\n  private promise: Promise<AccessToken | undefined> | undefined;\n  private lastCalled = 0;\n\n  constructor(\n    private credential: TokenCredential,\n    private scopes: string | string[],\n    private requiredMillisecondsBeforeNewRefresh: number = 30000\n  ) {}\n\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n  public isReady(): boolean {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return (\n      !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh\n    );\n  }\n\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n  private async getToken(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    this.lastCalled = Date.now();\n    const token = await this.credential.getToken(this.scopes, options);\n    this.promise = undefined;\n    return token || undefined;\n  }\n\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n  public refresh(options: GetTokenOptions): Promise<AccessToken | undefined> {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}