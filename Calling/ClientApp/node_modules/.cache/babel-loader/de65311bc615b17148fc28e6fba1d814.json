{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _get from \"lodash/get\";\nimport { getElementType, useUnhandledProps, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes } from '../../utils';\nimport { FlexItem } from './FlexItem';\nexport var flexClassName = 'ui-flex';\n/**\n * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).\n */\n\nexport var Flex = /*#__PURE__*/function () {\n  var Flex = function Flex(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Flex.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        className = props.className,\n        column = props.column,\n        debug = props.debug,\n        design = props.design,\n        fill = props.fill,\n        gap = props.gap,\n        hAlign = props.hAlign,\n        inline = props.inline,\n        padding = props.padding,\n        space = props.space,\n        styles = props.styles,\n        variables = props.variables,\n        vAlign = props.vAlign,\n        wrap = props.wrap;\n\n    var _useStyles = useStyles(Flex.displayName, {\n      className: flexClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          column: column,\n          debug: debug,\n          fill: fill,\n          gap: gap,\n          hAlign: hAlign,\n          inline: inline,\n          padding: padding,\n          space: space,\n          vAlign: vAlign,\n          wrap: wrap\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Flex.handledProps, props);\n    var content = React.Children.map(children, function (child) {\n      var isFlexItemElement = _get(child, 'type.__isFlexItem');\n\n      return isFlexItemElement ? /*#__PURE__*/React.cloneElement(child, {\n        flexDirection: column ? 'column' : 'row'\n      }) : child;\n    });\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({\n      className: classes.root\n    }, unhandledProps), content);\n    setEnd();\n    return element;\n  };\n\n  Flex.displayName = 'Flex';\n  Flex.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    content: false\n  }), {\n    inline: PropTypes.bool,\n    column: PropTypes.bool,\n    wrap: PropTypes.bool,\n    hAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n    vAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n    space: PropTypes.oneOf(['around', 'between', 'evenly']),\n    gap: PropTypes.oneOf(['gap.smaller', 'gap.small', 'gap.medium', 'gap.large']),\n    padding: PropTypes.oneOf(['padding.medium']),\n    fill: PropTypes.bool,\n    debug: PropTypes.bool\n  });\n  Flex.handledProps = Object.keys(Flex.propTypes);\n  Flex.Item = FlexItem;\n  return Flex;\n}();","map":{"version":3,"sources":["components/Flex/Flex.tsx"],"names":["flexClassName","Flex","context","useFluentContext","setStart","setEnd","useTelemetry","children","className","column","debug","design","fill","gap","hAlign","inline","padding","space","styles","variables","vAlign","wrap","props","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","useUnhandledProps","content","isFlexItemElement","flexDirection","element","root","accessibility","PropTypes","bool","Object"],"mappings":"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","sourcesContent":["import {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport { FlexItem } from './FlexItem';\n\nexport interface FlexProps extends UIComponentProps, ChildrenComponentProps {\n  /** Defines if container should be inline element. */\n  inline?: boolean;\n\n  /** Sets vertical flow direction. */\n  column?: boolean;\n\n  /** Allows overflow items to wrap on the next container's line. */\n  wrap?: boolean;\n\n  /** Controls items alignment in horizontal direction. */\n  hAlign?: 'start' | 'center' | 'end' | 'stretch';\n\n  /** Controls items alignment in vertical direction. */\n  vAlign?: 'start' | 'center' | 'end' | 'stretch';\n\n  /** Defines strategy for distributing remaining space between items. */\n  space?: 'around' | 'between' | 'evenly';\n\n  /** Defines gap between each two adjacent child items. */\n  gap?: 'gap.smaller' | 'gap.small' | 'gap.medium' | 'gap.large';\n\n  /** Defines container's padding. */\n  padding?: 'padding.medium';\n\n  /** Enables debug mode. */\n  debug?: boolean;\n\n  /** Orders container to fill all parent's space available. */\n  fill?: boolean;\n}\n\nexport type FlexStylesProps = Pick<\n  FlexProps,\n  'column' | 'debug' | 'fill' | 'gap' | 'hAlign' | 'inline' | 'padding' | 'space' | 'vAlign' | 'wrap'\n>;\nexport const flexClassName = 'ui-flex';\n\n/**\n * A Flex is a layout component that arranges group of items aligned towards common direction (either row or column).\n */\nexport const Flex: ComponentWithAs<'div', FlexProps> & {\n  handledProps: (keyof FlexProps)[];\n  Item: typeof FlexItem;\n} = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Flex.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    className,\n    column,\n    debug,\n    design,\n    fill,\n    gap,\n    hAlign,\n    inline,\n    padding,\n    space,\n    styles,\n    variables,\n    vAlign,\n    wrap,\n  } = props;\n\n  const { classes } = useStyles<FlexStylesProps>(Flex.displayName, {\n    className: flexClassName,\n    mapPropsToStyles: () => ({\n      column,\n      debug,\n      fill,\n      gap,\n      hAlign,\n      inline,\n      padding,\n      space,\n      vAlign,\n      wrap,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Flex.handledProps, props);\n\n  const content = React.Children.map(children, child => {\n    const isFlexItemElement: boolean = _.get(child, 'type.__isFlexItem');\n\n    return isFlexItemElement\n      ? React.cloneElement(child as React.ReactElement, {\n          flexDirection: column ? 'column' : 'row',\n        })\n      : child;\n  });\n  const element = (\n    <ElementType className={classes.root} {...unhandledProps}>\n      {content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nFlex.displayName = 'Flex';\n\nFlex.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    content: false,\n  }),\n\n  inline: PropTypes.bool,\n\n  column: PropTypes.bool,\n\n  wrap: PropTypes.bool,\n\n  hAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n  vAlign: PropTypes.oneOf(['start', 'center', 'end', 'stretch']),\n\n  space: PropTypes.oneOf(['around', 'between', 'evenly']),\n\n  gap: PropTypes.oneOf(['gap.smaller', 'gap.small', 'gap.medium', 'gap.large']),\n\n  padding: PropTypes.oneOf(['padding.medium']),\n  fill: PropTypes.bool,\n\n  debug: PropTypes.bool,\n};\nFlex.handledProps = Object.keys(Flex.propTypes) as any;\n\nFlex.Item = FlexItem;\n"]},"metadata":{},"sourceType":"module"}