{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Teams_Clone\\\\Group_Call\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\MediaFullScreen.tsx\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { hiddenFullScreenStyle, fullScreenStyle, loadingStyle } from './styles/MediaFullScreen.styles';\nimport { VideoStreamRenderer } from '@azure/communication-calling';\nimport { Spinner, SpinnerSize } from '@fluentui/react';\nimport { utils } from 'Utils/Utils';\nexport default (props => {\n  var _props$activeScreenSh;\n\n  const [loading, setLoading] = useState(true);\n  const fullScreenStreamMediaId = 'fullScreenStreamMediaId';\n  const rendererViewRef = useRef();\n  /**\r\n   * Start stream after DOM has rendered\r\n   */\n\n  const activeScreenShareStream = props.activeScreenShareStream;\n  const renderStreamCallback = useCallback(async () => {\n    if (activeScreenShareStream && activeScreenShareStream.stream) {\n      const stream = activeScreenShareStream.stream;\n      const renderer = new VideoStreamRenderer(stream);\n      rendererViewRef.current = await renderer.createView({\n        scalingMode: 'Fit'\n      });\n      const container = document.getElementById(fullScreenStreamMediaId);\n\n      if (container && container.childElementCount === 0) {\n        setLoading(false);\n        container.appendChild(rendererViewRef.current.target);\n      }\n    } else {\n      if (rendererViewRef) {\n        var _rendererViewRef$curr;\n\n        (_rendererViewRef$curr = rendererViewRef.current) === null || _rendererViewRef$curr === void 0 ? void 0 : _rendererViewRef$curr.dispose();\n      }\n    }\n  }, [activeScreenShareStream]);\n  useEffect(() => {\n    renderStreamCallback();\n  }, [renderStreamCallback]);\n  const displayName = (_props$activeScreenSh = props.activeScreenShareStream.user.displayName) !== null && _props$activeScreenSh !== void 0 ? _props$activeScreenSh : utils.getId(props.activeScreenShareStream.user.identifier);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, loading && /*#__PURE__*/React.createElement(\"div\", {\n    className: loadingStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    label: `Loading ${displayName}'s screen`,\n    size: SpinnerSize.xSmall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: fullScreenStreamMediaId,\n    className: loading ? hiddenFullScreenStyle : fullScreenStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/src/components/MediaFullScreen.tsx"],"names":["React","useCallback","useEffect","useRef","useState","hiddenFullScreenStyle","fullScreenStyle","loadingStyle","VideoStreamRenderer","Spinner","SpinnerSize","utils","props","loading","setLoading","fullScreenStreamMediaId","rendererViewRef","activeScreenShareStream","renderStreamCallback","stream","renderer","current","createView","scalingMode","container","document","getElementById","childElementCount","appendChild","target","dispose","displayName","user","getId","identifier","xSmall"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,QAAgE,OAAhE;AAEA,SAASC,qBAAT,EAAgCC,eAAhC,EAAiDC,YAAjD,QAAqE,iCAArE;AACA,SAA4BC,mBAA5B,QAAgF,8BAAhF;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,iBAArC;AACA,SAASC,KAAT,QAAsB,aAAtB;AAMA,gBAAgBC,KAAD,IAA8C;AAAA;;AAC3D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMW,uBAAuB,GAAG,yBAAhC;AACA,QAAMC,eAAe,GAAGb,MAAM,EAA9B;AAEA;AACF;AACA;;AAEE,QAAMc,uBAAuB,GAAGL,KAAK,CAACK,uBAAtC;AAEA,QAAMC,oBAAoB,GAAGjB,WAAW,CAAC,YAAY;AACnD,QAAIgB,uBAAuB,IAAIA,uBAAuB,CAACE,MAAvD,EAA+D;AAC7D,YAAMA,MAAyB,GAAGF,uBAAuB,CAACE,MAA1D;AACA,YAAMC,QAA6B,GAAG,IAAIZ,mBAAJ,CAAwBW,MAAxB,CAAtC;AACAH,MAAAA,eAAe,CAACK,OAAhB,GAA0B,MAAMD,QAAQ,CAACE,UAAT,CAAoB;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAApB,CAAhC;AAEA,YAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwBX,uBAAxB,CAAlB;;AACA,UAAIS,SAAS,IAAIA,SAAS,CAACG,iBAAV,KAAgC,CAAjD,EAAoD;AAClDb,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAU,QAAAA,SAAS,CAACI,WAAV,CAAsBZ,eAAe,CAACK,OAAhB,CAAwBQ,MAA9C;AACD;AACF,KAVD,MAUO;AACL,UAAIb,eAAJ,EAAqB;AAAA;;AACnB,iCAAAA,eAAe,CAACK,OAAhB,gFAAyBS,OAAzB;AACD;AACF;AACF,GAhBuC,EAgBrC,CAACb,uBAAD,CAhBqC,CAAxC;AAkBAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,CAACA,oBAAD,CAFM,CAAT;AAIA,QAAMa,WAAW,4BACfnB,KAAK,CAACK,uBAAN,CAA8Be,IAA9B,CAAmCD,WADpB,yEACmCpB,KAAK,CAACsB,KAAN,CAAYrB,KAAK,CAACK,uBAAN,CAA8Be,IAA9B,CAAmCE,UAA/C,CADpD;AAGA,sBACE,0CACGrB,OAAO,iBACN;AAAK,IAAA,SAAS,EAAEN,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAG,WAAUwB,WAAY,WAAvC;AAAmD,IAAA,IAAI,EAAErB,WAAW,CAACyB,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,eAME;AAAK,IAAA,EAAE,EAAEpB,uBAAT;AAAkC,IAAA,SAAS,EAAEF,OAAO,GAAGR,qBAAH,GAA2BC,eAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CA9CD","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { ParticipantStream } from '../core/reducers';\r\nimport { hiddenFullScreenStyle, fullScreenStyle, loadingStyle } from './styles/MediaFullScreen.styles';\r\nimport { RemoteVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\r\nimport { Spinner, SpinnerSize } from '@fluentui/react';\r\nimport { utils } from 'Utils/Utils';\r\n\r\nexport interface MediaFullScreenProps {\r\n  activeScreenShareStream: ParticipantStream;\r\n}\r\n\r\nexport default (props: MediaFullScreenProps): JSX.Element => {\r\n  const [loading, setLoading] = useState(true);\r\n  const fullScreenStreamMediaId = 'fullScreenStreamMediaId';\r\n  const rendererViewRef = useRef<VideoStreamRendererView>();\r\n\r\n  /**\r\n   * Start stream after DOM has rendered\r\n   */\r\n\r\n  const activeScreenShareStream = props.activeScreenShareStream;\r\n\r\n  const renderStreamCallback = useCallback(async () => {\r\n    if (activeScreenShareStream && activeScreenShareStream.stream) {\r\n      const stream: RemoteVideoStream = activeScreenShareStream.stream;\r\n      const renderer: VideoStreamRenderer = new VideoStreamRenderer(stream);\r\n      rendererViewRef.current = await renderer.createView({ scalingMode: 'Fit' });\r\n\r\n      const container = document.getElementById(fullScreenStreamMediaId);\r\n      if (container && container.childElementCount === 0) {\r\n        setLoading(false);\r\n        container.appendChild(rendererViewRef.current.target);\r\n      }\r\n    } else {\r\n      if (rendererViewRef) {\r\n        rendererViewRef.current?.dispose();\r\n      }\r\n    }\r\n  }, [activeScreenShareStream]);\r\n\r\n  useEffect(() => {\r\n    renderStreamCallback();\r\n  }, [renderStreamCallback]);\r\n\r\n  const displayName =\r\n    props.activeScreenShareStream.user.displayName ?? utils.getId(props.activeScreenShareStream.user.identifier);\r\n\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div className={loadingStyle}>\r\n          <Spinner label={`Loading ${displayName}'s screen`} size={SpinnerSize.xSmall} />\r\n        </div>\r\n      )}\r\n      <div id={fullScreenStreamMediaId} className={loading ? hiddenFullScreenStyle : fullScreenStyle}></div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}