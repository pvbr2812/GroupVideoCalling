{"ast":null,"code":"export var ContainerFocusHandler = /*#__PURE__*/function () {\n  function ContainerFocusHandler(getItemsCount, setFocusAt, circular) {\n    var _this = this;\n\n    if (circular === void 0) {\n      circular = false;\n    }\n\n    this.getItemsCount = getItemsCount;\n    this.setFocusAt = setFocusAt;\n    this.circular = circular;\n    this.focusedIndex = 0;\n\n    this.noItems = function () {\n      return _this.getItemsCount() === 0;\n    };\n  }\n\n  var _proto = ContainerFocusHandler.prototype;\n\n  _proto.constrainFocusedIndex = function constrainFocusedIndex() {\n    var itemsCount = this.getItemsCount();\n\n    if (this.focusedIndex < 0) {\n      this.focusedIndex = this.circular ? itemsCount - 1 : 0;\n    }\n\n    if (this.focusedIndex >= itemsCount) {\n      this.focusedIndex = this.circular ? 0 : itemsCount - 1;\n    }\n  };\n\n  _proto.getFocusedIndex = function getFocusedIndex() {\n    return this.focusedIndex;\n  };\n\n  _proto.syncFocusedIndex = function syncFocusedIndex(withCurrentIndex) {\n    this.focusedIndex = withCurrentIndex;\n  };\n\n  _proto.movePrevious = function movePrevious() {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex -= 1;\n    this.constrainFocusedIndex();\n    this.setFocusAt(this.focusedIndex);\n  };\n\n  _proto.moveNext = function moveNext() {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex += 1;\n    this.constrainFocusedIndex();\n    this.setFocusAt(this.focusedIndex);\n  };\n\n  _proto.moveFirst = function moveFirst() {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex = 0;\n    this.setFocusAt(this.focusedIndex);\n  };\n\n  _proto.moveLast = function moveLast() {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex = this.getItemsCount() - 1;\n    this.setFocusAt(this.focusedIndex);\n  };\n\n  return ContainerFocusHandler;\n}();","map":{"version":3,"sources":["utils/accessibility/FocusHandling/FocusContainer.ts"],"names":["ContainerFocusHandler","focusedIndex","getItemsCount","setFocusAt","circular","itemsCount"],"mappings":"AAAA,OAAA,IAAaA,qBAAb,GAAA,aAAA,YAAA;AAGE,WAAA,qBAAA,CAAA,aAAA,EAAA,UAAA,EAAA,QAAA,EAIE;AAAA,QAAA,KAAA,GAAA,IAAA;;AAAA,QADQI,QACR,KAAA,KAAA,CAAA,EAAA;AADQA,MAAAA,QACR,GADmB,KAAXA;AACR;;AAAA,SAHQF,aAGR,GAHQA,aAGR;AAAA,SAFiBC,UAEjB,GAFiBA,UAEjB;AAAA,SADQC,QACR,GADQA,QACR;AAAA,SANMH,YAMN,GANqB,CAMrB;;AAAA,SAAA,OAAA,GAEgB,YAAA;AAAA,aAAe,KAAI,CAAJ,aAAA,OAAf,CAAA;AAFhB,KAAA;AAAE;;AAPN,MAAA,MAAA,GAAA,qBAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,qBAAA,GAWE,SAAA,qBAAA,GAAsC;AACpC,QAAMI,UAAU,GAAG,KAAnB,aAAmB,EAAnB;;AACA,QAAI,KAAA,YAAA,GAAJ,CAAA,EAA2B;AACzB,WAAA,YAAA,GAAoB,KAAA,QAAA,GAAgBA,UAAU,GAA1B,CAAA,GAApB,CAAA;AACD;;AAED,QAAI,KAAA,YAAA,IAAJ,UAAA,EAAqC;AACnC,WAAA,YAAA,GAAoB,KAAA,QAAA,GAAA,CAAA,GAAoBA,UAAU,GAAlD,CAAA;AACD;AAnBL,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GAsBE,SAAA,eAAA,GAAiC;AAC/B,WAAO,KAAP,YAAA;AAvBJ,GAAA;;AAAA,EAAA,MAAA,CAAA,gBAAA,GA0BE,SAAA,gBAAA,CAAA,gBAAA,EAAkD;AAChD,SAAA,YAAA,GAAA,gBAAA;AA3BJ,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GA8BE,SAAA,YAAA,GAA4B;AAC1B,QAAI,KAAJ,OAAI,EAAJ,EAAoB;AAClB;AACD;;AAED,SAAA,YAAA,IAAA,CAAA;AACA,SAAA,qBAAA;AAEA,SAAA,UAAA,CAAgB,KAAhB,YAAA;AAtCJ,GAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GAyCE,SAAA,QAAA,GAAwB;AACtB,QAAI,KAAJ,OAAI,EAAJ,EAAoB;AAClB;AACD;;AAED,SAAA,YAAA,IAAA,CAAA;AACA,SAAA,qBAAA;AAEA,SAAA,UAAA,CAAgB,KAAhB,YAAA;AAjDJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAoDE,SAAA,SAAA,GAAyB;AACvB,QAAI,KAAJ,OAAI,EAAJ,EAAoB;AAClB;AACD;;AAED,SAAA,YAAA,GAAA,CAAA;AACA,SAAA,UAAA,CAAgB,KAAhB,YAAA;AA1DJ,GAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GA6DE,SAAA,QAAA,GAAwB;AACtB,QAAI,KAAJ,OAAI,EAAJ,EAAoB;AAClB;AACD;;AAED,SAAA,YAAA,GAAoB,KAAA,aAAA,KAApB,CAAA;AACA,SAAA,UAAA,CAAgB,KAAhB,YAAA;AAnEJ,GAAA;;AAAA,SAAA,qBAAA;AAAA,CAAA,EAAA","sourcesContent":["export class ContainerFocusHandler {\n  private focusedIndex = 0;\n\n  constructor(\n    private getItemsCount: () => number,\n    private readonly setFocusAt: (number) => void,\n    private circular = false,\n  ) {}\n\n  private noItems = (): boolean => this.getItemsCount() === 0;\n\n  private constrainFocusedIndex(): void {\n    const itemsCount = this.getItemsCount();\n    if (this.focusedIndex < 0) {\n      this.focusedIndex = this.circular ? itemsCount - 1 : 0;\n    }\n\n    if (this.focusedIndex >= itemsCount) {\n      this.focusedIndex = this.circular ? 0 : itemsCount - 1;\n    }\n  }\n\n  public getFocusedIndex(): number {\n    return this.focusedIndex;\n  }\n\n  public syncFocusedIndex(withCurrentIndex: number) {\n    this.focusedIndex = withCurrentIndex;\n  }\n\n  public movePrevious(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex -= 1;\n    this.constrainFocusedIndex();\n\n    this.setFocusAt(this.focusedIndex);\n  }\n\n  public moveNext(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex += 1;\n    this.constrainFocusedIndex();\n\n    this.setFocusAt(this.focusedIndex);\n  }\n\n  public moveFirst(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex = 0;\n    this.setFocusAt(this.focusedIndex);\n  }\n\n  public moveLast(): void {\n    if (this.noItems()) {\n      return;\n    }\n\n    this.focusedIndex = this.getItemsCount() - 1;\n    this.setFocusAt(this.focusedIndex);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}