{"ast":null,"code":"import { mergeThemes } from '@fluentui/styles';\nimport { isBrowser } from './isBrowser';\nvar defaultDocument = {\n  document: 'document'\n};\nvar registeredRenderers = new WeakMap();\nexport var getRenderer = function getRenderer(createRenderer, target) {\n  var actualTarget = target || defaultDocument; // A valid comparisons, default renderer will be used\n\n  if (!isBrowser() || typeof target === 'undefined') {\n    actualTarget = defaultDocument;\n  } // SSR logic will be handled by condition above\n  // eslint-disable-next-line no-undef\n\n\n  if (isBrowser() && target === document) {\n    actualTarget = defaultDocument;\n  }\n\n  if (registeredRenderers.has(actualTarget)) {\n    return registeredRenderers.get(actualTarget);\n  } // To avoid errors related to SSR as `document` may not exist we are using a fake object `defaultDocument`.\n  // When a value matches `defaultDocument` we will pass `undefined` to `createRenderer()` and it should handle it\n  // properly.\n\n\n  var createdRenderer = createRenderer(actualTarget === defaultDocument ? undefined : actualTarget);\n  registeredRenderers.set(actualTarget, createdRenderer);\n  return createdRenderer;\n};\nexport var mergePerformanceOptions = function mergePerformanceOptions(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  return Object.assign.apply(Object, [target].concat(sources));\n};\nexport var mergeBooleanValues = function mergeBooleanValues(target) {\n  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    sources[_key2 - 1] = arguments[_key2];\n  }\n\n  return sources.reduce(function (acc, next) {\n    return typeof next === 'boolean' ? next : acc;\n  }, target);\n};\nexport var mergeProviderContexts = function mergeProviderContexts(createRenderer) {\n  var emptyContext = {\n    theme: {\n      siteVariables: {\n        fontSizes: {}\n      },\n      componentVariables: {},\n      componentStyles: {},\n      fontFaces: [],\n      staticStyles: [],\n      animations: {}\n    },\n    rtl: false,\n    disableAnimations: false,\n    target: isBrowser() ? document : undefined,\n    // eslint-disable-line no-undef\n    performance: {\n      enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',\n      enableStylesCaching: true,\n      enableVariablesCaching: true,\n      enableBooleanVariablesCaching: false\n    },\n    telemetry: undefined,\n    renderer: undefined\n  };\n\n  for (var _len3 = arguments.length, contexts = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    contexts[_key3 - 1] = arguments[_key3];\n  }\n\n  return contexts.reduce(function (acc, next) {\n    if (!next) return acc;\n    acc.theme = mergeThemes(acc.theme, next.theme); // Latest RTL value wins\n\n    var mergedRTL = mergeBooleanValues(acc.rtl, next.rtl);\n\n    if (typeof mergedRTL === 'boolean') {\n      acc.rtl = mergedRTL;\n    } // Use provided renderer if it is defined\n\n\n    acc.target = next.target || acc.target;\n    acc.renderer = getRenderer(createRenderer, acc.target); // Latest disableAnimations value wins\n\n    var mergedDisableAnimations = mergeBooleanValues(acc.disableAnimations, next.disableAnimations);\n\n    if (typeof mergedDisableAnimations === 'boolean') {\n      acc.disableAnimations = mergedDisableAnimations;\n    }\n\n    acc.performance = mergePerformanceOptions(acc.performance, next.performance || {});\n    acc.telemetry = next.telemetry || acc.telemetry;\n    return acc;\n  }, emptyContext);\n};","map":{"version":3,"sources":["utils/mergeProviderContexts.ts"],"names":["defaultDocument","document","registeredRenderers","getRenderer","actualTarget","target","isBrowser","createdRenderer","createRenderer","mergePerformanceOptions","sources","Object","mergeBooleanValues","mergeProviderContexts","contexts","emptyContext","theme","siteVariables","fontSizes","componentVariables","componentStyles","fontFaces","staticStyles","animations","rtl","disableAnimations","performance","enableSanitizeCssPlugin","process","enableStylesCaching","enableVariablesCaching","enableBooleanVariablesCaching","telemetry","renderer","undefined","acc","mergeThemes","next","mergedRTL","mergedDisableAnimations"],"mappings":"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","sourcesContent":["import {\n  ProviderContextPrepared,\n  ProviderContextInput,\n  StylesContextPerformance,\n  StylesContextPerformanceInput,\n} from '@fluentui/react-bindings';\nimport { CreateRenderer, Renderer } from '@fluentui/react-northstar-styles-renderer';\nimport { mergeThemes } from '@fluentui/styles';\n\nimport { isBrowser } from './isBrowser';\n\nconst defaultDocument = { document: 'document' };\nconst registeredRenderers = new WeakMap<Document | typeof defaultDocument, Renderer>();\n\nexport const getRenderer = (createRenderer: CreateRenderer, target?: Document): Renderer => {\n  let actualTarget: Document | typeof defaultDocument = target || defaultDocument;\n\n  // A valid comparisons, default renderer will be used\n  if (!isBrowser() || typeof target === 'undefined') {\n    actualTarget = defaultDocument;\n  }\n\n  // SSR logic will be handled by condition above\n  // eslint-disable-next-line no-undef\n  if (isBrowser() && target === document) {\n    actualTarget = defaultDocument;\n  }\n\n  if (registeredRenderers.has(actualTarget)) {\n    return registeredRenderers.get(actualTarget);\n  }\n\n  // To avoid errors related to SSR as `document` may not exist we are using a fake object `defaultDocument`.\n  // When a value matches `defaultDocument` we will pass `undefined` to `createRenderer()` and it should handle it\n  // properly.\n  const createdRenderer = createRenderer(actualTarget === defaultDocument ? undefined : (actualTarget as Document));\n  registeredRenderers.set(actualTarget, createdRenderer);\n\n  return createdRenderer;\n};\n\nexport const mergePerformanceOptions = (\n  target: StylesContextPerformance | StylesContextPerformanceInput,\n  ...sources: StylesContextPerformanceInput[]\n) => {\n  return Object.assign(target, ...sources);\n};\n\nexport const mergeBooleanValues = (target, ...sources) => {\n  return sources.reduce((acc, next) => {\n    return typeof next === 'boolean' ? next : acc;\n  }, target);\n};\n\nexport const mergeProviderContexts = (\n  createRenderer: CreateRenderer,\n  ...contexts: (ProviderContextInput | ProviderContextPrepared)[]\n): ProviderContextPrepared => {\n  const emptyContext: ProviderContextPrepared = {\n    theme: {\n      siteVariables: {\n        fontSizes: {},\n      },\n      componentVariables: {},\n      componentStyles: {},\n      fontFaces: [],\n      staticStyles: [],\n      animations: {},\n    },\n    rtl: false,\n    disableAnimations: false,\n    target: isBrowser() ? document : undefined, // eslint-disable-line no-undef\n    performance: {\n      enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',\n      enableStylesCaching: true,\n      enableVariablesCaching: true,\n      enableBooleanVariablesCaching: false,\n    },\n    telemetry: undefined,\n    renderer: undefined,\n  };\n\n  return contexts.reduce<ProviderContextPrepared>(\n    (acc: ProviderContextPrepared, next: ProviderContextInput | ProviderContextPrepared) => {\n      if (!next) return acc;\n\n      acc.theme = mergeThemes(acc.theme, next.theme);\n\n      // Latest RTL value wins\n      const mergedRTL = mergeBooleanValues(acc.rtl, next.rtl);\n      if (typeof mergedRTL === 'boolean') {\n        acc.rtl = mergedRTL;\n      }\n\n      // Use provided renderer if it is defined\n      acc.target = next.target || acc.target;\n      acc.renderer = getRenderer(createRenderer, acc.target);\n\n      // Latest disableAnimations value wins\n      const mergedDisableAnimations = mergeBooleanValues(acc.disableAnimations, next.disableAnimations);\n      if (typeof mergedDisableAnimations === 'boolean') {\n        acc.disableAnimations = mergedDisableAnimations;\n      }\n\n      acc.performance = mergePerformanceOptions(acc.performance, next.performance || {});\n\n      acc.telemetry = next.telemetry || acc.telemetry;\n\n      return acc;\n    },\n    emptyContext,\n  );\n};\n"]},"metadata":{},"sourceType":"module"}