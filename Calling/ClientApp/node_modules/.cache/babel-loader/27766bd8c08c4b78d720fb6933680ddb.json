{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { shouldRetry, updateRetryData, DEFAULT_CLIENT_MAX_RETRY_INTERVAL, DEFAULT_CLIENT_RETRY_COUNT, DEFAULT_CLIENT_RETRY_INTERVAL, DEFAULT_CLIENT_MIN_RETRY_INTERVAL, isNumber } from \"../util/exponentialBackoffStrategy\";\nexport function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n  return {\n    create: function (nextPolicy, options) {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n/**\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\n\nvar SystemErrorRetryPolicy =\n/** @class */\nfunction (_super) {\n  __extends(SystemErrorRetryPolicy, _super);\n\n  function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    _this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    _this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return _this;\n  }\n\n  SystemErrorRetryPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request.clone()).catch(function (error) {\n      return retry(_this, request, error.response, error);\n    });\n  };\n\n  return SystemErrorRetryPolicy;\n}(BaseRequestPolicy);\n\nexport { SystemErrorRetryPolicy };\n\nfunction retry(policy, request, operationResponse, err, retryData) {\n  return __awaiter(this, void 0, void 0, function () {\n    function shouldPolicyRetry(_response, error) {\n      if (error && error.code && (error.code === \"ETIMEDOUT\" || error.code === \"ESOCKETTIMEDOUT\" || error.code === \"ECONNREFUSED\" || error.code === \"ECONNRESET\" || error.code === \"ENOENT\")) {\n        return true;\n      }\n\n      return false;\n    }\n\n    var nestedErr_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          retryData = updateRetryData(policy, retryData, err);\n          if (!shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) return [3\n          /*break*/\n          , 5];\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , utils.delay(retryData.retryInterval)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , policy._nextPolicy.sendRequest(request.clone())];\n\n        case 3:\n          nestedErr_1 = _a.sent();\n          return [2\n          /*return*/\n          , retry(policy, request, operationResponse, nestedErr_1, retryData)];\n\n        case 4:\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          if (err) {\n            // If the operation failed in the end, return all errors instead of just the last one\n            return [2\n            /*return*/\n            , Promise.reject(retryData.error)];\n          }\n\n          return [2\n          /*return*/\n          , operationResponse];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/policies/systemErrorRetryPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport {\n  RetryData,\n  RetryError,\n  shouldRetry,\n  updateRetryData,\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL,\n  isNumber\n} from \"../util/exponentialBackoffStrategy\";\n\nexport function systemErrorRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  minRetryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new SystemErrorRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        minRetryInterval,\n        maxRetryInterval\n      );\n    }\n  };\n}\n\n/**\n * @param retryCount - The client retry count.\n * @param retryInterval - The client retry interval, in milliseconds.\n * @param minRetryInterval - The minimum retry interval, in milliseconds.\n * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    minRetryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval)\n      ? minRetryInterval\n      : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .catch((error) => retry(this, request, error.response, error));\n  }\n}\n\nasync function retry(\n  policy: SystemErrorRetryPolicy,\n  request: WebResourceLike,\n  operationResponse: HttpOperationResponse,\n  err?: RetryError,\n  retryData?: RetryData\n): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n\n  function shouldPolicyRetry(_response?: HttpOperationResponse, error?: RetryError): boolean {\n    if (\n      error &&\n      error.code &&\n      (error.code === \"ETIMEDOUT\" ||\n        error.code === \"ESOCKETTIMEDOUT\" ||\n        error.code === \"ECONNREFUSED\" ||\n        error.code === \"ECONNRESET\" ||\n        error.code === \"ENOENT\")\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  if (shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    try {\n      await utils.delay(retryData.retryInterval);\n      return policy._nextPolicy.sendRequest(request.clone());\n    } catch (nestedErr) {\n      return retry(policy, request, operationResponse, nestedErr, retryData);\n    }\n  } else {\n    if (err) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      return Promise.reject(retryData.error);\n    }\n    return operationResponse;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}