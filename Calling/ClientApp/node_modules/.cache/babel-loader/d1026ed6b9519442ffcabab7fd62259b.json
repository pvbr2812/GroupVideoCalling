{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { treeItemBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { TreeTitle, treeTitleSlotClassNames } from './TreeTitle';\nimport { hasSubtree, TreeContext } from './utils';\nexport var treeItemClassName = 'ui-tree__item';\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\n\nexport var TreeItem = /*#__PURE__*/function () {\n  var TreeItem = function TreeItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(TreeItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        contentRef = props.contentRef,\n        design = props.design,\n        title = props.title,\n        renderItemTitle = props.renderItemTitle,\n        expanded = props.expanded,\n        level = props.level,\n        index = props.index,\n        styles = props.styles,\n        variables = props.variables,\n        treeSize = props.treeSize,\n        selectionIndicator = props.selectionIndicator,\n        selectableParent = props.selectableParent,\n        selected = props.selected,\n        selectable = props.selectable,\n        indeterminate = props.indeterminate,\n        id = props.id;\n    var hasSubtreeItem = hasSubtree(props);\n\n    var _React$useContext = React.useContext(TreeContext),\n        onFocusParent = _React$useContext.onFocusParent,\n        onSiblingsExpand = _React$useContext.onSiblingsExpand,\n        onFocusFirstChild = _React$useContext.onFocusFirstChild,\n        onTitleClick = _React$useContext.onTitleClick;\n\n    var getA11Props = useAccessibility(accessibility, {\n      actionHandlers: {\n        performClick: function performClick(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleTitleClick(e);\n        },\n        focusParent: function focusParent(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleFocusParent(e);\n        },\n        collapse: function collapse(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleTitleClick(e);\n        },\n        expand: function expand(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleTitleClick(e);\n        },\n        focusFirstChild: function focusFirstChild(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleFocusFirstChild(e);\n        },\n        expandSiblings: function expandSiblings(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleSiblingsExpand(e);\n        },\n        performSelection: function performSelection(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleSelection(e);\n        }\n      },\n      debugName: TreeItem.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          expanded: expanded,\n          level: level,\n          index: index,\n          hasSubtree: hasSubtreeItem,\n          treeSize: treeSize,\n          selected: selected,\n          selectable: selectable,\n          selectableParent: selectableParent\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(TreeItem.displayName, {\n      className: treeItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          level: level\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var handleSelection = function handleSelection(e) {\n      onTitleClick(e, props, true);\n\n      _invoke(props, 'onTitleClick', e, props);\n    };\n\n    var handleTitleClick = function handleTitleClick(e) {\n      onTitleClick(e, props);\n\n      _invoke(props, 'onTitleClick', e, props);\n    };\n\n    var handleFocusFirstChild = function handleFocusFirstChild(e) {\n      _invoke(props, 'onFocusFirstChild', e, props);\n\n      onFocusFirstChild(props.id);\n    };\n\n    var handleFocusParent = function handleFocusParent(e) {\n      _invoke(props, 'onFocusParent', e, props);\n\n      onFocusParent(props.parent);\n    };\n\n    var handleSiblingsExpand = function handleSiblingsExpand(e) {\n      _invoke(props, 'onSiblingsExpand', e, props);\n\n      onSiblingsExpand(e, props);\n    };\n\n    var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, titleProps) {\n          var _ref, _ref$className;\n\n          if (selectable && ((_ref = e == null ? void 0 : e.target) == null ? void 0 : (_ref$className = _ref.className) == null ? void 0 : _ref$className.includes(treeTitleSlotClassNames.indicator))) {\n            handleSelection(e);\n          } else {\n            handleTitleClick(e);\n          }\n\n          _invoke(predefinedProps, 'onClick', e, titleProps);\n        }\n      };\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(TreeItem.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root,\n      id: id,\n      selected: selected\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : TreeTitle.create(title, {\n      defaultProps: function defaultProps() {\n        return getA11Props('title', Object.assign({\n          hasSubtree: hasSubtreeItem,\n          as: hasSubtreeItem ? 'span' : 'a',\n          level: level,\n          treeSize: treeSize,\n          expanded: expanded,\n          index: index,\n          selected: selected,\n          selectable: selectable\n        }, hasSubtreeItem && !selectableParent && {\n          selectable: false\n        }, selectableParent && {\n          indeterminate: indeterminate\n        }, {\n          selectableParent: selectableParent,\n          selectionIndicator: selectionIndicator\n        }));\n      },\n      render: renderItemTitle,\n      overrideProps: handleTitleOverrides\n    }));\n    var elementWithRef = contentRef ? /*#__PURE__*/React.createElement(Ref, {\n      innerRef: contentRef\n    }, element) : element;\n    setEnd();\n    return elementWithRef;\n  };\n\n  TreeItem.displayName = 'TreeItem';\n  TreeItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    contentRef: customPropTypes.ref,\n    id: PropTypes.string.isRequired,\n    index: PropTypes.number,\n    items: customPropTypes.collectionShorthand,\n    level: PropTypes.number,\n    onFocusFirstChild: PropTypes.func,\n    onFocusParent: PropTypes.func,\n    onTitleClick: PropTypes.func,\n    onSiblingsExpand: PropTypes.func,\n    expanded: PropTypes.bool,\n    parent: PropTypes.string,\n    renderItemTitle: PropTypes.func,\n    treeSize: PropTypes.number,\n    title: customPropTypes.itemShorthand,\n    selectionIndicator: customPropTypes.shorthandAllowingChildren,\n    selected: PropTypes.bool,\n    selectable: PropTypes.bool,\n    selectableParent: PropTypes.bool,\n    indeterminate: PropTypes.bool\n  });\n  TreeItem.defaultProps = {\n    accessibility: treeItemBehavior\n  };\n  TreeItem.handledProps = Object.keys(TreeItem.propTypes);\n  TreeItem.create = createShorthandFactory({\n    Component: TreeItem,\n    mappedProp: 'title'\n  });\n  return TreeItem;\n}();","map":{"version":3,"sources":["components/Tree/TreeItem.tsx"],"names":["treeItemClassName","TreeItem","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","children","className","contentRef","design","title","renderItemTitle","expanded","level","index","styles","variables","treeSize","selectionIndicator","selectableParent","selected","selectable","indeterminate","id","props","hasSubtreeItem","hasSubtree","onFocusParent","onSiblingsExpand","onFocusFirstChild","onTitleClick","React","getA11Props","useAccessibility","actionHandlers","performClick","e","handleTitleClick","focusParent","handleFocusParent","collapse","expand","focusFirstChild","handleFocusFirstChild","expandSiblings","handleSiblingsExpand","performSelection","handleSelection","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleTitleOverrides","onClick","treeTitleSlotClassNames","ElementType","getElementType","unhandledProps","useUnhandledProps","element","forElements","childrenExist","defaultProps","as","render","overrideProps","elementWithRef","content","customPropTypes","PropTypes","items","parent","bool","treeItemBehavior","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeItemBehavior, TreeItemBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Ref } from '@fluentui/react-component-ref';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { TreeTitle, TreeTitleProps, treeTitleSlotClassNames } from './TreeTitle';\nimport { BoxProps } from '../Box/Box';\nimport { hasSubtree, TreeContext } from './utils';\n\nexport interface TreeItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeItemBehaviorProps>;\n\n  /** Ref for the item DOM element. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /** Id needed to identify this item inside the Tree. */\n  id: string;\n\n  /** The index of the item among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Array of props for sub tree. */\n  items?: ShorthandCollection<TreeItemProps>;\n\n  /** Level of the tree/subtree that contains this item. */\n  level?: number;\n\n  /** Called when the item's first child is about to be focused. */\n  onFocusFirstChild?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when the item's parent is about to be focused. */\n  onFocusParent?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when a tree title is clicked. */\n  onTitleClick?: ComponentEventHandler<TreeItemProps>;\n\n  /** Called when the item's siblings are about to be expanded. */\n  onSiblingsExpand?: ComponentEventHandler<TreeItemProps>;\n\n  /** Whether or not the item is in the expanded state. Only makes sense if item has children items. If set to true, item is initialy expanded. */\n  expanded?: boolean;\n\n  /** The id of the parent tree item, if any. */\n  parent?: string;\n\n  /**\n   * A custom render iterator for rendering each tree title.\n   * The default component, props, and children are available for each tree title.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /** Size of the tree/subtree that contains this item. */\n  treeSize?: number;\n\n  /** Properties for TreeTitle. */\n  title?: ShorthandValue<TreeTitleProps>;\n\n  /** Whether or not the item can be selectable. */\n  selectable?: boolean;\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** Whether or not tree item is part of the selectable parent. */\n  selectableParent?: boolean;\n\n  indeterminate?: boolean;\n}\n\nexport type TreeItemStylesProps = Required<Pick<TreeItemProps, 'level'>>;\nexport const treeItemClassName = 'ui-tree__item';\n\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport const TreeItem: ComponentWithAs<'div', TreeItemProps> & FluentComponentStaticProps<TreeItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TreeItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    contentRef,\n    design,\n    title,\n    renderItemTitle,\n    expanded,\n    level,\n    index,\n    styles,\n    variables,\n    treeSize,\n    selectionIndicator,\n    selectableParent,\n    selected,\n    selectable,\n    indeterminate,\n    id,\n  } = props;\n\n  const hasSubtreeItem = hasSubtree(props);\n\n  const { onFocusParent, onSiblingsExpand, onFocusFirstChild, onTitleClick } = React.useContext(TreeContext);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleTitleClick(e);\n      },\n      focusParent: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleFocusParent(e);\n      },\n      collapse: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleTitleClick(e);\n      },\n      expand: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleTitleClick(e);\n      },\n      focusFirstChild: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleFocusFirstChild(e);\n      },\n      expandSiblings: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        handleSiblingsExpand(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleSelection(e);\n      },\n    },\n    debugName: TreeItem.displayName,\n    mapPropsToBehavior: () => ({\n      expanded,\n      level,\n      index,\n      hasSubtree: hasSubtreeItem,\n      treeSize,\n      selected,\n      selectable,\n      selectableParent,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TreeItemStylesProps>(TreeItem.displayName, {\n    className: treeItemClassName,\n    mapPropsToStyles: () => ({\n      level,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const handleSelection = e => {\n    onTitleClick(e, props, true);\n    _.invoke(props, 'onTitleClick', e, props);\n  };\n\n  const handleTitleClick = e => {\n    onTitleClick(e, props);\n    _.invoke(props, 'onTitleClick', e, props);\n  };\n  const handleFocusFirstChild = e => {\n    _.invoke(props, 'onFocusFirstChild', e, props);\n    onFocusFirstChild(props.id);\n  };\n  const handleFocusParent = e => {\n    _.invoke(props, 'onFocusParent', e, props);\n    onFocusParent(props.parent);\n  };\n  const handleSiblingsExpand = e => {\n    _.invoke(props, 'onSiblingsExpand', e, props);\n    onSiblingsExpand(e, props);\n  };\n  const handleTitleOverrides = (predefinedProps: TreeTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps) => {\n      if (selectable && (e?.target as HTMLElement)?.className?.includes(treeTitleSlotClassNames.indicator)) {\n        handleSelection(e);\n      } else {\n        handleTitleClick(e);\n      }\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeItem.handledProps, props);\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        id,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : TreeTitle.create(title, {\n            defaultProps: () =>\n              getA11Props('title', {\n                hasSubtree: hasSubtreeItem,\n                as: hasSubtreeItem ? 'span' : 'a',\n                level,\n                treeSize,\n                expanded,\n                index,\n                selected,\n                selectable,\n                ...(hasSubtreeItem && !selectableParent && { selectable: false }),\n                ...(selectableParent && { indeterminate }),\n                selectableParent,\n                selectionIndicator,\n              }),\n            render: renderItemTitle,\n            overrideProps: handleTitleOverrides,\n          })}\n    </ElementType>\n  );\n\n  const elementWithRef = contentRef ? <Ref innerRef={contentRef}>{element}</Ref> : element;\n  setEnd();\n\n  return elementWithRef;\n};\n\nTreeItem.displayName = 'TreeItem';\n\nTreeItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  contentRef: customPropTypes.ref,\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  level: PropTypes.number,\n  onFocusFirstChild: PropTypes.func,\n  onFocusParent: PropTypes.func,\n  onTitleClick: PropTypes.func,\n  onSiblingsExpand: PropTypes.func,\n  expanded: PropTypes.bool,\n  parent: PropTypes.string,\n  renderItemTitle: PropTypes.func,\n  treeSize: PropTypes.number,\n  title: customPropTypes.itemShorthand,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  indeterminate: PropTypes.bool,\n};\nTreeItem.defaultProps = {\n  accessibility: treeItemBehavior,\n};\nTreeItem.handledProps = Object.keys(TreeItem.propTypes) as any;\n\nTreeItem.create = createShorthandFactory({\n  Component: TreeItem,\n  mappedProp: 'title',\n});\n"]},"metadata":{},"sourceType":"module"}