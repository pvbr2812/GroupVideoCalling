{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { buttonBehavior } from '../Button/buttonBehavior';\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Adds attribute 'aria-haspopup=menu' to 'root' slot if 'hasMenu' property is set.\n * Adds attribute 'aria-haspopup=dialog' to 'root' slot if 'hasPopup' property is set.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper', when toolbar button has submenu and it is opened.\n * Triggers 'doNotNavigateNextToolbarItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.\n */\n\nexport var toolbarItemBehavior = function toolbarItemBehavior(props) {\n  var behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = Object.assign({}, behaviorData.attributes.root, {\n    'aria-haspopup': props.hasPopup ? 'dialog' : props.hasMenu ? 'menu' : undefined\n  });\n  behaviorData.keyActions.wrapper = Object.assign({}, behaviorData.keyActions.wrapper, {\n    performWrapperClick: {\n      keyCombinations: [{\n        keyCode: keyboardKey.Enter\n      }, {\n        keyCode: SpacebarKey\n      }]\n    },\n    closeMenuAndFocusTrigger: {\n      keyCombinations: props.hasMenu && props.menuOpen ? [{\n        keyCode: keyboardKey.Escape\n      }, {\n        keyCode: keyboardKey.Tab,\n        shiftKey: true\n      }] : null\n    },\n    doNotNavigateNextToolbarItem: {\n      keyCombinations: props.hasMenu && props.menuOpen ? [{\n        keyCode: keyboardKey.ArrowLeft\n      }, {\n        keyCode: keyboardKey.ArrowRight\n      }] : null\n    }\n  });\n  return behaviorData;\n};","map":{"version":3,"sources":["behaviors/Toolbar/toolbarItemBehavior.ts"],"names":["toolbarItemBehavior","behaviorData","buttonBehavior","props","undefined","performWrapperClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","closeMenuAndFocusTrigger","Escape","shiftKey","doNotNavigateNextToolbarItem","ArrowLeft","ArrowRight"],"mappings":"AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAGA,SAAA,cAAA,QAAA,0BAAA;AAEA;;;;;;;;;;;;AAWA,OAAO,IAAMA,mBAA4D,GAAG,SAA/DA,mBAA+D,CAAA,KAAA,EAAS;AACnF,MAAMC,YAAY,GAAGC,cAAc,CAAnC,KAAmC,CAAnC;AACAD,EAAAA,YAAY,CAAZA,UAAAA,CAAAA,IAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKA,YAAY,CAAZA,UAAAA,CADLA,IAAAA,EAAAA;AAEE,qBAAiBE,KAAK,CAALA,QAAAA,GAAAA,QAAAA,GAA4BA,KAAK,CAALA,OAAAA,GAAAA,MAAAA,GAAyBC;AAFxEH,GAAAA,CAAAA;AAIAA,EAAAA,YAAY,CAAZA,UAAAA,CAAAA,OAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKA,YAAY,CAAZA,UAAAA,CADLA,OAAAA,EAAAA;AAEEI,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,eAAe,EAAE,CAAC;AAAEC,QAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,OAAD,EAAiC;AAAEF,QAAAA,OAAO,EAAEG;AAAX,OAAjC;AADE,KAFvBT;AAKEU,IAAAA,wBAAwB,EAAE;AACxBL,MAAAA,eAAe,EACb,KAAK,CAAL,OAAA,IAAiBH,KAAK,CAAtB,QAAA,GACI,CAAC;AAAEI,QAAAA,OAAO,EAAEC,WAAW,CAACI;AAAvB,OAAD,EAAkC;AAAEL,QAAAA,OAAO,EAAEC,WAAW,CAAtB,GAAA;AAA4BK,QAAAA,QAAQ,EAAE;AAAtC,OAAlC,CADJ,GAEI;AAJkB,KAL5BZ;AAWEa,IAAAA,4BAA4B,EAAE;AAC5BR,MAAAA,eAAe,EACb,KAAK,CAAL,OAAA,IAAiBH,KAAK,CAAtB,QAAA,GACI,CAAC;AAAEI,QAAAA,OAAO,EAAEC,WAAW,CAACO;AAAvB,OAAD,EAAqC;AAAER,QAAAA,OAAO,EAAEC,WAAW,CAACQ;AAAvB,OAArC,CADJ,GAEI;AAJsB;AAXhCf,GAAAA,CAAAA;AAkBA,SAAA,YAAA;AAxBK,CAAA","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n\nimport { Accessibility } from '../../types';\nimport { buttonBehavior, ButtonBehaviorProps } from '../Button/buttonBehavior';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Adds attribute 'aria-haspopup=menu' to 'root' slot if 'hasMenu' property is set.\n * Adds attribute 'aria-haspopup=dialog' to 'root' slot if 'hasPopup' property is set.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper', when toolbar button has submenu and it is opened.\n * Triggers 'doNotNavigateNextToolbarItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.\n */\nexport const toolbarItemBehavior: Accessibility<ToolbarItemBehaviorProps> = props => {\n  const behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = {\n    ...behaviorData.attributes.root,\n    'aria-haspopup': props.hasPopup ? 'dialog' : props.hasMenu ? 'menu' : undefined,\n  };\n  behaviorData.keyActions.wrapper = {\n    ...behaviorData.keyActions.wrapper,\n    performWrapperClick: {\n      keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n    },\n    closeMenuAndFocusTrigger: {\n      keyCombinations:\n        props.hasMenu && props.menuOpen\n          ? [{ keyCode: keyboardKey.Escape }, { keyCode: keyboardKey.Tab, shiftKey: true }]\n          : null,\n    },\n    doNotNavigateNextToolbarItem: {\n      keyCombinations:\n        props.hasMenu && props.menuOpen\n          ? [{ keyCode: keyboardKey.ArrowLeft }, { keyCode: keyboardKey.ArrowRight }]\n          : null,\n    },\n  };\n  return behaviorData;\n};\n\nexport type ToolbarItemBehaviorProps = {\n  /** Indicated if toolbar item has a menu. */\n  hasMenu?: boolean;\n  /** If the menu is in open state. */\n  menuOpen?: boolean;\n  /** Indicated if toolbar item has a popup. */\n  hasPopup?: boolean;\n} & ButtonBehaviorProps;\n"]},"metadata":{},"sourceType":"module"}