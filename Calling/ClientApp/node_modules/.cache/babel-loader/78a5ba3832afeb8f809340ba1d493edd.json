{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @description\n * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.\n * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.\n * Adds 'tabIndex' as '-1' if the item is not a leaf.\n *\n * @specification\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\n\nexport var hierarchicalTreeItemBehavior = function hierarchicalTreeItemBehavior(props) {\n  var _ref;\n\n  return {\n    attributes: {\n      root: Object.assign({\n        role: 'none'\n      }, props.hasItems && (_ref = {\n        'aria-expanded': props.open,\n        tabIndex: -1\n      }, _ref[IS_FOCUSABLE_ATTRIBUTE] = true, _ref.role = 'treeitem', _ref))\n    },\n    keyActions: {\n      root: Object.assign({\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }, isSubtreeOpen(props) && {\n        receiveFocus: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        collapse: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        focusSubtree: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        }\n      }, !isSubtreeOpen(props) && {\n        expand: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        }\n      })\n    }\n  };\n};\n/** Checks if current tree item has a subtree and it is opened */\n\nvar isSubtreeOpen = function isSubtreeOpen(props) {\n  var hasItems = props.hasItems,\n      open = props.open;\n  return !!(hasItems && open);\n};","map":{"version":3,"sources":["behaviors/HierarchicalTree/hierarchicalTreeItemBehavior.ts"],"names":["hierarchicalTreeItemBehavior","attributes","root","role","props","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","isSubtreeOpen","receiveFocus","ArrowLeft","collapse","focusSubtree","ArrowRight","expand","hasItems","open"],"mappings":"AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAGA;;;;;;;;;;;;;;AAaA,OAAO,IAAMA,4BAA8E,GAAG,SAAjFA,4BAAiF,CAAA,KAAA,EAAK;AAAA,MAAA,IAAA;;AAAA,SAAK;AACtGC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AACFC,QAAAA,IAAI,EAAE;AADJ,OAAA,EAEE,KAAK,CAAL,QAAA,KAAA,IAAA,GAAA;AACF,yBAAiBC,KAAK,CADpB,IAAA;AAEFC,QAAAA,QAAQ,EAAE,CAAC;AAFT,OAAA,EAAA,IAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,EAAA,IAAA,CAAA,IAAA,GAAA,UAAA,EAFF,IAEE,CAFF;AADM,KAD0F;AAYtGC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AACFK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADZ,OAAA,EAIEC,aAAa,CAAbA,KAAa,CAAbA,IAAwB;AAC1BC,QAAAA,YAAY,EAAE;AACZN,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD;AADL,SADY;AAI1BC,QAAAA,QAAQ,EAAE;AACRR,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD;AADT,SAJgB;AAO1BE,QAAAA,YAAY,EAAE;AACZT,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACQ;AAAvB,WAAD;AADL;AAPY,OAJ1B,EAeE,CAACL,aAAa,CAAd,KAAc,CAAd,IAAyB;AAC3BM,QAAAA,MAAM,EAAE;AACNX,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACQ;AAAvB,WAAD;AADX;AADmB,OAf3B;AADM;AAZ0F,GAAL;AAA5F,CAAA;AA4CP;;AACA,IAAML,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAAuD;AAAA,MACnEO,QADmE,GAChDhB,KADgD,CAAA,QAAA;AAAA,MACzDiB,IADyD,GAChDjB,KADgD,CAAA,IAAA;AAE3E,SAAO,CAAC,EAAEgB,QAAQ,IAAlB,IAAQ,CAAR;AAFF,CAAA","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Adds role 'treeitem' to a non-leaf item and 'none' to a leaf item.\n * Adds 'aria-expanded' with a value based on the 'open' prop if item is not a leaf.\n * Adds 'tabIndex' as '-1' if the item is not a leaf.\n *\n * @specification\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'receiveFocus' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusSubtree' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const hierarchicalTreeItemBehavior: Accessibility<HierarchicalTreeItemBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      role: 'none',\n      ...(props.hasItems && {\n        'aria-expanded': props.open,\n        tabIndex: -1,\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        role: 'treeitem',\n      }),\n    },\n  },\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n      ...(isSubtreeOpen(props) && {\n        receiveFocus: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        collapse: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n        },\n        focusSubtree: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n      }),\n      ...(!isSubtreeOpen(props) && {\n        expand: {\n          keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n        },\n      }),\n    },\n  },\n});\n\nexport type HierarchicalTreeItemBehaviorProps = {\n  /** If item is a subtree, it contains items. */\n  hasItems?: boolean;\n  /** If item is a subtree, it indicates if it's open. */\n  open?: boolean;\n};\n\n/** Checks if current tree item has a subtree and it is opened */\nconst isSubtreeOpen = (props: HierarchicalTreeItemBehaviorProps): boolean => {\n  const { hasItems, open } = props;\n  return !!(hasItems && open);\n};\n"]},"metadata":{},"sourceType":"module"}