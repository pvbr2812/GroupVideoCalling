{"ast":null,"code":"import { formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, getOrGenerateIdFromShorthand } from '../../utils';\nimport { Text } from '../Text/Text';\nimport { Input } from '../Input/Input';\nimport { Box } from '../Box/Box';\nimport { getElementType, useUnhandledProps, useFluentContext, useTelemetry, useStyles, useAccessibility } from '@fluentui/react-bindings';\nexport var formFieldClassName = 'ui-form__field';\nexport var formFieldMessageClassName = 'ui-form__field__message';\n/**\n * A FormField represents a Form element containing a label and an input.\n */\n\nexport var FormField = /*#__PURE__*/function () {\n  var FormField = function FormField(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(FormField.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        control = props.control,\n        id = props.id,\n        label = props.label,\n        message = props.message,\n        name = props.name,\n        required = props.required,\n        type = props.type,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        inline = props.inline,\n        errorMessage = props.errorMessage;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(FormField.handledProps, props);\n    var messageId = React.useRef();\n    messageId.current = getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);\n    var labelId = React.useRef();\n    labelId.current = getOrGenerateIdFromShorthand('form-label-', id, labelId.current);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: FormField.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          hasErrorMessage: !!errorMessage,\n          messageId: messageId.current,\n          labelId: labelId.current\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(FormField.displayName, {\n      className: formFieldClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          type: type,\n          inline: inline,\n          required: required,\n          hasErrorMessage: !!errorMessage\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var labelElement = Text.create(label, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('label', {\n          as: 'label',\n          htmlFor: id,\n          id: labelId.current,\n          styles: resolvedStyles.label\n        });\n      }\n    });\n    var messageElement = Text.create(errorMessage || message, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('message', {\n          className: formFieldMessageClassName,\n          id: messageId.current,\n          styles: resolvedStyles.message\n        });\n      }\n    });\n    var controlElement = Box.create(control || {}, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('control', {\n          required: required,\n          name: name,\n          id: id,\n          type: type,\n          error: !!errorMessage || null,\n          styles: resolvedStyles.control\n        });\n      }\n    });\n\n    var shouldControlAppearFirst = function shouldControlAppearFirst() {\n      return type && (type === 'checkbox' || type === 'radio');\n    };\n\n    var content = /*#__PURE__*/React.createElement(React.Fragment, null, shouldControlAppearFirst() && controlElement, labelElement, !shouldControlAppearFirst() && controlElement, messageElement);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  };\n\n  FormField.displayName = 'FormField';\n  FormField.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    control: customPropTypes.shorthandAllowingChildren,\n    id: PropTypes.string,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    message: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.string,\n    errorMessage: customPropTypes.shorthandAllowingChildren\n  });\n  FormField.handledProps = Object.keys(FormField.propTypes);\n  FormField.defaultProps = {\n    accessibility: formFieldBehavior,\n    control: {\n      as: Input\n    }\n  };\n  FormField.create = createShorthandFactory({\n    Component: FormField,\n    mappedProp: 'label'\n  });\n  return FormField;\n}();","map":{"version":3,"sources":["components/Form/FormField.tsx"],"names":["formFieldClassName","formFieldMessageClassName","FormField","context","useFluentContext","setStart","setEnd","useTelemetry","children","control","id","label","message","name","required","type","className","design","styles","variables","inline","errorMessage","props","ElementType","getElementType","unhandledProps","useUnhandledProps","messageId","React","getOrGenerateIdFromShorthand","labelId","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","hasErrorMessage","current","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","labelElement","defaultProps","as","htmlFor","messageElement","controlElement","error","shouldControlAppearFirst","content","element","root","childrenExist","customPropTypes","PropTypes","shorthandAllowingChildren","Object","accessibility","Input","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Text, TextProps } from '../Text/Text';\nimport { Input } from '../Input/Input';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<TextProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<TextProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<TextProps>;\n}\n\nexport const formFieldClassName = 'ui-form__field';\nexport const formFieldMessageClassName = 'ui-form__field__message';\n\nexport type FormFieldStylesProps = Required<Pick<FormFieldProps, 'type' | 'inline' | 'required'>> & {\n  hasErrorMessage: boolean;\n};\n\n/**\n * A FormField represents a Form element containing a label and an input.\n */\nexport const FormField: ComponentWithAs<'div', FormFieldProps> & FluentComponentStaticProps<FormFieldProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormField.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    control,\n    id,\n    label,\n    message,\n    name,\n    required,\n    type,\n    className,\n    design,\n    styles,\n    variables,\n    inline,\n    errorMessage,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormField.handledProps, props);\n  const messageId = React.useRef<string>();\n  messageId.current = getOrGenerateIdFromShorthand('error-message-', message || errorMessage, messageId.current);\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('form-label-', id, labelId.current);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormField.displayName,\n    mapPropsToBehavior: () => ({\n      hasErrorMessage: !!errorMessage,\n      messageId: messageId.current,\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<FormFieldStylesProps>(FormField.displayName, {\n    className: formFieldClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n      hasErrorMessage: !!errorMessage,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11yProps('label', {\n        as: 'label',\n        htmlFor: id,\n        id: labelId.current,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const messageElement = Text.create(errorMessage || message, {\n    defaultProps: () =>\n      getA11yProps('message', {\n        className: formFieldMessageClassName,\n        id: messageId.current,\n        styles: resolvedStyles.message,\n      }),\n  });\n\n  const controlElement = Box.create(control || {}, {\n    defaultProps: () =>\n      getA11yProps('control', {\n        required,\n        name,\n        id,\n        type,\n        error: !!errorMessage || null,\n        styles: resolvedStyles.control,\n      }),\n  });\n\n  const shouldControlAppearFirst = () => {\n    return type && (type === 'checkbox' || type === 'radio');\n  };\n\n  const content = (\n    <>\n      {shouldControlAppearFirst() && controlElement}\n      {labelElement}\n      {!shouldControlAppearFirst() && controlElement}\n      {messageElement}\n    </>\n  );\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nFormField.displayName = 'FormField';\n\nFormField.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  control: customPropTypes.shorthandAllowingChildren,\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  message: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  errorMessage: customPropTypes.shorthandAllowingChildren,\n};\n\nFormField.handledProps = Object.keys(FormField.propTypes) as any;\n\nFormField.defaultProps = {\n  accessibility: formFieldBehavior,\n  control: { as: Input },\n};\n\nFormField.create = createShorthandFactory({ Component: FormField, mappedProp: 'label' });\n"]},"metadata":{},"sourceType":"module"}