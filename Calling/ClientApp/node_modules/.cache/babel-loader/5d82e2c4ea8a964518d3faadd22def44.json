{"ast":null,"code":"import { buttonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Button } from '../Button/Button';\nexport var attachmentActionClassName = 'ui-attachment__action';\n/**\n * An AttachmentAction provides a slot for actions in the Attachment.\n */\n\nexport var AttachmentAction = /*#__PURE__*/function () {\n  var AttachmentAction = compose(Button, {\n    className: attachmentActionClassName,\n    displayName: 'AttachmentAction',\n    overrideStyles: true,\n    shorthandConfig: {\n      mappedProp: 'content'\n    }\n  });\n  AttachmentAction.defaultProps = {\n    accessibility: buttonBehavior,\n    as: 'button'\n  };\n  AttachmentAction.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand'\n  }), {\n    disabled: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconPosition: PropTypes.oneOf(['before', 'after']),\n    loader: customPropTypes.itemShorthandWithoutJSX,\n    loading: PropTypes.bool,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool])\n  });\n  return AttachmentAction;\n}();","map":{"version":3,"sources":["components/Attachment/AttachmentAction.tsx"],"names":["attachmentActionClassName","AttachmentAction","compose","className","displayName","overrideStyles","shorthandConfig","mappedProp","accessibility","as","content","disabled","PropTypes","icon","customPropTypes","iconPosition","loader","loading","onClick","onFocus","primary","secondary"],"mappings":"AAAA,SAAA,cAAA,QAAA,yBAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,SAAA,OAAA,QAAA,0BAAA;AACA,SAAA,eAAA,QAAA,aAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AAqBA,OAAO,IAAMA,yBAAyB,GAA/B,uBAAA;AAEP;;;;AAGA,OAAO,IAAMC,gBAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAA,MAAA,EAM7B;AACRC,IAAAA,SAAS,EADD,yBAAA;AAERC,IAAAA,WAAW,EAFH,kBAAA;AAGRC,IAAAA,cAAc,EAHN,IAAA;AAKRC,IAAAA,eAAe,EAAE;AACfC,MAAAA,UAAU,EAAE;AADG;AALT,GAN6B,CAAhC;AAgBPN,EAAAA,gBAAgB,CAAhBA,YAAAA,GAAgC;AAC9BO,IAAAA,aAAa,EADiB,cAAA;AAE9BC,IAAAA,EAAE,EAAE;AAF0B,GAAhCR;AAIAA,EAAAA,gBAAgB,CAAhBA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BS,IAAAA,OAAO,EAAE;AADqB,GAA7B,CADLT,EAAAA;AAIEU,IAAAA,QAAQ,EAAEC,SAAS,CAJrBX,IAAAA;AAKEY,IAAAA,IAAI,EAAEC,eAAe,CALvBb,yBAAAA;AAMEc,IAAAA,YAAY,EAAEH,SAAS,CAATA,KAAAA,CAAgB,CAAA,QAAA,EANhCX,OAMgC,CAAhBW,CANhBX;AAOEe,IAAAA,MAAM,EAAEF,eAAe,CAPzBb,uBAAAA;AAQEgB,IAAAA,OAAO,EAAEL,SAAS,CARpBX,IAAAA;AASEiB,IAAAA,OAAO,EAAEN,SAAS,CATpBX,IAAAA;AAUEkB,IAAAA,OAAO,EAAEP,SAAS,CAVpBX,IAAAA;AAWEmB,IAAAA,OAAO,EAAEN,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,WAA0B,CAAzBA,CAAD,EAA0CF,SAAS,CAXpFX,IAWiC,CAAtBa,CAXXb;AAYEoB,IAAAA,SAAS,EAAEP,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,SAA0B,CAAzBA,CAAD,EAAwCF,SAAS,CAAvEE,IAAsB,CAAtBA;AAZbb,GAAAA,CAAAA;AApBO,SAAA,gBAAA;AAAA,CAAA,EAAA","sourcesContent":["import { buttonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Button, ButtonProps, ButtonStylesProps } from '../Button/Button';\n\nexport interface AttachmentActionOwnProps {}\nexport interface AttachmentActionProps extends AttachmentActionOwnProps, ButtonProps {\n  text?: never;\n  iconOnly?: never;\n  circular?: never;\n  size?: never;\n  fluid?: never;\n  inverted?: never;\n}\n\nexport type AttachmentActionStylesProps = ButtonStylesProps & {\n  text?: never;\n  iconOnly?: never;\n  circular?: never;\n  size?: never;\n  fluid?: never;\n  inverted?: never;\n};\n\nexport const attachmentActionClassName = 'ui-attachment__action';\n\n/**\n * An AttachmentAction provides a slot for actions in the Attachment.\n */\nexport const AttachmentAction = compose<\n  'button',\n  AttachmentActionOwnProps,\n  AttachmentActionStylesProps,\n  ButtonProps,\n  ButtonStylesProps\n>(Button, {\n  className: attachmentActionClassName,\n  displayName: 'AttachmentAction',\n  overrideStyles: true,\n\n  shorthandConfig: {\n    mappedProp: 'content',\n  },\n});\n\nAttachmentAction.defaultProps = {\n  accessibility: buttonBehavior,\n  as: 'button',\n};\nAttachmentAction.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['before', 'after']),\n  loader: customPropTypes.itemShorthandWithoutJSX,\n  loading: PropTypes.bool,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n};\n"]},"metadata":{},"sourceType":"module"}