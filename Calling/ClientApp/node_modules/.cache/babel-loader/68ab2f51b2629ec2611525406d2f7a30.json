{"ast":null,"code":"import isBase64 from './isBase64';\nvar formats = {\n  '.woff': 'woff',\n  '.woff2': 'woff2',\n  '.eot': 'embedded-opentype',\n  '.ttf': 'truetype',\n  '.otf': 'opentype',\n  '.svg': 'svg',\n  '.svgz': 'svg'\n};\nvar base64Formats = {\n  'image/svg+xml': 'svg',\n  'application/x-font-woff': 'woff',\n  'application/font-woff': 'woff',\n  'application/x-font-woff2': 'woff2',\n  'application/font-woff2': 'woff2',\n  'font/woff2': 'woff2',\n  'application/octet-stream': 'truetype',\n  'application/x-font-ttf': 'truetype',\n  'application/x-font-truetype': 'truetype',\n  'application/x-font-opentype': 'opentype',\n  'application/vnd.ms-fontobject': 'embedded-opentype',\n  'application/font-sfnt': 'sfnt'\n};\nexport default function getFontFormat(src) {\n  if (isBase64(src)) {\n    var mime = '';\n\n    for (var i = 5;; i++) {\n      // 'data:'.length === 5\n      var c = src.charAt(i);\n\n      if (c === ';' || c === ',') {\n        break;\n      }\n\n      mime += c;\n    }\n\n    var fmt = base64Formats[mime];\n\n    if (fmt) {\n      return fmt;\n    }\n\n    console.warn('A invalid base64 font was used. Please use one of the following mime type: ' + Object.keys(base64Formats).join(', ') + '.');\n  } else {\n    var extension = '';\n\n    for (var _i = src.length - 1;; _i--) {\n      var _c = src.charAt(_i);\n\n      if (_c === '.') {\n        extension = _c + extension;\n        break;\n      }\n\n      extension = _c + extension;\n    }\n\n    var _fmt = formats[extension];\n\n    if (_fmt) {\n      return _fmt;\n    }\n\n    console.warn('A invalid font-format was used in \"' + src + '\". Use one of these: ' + Object.keys(formats).join(', ') + '.');\n  }\n\n  return '';\n}","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/node_modules/fela/es/getFontFormat.js"],"names":["isBase64","formats","base64Formats","getFontFormat","src","mime","i","c","charAt","fmt","console","warn","Object","keys","join","extension","_i","length","_c","_fmt"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAIC,OAAO,GAAG;AACZ,WAAS,MADG;AAEZ,YAAU,OAFE;AAGZ,UAAQ,mBAHI;AAIZ,UAAQ,UAJI;AAKZ,UAAQ,UALI;AAMZ,UAAQ,KANI;AAOZ,WAAS;AAPG,CAAd;AAUA,IAAIC,aAAa,GAAG;AAClB,mBAAiB,KADC;AAElB,6BAA2B,MAFT;AAGlB,2BAAyB,MAHP;AAIlB,8BAA4B,OAJV;AAKlB,4BAA0B,OALR;AAMlB,gBAAc,OANI;AAOlB,8BAA4B,UAPV;AAQlB,4BAA0B,UARR;AASlB,iCAA+B,UATb;AAUlB,iCAA+B,UAVb;AAWlB,mCAAiC,mBAXf;AAYlB,2BAAyB;AAZP,CAApB;AAeA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACzC,MAAIJ,QAAQ,CAACI,GAAD,CAAZ,EAAmB;AACjB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,GAAiBA,CAAC,EAAlB,EAAsB;AACpB;AACA,UAAIC,CAAC,GAAGH,GAAG,CAACI,MAAJ,CAAWF,CAAX,CAAR;;AAEA,UAAIC,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAAvB,EAA4B;AAC1B;AACD;;AAEDF,MAAAA,IAAI,IAAIE,CAAR;AACD;;AAED,QAAIE,GAAG,GAAGP,aAAa,CAACG,IAAD,CAAvB;;AACA,QAAII,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;;AAEDC,IAAAA,OAAO,CAACC,IAAR,CAAa,gFAAgFC,MAAM,CAACC,IAAP,CAAYX,aAAZ,EAA2BY,IAA3B,CAAgC,IAAhC,CAAhF,GAAwH,GAArI;AACD,GAnBD,MAmBO;AACL,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,EAAE,GAAGZ,GAAG,CAACa,MAAJ,GAAa,CAA3B,GAA+BD,EAAE,EAAjC,EAAqC;AACnC,UAAIE,EAAE,GAAGd,GAAG,CAACI,MAAJ,CAAWQ,EAAX,CAAT;;AAEA,UAAIE,EAAE,KAAK,GAAX,EAAgB;AACdH,QAAAA,SAAS,GAAGG,EAAE,GAAGH,SAAjB;AACA;AACD;;AAEDA,MAAAA,SAAS,GAAGG,EAAE,GAAGH,SAAjB;AACD;;AAED,QAAII,IAAI,GAAGlB,OAAO,CAACc,SAAD,CAAlB;;AACA,QAAII,IAAJ,EAAU;AACR,aAAOA,IAAP;AACD;;AAEDT,IAAAA,OAAO,CAACC,IAAR,CAAa,wCAAwCP,GAAxC,GAA8C,uBAA9C,GAAwEQ,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,IAArB,CAA0B,IAA1B,CAAxE,GAA0G,GAAvH;AACD;;AACD,SAAO,EAAP;AACD","sourcesContent":["import isBase64 from './isBase64';\n\nvar formats = {\n  '.woff': 'woff',\n  '.woff2': 'woff2',\n  '.eot': 'embedded-opentype',\n  '.ttf': 'truetype',\n  '.otf': 'opentype',\n  '.svg': 'svg',\n  '.svgz': 'svg'\n};\n\nvar base64Formats = {\n  'image/svg+xml': 'svg',\n  'application/x-font-woff': 'woff',\n  'application/font-woff': 'woff',\n  'application/x-font-woff2': 'woff2',\n  'application/font-woff2': 'woff2',\n  'font/woff2': 'woff2',\n  'application/octet-stream': 'truetype',\n  'application/x-font-ttf': 'truetype',\n  'application/x-font-truetype': 'truetype',\n  'application/x-font-opentype': 'opentype',\n  'application/vnd.ms-fontobject': 'embedded-opentype',\n  'application/font-sfnt': 'sfnt'\n};\n\nexport default function getFontFormat(src) {\n  if (isBase64(src)) {\n    var mime = '';\n    for (var i = 5;; i++) {\n      // 'data:'.length === 5\n      var c = src.charAt(i);\n\n      if (c === ';' || c === ',') {\n        break;\n      }\n\n      mime += c;\n    }\n\n    var fmt = base64Formats[mime];\n    if (fmt) {\n      return fmt;\n    }\n\n    console.warn('A invalid base64 font was used. Please use one of the following mime type: ' + Object.keys(base64Formats).join(', ') + '.');\n  } else {\n    var extension = '';\n    for (var _i = src.length - 1;; _i--) {\n      var _c = src.charAt(_i);\n\n      if (_c === '.') {\n        extension = _c + extension;\n        break;\n      }\n\n      extension = _c + extension;\n    }\n\n    var _fmt = formats[extension];\n    if (_fmt) {\n      return _fmt;\n    }\n\n    console.warn('A invalid font-format was used in \"' + src + '\". Use one of these: ' + Object.keys(formats).join(', ') + '.');\n  }\n  return '';\n}"]},"metadata":{},"sourceType":"module"}