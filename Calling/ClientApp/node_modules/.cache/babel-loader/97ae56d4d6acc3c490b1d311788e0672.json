{"ast":null,"code":"import _includes from \"lodash/includes\";\nimport _forEach from \"lodash/forEach\";\nexport var htmlImageProps = ['alt', 'height', 'src', 'srcSet', 'width'];\nexport var htmlInputAttrs = [// REACT\n'selected', 'defaultValue', 'defaultChecked', // LIMITED HTML PROPS\n'accept', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFocus', 'checked', 'disabled', 'form', 'id', 'list', 'max', 'maxLength', 'min', 'minLength', 'multiple', 'name', 'pattern', 'placeholder', 'readOnly', 'required', 'step', 'type', 'value'];\nexport var htmlInputEvents = [// EVENTS\n// keyboard\n'onKeyDown', 'onKeyPress', 'onKeyUp', // focus\n'onFocus', 'onBlur', // form\n'onChange', 'onInput', // mouse\n'onClick', 'onContextMenu', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', // selection\n'onSelect', // touch\n'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart'];\nexport var htmlInputProps = [].concat(htmlInputAttrs, htmlInputEvents);\n/**\n * Returns props of html input element and restProps.\n * @param props - A ReactElement props object\n * @param options - Options for\n * @returns - 2-element array. First element is props of HTML input element and second element is the other props.\n */\n\nexport var partitionHTMLProps = function partitionHTMLProps(props, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$htmlProps = _options.htmlProps,\n      htmlProps = _options$htmlProps === void 0 ? htmlInputProps : _options$htmlProps,\n      _options$includeAria = _options.includeAria,\n      includeAria = _options$includeAria === void 0 ? true : _options$includeAria;\n  var inputProps = {};\n  var restProps = {};\n\n  _forEach(props, function (val, prop) {\n    var possibleAria = includeAria && (/^aria-.*$/.test(prop) || prop === 'role');\n    var target = _includes(htmlProps, prop) || possibleAria ? inputProps : restProps;\n    target[prop] = val;\n  });\n\n  return [inputProps, restProps];\n};","map":{"version":3,"sources":["utils/htmlPropsUtils.tsx"],"names":["htmlImageProps","htmlInputAttrs","htmlInputEvents","htmlInputProps","partitionHTMLProps","options","htmlProps","includeAria","inputProps","restProps","possibleAria","prop","target"],"mappings":";;AAEA,OAAO,IAAMA,cAAc,GAAG,CAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,QAAA,EAAvB,OAAuB,CAAvB;AA6EP,OAAO,IAAMC,cAAgC,GAAG,CAC9C;AAD8C,UAAA,EAAA,cAAA,EAAA,gBAAA,EAM9C;AAN8C,QAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,aAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,WAAA,EAAA,KAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAzC,OAAyC,CAAzC;AAkCP,OAAO,IAAMC,eAAkC,GAAG,CAChD;AACA;AAFgD,WAAA,EAAA,YAAA,EAAA,SAAA,EAOhD;AAPgD,SAAA,EAAA,QAAA,EAWhD;AAXgD,UAAA,EAAA,SAAA,EAehD;AAfgD,SAAA,EAAA,eAAA,EAAA,QAAA,EAAA,WAAA,EAAA,aAAA,EAAA,YAAA,EAAA,aAAA,EAAA,YAAA,EAAA,aAAA,EAAA,QAAA,EAAA,aAAA,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAAA,YAAA,EAAA,aAAA,EAAA,WAAA,EAkChD;AAlCgD,UAAA,EAqChD;AArCgD,eAAA,EAAA,YAAA,EAAA,aAAA,EAA3C,cAA2C,CAA3C;AA4CP,OAAO,IAAMC,cAAgC,GAAA,GAAA,MAAA,CAAA,cAAA,EAAtC,eAAsC,CAAtC;AASP;;;;;;;AAMA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAA,OAAA,EAGqB;AAAA,MADrDC,OACqD,KAAA,KAAA,CAAA,EAAA;AADrDA,IAAAA,OACqD,GADhB,EAArCA;AACqD;;AAAA,MAAA,QAAA,GAAA,OAAA;AAAA,MAAA,kBAAA,GAAA,QAAA,CAAA,SAAA;AAAA,MAC7CC,SAD6C,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,cAAA,GAAA,kBAAA;AAAA,MAAA,oBAAA,GAAA,QAAA,CAAA,WAAA;AAAA,MACjBC,WADiB,GAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,oBAAA;AAErD,MAAMC,UAAU,GAAhB,EAAA;AACA,MAAMC,SAAS,GAAf,EAAA;;AAEA,EAAA,QAAA,CAAA,KAAA,EAAiB,UAAA,GAAA,EAAA,IAAA,EAAe;AAC9B,QAAMC,YAAY,GAAGH,WAAW,KAAK,YAAA,IAAA,CAAA,IAAA,KAA0BI,IAAI,KAAnE,MAAgC,CAAhC;AACA,QAAMC,MAAM,GAAG,SAAA,CAAA,SAAA,EAAA,IAAA,CAAA,IAAA,YAAA,GAAA,UAAA,GAAf,SAAA;AACAA,IAAAA,MAAM,CAANA,IAAM,CAANA,GAAAA,GAAAA;AAHF,GAAA,CAAA;;AAMA,SAAO,CAAA,UAAA,EAAP,SAAO,CAAP;AAdK,CAAA","sourcesContent":["import * as _ from 'lodash';\n\nexport const htmlImageProps = ['alt', 'height', 'src', 'srcSet', 'width'];\n\nexport type HtmlInputEvents =\n  // keyboard\n  | 'onKeyDown'\n  | 'onKeyPress'\n  | 'onKeyUp'\n  | 'onFocus'\n  | 'onBlur'\n\n  // form\n  | 'onChange'\n  | 'onInput'\n\n  // mouse\n  | 'onClick'\n  | 'onContextMenu'\n  | 'onDrag'\n  | 'onDragEnd'\n  | 'onDragEnter'\n  | 'onDragExit'\n  | 'onDragLeave'\n  | 'onDragOver'\n  | 'onDragStart'\n  | 'onDrop'\n  | 'onMouseDown'\n  | 'onMouseEnter'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onMouseOut'\n  | 'onMouseOver'\n  | 'onMouseUp'\n\n  // selection\n  | 'onSelect'\n\n  // touch\n  | 'onTouchCancel'\n  | 'onTouchEnd'\n  | 'onTouchMove'\n  | 'onTouchStart';\n\nexport type HtmlInputAttrs =\n  // REACT |\n  | 'selected'\n  | 'defaultValue'\n  | 'defaultChecked'\n\n  // LIMITED HTML PROPS\n  | 'accept'\n  | 'autoCapitalize'\n  | 'autoComplete'\n  | 'autoCorrect'\n  | 'autoFocus'\n  | 'checked'\n  | 'disabled'\n  | 'form'\n  | 'id'\n  | 'list'\n  | 'max'\n  | 'maxLength'\n  | 'min'\n  | 'minLength'\n  | 'multiple'\n  | 'name'\n  | 'pattern'\n  | 'placeholder'\n  | 'readOnly'\n  | 'required'\n  | 'step'\n  | 'type'\n  | 'value';\n\nexport type SupportedIntrinsicInputProps = {\n  [K in HtmlInputProps]?: K extends keyof JSX.IntrinsicElements['input'] ? JSX.IntrinsicElements['input'][K] : any;\n};\n\nexport const htmlInputAttrs: HtmlInputAttrs[] = [\n  // REACT\n  'selected',\n  'defaultValue',\n  'defaultChecked',\n\n  // LIMITED HTML PROPS\n  'accept',\n  'autoCapitalize',\n  'autoComplete',\n  'autoCorrect',\n  'autoFocus',\n  'checked',\n  'disabled',\n  'form',\n  'id',\n  'list',\n  'max',\n  'maxLength',\n  'min',\n  'minLength',\n  'multiple',\n  'name',\n  'pattern',\n  'placeholder',\n  'readOnly',\n  'required',\n  'step',\n  'type',\n  'value',\n];\n\nexport type HtmlInputProps = HtmlInputAttrs | HtmlInputEvents;\n\nexport const htmlInputEvents: HtmlInputEvents[] = [\n  // EVENTS\n  // keyboard\n  'onKeyDown',\n  'onKeyPress',\n  'onKeyUp',\n\n  // focus\n  'onFocus',\n  'onBlur',\n\n  // form\n  'onChange',\n  'onInput',\n\n  // mouse\n  'onClick',\n  'onContextMenu',\n  'onDrag',\n  'onDragEnd',\n  'onDragEnter',\n  'onDragExit',\n  'onDragLeave',\n  'onDragOver',\n  'onDragStart',\n  'onDrop',\n  'onMouseDown',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseOut',\n  'onMouseOver',\n  'onMouseUp',\n\n  // selection\n  'onSelect',\n\n  // touch\n  'onTouchCancel',\n  'onTouchEnd',\n  'onTouchMove',\n  'onTouchStart',\n];\n\nexport const htmlInputProps: HtmlInputProps[] = [...htmlInputAttrs, ...htmlInputEvents];\n\nexport interface PartitionHTMLPropsOptions {\n  /** An array of html input props */\n  htmlProps?: HtmlInputProps[];\n  /** Includes all input props that starts with \"aria-\" */\n  includeAria?: boolean;\n}\n\n/**\n * Returns props of html input element and restProps.\n * @param props - A ReactElement props object\n * @param options - Options for\n * @returns - 2-element array. First element is props of HTML input element and second element is the other props.\n */\nexport const partitionHTMLProps = (\n  props: { [key: string]: any },\n  options: PartitionHTMLPropsOptions = {},\n): [{ [key: string]: any }, { [key: string]: any }] => {\n  const { htmlProps = htmlInputProps, includeAria = true } = options;\n  const inputProps = {};\n  const restProps = {};\n\n  _.forEach(props, (val, prop) => {\n    const possibleAria = includeAria && (/^aria-.*$/.test(prop) || prop === 'role');\n    const target = _.includes(htmlProps, prop) || possibleAria ? inputProps : restProps;\n    target[prop] = val;\n  });\n\n  return [inputProps, restProps];\n};\n"]},"metadata":{},"sourceType":"module"}