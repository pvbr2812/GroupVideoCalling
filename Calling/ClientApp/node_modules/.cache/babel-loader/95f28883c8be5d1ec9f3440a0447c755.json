{"ast":null,"code":"import { getKeyDownHandlers } from './getKeyDownHandlers';\nvar emptyBehavior = {\n  attributes: {},\n  keyHandlers: {}\n};\nexport var getAccessibility = function getAccessibility(displayName, behavior, behaviorProps, isRtlEnabled, actionHandlers) {\n  if (behavior === null || behavior === undefined) {\n    return emptyBehavior;\n  }\n\n  var definition = behavior(behaviorProps);\n  var keyHandlers = actionHandlers && definition.keyActions ? getKeyDownHandlers(actionHandlers, definition.keyActions, isRtlEnabled) : {};\n\n  if (definition.focusZone) {\n    definition.focusZone.props = Object.assign({\n      // maintain behavior of focus zone in v7 behaviors\n      preventFocusRestoration: true\n    }, definition.focusZone.props);\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // For the non-production builds we enable the runtime accessibility attributes validator.\n    // We're adding the data-aa-class attribute which is being consumed by the validator, the\n    // schema is located in @fluentui/ability-attributes package.\n    if (definition.attributes) {\n      Object.keys(definition.attributes).forEach(function (slotName) {\n        var validatorName = definition.attributes[slotName]['data-aa-class'] || \"\" + displayName + (slotName === 'root' ? '' : \"__\" + slotName);\n\n        if (!definition.attributes[slotName]) {\n          definition.attributes[slotName] = {};\n        }\n\n        definition.attributes[slotName]['data-aa-class'] = validatorName;\n      });\n    }\n  }\n\n  return Object.assign({}, emptyBehavior, definition, {\n    keyHandlers: keyHandlers\n  });\n};","map":{"version":3,"sources":["accessibility/getAccessibility.ts"],"names":["emptyBehavior","attributes","keyHandlers","getAccessibility","behavior","definition","actionHandlers","getKeyDownHandlers","preventFocusRestoration","process","Object","validatorName","slotName"],"mappings":"AAOA,SAAA,kBAAA,QAAA,sBAAA;AAGA,IAAMA,aAAyC,GAAG;AAChDC,EAAAA,UAAU,EADsC,EAAA;AAEhDC,EAAAA,WAAW,EAAE;AAFmC,CAAlD;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,WAAA,EAAA,QAAA,EAAA,aAAA,EAAA,YAAA,EAAA,cAAA,EAMC;AAC/B,MAAIC,QAAQ,KAARA,IAAAA,IAAqBA,QAAQ,KAAjC,SAAA,EAAiD;AAC/C,WAAA,aAAA;AACD;;AAED,MAAMC,UAAmC,GAAGD,QAAQ,CAApD,aAAoD,CAApD;AACA,MAAMF,WAAW,GACfI,cAAc,IAAID,UAAU,CAA5BC,UAAAA,GACIC,kBAAkB,CAAA,cAAA,EAAiBF,UAAU,CAA3B,UAAA,EADtBC,YACsB,CADtBA,GADF,EAAA;;AAKA,MAAID,UAAU,CAAd,SAAA,EAA0B;AACxBA,IAAAA,UAAU,CAAVA,SAAAA,CAAAA,KAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACE;AACAG,MAAAA,uBAAuB,EAAE;AAF3BH,KAAAA,EAGKA,UAAU,CAAVA,SAAAA,CAHLA,KAAAA,CAAAA;AAKD;;AAED,MAAII,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC;AACA;AACA;AACA,QAAIJ,UAAU,CAAd,UAAA,EAA2B;AACzBK,MAAAA,MAAM,CAANA,IAAAA,CAAYL,UAAU,CAAtBK,UAAAA,EAAAA,OAAAA,CAA2C,UAAA,QAAA,EAAY;AACrD,YAAMC,aAAa,GAChBN,UAAU,CAAX,UAACA,CAAD,QAACA,EAAD,eAACA,KAAD,KAAA,WAAA,IACiBO,QAAQ,KAARA,MAAAA,GAAAA,EAAAA,GAAAA,OAFnB,QACE,CADF;;AAIA,YAAI,CAAEP,UAAU,CAAX,UAACA,CAAN,QAAMA,CAAN,EAAyE;AACtEA,UAAAA,UAAU,CAAX,UAACA,CAAD,QAACA,IAAD,EAACA;AACF;;AAEAA,QAAAA,UAAU,CAAX,UAACA,CAAD,QAACA,EAAD,eAACA,IAAD,aAACA;AATHK,OAAAA;AAWD;AACF;;AAED,SAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAA,EAAA,UAAA,EAAA;AAGER,IAAAA,WAAW,EAAXA;AAHF,GAAA,CAAA;AA5CK,CAAA","sourcesContent":["import {\n  Accessibility,\n  AccessibilityAttributes,\n  AccessibilityAttributesBySlot,\n  AccessibilityDefinition,\n} from '@fluentui/accessibility';\n\nimport { getKeyDownHandlers } from './getKeyDownHandlers';\nimport { AccessibilityActionHandlers, ReactAccessibilityBehavior } from './types';\n\nconst emptyBehavior: ReactAccessibilityBehavior = {\n  attributes: {},\n  keyHandlers: {},\n};\n\nexport const getAccessibility = <Props extends Record<string, any>>(\n  displayName: string,\n  behavior: Accessibility<Props>,\n  behaviorProps: Props,\n  isRtlEnabled: boolean,\n  actionHandlers?: AccessibilityActionHandlers,\n): ReactAccessibilityBehavior => {\n  if (behavior === null || behavior === undefined) {\n    return emptyBehavior;\n  }\n\n  const definition: AccessibilityDefinition = behavior(behaviorProps);\n  const keyHandlers =\n    actionHandlers && definition.keyActions\n      ? getKeyDownHandlers(actionHandlers, definition.keyActions, isRtlEnabled)\n      : {};\n\n  if (definition.focusZone) {\n    definition.focusZone.props = {\n      // maintain behavior of focus zone in v7 behaviors\n      preventFocusRestoration: true,\n      ...definition.focusZone.props,\n    };\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // For the non-production builds we enable the runtime accessibility attributes validator.\n    // We're adding the data-aa-class attribute which is being consumed by the validator, the\n    // schema is located in @fluentui/ability-attributes package.\n    if (definition.attributes) {\n      Object.keys(definition.attributes).forEach(slotName => {\n        const validatorName =\n          (definition.attributes as AccessibilityAttributesBySlot)[slotName]['data-aa-class'] ||\n          `${displayName}${slotName === 'root' ? '' : `__${slotName}`}`;\n\n        if (!(definition.attributes as AccessibilityAttributesBySlot)[slotName]) {\n          (definition.attributes as AccessibilityAttributesBySlot)[slotName] = {} as AccessibilityAttributes;\n        }\n\n        (definition.attributes as AccessibilityAttributesBySlot)[slotName]['data-aa-class'] = validatorName;\n      });\n    }\n  }\n\n  return {\n    ...emptyBehavior,\n    ...definition,\n    keyHandlers,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}