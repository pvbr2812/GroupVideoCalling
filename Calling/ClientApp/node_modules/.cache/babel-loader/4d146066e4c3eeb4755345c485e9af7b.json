{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter } from \"tslib\";\nimport { encodeUTF8, encodeBase64, encodeUTF8fromBase64 } from \"./encodeUtils.browser\";\nconst globalRef = globalThis;\n\nconst getCrypto = () => {\n  if (!globalRef) {\n    throw new Error(\"Could not find global\");\n  }\n\n  if (!globalRef.crypto || !globalRef.crypto.subtle) {\n    throw new Error(\"Browser does not support cryptography functions\");\n  }\n\n  return globalRef.crypto.subtle;\n};\n\nexport const shaHash = content => __awaiter(void 0, void 0, void 0, function* () {\n  const data = encodeUTF8(content);\n  const hash = yield getCrypto().digest(\"SHA-256\", data);\n  return encodeBase64(hash);\n});\nexport const shaHMAC = (secret, content) => __awaiter(void 0, void 0, void 0, function* () {\n  const importParams = {\n    name: \"HMAC\",\n    hash: {\n      name: \"SHA-256\"\n    }\n  };\n  const encodedMessage = encodeUTF8(content);\n  const encodedKey = encodeUTF8fromBase64(secret);\n  const crypto = getCrypto();\n  const cryptoKey = yield crypto.importKey(\"raw\", encodedKey, importParams, false, [\"sign\"]);\n  const signature = yield crypto.sign(importParams, cryptoKey, encodedMessage);\n  return encodeBase64(signature);\n});","map":{"version":3,"sources":["../../../src/credential/cryptoUtils.browser.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAAS,UAAT,EAAqB,YAArB,EAAmC,oBAAnC,QAA+D,uBAA/D;AAEA,MAAM,SAAS,GAAQ,UAAvB;;AAEA,MAAM,SAAS,GAAG,MAAmB;AACnC,MAAI,CAAC,SAAL,EAAgB;AACd,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,MAAI,CAAC,SAAS,CAAC,MAAX,IAAqB,CAAC,SAAS,CAAC,MAAV,CAAiB,MAA3C,EAAmD;AACjD,UAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,SAAO,SAAS,CAAC,MAAV,CAAiB,MAAxB;AACD,CAVD;;AAYA,OAAO,MAAM,OAAO,GAAU,OAAP,IAA2C,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChE,QAAM,IAAI,GAAG,UAAU,CAAC,OAAD,CAAvB;AACA,QAAM,IAAI,GAAG,MAAM,SAAS,GAAG,MAAZ,CAAmB,SAAnB,EAA8B,IAA9B,CAAnB;AACA,SAAO,YAAY,CAAC,IAAD,CAAnB;AACD,CAJiE,CAA3D;AAMP,OAAO,MAAM,OAAO,GAAG,CAAO,MAAP,EAAuB,OAAvB,KAA2D,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChF,QAAM,YAAY,GAAqB;AAAE,IAAA,IAAI,EAAE,MAAR;AAAgB,IAAA,IAAI,EAAE;AAAE,MAAA,IAAI,EAAE;AAAR;AAAtB,GAAvC;AACA,QAAM,cAAc,GAAG,UAAU,CAAC,OAAD,CAAjC;AACA,QAAM,UAAU,GAAG,oBAAoB,CAAC,MAAD,CAAvC;AACA,QAAM,MAAM,GAAG,SAAS,EAAxB;AACA,QAAM,SAAS,GAAG,MAAM,MAAM,CAAC,SAAP,CAAiB,KAAjB,EAAwB,UAAxB,EAAoC,YAApC,EAAkD,KAAlD,EAAyD,CAAC,MAAD,CAAzD,CAAxB;AACA,QAAM,SAAS,GAAG,MAAM,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,SAA1B,EAAqC,cAArC,CAAxB;AACA,SAAO,YAAY,CAAC,SAAD,CAAnB;AACD,CARiF,CAA3E","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { encodeUTF8, encodeBase64, encodeUTF8fromBase64 } from \"./encodeUtils.browser\";\n\nconst globalRef: any = globalThis;\n\nconst getCrypto = (): SubtleCrypto => {\n  if (!globalRef) {\n    throw new Error(\"Could not find global\");\n  }\n\n  if (!globalRef.crypto || !globalRef.crypto.subtle) {\n    throw new Error(\"Browser does not support cryptography functions\");\n  }\n\n  return globalRef.crypto.subtle;\n};\n\nexport const shaHash = async (content: string): Promise<string> => {\n  const data = encodeUTF8(content);\n  const hash = await getCrypto().digest(\"SHA-256\", data);\n  return encodeBase64(hash);\n};\n\nexport const shaHMAC = async (secret: string, content: string): Promise<string> => {\n  const importParams: HmacImportParams = { name: \"HMAC\", hash: { name: \"SHA-256\" } };\n  const encodedMessage = encodeUTF8(content);\n  const encodedKey = encodeUTF8fromBase64(secret);\n  const crypto = getCrypto();\n  const cryptoKey = await crypto.importKey(\"raw\", encodedKey, importParams, false, [\"sign\"]);\n  const signature = await crypto.sign(importParams, cryptoKey, encodedMessage);\n  return encodeBase64(signature);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}