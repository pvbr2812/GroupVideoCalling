{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { tabBehavior } from '@fluentui/accessibility';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { useTelemetry, getElementType, useFluentContext, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var carouselNavigationItemClassName = 'ui-carousel__navigationitem';\nexport var carouselNavigationItemSlotClassNames = {\n  indicator: carouselNavigationItemClassName + \"__indicator\",\n  content: carouselNavigationItemClassName + \"__content\"\n};\n/**\n * A CarouselItem is an actionable item within a Carousel.\n */\n\nexport var CarouselNavigationItem = /*#__PURE__*/function () {\n  var CarouselNavigationItem = function CarouselNavigationItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(CarouselNavigationItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        thumbnails = props.thumbnails,\n        vertical = props.vertical,\n        active = props.active,\n        content = props.content,\n        iconOnly = props.iconOnly,\n        primary = props.primary,\n        indicator = props.indicator,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(CarouselNavigationItem.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: CarouselNavigationItem.displayName,\n      actionHandlers: {\n        performClick: function performClick(event) {\n          return !event.defaultPrevented && handleClick(event);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          active: active\n        };\n      }\n    });\n\n    var _useStyles = useStyles(CarouselNavigationItem.displayName, {\n      className: carouselNavigationItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          thumbnails: thumbnails,\n          vertical: vertical,\n          active: active,\n          hasContent: !!content,\n          iconOnly: iconOnly,\n          primary: primary,\n          hasIndicator: !!indicator\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var renderContent = function renderContent() {\n      return content ? Box.create(content, {\n        defaultProps: function defaultProps() {\n          return {\n            as: 'span',\n            className: carouselNavigationItemSlotClassNames.content,\n            styles: resolvedStyles.content\n          };\n        }\n      }) : Box.create(indicator, {\n        defaultProps: function defaultProps() {\n          return {\n            className: carouselNavigationItemSlotClassNames.indicator,\n            styles: resolvedStyles.indicator\n          };\n        }\n      });\n    };\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var handleBlur = function handleBlur(e) {\n      _invoke(props, 'onBlur', e, props);\n    };\n\n    var handleFocus = function handleFocus(e) {\n      _invoke(props, 'onFocus', e, props);\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onClick: handleClick\n    }, unhandledProps)), rtlTextContainer.getAttributes({\n      forElements: [children]\n    })), childrenExist(children) ? children : renderContent());\n    setEnd();\n    return element;\n  };\n\n  CarouselNavigationItem.displayName = 'CarouselNavigationItem';\n  CarouselNavigationItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    active: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    iconOnly: PropTypes.bool,\n    index: PropTypes.number,\n    onClick: PropTypes.func,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    vertical: PropTypes.bool,\n    thumbnails: PropTypes.bool\n  });\n  CarouselNavigationItem.handledProps = Object.keys(CarouselNavigationItem.propTypes);\n  CarouselNavigationItem.defaultProps = {\n    accessibility: tabBehavior,\n    as: 'li',\n    indicator: {}\n  };\n  CarouselNavigationItem.create = createShorthandFactory({\n    Component: CarouselNavigationItem,\n    mappedArrayProp: 'content'\n  });\n  return CarouselNavigationItem;\n}();","map":{"version":3,"sources":["components/Carousel/CarouselNavigationItem.tsx"],"names":["carouselNavigationItemClassName","carouselNavigationItemSlotClassNames","indicator","content","CarouselNavigationItem","context","useFluentContext","setStart","setEnd","useTelemetry","children","thumbnails","vertical","active","iconOnly","primary","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","event","handleClick","mapPropsToBehavior","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","hasIndicator","mapPropsToInlineStyles","rtl","renderContent","defaultProps","as","handleBlur","handleFocus","element","onBlur","onFocus","onClick","forElements","childrenExist","commonPropTypes","PropTypes","customPropTypes","index","secondary","bool","Object","accessibility","createShorthandFactory","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport { Accessibility, tabBehavior, TabBehaviorProps } from '@fluentui/accessibility';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\n\nimport { ShorthandValue, ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface CarouselNavigationItemSlotClassNames {\n  indicator: string;\n  content: string;\n}\n\nexport interface CarouselNavigationItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<TabBehaviorProps>;\n\n  /** A menu item can be active. */\n  active?: boolean;\n\n  /** Indicator for the Carousel Navigation Item. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A Carousel Navigation may have just icons. */\n  iconOnly?: boolean;\n\n  /** CarouselNavigationIntem index inside CarouselNavigation. */\n  index?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick?: ComponentEventHandler<CarouselNavigationItemProps>;\n\n  /** The carousel navigation item can have primary type. */\n  primary?: boolean;\n\n  /** The carousel navigation item can have secondary type. */\n  secondary?: boolean;\n\n  /** A vertical carousel navigation displays elements vertically. */\n  vertical?: boolean;\n\n  thumbnails?: boolean;\n}\n\nexport type CarouselNavigationItemStylesProps = Required<\n  Pick<CarouselNavigationItemProps, 'thumbnails' | 'vertical' | 'active' | 'iconOnly' | 'primary'>\n> & {\n  hasContent: boolean;\n  hasIndicator: boolean;\n};\n\nexport const carouselNavigationItemClassName = 'ui-carousel__navigationitem';\nexport const carouselNavigationItemSlotClassNames: CarouselNavigationItemSlotClassNames = {\n  indicator: `${carouselNavigationItemClassName}__indicator`,\n  content: `${carouselNavigationItemClassName}__content`,\n};\n\n/**\n * A CarouselItem is an actionable item within a Carousel.\n */\nexport const CarouselNavigationItem: ComponentWithAs<'li', CarouselNavigationItemProps> &\n  FluentComponentStaticProps<CarouselNavigationItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CarouselNavigationItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    children,\n    thumbnails,\n    vertical,\n    active,\n    content,\n    iconOnly,\n    primary,\n    indicator,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CarouselNavigationItem.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CarouselNavigationItem.displayName,\n    actionHandlers: {\n      performClick: event => !event.defaultPrevented && handleClick(event),\n    },\n    mapPropsToBehavior: () => ({\n      active,\n    }),\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<CarouselNavigationItemStylesProps>(\n    CarouselNavigationItem.displayName,\n    {\n      className: carouselNavigationItemClassName,\n      mapPropsToStyles: () => ({\n        thumbnails,\n        vertical,\n        active,\n        hasContent: !!content,\n        iconOnly,\n        primary,\n        hasIndicator: !!indicator,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    },\n  );\n  const renderContent = () => {\n    return content\n      ? Box.create(content, {\n          defaultProps: () => ({\n            as: 'span',\n            className: carouselNavigationItemSlotClassNames.content,\n            styles: resolvedStyles.content,\n          }),\n        })\n      : Box.create(indicator, {\n          defaultProps: () => ({\n            className: carouselNavigationItemSlotClassNames.indicator,\n            styles: resolvedStyles.indicator,\n          }),\n        });\n  };\n\n  const handleClick = (e: Event | React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nCarouselNavigationItem.displayName = 'CarouselNavigationItem';\n\nCarouselNavigationItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  iconOnly: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  vertical: PropTypes.bool,\n  thumbnails: PropTypes.bool,\n};\n\nCarouselNavigationItem.handledProps = Object.keys(CarouselNavigationItem.propTypes) as any;\n\nCarouselNavigationItem.defaultProps = {\n  accessibility: tabBehavior as Accessibility,\n  as: 'li',\n  indicator: {},\n};\n\nCarouselNavigationItem.create = createShorthandFactory({\n  Component: CarouselNavigationItem,\n  mappedArrayProp: 'content',\n});\n"]},"metadata":{},"sourceType":"module"}