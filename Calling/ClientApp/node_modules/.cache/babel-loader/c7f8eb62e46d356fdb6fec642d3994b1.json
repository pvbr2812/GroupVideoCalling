{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\nvar errorSanitizer = new Sanitizer();\n\nvar RestError =\n/** @class */\nfunction (_super) {\n  __extends(RestError, _super);\n\n  function RestError(message, code, statusCode, request, response) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = \"RestError\";\n    _this.code = code;\n    _this.statusCode = statusCode;\n    _this.request = request;\n    _this.response = response;\n    Object.setPrototypeOf(_this, RestError.prototype);\n    return _this;\n  }\n  /**\n   * Logging method for util.inspect in Node\n   */\n\n\n  RestError.prototype[custom] = function () {\n    return \"RestError: \" + this.message + \" \\n \" + errorSanitizer.sanitize(this);\n  };\n\n  RestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n  RestError.PARSE_ERROR = \"PARSE_ERROR\";\n  return RestError;\n}(Error);\n\nexport { RestError };","map":{"version":3,"sources":["../../src/restError.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAAS,SAAT,QAA0B,kBAA1B;AAEA,IAAM,cAAc,GAAG,IAAI,SAAJ,EAAvB;;AAEA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAS7B,WAAA,SAAA,CACE,OADF,EAEE,IAFF,EAGE,UAHF,EAIE,OAJF,EAKE,QALF,EAKkC;AALlC,QAAA,KAAA,GAOE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IAPhB;;AAQE,IAAA,KAAI,CAAC,IAAL,GAAY,WAAZ;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,UAAlB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAf;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB;AAEA,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA4B,SAAS,CAAC,SAAtC;;AACD;AAED;;AAEG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAC,MAAD,IAAA,YAAA;AACE,WAAO,gBAAc,KAAK,OAAnB,GAA0B,MAA1B,GAAiC,cAAc,CAAC,QAAf,CAAwB,IAAxB,CAAxC;AACD,GAFD;;AA5BgB,EAAA,SAAA,CAAA,kBAAA,GAA6B,oBAA7B;AACA,EAAA,SAAA,CAAA,WAAA,GAAsB,aAAtB;AA8BlB,SAAA,SAAA;AAAC,CAhCD,CAA+B,KAA/B,CAAA;;SAAa,S","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResourceLike } from \"./webResource\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\n\nconst errorSanitizer = new Sanitizer();\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResourceLike;\n  response?: HttpOperationResponse;\n  details?: unknown;\n  constructor(\n    message: string,\n    code?: string,\n    statusCode?: number,\n    request?: WebResourceLike,\n    response?: HttpOperationResponse\n  ) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}