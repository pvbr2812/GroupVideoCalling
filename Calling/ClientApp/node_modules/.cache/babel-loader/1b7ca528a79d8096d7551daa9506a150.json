{"ast":null,"code":"import { dropdownItemSlotClassNames } from '../../../../components/Dropdown/DropdownItem';\nimport { getBorderFocusStyles } from '../../getBorderFocusStyles';\nimport { pxToRem } from '../../../../utils';\nimport { checkableIndicatorUrl } from './checkableIndicatorUrl';\nexport var dropdownItemStyles = {\n  root: function root(_ref) {\n    var _ref2, _ref3;\n\n    var p = _ref.props,\n        v = _ref.variables,\n        siteVariables = _ref.theme.siteVariables;\n    return Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      minHeight: 0,\n      padding: pxToRem(4) + \" \" + pxToRem(11),\n      whiteSpace: 'nowrap',\n      border: v.listItemFocusBorderWidth + \" solid transparent\",\n      backgroundColor: v.listItemBackgroundColor\n    }, p.selected && {\n      fontWeight: v.listItemSelectedFontWeight,\n      color: v.listItemSelectedColor\n    }, {\n      position: 'relative'\n    }, p.active && Object.assign({}, p.isFromKeyboard && getBorderFocusStyles({\n      variables: siteVariables,\n      borderRadius: 0\n    })[':focus-visible'], !p.isFromKeyboard && Object.assign({\n      color: v.listItemColorHover,\n      backgroundColor: v.listItemBackgroundColorHover\n    }, p.hasHeader && (_ref2 = {}, _ref2[\"& .\" + dropdownItemSlotClassNames.header] = {\n      color: v.listItemColorHover\n    }, _ref2), p.hasContent && (_ref3 = {}, _ref3[\"& .\" + dropdownItemSlotClassNames.content] = {\n      color: v.listItemColorHover\n    }, _ref3))));\n  },\n  image: function image() {\n    return {\n      margin: pxToRem(3) + \" \" + pxToRem(12) + \" \" + pxToRem(3) + \" \" + pxToRem(4)\n    };\n  },\n  header: function header(_ref4) {\n    var p = _ref4.props,\n        v = _ref4.variables;\n    return Object.assign({\n      flexGrow: 1,\n      lineHeight: v.listItemHeaderLineHeight,\n      fontSize: v.listItemHeaderFontSize,\n      // if the item doesn't have content - i.e. it is header only - then it should use the content color\n      color: v.listItemContentColor\n    }, p.hasContent && {\n      // if there is content it needs to be \"tightened up\" to the header\n      marginBottom: pxToRem(-1),\n      color: v.listItemHeaderColor\n    }, p.selected && {\n      fontWeight: v.listItemSelectedFontWeight,\n      color: v.listItemSelectedColor\n    }, {\n      whiteSpace: 'normal'\n    });\n  },\n  content: function content(_ref5) {\n    var v = _ref5.variables;\n    return {\n      flexGrow: 1,\n      lineHeight: v.listItemContentLineHeight,\n      fontSize: v.listItemContentFontSize,\n      color: v.listItemContentColor\n    };\n  },\n  checkableIndicator: function checkableIndicator(_ref6) {\n    var v = _ref6.variables;\n    return {\n      backgroundImage: checkableIndicatorUrl(v.listItemSelectedColor),\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      position: 'absolute',\n      width: pxToRem(24),\n      height: pxToRem(24),\n      right: pxToRem(7),\n      top: pxToRem(-3)\n    };\n  },\n  endMedia: function endMedia() {\n    return {\n      flexShrink: 0,\n      lineHeight: pxToRem(16)\n    };\n  },\n  main: function main() {\n    return {\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1,\n      minWidth: 0 // needed for the truncate styles to work\n\n    };\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Dropdown/dropdownItemStyles.ts"],"names":["dropdownItemStyles","root","p","v","siteVariables","display","alignItems","minHeight","padding","pxToRem","whiteSpace","border","backgroundColor","listItemBackgroundColor","fontWeight","color","listItemSelectedColor","position","variables","borderRadius","listItemBackgroundColorHover","dropdownItemSlotClassNames","listItemColorHover","image","margin","header","flexGrow","lineHeight","fontSize","listItemContentColor","marginBottom","listItemHeaderColor","content","checkableIndicator","backgroundImage","checkableIndicatorUrl","backgroundPosition","backgroundRepeat","width","height","right","top","endMedia","flexShrink","main","flexDirection","minWidth"],"mappings":"AAEA,SAAA,0BAAA,QAAA,8CAAA;AACA,SAAA,oBAAA,QAAA,4BAAA;AACA,SAAA,OAAA,QAAA,mBAAA;AACA,SAAA,qBAAA,QAAA,yBAAA;AAOA,OAAO,IAAMA,kBAA2F,GAAG;AACzGC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,IAAA,EAAA;AAAA,QAAA,KAAA,EAAA,KAAA;;AAAA,QAAUC,CAAV,GAAA,IAAA,CAAA,KAAA;AAAA,QAAwBC,CAAxB,GAAA,IAAA,CAAA,SAAA;AAAA,QAAoCC,aAApC,GAAA,IAAA,CAAA,KAAA,CAAA,aAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA;AACJC,MAAAA,OAAO,EADH,MAAA;AAEJC,MAAAA,UAAU,EAFN,QAAA;AAGJC,MAAAA,SAAS,EAHL,CAAA;AAIJC,MAAAA,OAAO,EAAKC,OAAO,CAAZ,CAAY,CAAPA,GAAL,GAAKA,GAAcA,OAAO,CAJ7B,EAI6B,CAJ7B;AAKJC,MAAAA,UAAU,EALN,QAAA;AAMJC,MAAAA,MAAM,EAAKR,CAAC,CAAN,wBAAKA,GANP,oBAAA;AAOJS,MAAAA,eAAe,EAAET,CAAC,CAACU;AAPf,KAAA,EAQAX,CAAC,CAADA,QAAAA,IAAc;AAChBY,MAAAA,UAAU,EAAEX,CAAC,CADG,0BAAA;AAEhBY,MAAAA,KAAK,EAAEZ,CAAC,CAACa;AAFO,KARd,EAAA;AAYJC,MAAAA,QAAQ,EAAE;AAZN,KAAA,EAaAf,CAAC,CAADA,MAAAA,IAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACEA,CAAC,CAADA,cAAAA,IAAoB,oBAAoB,CAAC;AAAEgB,MAAAA,SAAS,EAAX,aAAA;AAA4BC,MAAAA,YAAY,EAAE;AAA1C,KAAD,CAApB,CADtBjB,gBACsB,CADtBA,EAEE,CAACA,CAAC,CAAF,cAAA,IAAA,MAAA,CAAA,MAAA,CAAA;AACFa,MAAAA,KAAK,EAAEZ,CAAC,CADN,kBAAA;AAEFS,MAAAA,eAAe,EAAET,CAAC,CAACiB;AAFjB,KAAA,EAGE,CAAC,CAAD,SAAA,KAAA,KAAA,GAAA,EAAA,EAAA,KAAA,CAAA,QACKC,0BAA0B,CAD/B,MAAA,CAAA,GAC2C;AAC3CN,MAAAA,KAAK,EAAEZ,CAAC,CAACmB;AADkC,KAD3C,EAHF,KAGE,CAHF,EAQE,CAAC,CAAD,UAAA,KAAA,KAAA,GAAA,EAAA,EAAA,KAAA,CAAA,QACKD,0BAA0B,CAD/B,OAAA,CAAA,GAC4C;AAC5CN,MAAAA,KAAK,EAAEZ,CAAC,CAACmB;AADmC,KAD5C,EAvBJ,KAuBI,CARF,CAFFpB,CAbA,CAAA;AADmG,GAAA;AAgCzGqB,EAAAA,KAAK,EAAE,SAAA,KAAA,GAAA;AAAA,WAAsB;AAC3BC,MAAAA,MAAM,EAAKf,OAAO,CAAZ,CAAY,CAAPA,GAAL,GAAKA,GAAcA,OAAO,CAA1B,EAA0B,CAArBA,GAAL,GAAKA,GAA6BA,OAAO,CAAzC,CAAyC,CAApCA,GAAL,GAAKA,GAA2CA,OAAO,CAAA,CAAA;AADlC,KAAtB;AAhCkG,GAAA;AAmCzGgB,EAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,KAAA,EAAA;AAAA,QAAUvB,CAAV,GAAA,KAAA,CAAA,KAAA;AAAA,QAAwBC,CAAxB,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA;AACNuB,MAAAA,QAAQ,EADF,CAAA;AAENC,MAAAA,UAAU,EAAExB,CAAC,CAFP,wBAAA;AAINyB,MAAAA,QAAQ,EAAEzB,CAAC,CAJL,sBAAA;AAKN;AACAY,MAAAA,KAAK,EAAEZ,CAAC,CAAC0B;AANH,KAAA,EAOF3B,CAAC,CAADA,UAAAA,IAAgB;AAClB;AACA4B,MAAAA,YAAY,EAAErB,OAAO,CAAC,CAFJ,CAEG,CAFH;AAGlBM,MAAAA,KAAK,EAAEZ,CAAC,CAAC4B;AAHS,KAPd,EAYF7B,CAAC,CAADA,QAAAA,IAAc;AAChBY,MAAAA,UAAU,EAAEX,CAAC,CADG,0BAAA;AAEhBY,MAAAA,KAAK,EAAEZ,CAAC,CAACa;AAFO,KAZZ,EAAA;AAgBNN,MAAAA,UAAU,EAAE;AAhBN,KAAA,CAAA;AAnCiG,GAAA;AAqDzGsB,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAA;AAAA,QAAc7B,CAAd,GAAA,KAAA,CAAA,SAAA;AAAA,WAAsC;AAC7CuB,MAAAA,QAAQ,EADqC,CAAA;AAE7CC,MAAAA,UAAU,EAAExB,CAAC,CAFgC,yBAAA;AAG7CyB,MAAAA,QAAQ,EAAEzB,CAAC,CAHkC,uBAAA;AAI7CY,MAAAA,KAAK,EAAEZ,CAAC,CAAC0B;AAJoC,KAAtC;AArDgG,GAAA;AA2DzGI,EAAAA,kBAAkB,EAAE,SAAA,kBAAA,CAAA,KAAA,EAAA;AAAA,QAAc9B,CAAd,GAAA,KAAA,CAAA,SAAA;AAAA,WAAuB;AACzC+B,MAAAA,eAAe,EAAEC,qBAAqB,CAAChC,CAAC,CADC,qBACH,CADG;AAEzCiC,MAAAA,kBAAkB,EAFuB,QAAA;AAGzCC,MAAAA,gBAAgB,EAHyB,WAAA;AAIzCpB,MAAAA,QAAQ,EAJiC,UAAA;AAKzCqB,MAAAA,KAAK,EAAE7B,OAAO,CAL2B,EAK3B,CAL2B;AAMzC8B,MAAAA,MAAM,EAAE9B,OAAO,CAN0B,EAM1B,CAN0B;AAOzC+B,MAAAA,KAAK,EAAE/B,OAAO,CAP2B,CAO3B,CAP2B;AAQzCgC,MAAAA,GAAG,EAAEhC,OAAO,CAAC,CAAD,CAAA;AAR6B,KAAvB;AA3DqF,GAAA;AAqEzGiC,EAAAA,QAAQ,EAAE,SAAA,QAAA,GAAA;AAAA,WAAO;AACfC,MAAAA,UAAU,EADK,CAAA;AAEfhB,MAAAA,UAAU,EAAElB,OAAO,CAAA,EAAA;AAFJ,KAAP;AArE+F,GAAA;AAyEzGmC,EAAAA,IAAI,EAAE,SAAA,IAAA,GAAA;AAAA,WAAO;AACXvC,MAAAA,OAAO,EADI,MAAA;AAEXwC,MAAAA,aAAa,EAFF,QAAA;AAGXnB,MAAAA,QAAQ,EAHG,CAAA;AAIXoB,MAAAA,QAAQ,EAJG,CAAA,CAIE;;AAJF,KAAP;AAAA;AAzEmG,CAApG","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { DropdownVariables } from './dropdownVariables';\nimport { DropdownItemProps, dropdownItemSlotClassNames } from '../../../../components/Dropdown/DropdownItem';\nimport { getBorderFocusStyles } from '../../getBorderFocusStyles';\nimport { pxToRem } from '../../../../utils';\nimport { checkableIndicatorUrl } from './checkableIndicatorUrl';\n\nexport type DropdownItemStylesProps = Pick<DropdownItemProps, 'selected' | 'active' | 'isFromKeyboard'> & {\n  hasContent?: boolean;\n  hasHeader?: boolean;\n};\n\nexport const dropdownItemStyles: ComponentSlotStylesPrepared<DropdownItemStylesProps, DropdownVariables> = {\n  root: ({ props: p, variables: v, theme: { siteVariables } }): ICSSInJSStyle => ({\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: 0,\n    padding: `${pxToRem(4)} ${pxToRem(11)}`,\n    whiteSpace: 'nowrap',\n    border: `${v.listItemFocusBorderWidth} solid transparent`,\n    backgroundColor: v.listItemBackgroundColor,\n    ...(p.selected && {\n      fontWeight: v.listItemSelectedFontWeight,\n      color: v.listItemSelectedColor,\n    }),\n    position: 'relative',\n    ...(p.active && {\n      ...(p.isFromKeyboard && getBorderFocusStyles({ variables: siteVariables, borderRadius: 0 })[':focus-visible']),\n      ...(!p.isFromKeyboard && {\n        color: v.listItemColorHover,\n        backgroundColor: v.listItemBackgroundColorHover,\n        ...(p.hasHeader && {\n          [`& .${dropdownItemSlotClassNames.header}`]: {\n            color: v.listItemColorHover,\n          },\n        }),\n        ...(p.hasContent && {\n          [`& .${dropdownItemSlotClassNames.content}`]: {\n            color: v.listItemColorHover,\n          },\n        }),\n      }),\n    }),\n  }),\n  image: (): ICSSInJSStyle => ({\n    margin: `${pxToRem(3)} ${pxToRem(12)} ${pxToRem(3)} ${pxToRem(4)}`,\n  }),\n  header: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    flexGrow: 1,\n    lineHeight: v.listItemHeaderLineHeight,\n\n    fontSize: v.listItemHeaderFontSize,\n    // if the item doesn't have content - i.e. it is header only - then it should use the content color\n    color: v.listItemContentColor,\n    ...(p.hasContent && {\n      // if there is content it needs to be \"tightened up\" to the header\n      marginBottom: pxToRem(-1),\n      color: v.listItemHeaderColor,\n    }),\n    ...(p.selected && {\n      fontWeight: v.listItemSelectedFontWeight,\n      color: v.listItemSelectedColor,\n    }),\n    whiteSpace: 'normal',\n  }),\n  content: ({ variables: v }): ICSSInJSStyle => ({\n    flexGrow: 1,\n    lineHeight: v.listItemContentLineHeight,\n    fontSize: v.listItemContentFontSize,\n    color: v.listItemContentColor,\n  }),\n  checkableIndicator: ({ variables: v }) => ({\n    backgroundImage: checkableIndicatorUrl(v.listItemSelectedColor),\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    position: 'absolute',\n    width: pxToRem(24),\n    height: pxToRem(24),\n    right: pxToRem(7),\n    top: pxToRem(-3),\n  }),\n  endMedia: () => ({\n    flexShrink: 0,\n    lineHeight: pxToRem(16),\n  }),\n  main: () => ({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    minWidth: 0, // needed for the truncate styles to work\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}