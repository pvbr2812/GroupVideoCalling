{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Box } from '../Box/Box';\nimport { Image } from '../Image/Image';\nimport { Label } from '../Label/Label';\nimport { Status } from '../Status/Status';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nexport var avatarClassName = 'ui-avatar';\n/**\n * An Avatar is a graphical representation of a user.\n */\n\nexport var Avatar = /*#__PURE__*/function () {\n  var Avatar = function Avatar(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Avatar.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        className = props.className,\n        design = props.design,\n        getInitials = props.getInitials,\n        label = props.label,\n        icon = props.icon,\n        image = props.image,\n        name = props.name,\n        square = props.square,\n        size = props.size,\n        status = props.status,\n        styles = props.styles,\n        variables = props.variables;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: Avatar.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Avatar.displayName, {\n      className: avatarClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          size: size,\n          square: square\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      }\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Avatar.handledProps, props);\n    var imageElement = Image.create(image, {\n      defaultProps: function defaultProps() {\n        return getA11Props('image', {\n          fluid: true,\n          avatar: !square,\n          title: name,\n          styles: resolvedStyles.image\n        });\n      }\n    });\n    var iconElement = Box.create(icon, {\n      defaultProps: function defaultProps() {\n        return getA11Props('icon', {\n          title: name,\n          styles: resolvedStyles.icon\n        });\n      }\n    });\n    var labelElement = Label.create(label || {}, {\n      defaultProps: function defaultProps() {\n        return getA11Props('label', {\n          content: getInitials(name),\n          circular: !square,\n          title: name,\n          styles: resolvedStyles.label\n        });\n      }\n    });\n    var hasGlyph = !!image || !!icon;\n    var result = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), hasGlyph && (imageElement || iconElement), !hasGlyph && labelElement, Status.create(status, {\n      defaultProps: function defaultProps() {\n        return getA11Props('status', {\n          size: size,\n          styles: resolvedStyles.status\n        });\n      }\n    }));\n    setEnd();\n    return result;\n  };\n\n  Avatar.displayName = 'Avatar';\n  Avatar.defaultProps = {\n    size: 'medium',\n    getInitials: function getInitials(name) {\n      if (!name) {\n        return '';\n      }\n\n      var reducedName = name.replace(/\\s+/g, ' ').replace(/\\s*\\(.*?\\)\\s*/g, ' ').replace(/\\s*{.*?}\\s*/g, ' ').replace(/\\s*\\[.*?]\\s*/g, ' ');\n      var initials = reducedName.split(' ').filter(function (item) {\n        return item !== '';\n      }).map(function (item) {\n        return item.charAt(0);\n      }).reduce(function (accumulator, currentValue) {\n        return accumulator + currentValue;\n      }, '');\n\n      if (initials.length > 2) {\n        return initials.charAt(0) + initials.charAt(initials.length - 1);\n      }\n\n      return initials;\n    }\n  };\n  Avatar.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: false\n  }), {\n    name: PropTypes.string,\n    icon: customPropTypes.shorthandAllowingChildren,\n    image: customPropTypes.itemShorthandWithoutJSX,\n    label: customPropTypes.itemShorthand,\n    square: PropTypes.bool,\n    size: customPropTypes.size,\n    status: customPropTypes.itemShorthand,\n    getInitials: PropTypes.func\n  });\n  Avatar.handledProps = Object.keys(Avatar.propTypes);\n  Avatar.create = createShorthandFactory({\n    Component: Avatar,\n    mappedProp: 'name'\n  });\n  return Avatar;\n}();","map":{"version":3,"sources":["components/Avatar/Avatar.tsx"],"names":["avatarClassName","Avatar","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","className","design","getInitials","label","icon","image","name","square","size","status","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","imageElement","defaultProps","fluid","avatar","title","iconElement","labelElement","content","circular","hasGlyph","result","root","reducedName","initials","item","accumulator","children","PropTypes","customPropTypes","func","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Box, BoxProps } from '../Box/Box';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Label, LabelProps } from '../Label/Label';\nimport { Status, StatusProps } from '../Status/Status';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\n\nexport interface AvatarProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Avatar can contain icon. It will be rendered only if the image is not present. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for the image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Shorthand for the label. */\n  label?: ShorthandValue<LabelProps>;\n\n  /** The name used for displaying the initials of the avatar if the image is not provided. */\n  name?: string;\n\n  /** The avatar can have a square shape. */\n  square?: boolean;\n\n  /** Size multiplier. */\n  size?: SizeValue;\n\n  /** Shorthand for the status of the user. */\n  status?: ShorthandValue<StatusProps>;\n\n  /** Custom method for generating the initials from the name property, which is shown if no image is provided. */\n  getInitials?: (name: string) => string;\n}\n\nexport type AvatarStylesProps = Pick<AvatarProps, 'size' | 'square'>;\nexport const avatarClassName = 'ui-avatar';\n\n/**\n * An Avatar is a graphical representation of a user.\n */\nexport const Avatar: ComponentWithAs<'div', AvatarProps> & FluentComponentStaticProps<AvatarProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Avatar.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    className,\n    design,\n    getInitials,\n    label,\n    icon,\n    image,\n    name,\n    square,\n    size,\n    status,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Avatar.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles(Avatar.displayName, {\n    className: avatarClassName,\n    mapPropsToStyles: () => ({ size, square }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Avatar.handledProps, props);\n\n  const imageElement = Image.create(image, {\n    defaultProps: () =>\n      getA11Props('image', {\n        fluid: true,\n        avatar: !square,\n        title: name,\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        title: name,\n        styles: resolvedStyles.icon,\n      }),\n  });\n\n  const labelElement = Label.create(label || {}, {\n    defaultProps: () =>\n      getA11Props('label', {\n        content: getInitials(name),\n        circular: !square,\n        title: name,\n        styles: resolvedStyles.label,\n      }),\n  });\n\n  const hasGlyph = !!image || !!icon;\n\n  const result = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>\n      {hasGlyph && (imageElement || iconElement)}\n      {!hasGlyph && labelElement}\n      {Status.create(status, {\n        defaultProps: () =>\n          getA11Props('status', {\n            size,\n            styles: resolvedStyles.status,\n          }),\n      })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nAvatar.displayName = 'Avatar';\n\nAvatar.defaultProps = {\n  size: 'medium',\n  getInitials(name: string) {\n    if (!name) {\n      return '';\n    }\n\n    const reducedName = name\n      .replace(/\\s+/g, ' ')\n      .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n      .replace(/\\s*{.*?}\\s*/g, ' ')\n      .replace(/\\s*\\[.*?]\\s*/g, ' ');\n\n    const initials = reducedName\n      .split(' ')\n      .filter(item => item !== '')\n      .map(item => item.charAt(0))\n      .reduce((accumulator, currentValue) => accumulator + currentValue, '');\n\n    if (initials.length > 2) {\n      return initials.charAt(0) + initials.charAt(initials.length - 1);\n    }\n    return initials;\n  },\n};\n\nAvatar.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  name: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  label: customPropTypes.itemShorthand,\n  square: PropTypes.bool,\n  size: customPropTypes.size,\n  status: customPropTypes.itemShorthand,\n  getInitials: PropTypes.func,\n};\nAvatar.handledProps = Object.keys(Avatar.propTypes) as any;\n\nAvatar.create = createShorthandFactory({ Component: Avatar, mappedProp: 'name' });\n"]},"metadata":{},"sourceType":"module"}