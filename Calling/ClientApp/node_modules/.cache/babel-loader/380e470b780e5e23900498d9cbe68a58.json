{"ast":null,"code":"import _concat from \"lodash/concat\";\nimport _isNil from \"lodash/isNil\";\nimport _toLower from \"lodash/toLower\";\n/**\n * Check whether source includes target ignoring case.\n */\n\nexport var includes = function includes(source, target) {\n  return _toLower(source).indexOf(_toLower(target)) !== -1;\n};\n/**\n * Checks whether the key or the value of data[key] contains the search string.\n */\n\nexport var find = function find(data, key, search) {\n  var value = data[key];\n  return search !== '' && (includes(key, search) || typeof value !== 'object' && !_isNil(value) && includes(value, search));\n};\n/**\n * Checks if the data[key] is primitive and override in the overrides object.\n */\n\nexport var isOverridden = function isOverridden(data, key, overrides) {\n  return typeof data[key] !== 'object' && !!overrides && overrides[key] !== null && overrides[key] !== undefined;\n};\n/**\n * Helper recursive function for the filter method.\n */\n\nvar filterR = function filterR(search, data) {\n  var result = false;\n  Object.keys(data).forEach(function (key) {\n    var value = data[key];\n\n    if (find(data, key, search)) {\n      result = true;\n    } // If the value is object invoke again\n\n\n    if (typeof value === 'object' && filterR(search, value)) {\n      result = true;\n    }\n  });\n  return result;\n};\n/**\n * Filters the data for the value string (if it appears in the key or value). Considers nested objects.\n */\n\n\nexport var filter = function filter(data, value) {\n  return Object.keys(data).filter(function (key) {\n    if (find(data, key, value)) {\n      return true;\n    } // if the value is object invoke again\n\n\n    if (typeof data[key] === 'object' && data[key] !== null) {\n      return filterR(value, data[key]);\n    }\n\n    return false;\n  }).reduce(function (obj, key) {\n    obj[key] = data[key];\n    return obj;\n  }, {});\n};\n/**\n * Returns array of values that matches the predicate. Considers nested objects.\n */\n\nexport var getValues = function getValues(value, predicate) {\n  if (_isNil(value)) {\n    return [];\n  }\n\n  if (typeof value === 'string') {\n    if (predicate(value)) {\n      return [value];\n    }\n  }\n\n  if (typeof value === 'object') {\n    var arr = [];\n    Object.keys(value).forEach(function (key) {\n      arr = _concat(arr, getValues(value[key], predicate));\n    });\n    return arr;\n  }\n\n  return [];\n};\n/**\n * Removes null values from an object. Considers nested objects.\n */\n\nexport var removeNulls = function removeNulls(o) {\n  if (typeof o !== 'object' && o !== null) {\n    return o;\n  }\n\n  var result = {};\n  Object.keys(o).forEach(function (k) {\n    if (!o[k] || typeof o[k] !== 'object') {\n      if (o[k]) {\n        result[k] = o[k]; // If not null or not an object, copy value\n      }\n    } else {\n      // The property is an object\n      var val = removeNulls(o[k]);\n\n      if (typeof val === 'object' && val != null && Object.keys(val).length > 0) {\n        result[k] = val;\n      }\n    }\n  });\n  return result;\n};","map":{"version":3,"sources":["components/Debug/utils.ts"],"names":["includes","find","value","data","search","isOverridden","overrides","filterR","result","Object","filter","obj","getValues","predicate","arr","removeNulls","o","val"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\n\n/**\n * Check whether source includes target ignoring case.\n */\nexport const includes = (source: string, target: string): boolean =>\n  _.toLower(source).indexOf(_.toLower(target)) !== -1;\n\n/**\n * Checks whether the key or the value of data[key] contains the search string.\n */\nexport const find = (data: object, key: string, search: string): boolean => {\n  const value = data[key];\n  return (\n    search !== '' &&\n    (includes(key, search) || (typeof value !== 'object' && !_.isNil(value) && includes(value, search)))\n  );\n};\n\n/**\n * Checks if the data[key] is primitive and override in the overrides object.\n */\nexport const isOverridden = (data: object, key: string, overrides: object): boolean => {\n  return typeof data[key] !== 'object' && !!overrides && overrides[key] !== null && overrides[key] !== undefined;\n};\n\n/**\n * Helper recursive function for the filter method.\n */\nconst filterR = (search: string, data: object): boolean => {\n  let result = false;\n\n  Object.keys(data).forEach(key => {\n    const value = data[key];\n\n    if (find(data, key, search)) {\n      result = true;\n    }\n\n    // If the value is object invoke again\n    if (typeof value === 'object' && filterR(search, value)) {\n      result = true;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Filters the data for the value string (if it appears in the key or value). Considers nested objects.\n */\nexport const filter = (data: object, value: string) => {\n  return Object.keys(data)\n    .filter(key => {\n      if (find(data, key, value)) {\n        return true;\n      }\n\n      // if the value is object invoke again\n      if (typeof data[key] === 'object' && data[key] !== null) {\n        return filterR(value, data[key]);\n      }\n\n      return false;\n    })\n    .reduce((obj, key) => {\n      obj[key] = data[key];\n      return obj;\n    }, {});\n};\n\n/**\n * Returns array of values that matches the predicate. Considers nested objects.\n */\nexport const getValues = (value: any, predicate: (str: string) => boolean): string[] => {\n  if (_.isNil(value)) {\n    return [];\n  }\n\n  if (typeof value === 'string') {\n    if (predicate(value)) {\n      return [value];\n    }\n  }\n\n  if (typeof value === 'object') {\n    let arr: string[] = [];\n    Object.keys(value).forEach(key => {\n      arr = _.concat(arr, getValues(value[key], predicate));\n    });\n    return arr;\n  }\n\n  return [];\n};\n\n/**\n * Removes null values from an object. Considers nested objects.\n */\nexport const removeNulls = (o: any): any => {\n  if (typeof o !== 'object' && o !== null) {\n    return o;\n  }\n  const result = {};\n\n  Object.keys(o).forEach(k => {\n    if (!o[k] || typeof o[k] !== 'object') {\n      if (o[k]) {\n        result[k] = o[k]; // If not null or not an object, copy value\n      }\n    } else {\n      // The property is an object\n      const val = removeNulls(o[k]);\n\n      if (typeof val === 'object' && val != null && Object.keys(val).length > 0) {\n        result[k] = val;\n      }\n    }\n  });\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}