{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport { isDebugEnabled, mergeComponentStyles, withDebugId } from '@fluentui/styles';\nimport cx from 'classnames'; // this weak map is used as cache for the classes\n\nvar classesCache = new WeakMap(); // this weak map is used as cache for the styles\n\nvar stylesCache = new WeakMap();\n/**\n * Both resolvedStyles and classes are objects of getters with lazy evaluation\n *\n * Additionally if the cacheEnabled option is provided, than the resolved styles\n * and classes are caching the results in WeakMaps. The key of the maps contains the following:\n * - theme\n * - displayName\n * - slot name\n * - styling props\n * - rtl mode\n * - disable animations mode\n */\n\nexport var resolveStyles = function resolveStyles(options, resolvedVariables) {\n  var allDisplayNames = options.allDisplayNames,\n      componentClassName = options.className,\n      theme = options.theme,\n      primaryDisplayName = options.primaryDisplayName,\n      componentProps = options.componentProps,\n      inlineStylesProps = options.inlineStylesProps,\n      rtl = options.rtl,\n      disableAnimations = options.disableAnimations,\n      renderer = options.renderer,\n      performanceFlags = options.performance,\n      telemetry = options.telemetry;\n  var className = inlineStylesProps.className,\n      design = inlineStylesProps.design,\n      styles = inlineStylesProps.styles,\n      variables = inlineStylesProps.variables;\n  var noInlineStylesOverrides = !(design || styles);\n  var noVariableOverrides = performanceFlags.enableBooleanVariablesCaching || !variables;\n  /* istanbul ignore else */\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!performanceFlags.enableStylesCaching && performanceFlags.enableBooleanVariablesCaching) {\n      throw new Error('@fluentui/react-northstar: Please check your \"performance\" settings on \"Provider\", to enable \"enableBooleanVariablesCaching\" you need to enable \"enableStylesCaching\"');\n    }\n  }\n\n  if (performanceFlags.enableBooleanVariablesCaching) {\n    if (_isPlainObject(variables)) {\n      var hasOnlyBooleanVariables = Object.keys(variables).every(function (variableName) {\n        return variables[variableName] === null || typeof variables[variableName] === 'undefined' || typeof variables[variableName] === 'boolean';\n      });\n\n      if (!hasOnlyBooleanVariables) {\n        noVariableOverrides = false;\n      }\n    } else if (!_isNil(variables)) {\n      noVariableOverrides = false;\n    }\n  }\n\n  var cacheEnabled = performanceFlags.enableStylesCaching && noInlineStylesOverrides && noVariableOverrides; // Merge theme styles with inline overrides if any\n\n  var mergedStyles;\n\n  if (allDisplayNames.length === 1) {\n    mergedStyles = theme.componentStyles[allDisplayNames[0]] || {\n      root: function root() {\n        return {};\n      }\n    };\n  } else {\n    var _styles = allDisplayNames.map(function (displayName) {\n      return theme.componentStyles[displayName];\n    }).filter(Boolean);\n\n    if (_styles.length > 0) {\n      mergedStyles = mergeComponentStyles.apply(void 0, _styles);\n    } else {\n      mergedStyles = {\n        root: function root() {\n          return {};\n        }\n      };\n    }\n  }\n\n  if (!noInlineStylesOverrides) {\n    mergedStyles = mergeComponentStyles(mergedStyles, design && withDebugId({\n      root: design\n    }, 'props.design'), styles && withDebugId({\n      root: styles\n    }, 'props.styles'));\n  }\n\n  var styleParam = {\n    props: componentProps,\n    variables: resolvedVariables,\n    theme: theme,\n    rtl: rtl,\n    disableAnimations: disableAnimations\n  }; // Heads Up! Keep in sync with Design.tsx render logic\n\n  var rendererParam = {\n    direction: rtl ? 'rtl' : 'ltr',\n    disableAnimations: disableAnimations,\n    displayName: allDisplayNames.join(':'),\n    // does not affect styles, only used by useEnhancedRenderer in docs\n    sanitizeCss: performanceFlags.enableSanitizeCssPlugin\n  };\n  var resolvedStyles = {};\n  var resolvedStylesDebug = {};\n  var classes = {};\n\n  if (cacheEnabled && theme) {\n    if (!stylesCache.has(theme)) {\n      stylesCache.set(theme, {});\n    }\n\n    if (!classesCache.has(theme)) {\n      classesCache.set(theme, {});\n    }\n  }\n\n  var propsCacheKey = cacheEnabled ? JSON.stringify(componentProps) : '';\n  var variablesCacheKey = cacheEnabled && performanceFlags.enableBooleanVariablesCaching ? JSON.stringify(variables) : '';\n  var componentCacheKey = cacheEnabled ? allDisplayNames.join(':') + \":\" + propsCacheKey + \":\" + variablesCacheKey + \":\" + styleParam.rtl + styleParam.disableAnimations : '';\n  Object.keys(mergedStyles).forEach(function (slotName) {\n    // resolve/render slot styles once and cache\n    var lazyEvaluationKey = slotName + \"__return\";\n    var slotCacheKey = componentCacheKey + slotName;\n    Object.defineProperty(resolvedStyles, slotName, {\n      enumerable: false,\n      configurable: false,\n      set: function set(val) {\n        // Add to the cache if it's enabled\n        if (cacheEnabled && theme) {\n          var _Object$assign;\n\n          stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), (_Object$assign = {}, _Object$assign[slotCacheKey] = val, _Object$assign)));\n        }\n\n        resolvedStyles[lazyEvaluationKey] = val;\n      },\n      get: function get() {\n        // If caching enabled and entry exists, get from cache, avoid lazy evaluation\n        if (cacheEnabled && theme) {\n          var stylesThemeCache = stylesCache.get(theme) || {};\n\n          if (stylesThemeCache[slotCacheKey]) {\n            return stylesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (resolvedStyles[lazyEvaluationKey]) {\n          return resolvedStyles[lazyEvaluationKey];\n        }\n\n        var telemetryPartStart = (telemetry == null ? void 0 : telemetry.enabled) ? performance.now() : 0; // resolve/render slot styles once and cache\n\n        resolvedStyles[lazyEvaluationKey] = mergedStyles[slotName](styleParam);\n\n        if (cacheEnabled && theme) {\n          var _Object$assign2;\n\n          stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), (_Object$assign2 = {}, _Object$assign2[slotCacheKey] = resolvedStyles[lazyEvaluationKey], _Object$assign2)));\n        }\n\n        if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n          resolvedStylesDebug[slotName] = resolvedStyles[slotName]['_debug'];\n          delete resolvedStyles[slotName]['_debug'];\n        }\n\n        if ((telemetry == null ? void 0 : telemetry.enabled) && telemetry.performance[primaryDisplayName]) {\n          telemetry.performance[primaryDisplayName].msResolveStylesTotal += performance.now() - telemetryPartStart;\n        }\n\n        return resolvedStyles[lazyEvaluationKey];\n      }\n    });\n    Object.defineProperty(classes, slotName, {\n      enumerable: false,\n      configurable: false,\n      set: function set(val) {\n        if (cacheEnabled && theme) {\n          var _Object$assign3;\n\n          classesCache.set(theme, Object.assign({}, classesCache.get(theme), (_Object$assign3 = {}, _Object$assign3[slotCacheKey] = val, _Object$assign3)));\n        }\n\n        classes[lazyEvaluationKey] = val;\n      },\n      get: function get() {\n        if (cacheEnabled && theme) {\n          var classesThemeCache = classesCache.get(theme) || {}; //\n          // Cached styles\n          //\n\n          if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === '') {\n            if (telemetry == null ? void 0 : telemetry.performance[primaryDisplayName]) {\n              if (slotName === 'root') {\n                telemetry.performance[primaryDisplayName].stylesRootCacheHits++;\n              } else {\n                telemetry.performance[primaryDisplayName].stylesSlotsCacheHits++;\n              }\n            }\n\n            return slotName === 'root' ? cx(componentClassName, classesThemeCache[slotCacheKey], className) : classesThemeCache[slotCacheKey];\n          }\n        } //\n        // Lazy eval\n        //\n\n\n        if (classes[lazyEvaluationKey]) {\n          return slotName === 'root' ? cx(componentClassName, classes[lazyEvaluationKey], className) : classes[lazyEvaluationKey];\n        } // this resolves the getter magic\n\n\n        var styleObj = resolvedStyles[slotName];\n        var telemetryPartStart = (telemetry == null ? void 0 : telemetry.enabled) ? performance.now() : 0;\n\n        if (styleObj) {\n          classes[lazyEvaluationKey] = renderer.renderRule(styleObj, rendererParam);\n\n          if (cacheEnabled && theme) {\n            var _Object$assign4;\n\n            classesCache.set(theme, Object.assign({}, classesCache.get(theme), (_Object$assign4 = {}, _Object$assign4[slotCacheKey] = classes[lazyEvaluationKey], _Object$assign4)));\n          }\n        }\n\n        var resultClassName = slotName === 'root' ? cx(componentClassName, classes[lazyEvaluationKey], className) : classes[lazyEvaluationKey];\n\n        if ((telemetry == null ? void 0 : telemetry.enabled) && telemetry.performance[primaryDisplayName]) {\n          telemetry.performance[primaryDisplayName].msRenderStylesTotal += performance.now() - telemetryPartStart;\n        }\n\n        return resultClassName;\n      }\n    });\n  });\n  return {\n    resolvedStyles: resolvedStyles,\n    resolvedStylesDebug: resolvedStylesDebug,\n    classes: classes\n  };\n};","map":{"version":3,"sources":["styles/resolveStyles.ts"],"names":["classesCache","stylesCache","resolveStyles","allDisplayNames","componentClassName","theme","primaryDisplayName","componentProps","inlineStylesProps","rtl","disableAnimations","renderer","performanceFlags","telemetry","options","className","design","styles","variables","noInlineStylesOverrides","noVariableOverrides","process","hasOnlyBooleanVariables","cacheEnabled","mergedStyles","root","mergeComponentStyles","withDebugId","styleParam","props","rendererParam","direction","displayName","sanitizeCss","enableSanitizeCssPlugin","resolvedStyles","resolvedStylesDebug","classes","propsCacheKey","JSON","variablesCacheKey","componentCacheKey","Object","lazyEvaluationKey","slotName","slotCacheKey","enumerable","configurable","set","get","stylesThemeCache","telemetryPartStart","performance","classesThemeCache","cx","styleObj","resultClassName"],"mappings":"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","sourcesContent":["import { RendererParam } from '@fluentui/react-northstar-styles-renderer';\nimport {\n  ComponentSlotStylesInput,\n  ComponentSlotStylesPrepared,\n  ComponentSlotStylesResolved,\n  ComponentStyleFunctionParam,\n  ComponentVariablesObject,\n  ICSSInJSStyle,\n  isDebugEnabled,\n  mergeComponentStyles,\n  ThemePrepared,\n  withDebugId,\n} from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\n\nimport { ComponentSlotClasses, ResolveStylesOptions } from './types';\n\nexport type ResolveStylesResult = {\n  resolvedStyles: ComponentSlotStylesResolved;\n  resolvedStylesDebug: Record<string, { styles: Object }[]>;\n  classes: ComponentSlotClasses;\n};\n\n// this weak map is used as cache for the classes\nconst classesCache = new WeakMap<ThemePrepared, Record<string, string>>();\n\n// this weak map is used as cache for the styles\nconst stylesCache = new WeakMap<ThemePrepared, Record<string, ICSSInJSStyle>>();\n\n/**\n * Both resolvedStyles and classes are objects of getters with lazy evaluation\n *\n * Additionally if the cacheEnabled option is provided, than the resolved styles\n * and classes are caching the results in WeakMaps. The key of the maps contains the following:\n * - theme\n * - displayName\n * - slot name\n * - styling props\n * - rtl mode\n * - disable animations mode\n */\nexport const resolveStyles = (\n  options: ResolveStylesOptions,\n  resolvedVariables: ComponentVariablesObject,\n): ResolveStylesResult => {\n  const {\n    allDisplayNames,\n    className: componentClassName,\n    theme,\n    primaryDisplayName,\n    componentProps,\n    inlineStylesProps,\n    rtl,\n    disableAnimations,\n    renderer,\n    performance: performanceFlags,\n    telemetry,\n  } = options;\n\n  const { className, design, styles, variables } = inlineStylesProps;\n  const noInlineStylesOverrides = !(design || styles);\n\n  let noVariableOverrides = performanceFlags.enableBooleanVariablesCaching || !variables;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    if (!performanceFlags.enableStylesCaching && performanceFlags.enableBooleanVariablesCaching) {\n      throw new Error(\n        '@fluentui/react-northstar: Please check your \"performance\" settings on \"Provider\", to enable \"enableBooleanVariablesCaching\" you need to enable \"enableStylesCaching\"',\n      );\n    }\n  }\n\n  if (performanceFlags.enableBooleanVariablesCaching) {\n    if (_.isPlainObject(variables)) {\n      const hasOnlyBooleanVariables = Object.keys(variables).every(\n        variableName =>\n          variables[variableName] === null ||\n          typeof variables[variableName] === 'undefined' ||\n          typeof variables[variableName] === 'boolean',\n      );\n\n      if (!hasOnlyBooleanVariables) {\n        noVariableOverrides = false;\n      }\n    } else if (!_.isNil(variables)) {\n      noVariableOverrides = false;\n    }\n  }\n\n  const cacheEnabled = performanceFlags.enableStylesCaching && noInlineStylesOverrides && noVariableOverrides;\n\n  // Merge theme styles with inline overrides if any\n  let mergedStyles: ComponentSlotStylesPrepared;\n\n  if (allDisplayNames.length === 1) {\n    mergedStyles = theme.componentStyles[allDisplayNames[0]] || { root: () => ({}) };\n  } else {\n    const styles = allDisplayNames.map(displayName => theme.componentStyles[displayName]).filter(Boolean);\n\n    if (styles.length > 0) {\n      mergedStyles = mergeComponentStyles(...styles);\n    } else {\n      mergedStyles = { root: () => ({}) };\n    }\n  }\n\n  if (!noInlineStylesOverrides) {\n    mergedStyles = mergeComponentStyles(\n      mergedStyles,\n      design && withDebugId({ root: design }, 'props.design'),\n      styles && withDebugId({ root: styles } as ComponentSlotStylesInput, 'props.styles'),\n    );\n  }\n\n  const styleParam: ComponentStyleFunctionParam = {\n    props: componentProps,\n    variables: resolvedVariables,\n    theme,\n    rtl,\n    disableAnimations,\n  };\n\n  // Heads Up! Keep in sync with Design.tsx render logic\n  const rendererParam: RendererParam = {\n    direction: rtl ? 'rtl' : 'ltr',\n    disableAnimations,\n    displayName: allDisplayNames.join(':'), // does not affect styles, only used by useEnhancedRenderer in docs\n    sanitizeCss: performanceFlags.enableSanitizeCssPlugin,\n  };\n\n  const resolvedStyles: Record<string, ICSSInJSStyle> = {};\n  const resolvedStylesDebug: Record<string, { styles: Object }[]> = {};\n  const classes: Record<string, string> = {};\n\n  if (cacheEnabled && theme) {\n    if (!stylesCache.has(theme)) {\n      stylesCache.set(theme, {});\n    }\n    if (!classesCache.has(theme)) {\n      classesCache.set(theme, {});\n    }\n  }\n\n  const propsCacheKey = cacheEnabled ? JSON.stringify(componentProps) : '';\n  const variablesCacheKey =\n    cacheEnabled && performanceFlags.enableBooleanVariablesCaching ? JSON.stringify(variables) : '';\n  const componentCacheKey = cacheEnabled\n    ? `${allDisplayNames.join(':')}:${propsCacheKey}:${variablesCacheKey}:${styleParam.rtl}${\n        styleParam.disableAnimations\n      }`\n    : '';\n\n  Object.keys(mergedStyles).forEach(slotName => {\n    // resolve/render slot styles once and cache\n    const lazyEvaluationKey = `${slotName}__return`;\n    const slotCacheKey = componentCacheKey + slotName;\n\n    Object.defineProperty(resolvedStyles, slotName, {\n      enumerable: false,\n      configurable: false,\n      set(val: ICSSInJSStyle) {\n        // Add to the cache if it's enabled\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, {\n            ...stylesCache.get(theme),\n            [slotCacheKey]: val,\n          });\n        }\n\n        resolvedStyles[lazyEvaluationKey] = val;\n      },\n      get(): ICSSInJSStyle {\n        // If caching enabled and entry exists, get from cache, avoid lazy evaluation\n        if (cacheEnabled && theme) {\n          const stylesThemeCache = stylesCache.get(theme) || {};\n          if (stylesThemeCache[slotCacheKey]) {\n            return stylesThemeCache[slotCacheKey];\n          }\n        }\n\n        if (resolvedStyles[lazyEvaluationKey]) {\n          return resolvedStyles[lazyEvaluationKey];\n        }\n\n        const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n\n        // resolve/render slot styles once and cache\n        resolvedStyles[lazyEvaluationKey] = mergedStyles[slotName](styleParam);\n\n        if (cacheEnabled && theme) {\n          stylesCache.set(theme, {\n            ...stylesCache.get(theme),\n            [slotCacheKey]: resolvedStyles[lazyEvaluationKey],\n          });\n        }\n\n        if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n          resolvedStylesDebug[slotName] = resolvedStyles[slotName]['_debug'];\n          delete resolvedStyles[slotName]['_debug'];\n        }\n\n        if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n          telemetry.performance[primaryDisplayName].msResolveStylesTotal += performance.now() - telemetryPartStart;\n        }\n\n        return resolvedStyles[lazyEvaluationKey];\n      },\n    });\n\n    Object.defineProperty(classes, slotName, {\n      enumerable: false,\n      configurable: false,\n      set(val: string) {\n        if (cacheEnabled && theme) {\n          classesCache.set(theme, {\n            ...classesCache.get(theme),\n            [slotCacheKey]: val,\n          });\n        }\n\n        classes[lazyEvaluationKey] = val;\n      },\n      get(): string {\n        if (cacheEnabled && theme) {\n          const classesThemeCache = classesCache.get(theme) || {};\n\n          //\n          // Cached styles\n          //\n\n          if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === '') {\n            if (telemetry?.performance[primaryDisplayName]) {\n              if (slotName === 'root') {\n                telemetry.performance[primaryDisplayName].stylesRootCacheHits++;\n              } else {\n                telemetry.performance[primaryDisplayName].stylesSlotsCacheHits++;\n              }\n            }\n\n            return slotName === 'root'\n              ? cx(componentClassName, classesThemeCache[slotCacheKey], className)\n              : classesThemeCache[slotCacheKey];\n          }\n        }\n\n        //\n        // Lazy eval\n        //\n\n        if (classes[lazyEvaluationKey]) {\n          return slotName === 'root'\n            ? cx(componentClassName, classes[lazyEvaluationKey], className)\n            : classes[lazyEvaluationKey];\n        }\n\n        // this resolves the getter magic\n        const styleObj = resolvedStyles[slotName];\n        const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n\n        if (styleObj) {\n          classes[lazyEvaluationKey] = renderer.renderRule(styleObj, rendererParam);\n\n          if (cacheEnabled && theme) {\n            classesCache.set(theme, {\n              ...classesCache.get(theme),\n              [slotCacheKey]: classes[lazyEvaluationKey],\n            });\n          }\n        }\n\n        const resultClassName =\n          slotName === 'root'\n            ? cx(componentClassName, classes[lazyEvaluationKey], className)\n            : classes[lazyEvaluationKey];\n\n        if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n          telemetry.performance[primaryDisplayName].msRenderStylesTotal += performance.now() - telemetryPartStart;\n        }\n\n        return resultClassName;\n      },\n    });\n  });\n\n  return {\n    resolvedStyles,\n    resolvedStylesDebug,\n    classes,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}