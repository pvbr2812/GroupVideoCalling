{"ast":null,"code":"export var createManager = function createManager(config) {\n  var actions = config.actions,\n      debug = config.debug,\n      _config$middleware = config.middleware,\n      middleware = _config$middleware === void 0 ? [] : _config$middleware,\n      _config$sideEffects = config.sideEffects,\n      sideEffects = _config$sideEffects === void 0 ? [] : _config$sideEffects,\n      state = config.state;\n\n  var _state = Object.assign({}, state);\n\n  var getState = function getState() {\n    return Object.assign({}, _state);\n  };\n\n  var setState = function setState(partial) {\n    return Object.assign(_state, partial);\n  };\n\n  var manager = {\n    actions: {},\n\n    get state() {\n      return getState();\n    }\n\n  }; // assign actions to manager's api\n\n  Object.keys(actions).forEach(function (actionName) {\n    var enhancedAction = actions[actionName];\n\n    var action = function action() {\n      var prevState = getState();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      applyAction.apply(void 0, [enhancedAction].concat(args));\n      applyMiddleware(prevState);\n      applySideEffects(prevState);\n    };\n\n    manager.actions[actionName] = action;\n  });\n\n  var applyAction = function applyAction(action) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (debug) {\n        // eslint-disable-next-line no-console\n        console.log('manager ACTION', action.name || 'Anonymous');\n      }\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    var actionResult = action.apply(void 0, args)(getState(), manager.actions);\n\n    if (actionResult) {\n      setState(actionResult);\n    }\n  };\n\n  var applyMiddleware = function applyMiddleware(prevState) {\n    middleware.forEach(function (middlewareItem, index) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (debug) {\n          // eslint-disable-next-line no-console\n          console.log(\"manager MIDDLEWARE[\" + index + \"]\", {\n            prev: prevState,\n            next: getState()\n          });\n        }\n      }\n\n      setState(middlewareItem(prevState, getState(), manager.actions));\n    });\n  };\n\n  var applySideEffects = function applySideEffects(prevState) {\n    sideEffects.forEach(function (sideEffect, index) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (debug) {\n          // eslint-disable-next-line no-console\n          console.log(\"manager SIDE_EFFECT[\" + index + \"]\");\n        }\n      }\n\n      sideEffect(prevState, manager.state);\n    });\n  };\n\n  return manager;\n};","map":{"version":3,"sources":["createManager.ts"],"names":["createManager","actions","debug","middleware","sideEffects","state","config","_state","getState","setState","Object","manager","enhancedAction","action","args","prevState","applyAction","applyMiddleware","applySideEffects","process","console","actionResult","prev","next","middlewareItem","sideEffect"],"mappings":"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","sourcesContent":["import { AnyActions, EnhancedAction, Manager, ManagerConfig } from './types';\n\nexport const createManager = <State, Actions extends AnyActions>(\n  config: ManagerConfig<State, Actions>,\n): Manager<State, Actions> => {\n  const { actions, debug, middleware = [], sideEffects = [], state } = config;\n  const _state: State = { ...state } as State;\n\n  const getState = (): State => ({ ..._state });\n  const setState = (partial: Partial<State>): State => Object.assign(_state, partial);\n\n  const manager: Manager<State, Actions> = {\n    actions: {} as Actions,\n    get state() {\n      return getState();\n    },\n  };\n\n  // assign actions to manager's api\n  Object.keys(actions).forEach(actionName => {\n    const enhancedAction = actions[actionName];\n    const action = (...args: Parameters<typeof enhancedAction>) => {\n      const prevState = getState();\n\n      applyAction(enhancedAction, ...args);\n\n      applyMiddleware(prevState);\n      applySideEffects(prevState);\n    };\n    (manager.actions as any)[actionName] = action;\n  });\n\n  const applyAction = <A extends EnhancedAction<State, Actions>>(action: A, ...args: Parameters<A>) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (debug) {\n        // eslint-disable-next-line no-console\n        console.log('manager ACTION', action.name || 'Anonymous');\n      }\n    }\n    const actionResult = action(...args)(getState(), manager.actions);\n\n    if (actionResult) {\n      setState(actionResult);\n    }\n  };\n\n  const applyMiddleware = (prevState: State) => {\n    middleware.forEach((middlewareItem, index) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (debug) {\n          // eslint-disable-next-line no-console\n          console.log(`manager MIDDLEWARE[${index}]`, {\n            prev: prevState,\n            next: getState(),\n          });\n        }\n      }\n\n      setState(middlewareItem(prevState, getState(), manager.actions));\n    });\n  };\n\n  const applySideEffects = (prevState: State): void => {\n    sideEffects.forEach((sideEffect, index) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (debug) {\n          // eslint-disable-next-line no-console\n          console.log(`manager SIDE_EFFECT[${index}]`);\n        }\n      }\n\n      sideEffect(prevState, manager.state);\n    });\n  };\n\n  return manager;\n};\n"]},"metadata":{},"sourceType":"module"}