{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OpenCensusTraceStateWrapper } from \"./openCensusTraceStateWrapper\";\n\nfunction isWrappedSpan(span) {\n  return !!span && span.getWrappedSpan !== undefined;\n}\n\nfunction isTracer(tracerOrSpan) {\n  return tracerOrSpan.getWrappedTracer !== undefined;\n}\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\n\n\nvar OpenCensusSpanWrapper =\n/** @class */\nfunction () {\n  function OpenCensusSpanWrapper(tracerOrSpan, name, options) {\n    if (name === void 0) {\n      name = \"\";\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (isTracer(tracerOrSpan)) {\n      var parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;\n      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n        name: name,\n        childOf: parent\n      });\n\n      this._span.start();\n\n      if (options.links) {\n        for (var _i = 0, _a = options.links; _i < _a.length; _i++) {\n          var link = _a[_i]; // Since there is no way to set the link relationship, leave it as Unspecified.\n\n          this._span.addLink(link.context.traceId, link.context.spanId, 0\n          /* LinkType.UNSPECIFIED */\n          , link.attributes);\n        }\n      }\n    } else {\n      this._span = tracerOrSpan;\n    }\n  }\n  /**\n   * The underlying OpenCensus Span\n   */\n\n\n  OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {\n    return this._span;\n  };\n  /**\n   * Marks the end of Span execution.\n   * @param endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n\n\n  OpenCensusSpanWrapper.prototype.end = function (_endTime) {\n    this._span.end();\n  };\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n\n\n  OpenCensusSpanWrapper.prototype.context = function () {\n    var openCensusSpanContext = this._span.spanContext;\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceFlags: openCensusSpanContext.options,\n      traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n    };\n  };\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n\n\n  OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {\n    this._span.addAttribute(key, value);\n\n    return this;\n  };\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n\n\n  OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {\n    this._span.attributes = attributes;\n    return this;\n  };\n  /**\n   * Adds an event to the Span\n   * @param name The name of the event\n   * @param attributes The associated attributes to add for this event\n   */\n\n\n  OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n\n\n  OpenCensusSpanWrapper.prototype.setStatus = function (status) {\n    this._span.setStatus(status.code, status.message);\n\n    return this;\n  };\n  /**\n   * Updates the name of the Span\n   * @param name the new Span name\n   */\n\n\n  OpenCensusSpanWrapper.prototype.updateName = function (name) {\n    this._span.name = name;\n    return this;\n  };\n  /**\n   * Returns whether this span will be recorded\n   */\n\n\n  OpenCensusSpanWrapper.prototype.isRecording = function () {\n    // NoRecordSpans have an empty traceId\n    return !!this._span.traceId;\n  };\n\n  return OpenCensusSpanWrapper;\n}();\n\nexport { OpenCensusSpanWrapper };","map":{"version":3,"sources":["../../../../src/tracers/opencensus/openCensusSpanWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SpanContext, Span, SpanOptions, Attributes, Status, TraceFlags } from \"@opentelemetry/api\";\nimport { OpenCensusTraceStateWrapper } from \"./openCensusTraceStateWrapper\";\nimport { OpenCensusTracerWrapper } from \"./openCensusTracerWrapper\";\nimport { Attributes as OpenCensusAttributes, Span as OpenCensusSpan } from \"@opencensus/web-types\";\n\nfunction isWrappedSpan(span?: Span | SpanContext | null): span is OpenCensusSpanWrapper {\n  return !!span && (span as OpenCensusSpanWrapper).getWrappedSpan !== undefined;\n}\n\nfunction isTracer(\n  tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan\n): tracerOrSpan is OpenCensusTracerWrapper {\n  return (tracerOrSpan as OpenCensusTracerWrapper).getWrappedTracer !== undefined;\n}\n\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\nexport class OpenCensusSpanWrapper implements Span {\n  private _span: OpenCensusSpan;\n\n  /**\n   * The underlying OpenCensus Span\n   */\n  public getWrappedSpan(): OpenCensusSpan {\n    return this._span;\n  }\n\n  /**\n   * Wraps an existing OpenCensus Span\n   * @param span A Span or RootSpan from OpenCensus\n   */\n  constructor(span: OpenCensusSpan);\n  /**\n   * Create a new OpenCensus Span and wrap it.\n   * @param tracer The OpenCensus tracer that has been wrapped in OpenCensusTracerWrapper\n   * @param name The name of the Span\n   * @param options Options for the Span\n   */\n  constructor(tracer: OpenCensusTracerWrapper, name: string, options?: SpanOptions);\n  constructor(\n    tracerOrSpan: OpenCensusTracerWrapper | OpenCensusSpan,\n    name: string = \"\",\n    options: SpanOptions = {}\n  ) {\n    if (isTracer(tracerOrSpan)) {\n      const parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;\n      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n        name,\n        childOf: parent\n      });\n      this._span.start();\n      if (options.links) {\n        for (const link of options.links) {\n          // Since there is no way to set the link relationship, leave it as Unspecified.\n          this._span.addLink(\n            link.context.traceId,\n            link.context.spanId,\n            0 /* LinkType.UNSPECIFIED */,\n            link.attributes as OpenCensusAttributes\n          );\n        }\n      }\n    } else {\n      this._span = tracerOrSpan;\n    }\n  }\n\n  /**\n   * Marks the end of Span execution.\n   * @param endTime The time to use as the Span's end time. Defaults to\n   * the current time.\n   */\n  end(_endTime?: number): void {\n    this._span.end();\n  }\n\n  /**\n   * Returns the SpanContext associated with this Span.\n   */\n  context(): SpanContext {\n    const openCensusSpanContext = this._span.spanContext;\n\n    return {\n      spanId: openCensusSpanContext.spanId,\n      traceId: openCensusSpanContext.traceId,\n      traceFlags: openCensusSpanContext.options as TraceFlags,\n      traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n    };\n  }\n\n  /**\n   * Sets an attribute on the Span\n   * @param key the attribute key\n   * @param value the attribute value\n   */\n  setAttribute(key: string, value: unknown): this {\n    this._span.addAttribute(key, value as any);\n    return this;\n  }\n\n  /**\n   * Sets attributes on the Span\n   * @param attributes the attributes to add\n   */\n  setAttributes(attributes: Attributes): this {\n    this._span.attributes = attributes as OpenCensusAttributes;\n    return this;\n  }\n\n  /**\n   * Adds an event to the Span\n   * @param name The name of the event\n   * @param attributes The associated attributes to add for this event\n   */\n  addEvent(_name: string, _attributes?: Attributes): this {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Sets a status on the span. Overrides the default of CanonicalCode.OK.\n   * @param status The status to set.\n   */\n  setStatus(status: Status): this {\n    this._span.setStatus(status.code, status.message);\n    return this;\n  }\n\n  /**\n   * Updates the name of the Span\n   * @param name the new Span name\n   */\n  updateName(name: string): this {\n    this._span.name = name;\n    return this;\n  }\n\n  /**\n   * Returns whether this span will be recorded\n   */\n  isRecording(): boolean {\n    // NoRecordSpans have an empty traceId\n    return !!this._span.traceId;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}