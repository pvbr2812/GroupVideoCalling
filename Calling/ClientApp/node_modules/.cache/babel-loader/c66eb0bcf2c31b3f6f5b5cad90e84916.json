{"ast":null,"code":"import { buttonBehavior } from './buttonBehavior';\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-pressed=true' based on the property 'active'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\n\nexport var toggleButtonBehavior = function toggleButtonBehavior(props) {\n  var behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = Object.assign({}, behaviorData.attributes.root, {\n    'aria-pressed': !!props['active']\n  });\n  return behaviorData;\n};","map":{"version":3,"sources":["behaviors/Button/toggleButtonBehavior.ts"],"names":["toggleButtonBehavior","behaviorData","buttonBehavior","props"],"mappings":"AACA,SAAA,cAAA,QAAA,kBAAA;AAEA;;;;;;;;;AAQA,OAAO,IAAMA,oBAA8D,GAAG,SAAjEA,oBAAiE,CAAA,KAAA,EAAS;AACrF,MAAMC,YAAY,GAAGC,cAAc,CAAnC,KAAmC,CAAnC;AACAD,EAAAA,YAAY,CAAZA,UAAAA,CAAAA,IAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKA,YAAY,CAAZA,UAAAA,CADLA,IAAAA,EAAAA;AAEE,oBAAgB,CAAC,CAACE,KAAK,CAAA,QAAA;AAFzBF,GAAAA,CAAAA;AAKA,SAAA,YAAA;AAPK,CAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport { buttonBehavior, ButtonBehaviorProps } from './buttonBehavior';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-pressed=true' based on the property 'active'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\nexport const toggleButtonBehavior: Accessibility<ToggleButtonBehaviorProps> = props => {\n  const behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = {\n    ...behaviorData.attributes.root,\n    'aria-pressed': !!props['active'],\n  };\n\n  return behaviorData;\n};\n\ntype ToggleButtonBehaviorProps = ButtonBehaviorProps & {\n  /** Indicates if a button is in pressed state. */\n  active: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}