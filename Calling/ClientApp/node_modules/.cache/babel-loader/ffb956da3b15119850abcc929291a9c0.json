{"ast":null,"code":"import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nexport var commonPropTypes = {\n  createCommon: function createCommon(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _config = config,\n        _config$accessibility = _config.accessibility,\n        accessibility = _config$accessibility === void 0 ? true : _config$accessibility,\n        _config$as = _config.as,\n        as = _config$as === void 0 ? true : _config$as,\n        _config$children = _config.children,\n        children = _config$children === void 0 ? 'node' : _config$children,\n        _config$className = _config.className,\n        className = _config$className === void 0 ? true : _config$className,\n        _config$color = _config.color,\n        color = _config$color === void 0 ? false : _config$color,\n        _config$content = _config.content,\n        content = _config$content === void 0 ? 'node' : _config$content,\n        _config$styled = _config.styled,\n        styled = _config$styled === void 0 ? true : _config$styled;\n    return Object.assign({}, accessibility && {\n      accessibility: customPropTypes.accessibility\n    }, as && {\n      as: PropTypes.elementType\n    }, children && {\n      children: children === 'element' ? PropTypes.element : PropTypes.node\n    }, className && {\n      className: PropTypes.string\n    }, color && {\n      color: PropTypes.string\n    }, content && {\n      content: content === 'shorthand' ? customPropTypes.itemShorthand : customPropTypes.nodeContent\n    }, styled && {\n      styles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n      variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n      design: customPropTypes.design\n    });\n  }\n};","map":{"version":3,"sources":["utils/commonPropTypes.ts"],"names":["commonPropTypes","createCommon","config","accessibility","as","children","className","color","content","styled","customPropTypes","PropTypes","elementType","node","string","nodeContent","styles","variables","design"],"mappings":"AAEA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAmDA,OAAO,IAAMA,eAAe,GAAG;AAC7BC,EAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,MAAA,EAAqC;AAAA,QAApCC,MAAoC,KAAA,KAAA,CAAA,EAAA;AAApCA,MAAAA,MAAoC,GAAP,EAA7BA;AAAoC;;AAAA,QAAA,OAAA,GAAA,MAAA;AAAA,QAAA,qBAAA,GAAA,OAAA,CAAA,aAAA;AAAA,QAE/CC,aAF+C,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,qBAAA;AAAA,QAAA,UAAA,GAAA,OAAA,CAAA,EAAA;AAAA,QAG/CC,EAH+C,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,UAAA;AAAA,QAAA,gBAAA,GAAA,OAAA,CAAA,QAAA;AAAA,QAI/CC,QAJ+C,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,gBAAA;AAAA,QAAA,iBAAA,GAAA,OAAA,CAAA,SAAA;AAAA,QAK/CC,SAL+C,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,iBAAA;AAAA,QAAA,aAAA,GAAA,OAAA,CAAA,KAAA;AAAA,QAM/CC,KAN+C,GAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,aAAA;AAAA,QAAA,eAAA,GAAA,OAAA,CAAA,OAAA;AAAA,QAO/CC,OAP+C,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,eAAA;AAAA,QAAA,cAAA,GAAA,OAAA,CAAA,MAAA;AAAA,QAQ/CC,MAR+C,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,cAAA;AAUjD,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACMN,aAAa,IAAI;AACnBA,MAAAA,aAAa,EAAEO,eAAe,CAACP;AADZ,KADvB,EAIMC,EAAE,IAAI;AACRA,MAAAA,EAAE,EAAEO,SAAS,CAACC;AADN,KAJZ,EAOMP,QAAQ,IAAI;AACdA,MAAAA,QAAQ,EAAEA,QAAQ,KAARA,SAAAA,GAAyBM,SAAS,CAAlCN,OAAAA,GAA6CM,SAAS,CAACE;AADnD,KAPlB,EAUMP,SAAS,IAAI;AACfA,MAAAA,SAAS,EAAEK,SAAS,CAACG;AADN,KAVnB,EAaMP,KAAK,IAAI;AACXA,MAAAA,KAAK,EAAEI,SAAS,CAACG;AADN,KAbf,EAgBMN,OAAO,IAAI;AACbA,MAAAA,OAAO,EAAEA,OAAO,KAAPA,WAAAA,GAA0BE,eAAe,CAAzCF,aAAAA,GAA0DE,eAAe,CAACK;AADtE,KAhBjB,EAmBMN,MAAM,IAAI;AACZO,MAAAA,MAAM,EAAEL,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAD5C,IACgB,CAApBA,CADI;AAEZM,MAAAA,SAAS,EAAEN,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAF/C,IAEmB,CAApBA,CAFC;AAGZO,MAAAA,MAAM,EAAER,eAAe,CAACQ;AAHZ,KAnBhB,CAAA;AAyBD;AApC4B,CAAxB","sourcesContent":["import { ComponentSlotStyle, ComponentVariablesInput } from '@fluentui/styles';\nimport { ComponentDesignProp } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ReactChildren } from '../types';\n\nexport interface StyledComponentProps<P = any, V = any> {\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<P, V>;\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n}\n\nexport interface UIComponentProps<P = any, V = any> extends StyledComponentProps<P, V> {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n  design?: ComponentDesignProp;\n}\n\nexport type SizeValue = 'smallest' | 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'largest';\n\nexport type AlignValue = 'start' | 'end' | 'center' | 'justify';\n\nexport interface ColorComponentProps<TColor = string> {\n  /** A component can have a color. */\n  color?: TColor;\n}\n\nexport interface ContentComponentProps<TContent = React.ReactNode> {\n  /** Shorthand for primary content. */\n  content?: TContent;\n}\n\nexport interface ChildrenComponentProps<TChildren = ReactChildren> {\n  /**\n   *  Content for childrenApi\n   *  @docSiteIgnore\n   */\n  children?: TChildren;\n}\n\nexport interface CreateCommonConfig {\n  accessibility?: boolean;\n  children?: boolean | 'node' | 'element';\n  as?: boolean;\n  className?: boolean;\n  color?: boolean;\n  content?: boolean | 'node' | 'shorthand';\n  styled?: boolean;\n}\n\nexport const commonPropTypes = {\n  createCommon: (config: CreateCommonConfig = {}) => {\n    const {\n      accessibility = true,\n      as = true,\n      children = 'node',\n      className = true,\n      color = false,\n      content = 'node',\n      styled = true,\n    } = config;\n    return {\n      ...(accessibility && {\n        accessibility: customPropTypes.accessibility,\n      }),\n      ...(as && {\n        as: PropTypes.elementType,\n      }),\n      ...(children && {\n        children: children === 'element' ? PropTypes.element : PropTypes.node,\n      }),\n      ...(className && {\n        className: PropTypes.string,\n      }),\n      ...(color && {\n        color: PropTypes.string,\n      }),\n      ...(content && {\n        content: content === 'shorthand' ? customPropTypes.itemShorthand : customPropTypes.nodeContent,\n      }),\n      ...(styled && {\n        styles: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n        variables: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n        design: customPropTypes.design,\n      }),\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}