{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __extends, __generator } from \"tslib\"; // BaseRequestPolicy has a protected constructor.\n\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function ndJsonPolicy() {\n  return {\n    create: function (nextPolicy, options) {\n      return new NdJsonPolicy(nextPolicy, options);\n    }\n  };\n}\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\n\nvar NdJsonPolicy =\n/** @class */\nfunction (_super) {\n  __extends(NdJsonPolicy, _super);\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n\n\n  function NdJsonPolicy(nextPolicy, options) {\n    return _super.call(this, nextPolicy, options) || this;\n  }\n  /**\n   * Sends a request.\n   */\n\n\n  NdJsonPolicy.prototype.sendRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var body;\n      return __generator(this, function (_a) {\n        // There currently isn't a good way to bypass the serializer\n        if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n          body = JSON.parse(request.body);\n\n          if (Array.isArray(body)) {\n            request.body = body.map(function (item) {\n              return JSON.stringify(item) + \"\\n\";\n            }).join(\"\");\n          }\n        }\n\n        return [2\n        /*return*/\n        , this._nextPolicy.sendRequest(request)];\n      });\n    });\n  };\n\n  return NdJsonPolicy;\n}(BaseRequestPolicy);","map":{"version":3,"sources":["../../../src/policies/ndJsonPolicy.ts"],"names":[],"mappings":"AAAA;AACA;2DAEA;;AACA;;AAEA,SACE,iBADF,QAKO,iBALP;AASA,OAAM,SAAU,YAAV,GAAsB;AAC1B,SAAO;AACL,IAAA,MAAM,EAAE,UAAC,UAAD,EAA4B,OAA5B,EAAyD;AAC/D,aAAO,IAAI,YAAJ,CAAiB,UAAjB,EAA6B,OAA7B,CAAP;AACD;AAHI,GAAP;AAKD;AAED;;AAEG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;AACzB;;AAEG;;;AACH,WAAA,YAAA,CAAY,UAAZ,EAAuC,OAAvC,EAAoE;WAClE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,EAAkB,OAAlB,KAA0B,I;AAC3B;AAED;;AAEG;;;AACU,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAb,UAAyB,OAAzB,EAAiD;;;;AAC/C;AACA,YAAI,OAAO,OAAO,CAAC,IAAf,KAAwB,QAAxB,IAAoC,OAAO,CAAC,IAAR,CAAa,UAAb,CAAwB,GAAxB,CAAxC,EAAsE;AAC9D,UAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,IAAnB,CAAP;;AACN,cAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,YAAA,OAAO,CAAC,IAAR,GAAe,IAAI,CAAC,GAAL,CAAS,UAAC,IAAD,EAAK;AAAK,qBAAA,IAAI,CAAC,SAAL,CAAe,IAAf,IAAA,IAAA;AAA2B,aAA9C,EAAgD,IAAhD,CAAqD,EAArD,CAAf;AACD;AACF;;AACD,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP,CAAA;;;AACD,GATY;;AAUf,SAAA,YAAA;AAAC,CArBD,CAA2B,iBAA3B,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// BaseRequestPolicy has a protected constructor.\n/* eslint-disable @typescript-eslint/no-useless-constructor */\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory\n} from \"./requestPolicy\";\nimport { WebResourceLike } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\n\nexport function ndJsonPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new NdJsonPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * NdJsonPolicy that formats a JSON array as newline-delimited JSON\n */\nclass NdJsonPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of KeepAlivePolicy.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends a request.\n   */\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    // There currently isn't a good way to bypass the serializer\n    if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n      const body = JSON.parse(request.body);\n      if (Array.isArray(body)) {\n        request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n      }\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}