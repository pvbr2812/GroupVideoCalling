{"ast":null,"code":"import { compose } from '@fluentui/react-bindings';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes } from '../../utils';\nimport { Box } from '../Box/Box';\nexport var menuItemIndicatorClassName = 'ui-menu__itemindicator';\n/**\n * A MenuItemIndicator allows a user to have a dedicated component that can be targeted from the theme.\n */\n\nexport var MenuItemIndicator = /*#__PURE__*/function () {\n  var MenuItemIndicator = compose(Box, {\n    className: menuItemIndicatorClassName,\n    displayName: 'MenuItemIndicator',\n    mapPropsToStylesProps: function mapPropsToStylesProps(props) {\n      return {\n        iconOnly: props.iconOnly,\n        vertical: props.vertical,\n        inSubmenu: props.inSubmenu,\n        active: props.active,\n        primary: props.primary,\n        underlined: props.underlined\n      };\n    },\n    handledProps: ['iconOnly', 'vertical', 'inSubmenu', 'active', 'primary', 'underlined'],\n    overrideStyles: true,\n    shorthandConfig: {\n      mappedProp: 'content'\n    }\n  });\n  MenuItemIndicator.defaultProps = {\n    as: 'span',\n    accessibility: indicatorBehavior\n  };\n  MenuItemIndicator.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    iconOnly: PropTypes.bool,\n    vertical: PropTypes.bool,\n    inSubmenu: PropTypes.bool,\n    active: PropTypes.bool,\n    primary: PropTypes.bool,\n    underlined: PropTypes.bool\n  });\n  return MenuItemIndicator;\n}();","map":{"version":3,"sources":["components/Menu/MenuItemIndicator.tsx"],"names":["menuItemIndicatorClassName","MenuItemIndicator","compose","className","displayName","mapPropsToStylesProps","iconOnly","props","vertical","inSubmenu","active","primary","underlined","handledProps","overrideStyles","shorthandConfig","mappedProp","as","accessibility","indicatorBehavior","commonPropTypes","PropTypes","bool"],"mappings":"AAAA,SAAA,OAAA,QAAA,0BAAA;AACA,SAAA,iBAAA,QAAA,yBAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,SAAA,eAAA,QAAA,aAAA;AACA,SAAA,GAAA,QAAA,YAAA;AA4BA,OAAO,IAAMA,0BAA0B,GAAhC,wBAAA;AAEP;;;;AAGA,OAAO,IAAMC,iBAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,iBAAiB,GAAGC,OAAO,CAAA,GAAA,EAEtC;AACEC,IAAAA,SAAS,EADX,0BAAA;AAEEC,IAAAA,WAAW,EAFb,mBAAA;AAGEC,IAAAA,qBAAqB,EAAE,SAAA,qBAAA,CAAA,KAAA,EAAK;AAAA,aAAK;AAC/BC,QAAAA,QAAQ,EAAEC,KAAK,CADgB,QAAA;AAE/BC,QAAAA,QAAQ,EAAED,KAAK,CAFgB,QAAA;AAG/BE,QAAAA,SAAS,EAAEF,KAAK,CAHe,SAAA;AAI/BG,QAAAA,MAAM,EAAEH,KAAK,CAJkB,MAAA;AAK/BI,QAAAA,OAAO,EAAEJ,KAAK,CALiB,OAAA;AAM/BK,QAAAA,UAAU,EAAEL,KAAK,CAACK;AANa,OAAL;AAH9B,KAAA;AAWEC,IAAAA,YAAY,EAAE,CAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,SAAA,EAXhB,YAWgB,CAXhB;AAaEC,IAAAA,cAAc,EAbhB,IAAA;AAcEC,IAAAA,eAAe,EAAE;AACfC,MAAAA,UAAU,EAAE;AADG;AAdnB,GAFsC,CAAjC;AAsBPf,EAAAA,iBAAiB,CAAjBA,YAAAA,GAAiC;AAC/BgB,IAAAA,EAAE,EAD6B,MAAA;AAE/BC,IAAAA,aAAa,EAAEC;AAFgB,GAAjClB;AAIAA,EAAAA,iBAAiB,CAAjBA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKmB,eAAe,CADpBnB,YACKmB,EADLnB,EAAAA;AAEEK,IAAAA,QAAQ,EAAEe,SAAS,CAFrBpB,IAAAA;AAGEO,IAAAA,QAAQ,EAAEa,SAAS,CAHrBpB,IAAAA;AAIEQ,IAAAA,SAAS,EAAEY,SAAS,CAJtBpB,IAAAA;AAKES,IAAAA,MAAM,EAAEW,SAAS,CALnBpB,IAAAA;AAMEU,IAAAA,OAAO,EAAEU,SAAS,CANpBpB,IAAAA;AAOEW,IAAAA,UAAU,EAAES,SAAS,CAACC;AAPxBrB,GAAAA,CAAAA;AA1BO,SAAA,iBAAA;AAAA,CAAA,EAAA","sourcesContent":["import { compose } from '@fluentui/react-bindings';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\n\nimport { commonPropTypes } from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\n\ninterface MenuItemIndicatorOwnProps {\n  /** Indicates if the parent menu item may have just icons. */\n  iconOnly?: boolean;\n\n  /** Indicates whether the parent menu item is inside vertical menu. */\n  vertical?: boolean;\n\n  /** Indicates whether the parent menu item is part of submenu. */\n  inSubmenu?: boolean;\n\n  /** Indicates whether the parent menu item is active. */\n  active?: boolean;\n\n  /** Indicates whether the parent menu item is primary. */\n  primary?: boolean;\n\n  /** Indicates whether the parent menu item is underlined. */\n  underlined?: boolean;\n}\n\nexport interface MenuItemIndicatorProps extends BoxProps, MenuItemIndicatorOwnProps {}\nexport type MenuItemIndicatorStylesProps = Pick<\n  MenuItemIndicatorProps,\n  'iconOnly' | 'vertical' | 'inSubmenu' | 'active' | 'primary' | 'underlined'\n>;\n\nexport const menuItemIndicatorClassName = 'ui-menu__itemindicator';\n\n/**\n * A MenuItemIndicator allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemIndicator = compose<'span', MenuItemIndicatorProps, MenuItemIndicatorStylesProps, BoxProps, {}>(\n  Box,\n  {\n    className: menuItemIndicatorClassName,\n    displayName: 'MenuItemIndicator',\n    mapPropsToStylesProps: props => ({\n      iconOnly: props.iconOnly,\n      vertical: props.vertical,\n      inSubmenu: props.inSubmenu,\n      active: props.active,\n      primary: props.primary,\n      underlined: props.underlined,\n    }),\n    handledProps: ['iconOnly', 'vertical', 'inSubmenu', 'active', 'primary', 'underlined'],\n\n    overrideStyles: true,\n    shorthandConfig: {\n      mappedProp: 'content',\n    },\n  },\n);\n\nMenuItemIndicator.defaultProps = {\n  as: 'span',\n  accessibility: indicatorBehavior,\n};\nMenuItemIndicator.propTypes = {\n  ...commonPropTypes.createCommon(),\n  iconOnly: PropTypes.bool,\n  vertical: PropTypes.bool,\n  inSubmenu: PropTypes.bool,\n  active: PropTypes.bool,\n  primary: PropTypes.bool,\n  underlined: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}