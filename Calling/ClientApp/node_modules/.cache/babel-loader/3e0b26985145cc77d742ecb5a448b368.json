{"ast":null,"code":"import { getContainerStyles, getPointerStyles } from '../../getPointerStyles';\nimport { pointerSvgUrl } from '../../pointerSvgUrl';\nexport var tooltipContentStyles = {\n  root: function root(_ref) {\n    var p = _ref.props,\n        v = _ref.variables;\n    return Object.assign({\n      display: 'none',\n      position: 'absolute',\n      maxWidth: v.maxWidth,\n      zIndex: v.zIndex\n    }, p.pointing && Object.assign({\n      pointerEvents: 'all'\n    }, getContainerStyles({\n      placement: p.basePlacement,\n      padding: v.pointerMargin\n    })), p.open && {\n      display: 'block'\n    });\n  },\n  pointer: function pointer(_ref2) {\n    var p = _ref2.props,\n        v = _ref2.variables,\n        rtl = _ref2.rtl;\n    return Object.assign({\n      display: 'block',\n      position: 'absolute',\n      width: v.pointerWidth,\n      height: v.pointerHeight\n    }, getPointerStyles({\n      backgroundColor: v.backgroundColor,\n      borderSize: v.borderSize,\n      borderColor: 'transparent',\n      gap: v.pointerGap,\n      padding: v.pointerMargin,\n      height: v.pointerHeight,\n      width: v.pointerWidth,\n      placement: p.basePlacement,\n      rtl: rtl,\n      svg: pointerSvgUrl(v.backgroundColor)\n    }));\n  },\n  content: function content(_ref3) {\n    var p = _ref3.props,\n        v = _ref3.variables;\n    return Object.assign({\n      display: 'block',\n      padding: v.padding,\n      textAlign: 'left',\n      color: v.color,\n      background: v.backgroundColor,\n      borderRadius: v.borderRadius,\n      boxShadow: v.boxShadow\n    }, p.pointing && {\n      pointerEvents: 'all'\n    });\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Tooltip/tooltipContentStyles.ts"],"names":["tooltipContentStyles","root","p","v","display","position","maxWidth","zIndex","pointerEvents","getContainerStyles","placement","padding","pointerMargin","pointer","rtl","width","height","pointerHeight","getPointerStyles","backgroundColor","borderSize","borderColor","gap","svg","pointerSvgUrl","content","textAlign","color","background","borderRadius","boxShadow"],"mappings":"AAGA,SAAA,kBAAA,EAAA,gBAAA,QAAA,wBAAA;AACA,SAAA,aAAA,QAAA,qBAAA;AAEA,OAAO,IAAMA,oBAAqG,GAAG;AACnHC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,IAAA,EAAA;AAAA,QAAUC,CAAV,GAAA,IAAA,CAAA,KAAA;AAAA,QAAwBC,CAAxB,GAAA,IAAA,CAAA,SAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA;AACJC,MAAAA,OAAO,EADH,MAAA;AAEJC,MAAAA,QAAQ,EAFJ,UAAA;AAIJC,MAAAA,QAAQ,EAAEH,CAAC,CAJP,QAAA;AAKJI,MAAAA,MAAM,EAAEJ,CAAC,CAACI;AALN,KAAA,EAOA,CAAC,CAAD,QAAA,IAAA,MAAA,CAAA,MAAA,CAAA;AACFC,MAAAA,aAAa,EAAE;AADb,KAAA,EAGCC,kBAAkB,CAAC;AACpBC,MAAAA,SAAS,EAAER,CAAC,CADQ,aAAA;AAEpBS,MAAAA,OAAO,EAAER,CAAC,CAACS;AAFS,KAAD,CAHnB,CAPA,EAgBAV,CAAC,CAADA,IAAAA,IAAU;AACZE,MAAAA,OAAO,EAAE;AADG,KAhBV,CAAA;AAD6G,GAAA;AAqBnHS,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAA;AAAA,QAAUX,CAAV,GAAA,KAAA,CAAA,KAAA;AAAA,QAAwBC,CAAxB,GAAA,KAAA,CAAA,SAAA;AAAA,QAA2BW,GAA3B,GAAA,KAAA,CAAA,GAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA;AACPV,MAAAA,OAAO,EADA,OAAA;AAEPC,MAAAA,QAAQ,EAFD,UAAA;AAGPU,MAAAA,KAAK,EAAEZ,CAAC,CAHD,YAAA;AAIPa,MAAAA,MAAM,EAAEb,CAAC,CAACc;AAJH,KAAA,EAMJC,gBAAgB,CAAC;AAClBC,MAAAA,eAAe,EAAEhB,CAAC,CADA,eAAA;AAElBiB,MAAAA,UAAU,EAAEjB,CAAC,CAFK,UAAA;AAGlBkB,MAAAA,WAAW,EAHO,aAAA;AAIlBC,MAAAA,GAAG,EAAEnB,CAAC,CAJY,UAAA;AAKlBQ,MAAAA,OAAO,EAAER,CAAC,CALQ,aAAA;AAMlBa,MAAAA,MAAM,EAAEb,CAAC,CANS,aAAA;AAOlBY,MAAAA,KAAK,EAAEZ,CAAC,CAPU,YAAA;AASlBO,MAAAA,SAAS,EAAER,CAAC,CATM,aAAA;AAUlBY,MAAAA,GAAG,EAVe,GAAA;AAWlBS,MAAAA,GAAG,EAAEC,aAAa,CAACrB,CAAC,CAAF,eAAA;AAXA,KAAD,CANZ,CAAA;AArB0G,GAAA;AAyCnHsB,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAA;AAAA,QAAUvB,CAAV,GAAA,KAAA,CAAA,KAAA;AAAA,QAAwBC,CAAxB,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA;AACPC,MAAAA,OAAO,EADA,OAAA;AAEPO,MAAAA,OAAO,EAAER,CAAC,CAFH,OAAA;AAGPuB,MAAAA,SAAS,EAHF,MAAA;AAKPC,MAAAA,KAAK,EAAExB,CAAC,CALD,KAAA;AAMPyB,MAAAA,UAAU,EAAEzB,CAAC,CANN,eAAA;AAOP0B,MAAAA,YAAY,EAAE1B,CAAC,CAPR,YAAA;AAQP2B,MAAAA,SAAS,EAAE3B,CAAC,CAAC2B;AARN,KAAA,EAUH5B,CAAC,CAADA,QAAAA,IAAc;AAChBM,MAAAA,aAAa,EAAE;AADC,KAVX,CAAA;AAAA;AAzC0G,CAA9G","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { TooltipContentStylesProps } from '../../../../components/Tooltip/TooltipContent';\nimport { TooltipContentVariables } from './tooltipContentVariables';\nimport { getContainerStyles, getPointerStyles } from '../../getPointerStyles';\nimport { pointerSvgUrl } from '../../pointerSvgUrl';\n\nexport const tooltipContentStyles: ComponentSlotStylesPrepared<TooltipContentStylesProps, TooltipContentVariables> = {\n  root: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    display: 'none',\n    position: 'absolute',\n\n    maxWidth: v.maxWidth,\n    zIndex: v.zIndex,\n\n    ...(p.pointing && {\n      pointerEvents: 'all',\n\n      ...getContainerStyles({\n        placement: p.basePlacement,\n        padding: v.pointerMargin,\n      }),\n    }),\n\n    ...(p.open && {\n      display: 'block',\n    }),\n  }),\n  pointer: ({ props: p, variables: v, rtl }): ICSSInJSStyle => ({\n    display: 'block',\n    position: 'absolute',\n    width: v.pointerWidth,\n    height: v.pointerHeight,\n\n    ...getPointerStyles({\n      backgroundColor: v.backgroundColor,\n      borderSize: v.borderSize,\n      borderColor: 'transparent',\n      gap: v.pointerGap,\n      padding: v.pointerMargin,\n      height: v.pointerHeight,\n      width: v.pointerWidth,\n\n      placement: p.basePlacement,\n      rtl,\n      svg: pointerSvgUrl(v.backgroundColor),\n    }),\n  }),\n  content: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    display: 'block',\n    padding: v.padding,\n    textAlign: 'left',\n\n    color: v.color,\n    background: v.backgroundColor,\n    borderRadius: v.borderRadius,\n    boxShadow: v.boxShadow,\n\n    ...(p.pointing && {\n      pointerEvents: 'all',\n    }),\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}