{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { useTelemetry, getElementType, useAccessibility, useFluentContext, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var segmentClassName = 'ui-segment';\n/**\n * A Segment visually groups related content.\n */\n\nexport var Segment = /*#__PURE__*/function () {\n  var Segment = function Segment(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Segment.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        content = props.content,\n        color = props.color,\n        inverted = props.inverted,\n        disabled = props.disabled,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Segment.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Segment.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Segment.displayName, {\n      className: segmentClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          color: color,\n          inverted: inverted,\n          disabled: disabled\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : Box.create(content)));\n    setEnd();\n    return element;\n  };\n\n  Segment.displayName = 'Segment';\n  Segment.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand',\n    color: true\n  }), {\n    disabled: PropTypes.bool,\n    inverted: PropTypes.bool\n  });\n  Segment.handledProps = Object.keys(Segment.propTypes);\n  Segment.create = createShorthandFactory({\n    Component: Segment\n  });\n  return Segment;\n}();","map":{"version":3,"sources":["components/Segment/Segment.tsx"],"names":["segmentClassName","Segment","context","useFluentContext","setStart","setEnd","useTelemetry","children","content","color","inverted","disabled","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","forElements","childrenExist","Box","PropTypes","bool","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ColorComponentProps,\n  createShorthandFactory,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface SegmentProps\n  extends UIComponentProps<SegmentProps>,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An segment can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted?: boolean;\n}\n\nexport type SegmentStylesProps = Required<Pick<SegmentProps, 'color' | 'inverted' | 'disabled'>>;\n\nexport const segmentClassName = 'ui-segment';\n\n/**\n * A Segment visually groups related content.\n */\nexport const Segment: ComponentWithAs<'div', SegmentProps> & FluentComponentStaticProps<SegmentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Segment.displayName, context.telemetry);\n  setStart();\n  const { children, content, color, inverted, disabled, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Segment.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Segment.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<SegmentStylesProps>(Segment.displayName, {\n    className: segmentClassName,\n    mapPropsToStyles: () => ({\n      color,\n      inverted,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : Box.create(content)}\n    </ElementType>,\n  );\n\n  setEnd();\n  return element;\n};\n\nSegment.displayName = 'Segment';\n\nSegment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n    color: true,\n  }),\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\nSegment.handledProps = Object.keys(Segment.propTypes) as any;\n\nSegment.create = createShorthandFactory({\n  Component: Segment,\n});\n"]},"metadata":{},"sourceType":"module"}