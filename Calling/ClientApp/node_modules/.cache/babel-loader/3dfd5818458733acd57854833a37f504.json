{"ast":null,"code":"import * as React from 'react';\nimport { useFluentContext, useStyles, getUnhandledProps } from '@fluentui/react-bindings';\nexport var svgIconClassName = 'ui-icon';\nexport var svgIconDisplayName = 'SvgIcon';\nexport var svgIconHandledProps = ['bordered', 'className', 'circular', 'design', 'disabled', 'outline', 'size', 'rotate', 'styles', 'variables', 'xSpacing'];\nexport var createSvgIcon = function createSvgIcon(_ref) {\n  var svg = _ref.svg,\n      displayName = _ref.displayName,\n      _ref$handledProps = _ref.handledProps,\n      handledProps = _ref$handledProps === void 0 ? [] : _ref$handledProps;\n\n  var Component = function Component(props) {\n    var context = useFluentContext();\n    var alt = props.alt,\n        ariaLabel = props['aria-label'],\n        bordered = props.bordered,\n        circular = props.circular,\n        className = props.className,\n        design = props.design,\n        disabled = props.disabled,\n        outline = props.outline,\n        _props$rotate = props.rotate,\n        rotate = _props$rotate === void 0 ? 0 : _props$rotate,\n        _props$size = props.size,\n        size = _props$size === void 0 ? 'medium' : _props$size,\n        styles = props.styles,\n        variables = props.variables,\n        xSpacing = props.xSpacing;\n\n    var _useStyles = useStyles(svgIconDisplayName, {\n      className: svgIconClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          bordered: bordered,\n          circular: circular,\n          disabled: disabled,\n          outline: outline,\n          rotate: rotate,\n          size: size,\n          xSpacing: xSpacing\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var unhandledProps = getUnhandledProps([].concat(svgIconHandledProps, handledProps), props);\n    return /*#__PURE__*/React.createElement('span', Object.assign({\n      role: 'img',\n      'aria-hidden': alt || ariaLabel ? undefined : 'true',\n      'aria-label': ariaLabel,\n      className: classes.root\n    }, unhandledProps), svg({\n      classes: classes,\n      rtl: context.rtl,\n      props: props\n    }));\n  };\n\n  Component.displayName = displayName;\n  Component.handledProps = [].concat(svgIconHandledProps, handledProps);\n  return Component;\n};","map":{"version":3,"sources":["utils/createSvgIcon.ts"],"names":["svgIconClassName","svgIconDisplayName","svgIconHandledProps","createSvgIcon","svg","displayName","handledProps","Component","context","useFluentContext","alt","ariaLabel","bordered","circular","className","design","disabled","outline","rotate","size","styles","variables","xSpacing","props","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","unhandledProps","getUnhandledProps","role","root"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFluentContext, useStyles, getUnhandledProps } from '@fluentui/react-bindings';\n\nimport { SvgIconCreateFnParams, SvgIconProps } from './types';\n\nexport const svgIconClassName = 'ui-icon';\nexport const svgIconDisplayName = 'SvgIcon';\n\nexport const svgIconHandledProps: (keyof SvgIconProps)[] = [\n  'bordered',\n  'className',\n  'circular',\n  'design',\n  'disabled',\n  'outline',\n  'size',\n  'rotate',\n  'styles',\n  'variables',\n  'xSpacing',\n];\n\nexport const createSvgIcon = <TProps = {}>({ svg, displayName, handledProps = [] }: SvgIconCreateFnParams<TProps>) => {\n  const Component: React.FC<React.HTMLAttributes<HTMLSpanElement> & TProps & SvgIconProps> & {\n    handledProps: (keyof (TProps & SvgIconProps))[];\n  } = props => {\n    const context = useFluentContext();\n\n    const {\n      alt,\n      'aria-label': ariaLabel,\n      bordered,\n      circular,\n      className,\n      design,\n      disabled,\n      outline,\n      rotate = 0,\n      size = 'medium',\n      styles,\n      variables,\n      xSpacing,\n    } = props;\n\n    const { classes } = useStyles(svgIconDisplayName, {\n      className: svgIconClassName,\n      mapPropsToStyles: () => ({\n        bordered,\n        circular,\n        disabled,\n        outline,\n        rotate,\n        size,\n        xSpacing,\n      }),\n      mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n      rtl: context.rtl,\n    });\n\n    const unhandledProps = getUnhandledProps([...svgIconHandledProps, ...handledProps], props);\n\n    return React.createElement(\n      'span',\n      {\n        role: 'img',\n        'aria-hidden': alt || ariaLabel ? undefined : 'true',\n        'aria-label': ariaLabel,\n        className: classes.root,\n        ...unhandledProps,\n      },\n      svg({ classes, rtl: context.rtl, props }),\n    );\n  };\n\n  Component.displayName = displayName;\n  Component.handledProps = [...svgIconHandledProps, ...handledProps];\n\n  return Component;\n};\n"]},"metadata":{},"sourceType":"module"}