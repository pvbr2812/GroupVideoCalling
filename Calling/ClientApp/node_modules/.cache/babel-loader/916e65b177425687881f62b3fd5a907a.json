{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport { buttonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nexport var splitButtonToggleClassName = 'ui-splitbutton__toggle';\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport var SplitButtonToggle = /*#__PURE__*/function () {\n  var SplitButtonToggle = function SplitButtonToggle(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(SplitButtonToggle.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        as = props.as,\n        children = props.children,\n        content = props.content,\n        disabled = props.disabled,\n        primary = props.primary,\n        className = props.className,\n        size = props.size,\n        styles = props.styles,\n        variables = props.variables,\n        design = props.design;\n    var hasChildren = childrenExist(children);\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: SplitButtonToggle.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          as: String(as),\n          disabled: disabled\n        };\n      },\n      actionHandlers: {\n        performClick: function performClick(event) {\n          event.preventDefault();\n          handleClick(event);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(SplitButtonToggle.displayName, {\n      className: splitButtonToggleClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          primary: primary,\n          disabled: disabled,\n          size: size\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n    var ElementType = getElementType(props);\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var result = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), getA11Props('root', Object.assign({\n      onClick: handleClick,\n      disabled: disabled,\n      className: classes.root\n    }, unhandledProps))), hasChildren ? children : content);\n    setEnd();\n    return result;\n  };\n\n  SplitButtonToggle.defaultProps = {\n    as: 'button',\n    accessibility: buttonBehavior\n  };\n  SplitButtonToggle.displayName = 'SplitButtonToggle';\n  SplitButtonToggle.propTypes = Object.assign({}, commonPropTypes.createCommon({}), {\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    size: customPropTypes.size\n  });\n  SplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes);\n  SplitButtonToggle.create = createShorthandFactory({\n    Component: SplitButtonToggle,\n    mappedProp: 'content'\n  });\n  return SplitButtonToggle;\n}();","map":{"version":3,"sources":["components/SplitButton/SplitButtonToggle.tsx"],"names":["splitButtonToggleClassName","SplitButtonToggle","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","as","children","content","disabled","primary","className","size","styles","variables","design","props","hasChildren","childrenExist","getA11Props","useAccessibility","debugName","mapPropsToBehavior","String","actionHandlers","performClick","event","handleClick","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","e","result","forElements","onClick","root","buttonBehavior","commonPropTypes","PropTypes","customPropTypes","secondary","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n  SizeValue,\n} from '../../utils';\n\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonToggleProps extends UIComponentProps, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A split button toggle can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<SplitButtonToggleProps>;\n\n  /** A split button toggle can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A split button toggle can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A split button toggle can be sized */\n  size?: SizeValue;\n}\n\nexport type SplitButtonToggleStylesProps = Pick<SplitButtonToggleProps, 'primary' | 'disabled' | 'size'>;\nexport const splitButtonToggleClassName = 'ui-splitbutton__toggle';\n\n/**\n * A SplitToggleButton allows users to customize the toggle button inside the SplitButton.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport const SplitButtonToggle: ComponentWithAs<'button', SplitButtonToggleProps> &\n  FluentComponentStaticProps<SplitButtonToggleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(SplitButtonToggle.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, as, children, content, disabled, primary, className, size, styles, variables, design } = props;\n\n  const hasChildren = childrenExist(children);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: SplitButtonToggle.displayName,\n    mapPropsToBehavior: () => ({\n      as: String(as),\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<SplitButtonToggleStylesProps>(SplitButtonToggle.displayName, {\n    className: splitButtonToggleClassName,\n    mapPropsToStyles: () => ({\n      primary,\n      disabled,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(SplitButtonToggle.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nSplitButtonToggle.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n};\n\nSplitButtonToggle.displayName = 'SplitButtonToggle';\n\nSplitButtonToggle.propTypes = {\n  ...commonPropTypes.createCommon({}),\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n};\n\nSplitButtonToggle.handledProps = Object.keys(SplitButtonToggle.propTypes) as any;\n\nSplitButtonToggle.create = createShorthandFactory({ Component: SplitButtonToggle, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}