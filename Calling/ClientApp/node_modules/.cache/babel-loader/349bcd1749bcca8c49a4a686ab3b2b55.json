{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar LENGTH_UNIT = /(em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|q|in|pt|pc|px|dpi|dpcm|dppx|%|auto)$/i;\nvar CALC = /^(calc\\()/i;\nvar VAR = /^(var\\()/i;\nvar BORDER_STYLE = /^(dashed|dotted|double|groove|hidden|inset|none|outset|ridge|solid)$/i;\nvar BORDER_WIDTH = /^(thick|medium|think)$/i;\n\nfunction splitShorthand(value) {\n  var values = [''];\n  var openParensCount = 0;\n  var trimmedValue = value.trim();\n\n  for (var index = 0; index < trimmedValue.length; index += 1) {\n    if (trimmedValue.charAt(index) === ' ' && openParensCount === 0) {\n      // Add new value\n      values.push('');\n    } else {\n      // Add the current character to the current value\n      values[values.length - 1] = values[values.length - 1] + trimmedValue.charAt(index);\n    } // Keep track of the number of parentheses that are yet to be closed.\n    // This is done to avoid splitting at whitespaces within CSS functions.\n    // E.g.: `calc(1px + 1em)`\n\n\n    if (trimmedValue.charAt(index) === '(') {\n      openParensCount++;\n    } else if (trimmedValue.charAt(index) === ')') {\n      openParensCount--;\n    }\n  }\n\n  return values;\n}\n\nfunction parseBorder(value, resolve) {\n  var values = splitShorthand(value);\n  var longhands = {};\n  values.forEach(function (val) {\n    if (val.match(BORDER_STYLE) !== null) {\n      longhands[resolve('Style')] = val;\n    } else if (val.match(BORDER_WIDTH) !== null || val.match(LENGTH_UNIT) !== null || val.match(CALC) !== null || val === '0') {\n      longhands[resolve('Width')] = val;\n    } else {\n      longhands[resolve('Color')] = val;\n    }\n  });\n  return longhands;\n}\n\nfunction parseCircular(value, resolve) {\n  var _ref;\n\n  var _splitShorthand = splitShorthand(value),\n      _splitShorthand2 = _slicedToArray(_splitShorthand, 4),\n      Top = _splitShorthand2[0],\n      _splitShorthand2$ = _splitShorthand2[1],\n      Right = _splitShorthand2$ === void 0 ? Top : _splitShorthand2$,\n      _splitShorthand2$2 = _splitShorthand2[2],\n      Bottom = _splitShorthand2$2 === void 0 ? Top : _splitShorthand2$2,\n      _splitShorthand2$3 = _splitShorthand2[3],\n      Left = _splitShorthand2$3 === void 0 ? Right : _splitShorthand2$3;\n\n  return _ref = {}, _defineProperty(_ref, resolve('Top'), Top), _defineProperty(_ref, resolve('Right'), Right), _defineProperty(_ref, resolve('Bottom'), Bottom), _defineProperty(_ref, resolve('Left'), Left), _ref;\n}\n\nvar circularExpand = {\n  borderWidth: function borderWidth(key) {\n    return 'border' + key + 'Width';\n  },\n  borderColor: function borderColor(key) {\n    return 'border' + key + 'Color';\n  },\n  borderStyle: function borderStyle(key) {\n    return 'border' + key + 'Style';\n  },\n  padding: function padding(key) {\n    return 'padding' + key;\n  },\n  margin: function margin(key) {\n    return 'margin' + key;\n  }\n};\nvar borderExpand = {\n  borderLeft: function borderLeft(key) {\n    return 'borderLeft' + key;\n  },\n  borderTop: function borderTop(key) {\n    return 'borderTop' + key;\n  },\n  borderRight: function borderRight(key) {\n    return 'borderRight' + key;\n  },\n  borderBottom: function borderBottom(key) {\n    return 'borderBottom' + key;\n  },\n  outline: function outline(key) {\n    return 'outline' + key;\n  }\n};\n\nfunction parseFlex(value) {\n  var values = splitShorthand(value);\n  var longhands = {};\n  values.forEach(function (val) {\n    if (val.match(LENGTH_UNIT) !== null || val.match(CALC) !== null || val.match(VAR) !== null) {\n      longhands.flexBasis = val;\n    } else {\n      if (longhands.flexGrow) {\n        longhands.flexShrink = val;\n      } else {\n        longhands.flexGrow = val;\n      }\n    }\n  });\n  return longhands;\n}\n\nfunction expandProperty(property, value) {\n  // special expansion for the border property as its 2 levels deep\n  if (property === 'border') {\n    var longhands = parseBorder(value.toString(), function (key) {\n      return 'border' + key;\n    });\n    var result = {};\n\n    for (var _property in longhands) {\n      Object.assign(result, expandProperty(_property, longhands[_property]));\n    }\n\n    return result;\n  }\n\n  if (property === 'flex') {\n    return parseFlex(value.toString());\n  }\n\n  if (circularExpand[property]) {\n    return parseCircular(value.toString(), circularExpand[property]);\n  }\n\n  if (borderExpand[property]) {\n    return parseBorder(value.toString(), borderExpand[property]);\n  }\n}\n\nexport default function preExpand(property, value) {\n  if (Array.isArray(value)) {\n    var result = {};\n    value.forEach(function (item) {\n      var itemResult = expandProperty(property, item);\n\n      if (itemResult) {\n        Object.keys(itemResult).forEach(function (itemProperty) {\n          result[itemProperty] = result[itemProperty] || [];\n          result[itemProperty].push(itemResult[itemProperty]);\n        });\n      }\n    });\n\n    if (Object.keys(result).length) {\n      return result;\n    }\n\n    return null;\n  }\n\n  return expandProperty(property, value);\n}","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/node_modules/inline-style-expand-shorthand/es/expandProperty.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","LENGTH_UNIT","CALC","VAR","BORDER_STYLE","BORDER_WIDTH","splitShorthand","values","openParensCount","trimmedValue","trim","index","charAt","parseBorder","resolve","longhands","forEach","val","match","parseCircular","_ref","_splitShorthand","_splitShorthand2","Top","_splitShorthand2$","Right","_splitShorthand2$2","Bottom","_splitShorthand2$3","Left","circularExpand","borderWidth","borderColor","borderStyle","padding","margin","borderExpand","borderLeft","borderTop","borderRight","borderBottom","outline","parseFlex","flexBasis","flexGrow","flexShrink","expandProperty","property","toString","result","_property","assign","preExpand","item","itemResult","keys","itemProperty"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;;AAEjN,SAASQ,cAAT,CAAwBC,GAAxB,EAA6BC,CAA7B,EAAgC;AAAE,SAAOC,eAAe,CAACF,GAAD,CAAf,IAAwBG,qBAAqB,CAACH,GAAD,EAAMC,CAAN,CAA7C,IAAyDG,gBAAgB,EAAhF;AAAqF;;AAEvH,SAASA,gBAAT,GAA4B;AAAE,QAAM,IAAIC,SAAJ,CAAc,sDAAd,CAAN;AAA8E;;AAE5G,SAASF,qBAAT,CAA+BH,GAA/B,EAAoCC,CAApC,EAAuC;AAAE,MAAIK,IAAI,GAAG,EAAX;AAAe,MAAIC,EAAE,GAAG,IAAT;AAAe,MAAIC,EAAE,GAAG,KAAT;AAAgB,MAAIC,EAAE,GAAGC,SAAT;;AAAoB,MAAI;AAAE,SAAK,IAAIC,EAAE,GAAGX,GAAG,CAACY,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCC,EAAtC,EAA0C,EAAEP,EAAE,GAAG,CAACO,EAAE,GAAGH,EAAE,CAACI,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyET,EAAE,GAAG,IAA9E,EAAoF;AAAED,MAAAA,IAAI,CAACW,IAAL,CAAUH,EAAE,CAACrB,KAAb;;AAAqB,UAAIQ,CAAC,IAAIK,IAAI,CAACY,MAAL,KAAgBjB,CAAzB,EAA4B;AAAQ;AAAE,GAAvJ,CAAwJ,OAAOkB,GAAP,EAAY;AAAEX,IAAAA,EAAE,GAAG,IAAL;AAAWC,IAAAA,EAAE,GAAGU,GAAL;AAAW,GAA5L,SAAqM;AAAE,QAAI;AAAE,UAAI,CAACZ,EAAD,IAAOI,EAAE,CAAC,QAAD,CAAF,IAAgB,IAA3B,EAAiCA,EAAE,CAAC,QAAD,CAAF;AAAiB,KAAxD,SAAiE;AAAE,UAAIH,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE;;AAAC,SAAOH,IAAP;AAAc;;AAEzZ,SAASJ,eAAT,CAAyBF,GAAzB,EAA8B;AAAE,MAAIoB,KAAK,CAACC,OAAN,CAAcrB,GAAd,CAAJ,EAAwB,OAAOA,GAAP;AAAa;;AAErE,IAAIsB,WAAW,GAAG,2EAAlB;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,GAAG,GAAG,WAAV;AACA,IAAIC,YAAY,GAAG,uEAAnB;AACA,IAAIC,YAAY,GAAG,yBAAnB;;AAEA,SAASC,cAAT,CAAwBlC,KAAxB,EAA+B;AAC7B,MAAImC,MAAM,GAAG,CAAC,EAAD,CAAb;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,YAAY,GAAGrC,KAAK,CAACsC,IAAN,EAAnB;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,YAAY,CAACZ,MAAzC,EAAiDc,KAAK,IAAI,CAA1D,EAA6D;AAC3D,QAAIF,YAAY,CAACG,MAAb,CAAoBD,KAApB,MAA+B,GAA/B,IAAsCH,eAAe,KAAK,CAA9D,EAAiE;AAC/D;AACAD,MAAAA,MAAM,CAACX,IAAP,CAAY,EAAZ;AACD,KAHD,MAGO;AACL;AACAW,MAAAA,MAAM,CAACA,MAAM,CAACV,MAAP,GAAgB,CAAjB,CAAN,GAA4BU,MAAM,CAACA,MAAM,CAACV,MAAP,GAAgB,CAAjB,CAAN,GAA4BY,YAAY,CAACG,MAAb,CAAoBD,KAApB,CAAxD;AACD,KAP0D,CAOzD;AACF;AACA;;;AAGA,QAAIF,YAAY,CAACG,MAAb,CAAoBD,KAApB,MAA+B,GAAnC,EAAwC;AACtCH,MAAAA,eAAe;AAChB,KAFD,MAEO,IAAIC,YAAY,CAACG,MAAb,CAAoBD,KAApB,MAA+B,GAAnC,EAAwC;AAC7CH,MAAAA,eAAe;AAChB;AACF;;AAED,SAAOD,MAAP;AACD;;AAED,SAASM,WAAT,CAAqBzC,KAArB,EAA4B0C,OAA5B,EAAqC;AACnC,MAAIP,MAAM,GAAGD,cAAc,CAAClC,KAAD,CAA3B;AACA,MAAI2C,SAAS,GAAG,EAAhB;AACAR,EAAAA,MAAM,CAACS,OAAP,CAAe,UAAUC,GAAV,EAAe;AAC5B,QAAIA,GAAG,CAACC,KAAJ,CAAUd,YAAV,MAA4B,IAAhC,EAAsC;AACpCW,MAAAA,SAAS,CAACD,OAAO,CAAC,OAAD,CAAR,CAAT,GAA8BG,GAA9B;AACD,KAFD,MAEO,IAAIA,GAAG,CAACC,KAAJ,CAAUb,YAAV,MAA4B,IAA5B,IAAoCY,GAAG,CAACC,KAAJ,CAAUjB,WAAV,MAA2B,IAA/D,IAAuEgB,GAAG,CAACC,KAAJ,CAAUhB,IAAV,MAAoB,IAA3F,IAAmGe,GAAG,KAAK,GAA/G,EAAoH;AACzHF,MAAAA,SAAS,CAACD,OAAO,CAAC,OAAD,CAAR,CAAT,GAA8BG,GAA9B;AACD,KAFM,MAEA;AACLF,MAAAA,SAAS,CAACD,OAAO,CAAC,OAAD,CAAR,CAAT,GAA8BG,GAA9B;AACD;AACF,GARD;AASA,SAAOF,SAAP;AACD;;AAED,SAASI,aAAT,CAAuB/C,KAAvB,EAA8B0C,OAA9B,EAAuC;AACrC,MAAIM,IAAJ;;AAEA,MAAIC,eAAe,GAAGf,cAAc,CAAClC,KAAD,CAApC;AAAA,MACIkD,gBAAgB,GAAG5C,cAAc,CAAC2C,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIE,GAAG,GAAGD,gBAAgB,CAAC,CAAD,CAF1B;AAAA,MAGIE,iBAAiB,GAAGF,gBAAgB,CAAC,CAAD,CAHxC;AAAA,MAIIG,KAAK,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+BD,GAA/B,GAAqCC,iBAJjD;AAAA,MAKIE,kBAAkB,GAAGJ,gBAAgB,CAAC,CAAD,CALzC;AAAA,MAMIK,MAAM,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgCH,GAAhC,GAAsCG,kBANnD;AAAA,MAOIE,kBAAkB,GAAGN,gBAAgB,CAAC,CAAD,CAPzC;AAAA,MAQIO,IAAI,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgCH,KAAhC,GAAwCG,kBARnD;;AAUA,SAAOR,IAAI,GAAG,EAAP,EAAWnD,eAAe,CAACmD,IAAD,EAAON,OAAO,CAAC,KAAD,CAAd,EAAuBS,GAAvB,CAA1B,EAAuDtD,eAAe,CAACmD,IAAD,EAAON,OAAO,CAAC,OAAD,CAAd,EAAyBW,KAAzB,CAAtE,EAAuGxD,eAAe,CAACmD,IAAD,EAAON,OAAO,CAAC,QAAD,CAAd,EAA0Ba,MAA1B,CAAtH,EAAyJ1D,eAAe,CAACmD,IAAD,EAAON,OAAO,CAAC,MAAD,CAAd,EAAwBe,IAAxB,CAAxK,EAAuMT,IAA9M;AACD;;AAED,IAAIU,cAAc,GAAG;AACnBC,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqB5D,GAArB,EAA0B;AACrC,WAAO,WAAWA,GAAX,GAAiB,OAAxB;AACD,GAHkB;AAInB6D,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqB7D,GAArB,EAA0B;AACrC,WAAO,WAAWA,GAAX,GAAiB,OAAxB;AACD,GANkB;AAOnB8D,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqB9D,GAArB,EAA0B;AACrC,WAAO,WAAWA,GAAX,GAAiB,OAAxB;AACD,GATkB;AAUnB+D,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiB/D,GAAjB,EAAsB;AAC7B,WAAO,YAAYA,GAAnB;AACD,GAZkB;AAanBgE,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBhE,GAAhB,EAAqB;AAC3B,WAAO,WAAWA,GAAlB;AACD;AAfkB,CAArB;AAiBA,IAAIiE,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBlE,GAApB,EAAyB;AACnC,WAAO,eAAeA,GAAtB;AACD,GAHgB;AAIjBmE,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBnE,GAAnB,EAAwB;AACjC,WAAO,cAAcA,GAArB;AACD,GANgB;AAOjBoE,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBpE,GAArB,EAA0B;AACrC,WAAO,gBAAgBA,GAAvB;AACD,GATgB;AAUjBqE,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBrE,GAAtB,EAA2B;AACvC,WAAO,iBAAiBA,GAAxB;AACD,GAZgB;AAajBsE,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBtE,GAAjB,EAAsB;AAC7B,WAAO,YAAYA,GAAnB;AACD;AAfgB,CAAnB;;AAkBA,SAASuE,SAAT,CAAmBtE,KAAnB,EAA0B;AACxB,MAAImC,MAAM,GAAGD,cAAc,CAAClC,KAAD,CAA3B;AACA,MAAI2C,SAAS,GAAG,EAAhB;AACAR,EAAAA,MAAM,CAACS,OAAP,CAAe,UAAUC,GAAV,EAAe;AAC5B,QAAIA,GAAG,CAACC,KAAJ,CAAUjB,WAAV,MAA2B,IAA3B,IAAmCgB,GAAG,CAACC,KAAJ,CAAUhB,IAAV,MAAoB,IAAvD,IAA+De,GAAG,CAACC,KAAJ,CAAUf,GAAV,MAAmB,IAAtF,EAA4F;AAC1FY,MAAAA,SAAS,CAAC4B,SAAV,GAAsB1B,GAAtB;AACD,KAFD,MAEO;AACL,UAAIF,SAAS,CAAC6B,QAAd,EAAwB;AACtB7B,QAAAA,SAAS,CAAC8B,UAAV,GAAuB5B,GAAvB;AACD,OAFD,MAEO;AACLF,QAAAA,SAAS,CAAC6B,QAAV,GAAqB3B,GAArB;AACD;AACF;AACF,GAVD;AAWA,SAAOF,SAAP;AACD;;AAED,SAAS+B,cAAT,CAAwBC,QAAxB,EAAkC3E,KAAlC,EAAyC;AACvC;AACA,MAAI2E,QAAQ,KAAK,QAAjB,EAA2B;AACzB,QAAIhC,SAAS,GAAGF,WAAW,CAACzC,KAAK,CAAC4E,QAAN,EAAD,EAAmB,UAAU7E,GAAV,EAAe;AAC3D,aAAO,WAAWA,GAAlB;AACD,KAF0B,CAA3B;AAGA,QAAI8E,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,SAAT,IAAsBnC,SAAtB,EAAiC;AAC/B1C,MAAAA,MAAM,CAAC8E,MAAP,CAAcF,MAAd,EAAsBH,cAAc,CAACI,SAAD,EAAYnC,SAAS,CAACmC,SAAD,CAArB,CAApC;AACD;;AAED,WAAOD,MAAP;AACD;;AAED,MAAIF,QAAQ,KAAK,MAAjB,EAAyB;AACvB,WAAOL,SAAS,CAACtE,KAAK,CAAC4E,QAAN,EAAD,CAAhB;AACD;;AAED,MAAIlB,cAAc,CAACiB,QAAD,CAAlB,EAA8B;AAC5B,WAAO5B,aAAa,CAAC/C,KAAK,CAAC4E,QAAN,EAAD,EAAmBlB,cAAc,CAACiB,QAAD,CAAjC,CAApB;AACD;;AAED,MAAIX,YAAY,CAACW,QAAD,CAAhB,EAA4B;AAC1B,WAAOlC,WAAW,CAACzC,KAAK,CAAC4E,QAAN,EAAD,EAAmBZ,YAAY,CAACW,QAAD,CAA/B,CAAlB;AACD;AACF;;AAED,eAAe,SAASK,SAAT,CAAmBL,QAAnB,EAA6B3E,KAA7B,EAAoC;AACjD,MAAI2B,KAAK,CAACC,OAAN,CAAc5B,KAAd,CAAJ,EAA0B;AACxB,QAAI6E,MAAM,GAAG,EAAb;AACA7E,IAAAA,KAAK,CAAC4C,OAAN,CAAc,UAAUqC,IAAV,EAAgB;AAC5B,UAAIC,UAAU,GAAGR,cAAc,CAACC,QAAD,EAAWM,IAAX,CAA/B;;AAEA,UAAIC,UAAJ,EAAgB;AACdjF,QAAAA,MAAM,CAACkF,IAAP,CAAYD,UAAZ,EAAwBtC,OAAxB,CAAgC,UAAUwC,YAAV,EAAwB;AACtDP,UAAAA,MAAM,CAACO,YAAD,CAAN,GAAuBP,MAAM,CAACO,YAAD,CAAN,IAAwB,EAA/C;AACAP,UAAAA,MAAM,CAACO,YAAD,CAAN,CAAqB5D,IAArB,CAA0B0D,UAAU,CAACE,YAAD,CAApC;AACD,SAHD;AAID;AACF,KATD;;AAWA,QAAInF,MAAM,CAACkF,IAAP,CAAYN,MAAZ,EAAoBpD,MAAxB,EAAgC;AAC9B,aAAOoD,MAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,SAAOH,cAAc,CAACC,QAAD,EAAW3E,KAAX,CAArB;AACD","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar LENGTH_UNIT = /(em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|q|in|pt|pc|px|dpi|dpcm|dppx|%|auto)$/i;\nvar CALC = /^(calc\\()/i;\nvar VAR = /^(var\\()/i;\nvar BORDER_STYLE = /^(dashed|dotted|double|groove|hidden|inset|none|outset|ridge|solid)$/i;\nvar BORDER_WIDTH = /^(thick|medium|think)$/i;\n\nfunction splitShorthand(value) {\n  var values = [''];\n  var openParensCount = 0;\n  var trimmedValue = value.trim();\n\n  for (var index = 0; index < trimmedValue.length; index += 1) {\n    if (trimmedValue.charAt(index) === ' ' && openParensCount === 0) {\n      // Add new value\n      values.push('');\n    } else {\n      // Add the current character to the current value\n      values[values.length - 1] = values[values.length - 1] + trimmedValue.charAt(index);\n    } // Keep track of the number of parentheses that are yet to be closed.\n    // This is done to avoid splitting at whitespaces within CSS functions.\n    // E.g.: `calc(1px + 1em)`\n\n\n    if (trimmedValue.charAt(index) === '(') {\n      openParensCount++;\n    } else if (trimmedValue.charAt(index) === ')') {\n      openParensCount--;\n    }\n  }\n\n  return values;\n}\n\nfunction parseBorder(value, resolve) {\n  var values = splitShorthand(value);\n  var longhands = {};\n  values.forEach(function (val) {\n    if (val.match(BORDER_STYLE) !== null) {\n      longhands[resolve('Style')] = val;\n    } else if (val.match(BORDER_WIDTH) !== null || val.match(LENGTH_UNIT) !== null || val.match(CALC) !== null || val === '0') {\n      longhands[resolve('Width')] = val;\n    } else {\n      longhands[resolve('Color')] = val;\n    }\n  });\n  return longhands;\n}\n\nfunction parseCircular(value, resolve) {\n  var _ref;\n\n  var _splitShorthand = splitShorthand(value),\n      _splitShorthand2 = _slicedToArray(_splitShorthand, 4),\n      Top = _splitShorthand2[0],\n      _splitShorthand2$ = _splitShorthand2[1],\n      Right = _splitShorthand2$ === void 0 ? Top : _splitShorthand2$,\n      _splitShorthand2$2 = _splitShorthand2[2],\n      Bottom = _splitShorthand2$2 === void 0 ? Top : _splitShorthand2$2,\n      _splitShorthand2$3 = _splitShorthand2[3],\n      Left = _splitShorthand2$3 === void 0 ? Right : _splitShorthand2$3;\n\n  return _ref = {}, _defineProperty(_ref, resolve('Top'), Top), _defineProperty(_ref, resolve('Right'), Right), _defineProperty(_ref, resolve('Bottom'), Bottom), _defineProperty(_ref, resolve('Left'), Left), _ref;\n}\n\nvar circularExpand = {\n  borderWidth: function borderWidth(key) {\n    return 'border' + key + 'Width';\n  },\n  borderColor: function borderColor(key) {\n    return 'border' + key + 'Color';\n  },\n  borderStyle: function borderStyle(key) {\n    return 'border' + key + 'Style';\n  },\n  padding: function padding(key) {\n    return 'padding' + key;\n  },\n  margin: function margin(key) {\n    return 'margin' + key;\n  }\n};\nvar borderExpand = {\n  borderLeft: function borderLeft(key) {\n    return 'borderLeft' + key;\n  },\n  borderTop: function borderTop(key) {\n    return 'borderTop' + key;\n  },\n  borderRight: function borderRight(key) {\n    return 'borderRight' + key;\n  },\n  borderBottom: function borderBottom(key) {\n    return 'borderBottom' + key;\n  },\n  outline: function outline(key) {\n    return 'outline' + key;\n  }\n};\n\nfunction parseFlex(value) {\n  var values = splitShorthand(value);\n  var longhands = {};\n  values.forEach(function (val) {\n    if (val.match(LENGTH_UNIT) !== null || val.match(CALC) !== null || val.match(VAR) !== null) {\n      longhands.flexBasis = val;\n    } else {\n      if (longhands.flexGrow) {\n        longhands.flexShrink = val;\n      } else {\n        longhands.flexGrow = val;\n      }\n    }\n  });\n  return longhands;\n}\n\nfunction expandProperty(property, value) {\n  // special expansion for the border property as its 2 levels deep\n  if (property === 'border') {\n    var longhands = parseBorder(value.toString(), function (key) {\n      return 'border' + key;\n    });\n    var result = {};\n\n    for (var _property in longhands) {\n      Object.assign(result, expandProperty(_property, longhands[_property]));\n    }\n\n    return result;\n  }\n\n  if (property === 'flex') {\n    return parseFlex(value.toString());\n  }\n\n  if (circularExpand[property]) {\n    return parseCircular(value.toString(), circularExpand[property]);\n  }\n\n  if (borderExpand[property]) {\n    return parseBorder(value.toString(), borderExpand[property]);\n  }\n}\n\nexport default function preExpand(property, value) {\n  if (Array.isArray(value)) {\n    var result = {};\n    value.forEach(function (item) {\n      var itemResult = expandProperty(property, item);\n\n      if (itemResult) {\n        Object.keys(itemResult).forEach(function (itemProperty) {\n          result[itemProperty] = result[itemProperty] || [];\n          result[itemProperty].push(itemResult[itemProperty]);\n        });\n      }\n    });\n\n    if (Object.keys(result).length) {\n      return result;\n    }\n\n    return null;\n  }\n\n  return expandProperty(property, value);\n}"]},"metadata":{},"sourceType":"module"}