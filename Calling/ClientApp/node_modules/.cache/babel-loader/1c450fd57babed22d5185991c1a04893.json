{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isNil from \"lodash/isNil\";\nimport _invoke from \"lodash/invoke\";\nimport { useUnhandledProps, unstable_calculateAnimationTimeout as calculateAnimationTimeout, useFluentContext, useTelemetry } from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { childrenExist, commonPropTypes } from '../../utils';\nimport { useAnimationStyles } from './useAnimationStyles';\n/**\n * An Animation provides animation effects to rendered elements.\n */\n\nexport var Animation = /*#__PURE__*/function () {\n  var Animation = function Animation(props) {\n    var _ref, _ref$props;\n\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Animation.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var appear = props.appear,\n        children = props.children,\n        className = props.className,\n        mountOnEnter = props.mountOnEnter,\n        timeout = props.timeout,\n        visible = props.visible,\n        unmountOnExit = props.unmountOnExit;\n\n    var handleAnimationEvent = function handleAnimationEvent(event) {\n      return function () {\n        _invoke(props, event, null, props);\n      };\n    };\n\n    var _useAnimationStyles = useAnimationStyles(Animation.displayName, props),\n        animationClasses = _useAnimationStyles.className,\n        animationDuration = _useAnimationStyles.animationDuration,\n        animationDelay = _useAnimationStyles.animationDelay;\n\n    var timeoutResult = timeout || calculateAnimationTimeout(animationDuration, animationDelay) || 0;\n    var unhandledProps = useUnhandledProps(Animation.handledProps, props);\n\n    if (_isNil(children)) {\n      setEnd();\n      return null;\n    }\n\n    var isChildrenFunction = typeof children === 'function';\n    var child = childrenExist(children) && !isChildrenFunction && React.Children.only(children);\n    var element = /*#__PURE__*/React.createElement(Transition, _extends({\n      in: visible,\n      appear: appear,\n      mountOnEnter: mountOnEnter,\n      unmountOnExit: unmountOnExit,\n      timeout: timeoutResult,\n      onEnter: handleAnimationEvent('onEnter'),\n      onEntering: handleAnimationEvent('onEntering'),\n      onEntered: handleAnimationEvent('onEntered'),\n      onExit: handleAnimationEvent('onExit'),\n      onExiting: handleAnimationEvent('onExiting'),\n      onExited: handleAnimationEvent('onExited')\n    }, unhandledProps, {\n      className: !isChildrenFunction ? cx(animationClasses, className, (_ref = child) == null ? void 0 : (_ref$props = _ref.props) == null ? void 0 : _ref$props.className) : ''\n    }), isChildrenFunction ? function () {\n      return children({\n        classes: cx(animationClasses, className)\n      });\n    } : child);\n    setEnd();\n    return element;\n  };\n\n  Animation.displayName = 'Animation';\n  Animation.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    content: false,\n    children: false\n  }), {\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n    name: PropTypes.string,\n    delay: PropTypes.string,\n    direction: PropTypes.string,\n    duration: PropTypes.string,\n    fillMode: PropTypes.string,\n    iterationCount: PropTypes.string,\n    keyframeParams: PropTypes.object,\n    playState: PropTypes.string,\n    timingFunction: PropTypes.string,\n    visible: PropTypes.bool,\n    appear: PropTypes.bool,\n    mountOnEnter: PropTypes.bool,\n    unmountOnExit: PropTypes.bool,\n    timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n      appear: PropTypes.number,\n      enter: PropTypes.number,\n      exit: PropTypes.number\n    })]),\n    onEnter: PropTypes.func,\n    onEntering: PropTypes.func,\n    onEntered: PropTypes.func,\n    onExit: PropTypes.func,\n    onExiting: PropTypes.func,\n    onExited: PropTypes.func\n  });\n  Animation.handledProps = Object.keys(Animation.propTypes);\n  return Animation;\n}();","map":{"version":3,"sources":["components/Animation/Animation.tsx"],"names":["unstable_calculateAnimationTimeout","Animation","context","useFluentContext","setStart","setEnd","useTelemetry","appear","children","className","mountOnEnter","timeout","visible","unmountOnExit","props","handleAnimationEvent","animationClasses","animationDuration","animationDelay","useAnimationStyles","timeoutResult","calculateAnimationTimeout","unhandledProps","useUnhandledProps","isChildrenFunction","child","childrenExist","React","element","cx","classes","accessibility","as","content","PropTypes","name","delay","direction","duration","fillMode","iterationCount","keyframeParams","playState","timingFunction","enter","exit","number","onEnter","onEntering","onEntered","onExit","onExiting","onExited","func","Object"],"mappings":"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","sourcesContent":["import {\n  useUnhandledProps,\n  unstable_calculateAnimationTimeout as calculateAnimationTimeout,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Transition } from 'react-transition-group';\n\nimport { childrenExist, commonPropTypes, ChildrenComponentProps } from '../../utils';\nimport { ComponentEventHandler } from '../../types';\nimport { useAnimationStyles } from './useAnimationStyles';\n\nexport type AnimationChildrenProp = (props: { classes: string }) => React.ReactNode;\n\nexport interface AnimationProps extends ChildrenComponentProps<AnimationChildrenProp | React.ReactChild> {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  /** The name for the animation that should be applied, defined in the theme. */\n  name?: string;\n\n  /** Specifies a delay for the start of an animation. Negative values are\n   * also allowed. If using negative values, the animation will start as if it had already been\n   * playing for that amount of time.\n   */\n  delay?: string;\n\n  /** Specifies whether an animation should be played forwards, backwards or in alternate cycles.\n   * It can have the following values:\n   * - normal (default) - The animation is played as normal (forwards)\n   * - reverse - The animation is played in reverse direction (backwards)\n   * - alternate - The animation is played forwards first, then backwards\n   * - alternate-reverse - The animation is played backwards first, then forwards\n   */\n  direction?: string;\n\n  /** Specifies how long an animation should take to complete. */\n  duration?: string;\n\n  /**\n   * Specifies a style for the target element when the animation is not playing (i.e. before it starts, after it ends, or both).\n   * It can have the following values:\n   * - none (default) - Animation will not apply any styles to the element before or after it is executing\n   * - forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)\n   * - backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period\n   * - both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions\n   * */\n  fillMode?: string;\n\n  /** Specifies the number of times an animation should run. */\n  iterationCount?: string;\n\n  /** Custom parameters for the keyframe defined for the animation. */\n  keyframeParams?: object;\n\n  /**\n   * Specifies whether the animation is running or paused. It can have the following values:\n   * - paused - Specifies that the animation is paused\n   * - running - Default value. Specifies that the animation is running\n   * - initial - Sets this property to its default value.\n   * - inherit - Inherits this property from its parent element.\n   * */\n  playState?: string;\n\n  /**\n   * Specifies the speed curve of the animation. It can have the following values:\n   * - ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)\n   * - linear - Specifies an animation with the same speed from start to end\n   * - ease-in - Specifies an animation with a slow start\n   * - ease-out - Specifies an animation with a slow end\n   * - ease-in-out - Specifies an animation with a slow start and end\n   * - cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function\n   */\n  timingFunction?: string;\n\n  /** Show the component; triggers the enter or exit animation. */\n  visible?: boolean;\n\n  /** Run the enter animation when the component mounts, if it is initially shown. */\n  appear?: boolean;\n\n  /** Wait until the first \"enter\" transition to mount the component (add it to the DOM). */\n  mountOnEnter?: boolean;\n\n  /** Unmount the component (remove it from the DOM) when it is not shown. */\n  unmountOnExit?: boolean;\n\n  /** The duration of the transition, in milliseconds. */\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n\n  /**\n   * Callback fired before the \"entering\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onEnter?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"entering\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onEntering?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"entered\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onEntered?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onExit?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onExiting?: ComponentEventHandler<AnimationProps>;\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onExited?: ComponentEventHandler<AnimationProps>;\n}\n\n/**\n * An Animation provides animation effects to rendered elements.\n */\nexport const Animation: React.FC<AnimationProps> & {\n  handledProps: (keyof AnimationProps)[];\n} = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Animation.displayName, context.telemetry);\n  setStart();\n\n  const { appear, children, className, mountOnEnter, timeout, visible, unmountOnExit } = props;\n\n  const handleAnimationEvent = (\n    event: 'onEnter' | 'onEntering' | 'onEntered' | 'onExit' | 'onExiting' | 'onExited',\n  ) => () => {\n    _.invoke(props, event, null, props);\n  };\n\n  const { className: animationClasses, animationDuration, animationDelay } = useAnimationStyles(\n    Animation.displayName,\n    props,\n  );\n  const timeoutResult = timeout || calculateAnimationTimeout(animationDuration, animationDelay) || 0;\n\n  const unhandledProps = useUnhandledProps(Animation.handledProps, props);\n\n  if (_.isNil(children)) {\n    setEnd();\n    return null;\n  }\n\n  const isChildrenFunction = typeof children === 'function';\n  const child = childrenExist(children) && !isChildrenFunction && (React.Children.only(children) as React.ReactElement);\n\n  const element = (\n    <Transition\n      in={visible}\n      appear={appear}\n      mountOnEnter={mountOnEnter}\n      unmountOnExit={unmountOnExit}\n      timeout={timeoutResult}\n      onEnter={handleAnimationEvent('onEnter')}\n      onEntering={handleAnimationEvent('onEntering')}\n      onEntered={handleAnimationEvent('onEntered')}\n      onExit={handleAnimationEvent('onExit')}\n      onExiting={handleAnimationEvent('onExiting')}\n      onExited={handleAnimationEvent('onExited')}\n      {...unhandledProps}\n      className={!isChildrenFunction ? cx(animationClasses, className, (child as any)?.props?.className) : ''}\n    >\n      {isChildrenFunction\n        ? () => (children as AnimationChildrenProp)({ classes: cx(animationClasses, className) })\n        : child}\n    </Transition>\n  );\n  setEnd();\n\n  return element;\n};\n\nAnimation.displayName = 'Animation';\n\nAnimation.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    content: false,\n    children: false,\n  }),\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  name: PropTypes.string,\n  delay: PropTypes.string,\n  direction: PropTypes.string,\n  duration: PropTypes.string,\n  fillMode: PropTypes.string,\n  iterationCount: PropTypes.string,\n  keyframeParams: PropTypes.object,\n  playState: PropTypes.string,\n  timingFunction: PropTypes.string,\n  visible: PropTypes.bool,\n  appear: PropTypes.bool,\n  mountOnEnter: PropTypes.bool,\n  unmountOnExit: PropTypes.bool,\n  timeout: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      appear: PropTypes.number,\n      enter: PropTypes.number,\n      exit: PropTypes.number,\n    }),\n  ]),\n  onEnter: PropTypes.func,\n  onEntering: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExit: PropTypes.func,\n  onExiting: PropTypes.func,\n  onExited: PropTypes.func,\n};\nAnimation.handledProps = Object.keys(Animation.propTypes) as any;\n"]},"metadata":{},"sourceType":"module"}