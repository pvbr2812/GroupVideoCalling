{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _some from \"lodash/some\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarItemBehavior } from '@fluentui/accessibility';\nimport { compose, getElementType, mergeVariablesOverrides, useUnhandledProps, useFluentContext, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { useContextSelectors } from '@fluentui/react-context-selector';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthand, doesNodeContainClick, commonPropTypes, childrenExist } from '../../utils';\nimport { partitionPopperPropsFromShorthand, Popper } from '../../utils/positioner';\nimport { ToolbarMenu } from './ToolbarMenu';\nimport { Popup } from '../Popup/Popup';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarItemWrapper } from './ToolbarItemWrapper';\nimport { ToolbarItemIcon } from './ToolbarItemIcon';\nimport { ToolbarMenuContext } from './toolbarMenuContext';\nexport var toolbarItemClassName = 'ui-toolbar__item';\n/**\n * A ToolbarItem renders Toolbar item as a button with an icon.\n */\n\nexport var ToolbarItem = /*#__PURE__*/function () {\n  var ToolbarItem = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        active = props.active,\n        className = props.className,\n        design = props.design,\n        icon = props.icon,\n        children = props.children,\n        disabled = props.disabled,\n        popup = props.popup,\n        menuOpen = props.menuOpen,\n        wrapper = props.wrapper,\n        styles = props.styles,\n        variables = props.variables;\n\n    var _partitionPopperProps = partitionPopperPropsFromShorthand(props.menu),\n        menu = _partitionPopperProps[0],\n        positioningProps = _partitionPopperProps[1];\n\n    var itemRef = React.useRef();\n    var menuRef = React.useRef();\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    var _ref = useContextSelectors(ToolbarMenuContext, {\n      menuSlot: function menuSlot(v) {\n        return v.slots.menu;\n      }\n    }),\n        menuSlot = _ref.menuSlot; // TODO: we should improve typings for the useContextSelectors\n\n\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: function performClick(event) {\n          event.preventDefault();\n          handleClick(event);\n        },\n        performWrapperClick: function performWrapperClick(event) {\n          handleWrapperClick(event);\n        },\n        closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {\n          trySetMenuOpen(false, event);\n\n          _invoke(itemRef.current, 'focus');\n        },\n        doNotNavigateNextToolbarItem: function doNotNavigateNextToolbarItem(event) {\n          event.stopPropagation();\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          as: String(props.as),\n          disabled: disabled,\n          hasMenu: !!menu,\n          hasPopup: !!popup,\n          menuOpen: menuOpen,\n          active: active\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          active: active,\n          disabled: disabled\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergedVariables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var handleBlur = function handleBlur(e) {\n      _invoke(props, 'onBlur', e, props);\n    };\n\n    var handleFocus = function handleFocus(e) {\n      _invoke(props, 'onFocus', e, props);\n    };\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (menu) {\n        trySetMenuOpen(!menuOpen, e);\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var handleWrapperClick = function handleWrapperClick(e) {\n      if (menu) {\n        if (doesNodeContainClick(menuRef.current, e.nativeEvent, context.target)) {\n          trySetMenuOpen(false, e);\n        }\n      }\n    };\n\n    var handleOutsideClick = function handleOutsideClick(getRefs) {\n      return function (e) {\n        var isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n\n        var isNestedClick = _some(getRefs(), function (childRef) {\n          return doesNodeContainClick(childRef.current, e, context.target);\n        });\n\n        var isInside = isItemClick || isNestedClick;\n\n        if (!isInside) {\n          trySetMenuOpen(false, e);\n        }\n      };\n    };\n\n    var trySetMenuOpen = function trySetMenuOpen(newValue, e) {\n      _invoke(props, 'onMenuOpenChange', e, Object.assign({}, props, {\n        menuOpen: newValue\n      }));\n    };\n\n    var handleMenuOverrides = function handleMenuOverrides(getRefs) {\n      return function (predefinedProps) {\n        return {\n          onBlur: function onBlur(e) {\n            var isInsideOrMenuTrigger = _some(getRefs(), function (childRef) {\n              return childRef.current.contains(e.relatedTarget) || itemRef.current.contains(e.relatedTarget);\n            });\n\n            if (!isInsideOrMenuTrigger) {\n              trySetMenuOpen(false, e);\n            }\n          },\n          onItemClick: function onItemClick(e, itemProps) {\n            var popup = itemProps.popup,\n                menuOpen = itemProps.menuOpen;\n\n            _invoke(predefinedProps, 'onItemClick', e, itemProps);\n\n            if (popup) {\n              return;\n            } // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?\n\n\n            trySetMenuOpen(menuOpen, e);\n          }\n        };\n      };\n    };\n\n    var ElementType = getElementType(props);\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var itemElement = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: function innerRef(node) {\n        itemRef.current = node;\n        handleRef(ref, node);\n      }\n    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n      disabled: disabled,\n      className: classes.root,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onClick: handleClick\n    })), childrenExist(children) ? children : createShorthand(composeOptions.slots.icon, icon, slotProps.icon)));\n    var submenuElement = menuOpen ? /*#__PURE__*/React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Ref, {\n        innerRef: function innerRef(node) {\n          nestingRef.current = node;\n          menuRef.current = node;\n        }\n      }, /*#__PURE__*/React.createElement(Popper, _extends({\n        align: \"start\",\n        position: \"above\",\n        targetRef: itemRef\n      }, positioningProps), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {\n        value: mergedVariables\n      }, createShorthand(composeOptions.slots.menu || menuSlot || ToolbarMenu, menu, {\n        defaultProps: function defaultProps() {\n          return slotProps.menu;\n        },\n        overrideProps: handleMenuOverrides(getRefs)\n      })))), /*#__PURE__*/React.createElement(EventListener, {\n        listener: handleOutsideClick(getRefs),\n        target: context.target,\n        type: \"click\",\n        capture: true\n      }));\n    }) : null;\n\n    if (popup) {\n      var popupElement = createShorthand(composeOptions.slots.popup, popup, {\n        defaultProps: function defaultProps() {\n          return slotProps.popup;\n        },\n        overrideProps: {\n          trigger: itemElement,\n          children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`\n\n        }\n      });\n      setEnd();\n      return popupElement;\n    } // wrap the item if it has menu (even if it is closed = not rendered)\n\n\n    if (menu) {\n      var contentElement = /*#__PURE__*/React.createElement(React.Fragment, null, itemElement, submenuElement);\n\n      if (wrapper) {\n        var wrapperElement = createShorthand(composeOptions.slots.wrapper, wrapper, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('wrapper', slotProps.wrapper || {});\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              children: contentElement,\n              onClick: function onClick(e) {\n                handleWrapperClick(e);\n\n                _invoke(predefinedProps, 'onClick', e);\n              }\n            };\n          }\n        });\n        setEnd();\n        return wrapperElement;\n      }\n\n      setEnd();\n      return contentElement;\n    }\n\n    setEnd();\n    return itemElement;\n  }, {\n    className: toolbarItemClassName,\n    displayName: 'ToolbarItem',\n    slots: {\n      icon: ToolbarItemIcon,\n      wrapper: ToolbarItemWrapper,\n      popup: Popup // TODO: compose Popup to ToolbarItemPopup once it has compose functionality\n\n    },\n    slotProps: function slotProps() {\n      return {\n        popup: {\n          trapFocus: true\n        }\n      };\n    },\n    shorthandConfig: {\n      mappedProp: 'content'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'active', 'disabled', 'icon', 'menu', 'menuOpen', 'onMenuOpenChange', 'onClick', 'onFocus', 'onBlur', 'popup', 'wrapper']\n  });\n  ToolbarItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    active: PropTypes.bool,\n    disabled: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    menu: PropTypes.oneOfType([customPropTypes.shorthandAllowingChildren, PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren)]),\n    menuOpen: PropTypes.bool,\n    onMenuOpenChange: PropTypes.func,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {\n      trigger: customPropTypes.never,\n      children: customPropTypes.never\n    })), PropTypes.string]),\n    wrapper: customPropTypes.shorthandAllowingChildren\n  });\n  ToolbarItem.defaultProps = {\n    as: 'button',\n    accessibility: toolbarItemBehavior,\n    wrapper: {}\n  };\n  return ToolbarItem;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarItem.tsx"],"names":["toolbarItemClassName","ToolbarItem","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","active","className","design","icon","children","disabled","popup","menuOpen","wrapper","styles","variables","props","menu","positioningProps","partitionPopperPropsFromShorthand","itemRef","React","menuRef","parentVariables","mergedVariables","mergeVariablesOverrides","menuSlot","useContextSelectors","v","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","event","handleClick","performWrapperClick","handleWrapperClick","closeMenuAndFocusTrigger","trySetMenuOpen","doNotNavigateNextToolbarItem","mapPropsToBehavior","as","String","hasMenu","hasPopup","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","handleBlur","handleFocus","e","doesNodeContainClick","handleOutsideClick","isItemClick","isNestedClick","getRefs","childRef","isInside","newValue","handleMenuOverrides","onBlur","isInsideOrMenuTrigger","onItemClick","itemProps","ElementType","getElementType","slotProps","unhandledProps","useUnhandledProps","itemElement","handleRef","onFocus","onClick","childrenExist","createShorthand","submenuElement","nestingRef","defaultProps","overrideProps","popupElement","trigger","contentElement","wrapperElement","displayName","slots","trapFocus","shorthandConfig","mappedProp","handledProps","commonPropTypes","PropTypes","customPropTypes","onMenuOpenChange","Popup","never","shorthandAllowingChildren"],"mappings":"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","sourcesContent":["import { Accessibility, toolbarItemBehavior, ToolbarItemBehaviorProps } from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { GetRefs, NodeRef, Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { useContextSelectors } from '@fluentui/react-context-selector';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  createShorthand,\n  doesNodeContainClick,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  childrenExist,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, ShorthandCollection } from '../../types';\nimport { partitionPopperPropsFromShorthand, Popper, PopperShorthandProps } from '../../utils/positioner';\n\nimport { ToolbarMenu, ToolbarMenuProps } from './ToolbarMenu';\nimport { Popup, PopupProps } from '../Popup/Popup';\nimport { ToolbarMenuItemProps } from '../Toolbar/ToolbarMenuItem';\nimport { ToolbarItemShorthandKinds } from './Toolbar';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarItemWrapper, ToolbarItemWrapperProps } from './ToolbarItemWrapper';\nimport { ToolbarItemIcon, ToolbarItemIconProps } from './ToolbarItemIcon';\nimport { ToolbarItemSubscribedValue, ToolbarMenuContext } from './toolbarMenuContext';\n\nexport interface ToolbarItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ToolbarItemBehaviorProps>;\n\n  /** A toolbar item can be active. */\n  active?: boolean;\n\n  /** A toolbar item can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Name or shorthand for Toolbar Item Icon */\n  icon?: ShorthandValue<ToolbarItemIconProps>;\n\n  /**\n   * Shorthand for the submenu.\n   * If submenu is specified, the item is wrapped to group the item and the menu elements together.\n   */\n  menu?:\n    | ShorthandValue<ToolbarMenuProps & { popper?: PopperShorthandProps }>\n    | ShorthandCollection<ToolbarMenuItemProps, ToolbarItemShorthandKinds>;\n\n  /** Indicates if the menu inside the item is open. */\n  menuOpen?: boolean;\n\n  /**\n   * Event for request to change 'menuOpen' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onMenuOpenChange?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Called after item blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarItemProps>;\n\n  /**\n   * Attaches a `Popup` component to the ToolbarItem.\n   * Accepts all props as a `Popup`, except `trigger` and `children`.\n   * Traps focus by default.\n   * @see PopupProps\n   */\n  popup?: Omit<PopupProps, 'trigger' | 'children'> | string;\n\n  /** Shorthand for the wrapper component. The item is wrapped only if it contains a menu! */\n  wrapper?: ShorthandValue<ToolbarItemWrapperProps>;\n}\n\nexport type ToolbarItemStylesProps = Required<Pick<ToolbarItemProps, 'active' | 'disabled'>>;\n\nexport const toolbarItemClassName = 'ui-toolbar__item';\n\n/**\n * A ToolbarItem renders Toolbar item as a button with an icon.\n */\nexport const ToolbarItem = compose<'button', ToolbarItemProps, ToolbarItemStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const {\n      accessibility,\n      active,\n      className,\n      design,\n      icon,\n      children,\n      disabled,\n      popup,\n      menuOpen,\n      wrapper,\n      styles,\n      variables,\n    } = props;\n    const [menu, positioningProps] = partitionPopperPropsFromShorthand(props.menu);\n\n    const itemRef = React.useRef<HTMLElement>();\n    const menuRef = React.useRef<HTMLElement>();\n\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    const { menuSlot } = (useContextSelectors(ToolbarMenuContext, {\n      menuSlot: v => v.slots.menu,\n    }) as unknown) as ToolbarItemSubscribedValue; // TODO: we should improve typings for the useContextSelectors\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: event => {\n          event.preventDefault();\n          handleClick(event);\n        },\n        performWrapperClick: event => {\n          handleWrapperClick(event);\n        },\n        closeMenuAndFocusTrigger: event => {\n          trySetMenuOpen(false, event);\n          _.invoke(itemRef.current, 'focus');\n        },\n        doNotNavigateNextToolbarItem: event => {\n          event.stopPropagation();\n        },\n      },\n      mapPropsToBehavior: () => ({\n        as: String(props.as),\n        disabled,\n        hasMenu: !!menu,\n        hasPopup: !!popup,\n        menuOpen,\n        active,\n      }),\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarItemStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToStyles: () => ({ active, disabled }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const handleBlur = (e: React.SyntheticEvent) => {\n      _.invoke(props, 'onBlur', e, props);\n    };\n\n    const handleFocus = (e: React.SyntheticEvent) => {\n      _.invoke(props, 'onFocus', e, props);\n    };\n\n    const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (menu) {\n        trySetMenuOpen(!menuOpen, e);\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const handleWrapperClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (menu) {\n        if (doesNodeContainClick(menuRef.current, e.nativeEvent as MouseEvent, context.target)) {\n          trySetMenuOpen(false, e);\n        }\n      }\n    };\n\n    const handleOutsideClick = (getRefs: GetRefs) => (e: MouseEvent) => {\n      const isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n      const isNestedClick = _.some(getRefs(), (childRef: NodeRef) => {\n        return doesNodeContainClick(childRef.current as HTMLElement, e, context.target);\n      });\n      const isInside = isItemClick || isNestedClick;\n\n      if (!isInside) {\n        trySetMenuOpen(false, e);\n      }\n    };\n\n    const trySetMenuOpen = (newValue: boolean, e: Event | React.SyntheticEvent) => {\n      _.invoke(props, 'onMenuOpenChange', e, { ...props, menuOpen: newValue });\n    };\n\n    const handleMenuOverrides = (getRefs: GetRefs) => (predefinedProps: ToolbarMenuProps) => ({\n      onBlur: (e: React.FocusEvent) => {\n        const isInsideOrMenuTrigger = _.some(getRefs(), (childRef: NodeRef) => {\n          return (\n            childRef.current.contains(e.relatedTarget as HTMLElement) ||\n            itemRef.current.contains(e.relatedTarget as HTMLElement)\n          );\n        });\n\n        if (!isInsideOrMenuTrigger) {\n          trySetMenuOpen(false, e);\n        }\n      },\n      onItemClick: (e, itemProps: ToolbarMenuItemProps) => {\n        const { popup, menuOpen } = itemProps;\n        _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n        if (popup) {\n          return;\n        }\n        // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?\n        trySetMenuOpen(menuOpen, e);\n      },\n    });\n\n    const ElementType = getElementType(props);\n    const slotProps = composeOptions.resolveSlotProps<ToolbarItemProps>(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const itemElement = (\n      <Ref\n        innerRef={node => {\n          itemRef.current = node;\n          handleRef(ref, node);\n        }}\n      >\n        <ElementType\n          {...getA11yProps('root', {\n            ...unhandledProps,\n            disabled,\n            className: classes.root,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onClick: handleClick,\n          })}\n        >\n          {childrenExist(children) ? children : createShorthand(composeOptions.slots.icon, icon, slotProps.icon)}\n        </ElementType>\n      </Ref>\n    );\n\n    const submenuElement = menuOpen ? (\n      <Unstable_NestingAuto>\n        {(getRefs, nestingRef) => {\n          return (\n            <>\n              <Ref\n                innerRef={(node: HTMLElement) => {\n                  nestingRef.current = node;\n                  menuRef.current = node;\n                }}\n              >\n                <Popper align=\"start\" position=\"above\" targetRef={itemRef} {...positioningProps}>\n                  <ToolbarVariablesProvider value={mergedVariables}>\n                    {createShorthand(composeOptions.slots.menu || menuSlot || ToolbarMenu, menu, {\n                      defaultProps: () => slotProps.menu,\n                      overrideProps: handleMenuOverrides(getRefs),\n                    })}\n                  </ToolbarVariablesProvider>\n                </Popper>\n              </Ref>\n              <EventListener listener={handleOutsideClick(getRefs)} target={context.target} type=\"click\" capture />\n            </>\n          );\n        }}\n      </Unstable_NestingAuto>\n    ) : null;\n\n    if (popup) {\n      const popupElement = createShorthand(composeOptions.slots.popup, popup, {\n        defaultProps: () => slotProps.popup,\n        overrideProps: {\n          trigger: itemElement,\n          children: undefined, // force-reset `children` defined for `Popup` as it collides with the `trigger`\n        },\n      });\n      setEnd();\n\n      return popupElement;\n    }\n\n    // wrap the item if it has menu (even if it is closed = not rendered)\n    if (menu) {\n      const contentElement = (\n        <>\n          {itemElement}\n          {submenuElement}\n        </>\n      );\n\n      if (wrapper) {\n        const wrapperElement = createShorthand(composeOptions.slots.wrapper, wrapper, {\n          defaultProps: () => getA11yProps('wrapper', slotProps.wrapper || {}),\n          overrideProps: predefinedProps => ({\n            children: contentElement,\n            onClick: e => {\n              handleWrapperClick(e);\n              _.invoke(predefinedProps, 'onClick', e);\n            },\n          }),\n        });\n        setEnd();\n\n        return wrapperElement;\n      }\n\n      setEnd();\n      return contentElement;\n    }\n\n    setEnd();\n\n    return itemElement;\n  },\n  {\n    className: toolbarItemClassName,\n    displayName: 'ToolbarItem',\n\n    slots: {\n      icon: ToolbarItemIcon,\n      wrapper: ToolbarItemWrapper,\n      popup: Popup, // TODO: compose Popup to ToolbarItemPopup once it has compose functionality\n    },\n\n    slotProps: () => ({\n      popup: { trapFocus: true },\n    }),\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n      'active',\n      'disabled',\n      'icon',\n      'menu',\n      'menuOpen',\n      'onMenuOpenChange',\n      'onClick',\n      'onFocus',\n      'onBlur',\n      'popup',\n      'wrapper',\n    ],\n  },\n);\n\nToolbarItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  menu: PropTypes.oneOfType([\n    customPropTypes.shorthandAllowingChildren,\n    PropTypes.arrayOf(customPropTypes.shorthandAllowingChildren),\n  ]),\n  menuOpen: PropTypes.bool,\n  onMenuOpenChange: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  popup: PropTypes.oneOfType([\n    PropTypes.shape({\n      ...Popup.propTypes,\n      trigger: customPropTypes.never,\n      children: customPropTypes.never,\n    }),\n    PropTypes.string,\n  ]),\n  wrapper: customPropTypes.shorthandAllowingChildren,\n};\nToolbarItem.defaultProps = {\n  as: 'button',\n  accessibility: toolbarItemBehavior,\n  wrapper: {},\n};\n"]},"metadata":{},"sourceType":"module"}