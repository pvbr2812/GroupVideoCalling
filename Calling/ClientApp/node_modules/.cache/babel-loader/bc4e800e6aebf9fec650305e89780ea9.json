{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { FormField } from './FormField';\nimport { useTelemetry, getElementType, useUnhandledProps, useStyles, useFluentContext, useAccessibility } from '@fluentui/react-bindings';\nimport { FormLabel } from './FormLabel';\nimport { FormMessage } from './FormMessage';\nimport { FormInput } from './FormInput';\nimport { FormCheckbox } from './FormCheckbox';\nimport { FormDropdown } from './FormDropdown';\nimport { FormButton } from './FormButton';\nimport { FormRadioGroup } from './FormRadioGroup';\nimport { FormSlider } from './FormSlider';\nimport { FormFieldCustom } from './FormFieldCustom';\nexport var formClassName = 'ui-form';\n/**\n * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.\n */\n\nexport var Form = /*#__PURE__*/function () {\n  var Form = function Form(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Form.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        action = props.action,\n        children = props.children,\n        accessibility = props.accessibility;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Form.handledProps, props);\n\n    var _useStyles = useStyles(Form.displayName, {\n      className: formClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Form.displayName,\n      rtl: context.rtl\n    });\n\n    var handleSubmit = function handleSubmit(e) {\n      var action = props.action; // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()\n      // method.\n\n      if (!action) _invoke(e, 'preventDefault');\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _invoke.apply(void 0, [props, 'onSubmit', e, props].concat(args));\n    };\n\n    var renderFields = function renderFields() {\n      var fields = props.fields;\n      return _map(fields, function (field) {\n        return FormField.create(field);\n      });\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), {\n      action: action,\n      onSubmit: handleSubmit\n    }), childrenExist(children) ? children : renderFields());\n    setEnd();\n    return element;\n  };\n\n  Form.displayName = 'Form';\n  Form.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    action: PropTypes.string,\n    fields: customPropTypes.collectionShorthand,\n    onSubmit: PropTypes.func\n  });\n  Form.defaultProps = {\n    as: 'form'\n  };\n  Form.handledProps = Object.keys(Form.propTypes);\n  Form.create = createShorthandFactory({\n    Component: Form\n  });\n  Form.Field = FormField;\n  Form.FieldCustom = FormFieldCustom;\n  Form.Label = FormLabel;\n  Form.Message = FormMessage;\n  Form.Input = FormInput;\n  Form.Checkbox = FormCheckbox;\n  Form.Dropdown = FormDropdown;\n  Form.Button = FormButton;\n  Form.RadioGroup = FormRadioGroup;\n  Form.Slider = FormSlider;\n  return Form;\n}();","map":{"version":3,"sources":["components/Form/Form.tsx"],"names":["formClassName","Form","context","useFluentContext","setStart","setEnd","useTelemetry","className","design","styles","variables","action","children","accessibility","props","ElementType","getElementType","unhandledProps","useUnhandledProps","classes","useStyles","mapPropsToInlineStyles","rtl","getA11yProps","useAccessibility","debugName","handleSubmit","args","renderFields","fields","FormField","element","root","forElements","childrenExist","content","PropTypes","customPropTypes","onSubmit","func","as","Object","createShorthandFactory","Component"],"mappings":";;;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,SAAA,aAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,sBAAA,QAAA,aAAA;AASA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,YAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,gBAAA,QAAA,0BAAA;AAUA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,WAAA,QAAA,eAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,YAAA,QAAA,gBAAA;AACA,SAAA,YAAA,QAAA,gBAAA;AACA,SAAA,UAAA,QAAA,cAAA;AACA,SAAA,cAAA,QAAA,kBAAA;AACA,SAAA,UAAA,QAAA,cAAA;AACA,SAAA,eAAA,QAAA,mBAAA;AAsBA,OAAO,IAAMA,aAAa,GAAnB,SAAA;AAIP;;;;AAGA,OAAO,IAAMC,IAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,IAYV,GAAG,SAZOA,IAYP,CAAA,KAAA,EAAS;AACb,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AADa,QAAA,aAAA,GAEgBG,YAAY,CAACL,IAAI,CAAL,WAAA,EAAmBC,OAAO,CAFtD,SAE4B,CAF5B;AAAA,QAELE,QAFK,GAAA,aAAA,CAAA,QAAA;AAAA,QAEKC,MAFL,GAAA,aAAA,CAAA,MAAA;;AAGbD,IAAAA,QAAQ;AAHK,QAILG,SAJK,GAIqEO,KAJrE,CAAA,SAAA;AAAA,QAIMN,MAJN,GAIqEM,KAJrE,CAAA,MAAA;AAAA,QAIcL,MAJd,GAIqEK,KAJrE,CAAA,MAAA;AAAA,QAIsBJ,SAJtB,GAIqEI,KAJrE,CAAA,SAAA;AAAA,QAIiCH,MAJjC,GAIqEG,KAJrE,CAAA,MAAA;AAAA,QAIyCF,QAJzC,GAIqEE,KAJrE,CAAA,QAAA;AAAA,QAImDD,aAJnD,GAIqEC,KAJrE,CAAA,aAAA;AAKb,QAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAACjB,IAAI,CAAL,YAAA,EAAxC,KAAwC,CAAxC;;AANa,QAAA,UAAA,GAQOmB,SAAS,CAAkBnB,IAAI,CAAtB,WAAA,EAAoC;AAC/DM,MAAAA,SAAS,EADsD,aAAA;AAE/Dc,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7Bd,UAAAA,SAAS,EADoB,SAAA;AAE7BC,UAAAA,MAAM,EAFuB,MAAA;AAG7BC,UAAAA,MAAM,EAHuB,MAAA;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAFuC,OAAA;AAQ/DY,MAAAA,GAAG,EAAEpB,OAAO,CAACoB;AARkD,KAApC,CARhB;AAAA,QAQLH,OARK,GAAA,UAAA,CAAA,OAAA;;AAmBb,QAAMI,YAAY,GAAGC,gBAAgB,CAAA,aAAA,EAAuB;AAC1DC,MAAAA,SAAS,EAAExB,IAAI,CAD2C,WAAA;AAE1DqB,MAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAF6C,KAAvB,CAArC;;AAKA,QAAMI,YAAY,GAAG,SAAfA,YAAe,CAAA,CAAA,EAAgB;AAAA,UAC3Bf,MAD2B,GAChBG,KADgB,CAAA,MAAA,CAAA,CAGnC;AACA;;AACA,UAAI,CAAJ,MAAA,EAAa,OAAA,CAAA,CAAA,EAAA,gBAAA,CAAA;;AALsB,WAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAATa,IAAS,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAATA,QAAAA,IAAS,CAAA,IAAA,GAAA,CAAA,CAATA,GAAS,SAAA,CAAA,IAAA,CAATA;AAAS;;AAMnC,MAAA,OAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,KAAA,EAAA,UAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,CAAA,IAAA,CAAA;AANF,KAAA;;AASA,QAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,UACjBC,MADiB,GACNf,KADM,CAAA,MAAA;AAEzB,aAAO,IAAA,CAAA,MAAA,EAAc,UAAA,KAAA,EAAK;AAAA,eAAIgB,SAAS,CAATA,MAAAA,CAAJ,KAAIA,CAAJ;AAA1B,OAAO,CAAP;AAFF,KAAA;;AAKA,QAAMC,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EACMR,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdhB,MAAAA,SAAS,EAAEY,OAAO,CAACa;AADL,KAAA,EAEX,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,KAA/B,CAFW,EADlB,cACkB,CAAA,CADlB,EAAA;AAME,MAAA,MAAM,EANR,MAAA;AAOE,MAAA,QAAQ,EAAEP;AAPZ,KAAA,CAAA,EASGQ,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAAqCN,YAV1C,EACE,CADF;AAaAvB,IAAAA,MAAM;AACN,WAAA,OAAA;AAhEK,GAAA;;AAmEPJ,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AAEAA,EAAAA,IAAI,CAAJA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BkC,IAAAA,OAAO,EAAE;AADqB,GAA7B,CADLlC,EAAAA;AAIEU,IAAAA,MAAM,EAAEyB,SAAS,CAJnBnC,MAAAA;AAKE4B,IAAAA,MAAM,EAAEQ,eAAe,CALzBpC,mBAAAA;AAMEqC,IAAAA,QAAQ,EAAEF,SAAS,CAACG;AANtBtC,GAAAA,CAAAA;AASAA,EAAAA,IAAI,CAAJA,YAAAA,GAAoB;AAClBuC,IAAAA,EAAE,EAAE;AADc,GAApBvC;AAIAA,EAAAA,IAAI,CAAJA,YAAAA,GAAoBwC,MAAM,CAANA,IAAAA,CAAYxC,IAAI,CAApCA,SAAoBwC,CAApBxC;AAEAA,EAAAA,IAAI,CAAJA,MAAAA,GAAcyC,sBAAsB,CAAC;AACnCC,IAAAA,SAAS,EAAE1C;AADwB,GAAD,CAApCA;AAIAA,EAAAA,IAAI,CAAJA,KAAAA,GAAAA,SAAAA;AACAA,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,eAAAA;AACAA,EAAAA,IAAI,CAAJA,KAAAA,GAAAA,SAAAA;AACAA,EAAAA,IAAI,CAAJA,OAAAA,GAAAA,WAAAA;AACAA,EAAAA,IAAI,CAAJA,KAAAA,GAAAA,SAAAA;AACAA,EAAAA,IAAI,CAAJA,QAAAA,GAAAA,YAAAA;AACAA,EAAAA,IAAI,CAAJA,QAAAA,GAAAA,YAAAA;AACAA,EAAAA,IAAI,CAAJA,MAAAA,GAAAA,UAAAA;AACAA,EAAAA,IAAI,CAAJA,UAAAA,GAAAA,cAAAA;AACAA,EAAAA,IAAI,CAAJA,MAAAA,GAAAA,UAAAA;AAjGO,SAAA,IAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { FormField, FormFieldProps } from './FormField';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nimport { FormLabel } from './FormLabel';\nimport { FormMessage } from './FormMessage';\nimport { FormInput } from './FormInput';\nimport { FormCheckbox } from './FormCheckbox';\nimport { FormDropdown } from './FormDropdown';\nimport { FormButton } from './FormButton';\nimport { FormRadioGroup } from './FormRadioGroup';\nimport { FormSlider } from './FormSlider';\nimport { FormFieldCustom } from './FormFieldCustom';\n\nexport interface FormProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** The HTML form action. */\n  action?: string;\n\n  /** Shorthand array of props for the Form.Fields inside the Form. */\n  fields?: ShorthandCollection<FormFieldProps>;\n\n  /**\n   * The HTML form submit handler.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onSubmit?: ComponentEventHandler<FormProps>;\n}\n\nexport const formClassName = 'ui-form';\n\nexport type FormStylesProps = never;\n\n/**\n * A Form is used to collect, oprionally validate, and submit the user input, in a structured way.\n */\nexport const Form: ComponentWithAs<'form', FormProps> &\n  FluentComponentStaticProps<FormProps> & {\n    Field: typeof FormField;\n    Label: typeof FormLabel;\n    Message: typeof FormMessage;\n    Input: typeof FormInput;\n    Checkbox: typeof FormCheckbox;\n    Dropdown: typeof FormDropdown;\n    Button: typeof FormButton;\n    RadioGroup: typeof FormRadioGroup;\n    Slider: typeof FormSlider;\n    FieldCustom: typeof FormFieldCustom;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Form.displayName, context.telemetry);\n  setStart();\n  const { className, design, styles, variables, action, children, accessibility } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Form.handledProps, props);\n\n  const { classes } = useStyles<FormStylesProps>(Form.displayName, {\n    className: formClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Form.displayName,\n    rtl: context.rtl,\n  });\n\n  const handleSubmit = (e, ...args) => {\n    const { action } = props;\n\n    // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()\n    // method.\n    if (!action) _.invoke(e, 'preventDefault');\n    _.invoke(props, 'onSubmit', e, props, ...args);\n  };\n\n  const renderFields = () => {\n    const { fields } = props;\n    return _.map(fields, field => FormField.create(field));\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n      action={action}\n      onSubmit={handleSubmit}\n    >\n      {childrenExist(children) ? children : renderFields()}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nForm.displayName = 'Form';\n\nForm.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: PropTypes.string,\n  fields: customPropTypes.collectionShorthand,\n  onSubmit: PropTypes.func,\n};\n\nForm.defaultProps = {\n  as: 'form',\n};\n\nForm.handledProps = Object.keys(Form.propTypes) as any;\n\nForm.create = createShorthandFactory({\n  Component: Form,\n});\n\nForm.Field = FormField;\nForm.FieldCustom = FormFieldCustom;\nForm.Label = FormLabel;\nForm.Message = FormMessage;\nForm.Input = FormInput;\nForm.Checkbox = FormCheckbox;\nForm.Dropdown = FormDropdown;\nForm.Button = FormButton;\nForm.RadioGroup = FormRadioGroup;\nForm.Slider = FormSlider;\n"]},"metadata":{},"sourceType":"module"}