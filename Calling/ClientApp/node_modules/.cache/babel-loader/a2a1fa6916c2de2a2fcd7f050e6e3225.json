{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propagation = exports.metrics = exports.trace = exports.context = void 0;\n\n__exportStar(require(\"./common/Logger\"), exports);\n\n__exportStar(require(\"./common/Time\"), exports);\n\n__exportStar(require(\"./context/propagation/getter\"), exports);\n\n__exportStar(require(\"./context/propagation/HttpTextPropagator\"), exports);\n\n__exportStar(require(\"./context/propagation/NoopHttpTextPropagator\"), exports);\n\n__exportStar(require(\"./context/propagation/setter\"), exports);\n\n__exportStar(require(\"./correlation_context/CorrelationContext\"), exports);\n\n__exportStar(require(\"./correlation_context/EntryValue\"), exports);\n\n__exportStar(require(\"./metrics/BatchObserverResult\"), exports);\n\n__exportStar(require(\"./metrics/BoundInstrument\"), exports);\n\n__exportStar(require(\"./metrics/Meter\"), exports);\n\n__exportStar(require(\"./metrics/MeterProvider\"), exports);\n\n__exportStar(require(\"./metrics/Metric\"), exports);\n\n__exportStar(require(\"./metrics/NoopMeter\"), exports);\n\n__exportStar(require(\"./metrics/NoopMeterProvider\"), exports);\n\n__exportStar(require(\"./metrics/Observation\"), exports);\n\n__exportStar(require(\"./metrics/ObserverResult\"), exports);\n\n__exportStar(require(\"./trace/attributes\"), exports);\n\n__exportStar(require(\"./trace/Event\"), exports);\n\n__exportStar(require(\"./trace/instrumentation/Plugin\"), exports);\n\n__exportStar(require(\"./trace/link_context\"), exports);\n\n__exportStar(require(\"./trace/link\"), exports);\n\n__exportStar(require(\"./trace/NoopSpan\"), exports);\n\n__exportStar(require(\"./trace/NoopTracer\"), exports);\n\n__exportStar(require(\"./trace/NoopTracerProvider\"), exports);\n\n__exportStar(require(\"./trace/Sampler\"), exports);\n\n__exportStar(require(\"./trace/SamplingResult\"), exports);\n\n__exportStar(require(\"./trace/span_context\"), exports);\n\n__exportStar(require(\"./trace/span_kind\"), exports);\n\n__exportStar(require(\"./trace/span\"), exports);\n\n__exportStar(require(\"./trace/SpanOptions\"), exports);\n\n__exportStar(require(\"./trace/status\"), exports);\n\n__exportStar(require(\"./trace/TimedEvent\"), exports);\n\n__exportStar(require(\"./trace/trace_flags\"), exports);\n\n__exportStar(require(\"./trace/trace_state\"), exports);\n\n__exportStar(require(\"./trace/tracer_provider\"), exports);\n\n__exportStar(require(\"./trace/tracer\"), exports);\n\nvar context_base_1 = require(\"@opentelemetry/context-base\");\n\nObject.defineProperty(exports, \"Context\", {\n  enumerable: true,\n  get: function () {\n    return context_base_1.Context;\n  }\n});\n\nvar context_1 = require(\"./api/context\");\n/** Entrypoint for context API */\n\n\nexports.context = context_1.ContextAPI.getInstance();\n\nvar trace_1 = require(\"./api/trace\");\n/** Entrypoint for trace API */\n\n\nexports.trace = trace_1.TraceAPI.getInstance();\n\nvar metrics_1 = require(\"./api/metrics\");\n/** Entrypoint for metrics API */\n\n\nexports.metrics = metrics_1.MetricsAPI.getInstance();\n\nvar propagation_1 = require(\"./api/propagation\");\n/** Entrypoint for propagation API */\n\n\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nexports.default = {\n  trace: exports.trace,\n  metrics: exports.metrics,\n  context: exports.context,\n  propagation: exports.propagation\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.propagation = exports.metrics = exports.trace = exports.context = void 0;\n__exportStar(require(\"./common/Logger\"), exports);\n__exportStar(require(\"./common/Time\"), exports);\n__exportStar(require(\"./context/propagation/getter\"), exports);\n__exportStar(require(\"./context/propagation/HttpTextPropagator\"), exports);\n__exportStar(require(\"./context/propagation/NoopHttpTextPropagator\"), exports);\n__exportStar(require(\"./context/propagation/setter\"), exports);\n__exportStar(require(\"./correlation_context/CorrelationContext\"), exports);\n__exportStar(require(\"./correlation_context/EntryValue\"), exports);\n__exportStar(require(\"./metrics/BatchObserverResult\"), exports);\n__exportStar(require(\"./metrics/BoundInstrument\"), exports);\n__exportStar(require(\"./metrics/Meter\"), exports);\n__exportStar(require(\"./metrics/MeterProvider\"), exports);\n__exportStar(require(\"./metrics/Metric\"), exports);\n__exportStar(require(\"./metrics/NoopMeter\"), exports);\n__exportStar(require(\"./metrics/NoopMeterProvider\"), exports);\n__exportStar(require(\"./metrics/Observation\"), exports);\n__exportStar(require(\"./metrics/ObserverResult\"), exports);\n__exportStar(require(\"./trace/attributes\"), exports);\n__exportStar(require(\"./trace/Event\"), exports);\n__exportStar(require(\"./trace/instrumentation/Plugin\"), exports);\n__exportStar(require(\"./trace/link_context\"), exports);\n__exportStar(require(\"./trace/link\"), exports);\n__exportStar(require(\"./trace/NoopSpan\"), exports);\n__exportStar(require(\"./trace/NoopTracer\"), exports);\n__exportStar(require(\"./trace/NoopTracerProvider\"), exports);\n__exportStar(require(\"./trace/Sampler\"), exports);\n__exportStar(require(\"./trace/SamplingResult\"), exports);\n__exportStar(require(\"./trace/span_context\"), exports);\n__exportStar(require(\"./trace/span_kind\"), exports);\n__exportStar(require(\"./trace/span\"), exports);\n__exportStar(require(\"./trace/SpanOptions\"), exports);\n__exportStar(require(\"./trace/status\"), exports);\n__exportStar(require(\"./trace/TimedEvent\"), exports);\n__exportStar(require(\"./trace/trace_flags\"), exports);\n__exportStar(require(\"./trace/trace_state\"), exports);\n__exportStar(require(\"./trace/tracer_provider\"), exports);\n__exportStar(require(\"./trace/tracer\"), exports);\nvar context_base_1 = require(\"@opentelemetry/context-base\");\nObject.defineProperty(exports, \"Context\", { enumerable: true, get: function () { return context_base_1.Context; } });\nvar context_1 = require(\"./api/context\");\n/** Entrypoint for context API */\nexports.context = context_1.ContextAPI.getInstance();\nvar trace_1 = require(\"./api/trace\");\n/** Entrypoint for trace API */\nexports.trace = trace_1.TraceAPI.getInstance();\nvar metrics_1 = require(\"./api/metrics\");\n/** Entrypoint for metrics API */\nexports.metrics = metrics_1.MetricsAPI.getInstance();\nvar propagation_1 = require(\"./api/propagation\");\n/** Entrypoint for propagation API */\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nexports.default = {\n    trace: exports.trace,\n    metrics: exports.metrics,\n    context: exports.context,\n    propagation: exports.propagation,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}