{"ast":null,"code":"var t = /:not\\(:focus-visible\\)/g,\n    a = /:focus-visible/g,\n    n = function (t) {\n  return t.trim().replace(/\\s+/g, \" \");\n};\n\nexport default function (i, e, u, r, o, c, f) {\n  return 2 === i && u.forEach(function (i, e) {\n    if (i.match(t)) {\n      var r = i.replace(t, \":focus\");\n      u[e] = n('\\n          [data-whatinput]:not([data-whatinput=\"keyboard\"]) ' + r + ',\\n          [data-whatinput]:not([data-whatinput=\"initial\"]) ' + r + \"\\n        \");\n    } else if (i.match(a)) {\n      var o = i.replace(a, \":focus\");\n      u[e] = n('\\n          [data-whatinput=\"keyboard\"] ' + o + ',\\n          [data-whatinput=\"initial\"] ' + o + \"\\n        \");\n    }\n  }), e;\n}","map":{"version":3,"sources":["../src/index.js"],"names":["notFocusVisibleRgxp","focusVisibleRgxp","trim","selector","replace","context","content","selectors","parents","line","column","length","forEach","index","match","cleanSelector"],"mappings":"AAOA,IAAMA,CAAAA,GAAsB,yBAA5B;AAAA,IACMC,CAAAA,GAAmB,iBADzB;AAAA,IAGMC,CAAAA,GAAO,UAAA,CAAA,EAAA;AAAA,SAAYC,CAAAA,CAASD,IAATC,GAAgBC,OAAhBD,CAAwB,MAAxBA,EAAgC,GAAhCA,CAAZ;AAA4C,CAHzD;;AAGyD,eAAA,UAGvDE,CAHuD,EAIvDC,CAJuD,EAKvDC,CALuD,EAMvDC,CANuD,EAOvDC,CAPuD,EAQvDC,CARuD,EASvDC,CATuD,EASvDA;AAoBA,SAlBgB,MAAZN,CAAY,IACdE,CAAAA,CAAUK,OAAVL,CAAkB,UAACJ,CAAD,EAAWU,CAAX,EAAWA;AAC3B,QAAIV,CAAAA,CAASW,KAATX,CAAeH,CAAfG,CAAJ,EAAyC;AACvC,UAAMY,CAAAA,GAAgBZ,CAAAA,CAASC,OAATD,CAAiBH,CAAjBG,EAAsC,QAAtCA,CAAtB;AACAI,MAAAA,CAAAA,CAAUM,CAAVN,CAAAA,GAAmBL,CAAAA,CAAAA,mEACmCa,CADnCb,GACmCa,gEADnCb,GAEkCa,CAFlCb,GAEkCa,YAFlCb,CAAnBK;AAEqDQ,KAJvD,MAIuDA,IAE5CZ,CAAAA,CAASW,KAATX,CAAeF,CAAfE,CAF4CY,EAEV;AAC3C,UAAMA,CAAAA,GAAgBZ,CAAAA,CAASC,OAATD,CAAiBF,CAAjBE,EAAmC,QAAnCA,CAAtB;AACAI,MAAAA,CAAAA,CAAUM,CAAVN,CAAAA,GAAmBL,CAAAA,CAAAA,6CACaa,CADbb,GACaa,0CADbb,GAEYa,CAFZb,GAEYa,YAFZb,CAAnBK;AAE+BQ;AAAAA,GAXnCR,CADc,EAkBTD,CAAP;AAAOA","sourcesContent":["/**\n * Copyright (c) Quid, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @flow\nconst notFocusVisibleRgxp = /:not\\(:focus-visible\\)/g;\nconst focusVisibleRgxp = /:focus-visible/g;\n\nconst trim = selector => selector.trim().replace(/\\s+/g, ' ');\n\nexport default (\n  context: number,\n  content: string,\n  selectors: Array<string>,\n  parents: Array<string>,\n  line: number,\n  column: number,\n  length: number\n) => {\n  if (context === 2) {\n    selectors.forEach((selector, index) => {\n      if (selector.match(notFocusVisibleRgxp)) {\n        const cleanSelector = selector.replace(notFocusVisibleRgxp, ':focus');\n        selectors[index] = trim(`\n          [data-whatinput]:not([data-whatinput=\"keyboard\"]) ${cleanSelector},\n          [data-whatinput]:not([data-whatinput=\"initial\"]) ${cleanSelector}\n        `);\n      } else if (selector.match(focusVisibleRgxp)) {\n        const cleanSelector = selector.replace(focusVisibleRgxp, ':focus');\n        selectors[index] = trim(`\n          [data-whatinput=\"keyboard\"] ${cleanSelector},\n          [data-whatinput=\"initial\"] ${cleanSelector}\n        `);\n      }\n    });\n  }\n\n  return content;\n};\n"]},"metadata":{},"sourceType":"module"}