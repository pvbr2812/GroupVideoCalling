{"ast":null,"code":"import { connect } from 'react-redux';\nimport ConfigurationScreen from '../components/Configuration';\nimport { setCallAgent, setGroup } from '../core/actions/calls';\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\nimport { initCallClient, joinGroup, registerToCallAgent, updateDevices } from '../core/sideEffects';\nimport { setMic } from '../core/actions/controls';\nimport { utils } from 'Utils/Utils';\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\nimport { setUserId } from 'core/actions/sdk';\n\nconst mapStateToProps = (state, props) => ({\n  deviceManager: state.devices.deviceManager,\n  callAgent: state.calls.callAgent,\n  group: state.calls.group,\n  mic: state.controls.mic,\n  screenWidth: props.screenWidth,\n  audioDeviceInfo: state.devices.audioDeviceInfo,\n  videoDeviceInfo: state.devices.videoDeviceInfo,\n  videoDeviceList: state.devices.videoDeviceList,\n  audioDeviceList: state.devices.audioDeviceList,\n  cameraPermission: state.devices.cameraPermission,\n  microphonePermission: state.devices.microphonePermission,\n  joinGroup: async (callAgent, groupId, localVideoStream) => {\n    callAgent && (await joinGroup(callAgent, {\n      groupId\n    }, {\n      videoOptions: {\n        localVideoStreams: localVideoStream ? [localVideoStream] : undefined\n      },\n      audioOptions: {\n        muted: !state.controls.mic\n      }\n    }));\n  },\n  getToken: async () => {\n    const tokenResponse = await utils.getTokenForUser();\n    const userToken = tokenResponse.token;\n    const userId = tokenResponse.user.communicationUserId;\n    const tokenCredential = new AzureCommunicationTokenCredential({\n      tokenRefresher: () => {\n        return utils.getRefreshedTokenForUser(userId);\n      },\n      refreshProactively: true,\n      token: userToken\n    });\n    return {\n      tokenCredential,\n      userId\n    };\n  },\n  createCallAgent: async (tokenCredential, displayName) => {\n    const callClient = state.sdk.callClient;\n\n    if (callClient === undefined) {\n      throw new Error('CallClient is not initialized');\n    }\n\n    const callAgent = await callClient.createCallAgent(tokenCredential, {\n      displayName\n    });\n    return callAgent;\n  }\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setMic: mic => dispatch(setMic(mic)),\n  setAudioDeviceInfo: deviceInfo => dispatch(setAudioDeviceInfo(deviceInfo)),\n  setVideoDeviceInfo: deviceInfo => dispatch(setVideoDeviceInfo(deviceInfo)),\n  setupCallClient: unsupportedStateHandler => dispatch(initCallClient(unsupportedStateHandler)),\n  registerToCallEvents: async (userId, callAgent, endCallHandler) => {\n    dispatch(setUserId(userId));\n    dispatch(setCallAgent(callAgent));\n    dispatch(registerToCallAgent(userId, callAgent, endCallHandler));\n  },\n  setGroup: groupId => dispatch(setGroup(groupId)),\n  updateDevices: () => dispatch(updateDevices())\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(ConfigurationScreen);","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Git Uploads/GroupVideoCalling/Calling/ClientApp/src/containers/Configuration.ts"],"names":["connect","ConfigurationScreen","setCallAgent","setGroup","setVideoDeviceInfo","setAudioDeviceInfo","initCallClient","joinGroup","registerToCallAgent","updateDevices","setMic","utils","AzureCommunicationTokenCredential","setUserId","mapStateToProps","state","props","deviceManager","devices","callAgent","calls","group","mic","controls","screenWidth","audioDeviceInfo","videoDeviceInfo","videoDeviceList","audioDeviceList","cameraPermission","microphonePermission","groupId","localVideoStream","videoOptions","localVideoStreams","undefined","audioOptions","muted","getToken","tokenResponse","getTokenForUser","userToken","token","userId","user","communicationUserId","tokenCredential","tokenRefresher","getRefreshedTokenForUser","refreshProactively","createCallAgent","displayName","callClient","sdk","Error","mapDispatchToProps","dispatch","deviceInfo","setupCallClient","unsupportedStateHandler","registerToCallEvents","endCallHandler","connector"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\nimport ConfigurationScreen, { ConfigurationScreenProps, TokenResponse } from '../components/Configuration';\r\nimport { setCallAgent, setGroup } from '../core/actions/calls';\r\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\r\nimport { initCallClient, joinGroup, registerToCallAgent, updateDevices } from '../core/sideEffects';\r\nimport { setMic } from '../core/actions/controls';\r\nimport { State } from '../core/reducers';\r\nimport {\r\n  AudioDeviceInfo,\r\n  VideoDeviceInfo,\r\n  LocalVideoStream,\r\n  CallAgent,\r\n  CallEndReason\r\n} from '@azure/communication-calling';\r\nimport { CommunicationUserToken } from '@azure/communication-identity';\r\nimport { utils } from 'Utils/Utils';\r\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\r\nimport { setUserId } from 'core/actions/sdk';\r\n\r\nconst mapStateToProps = (state: State, props: ConfigurationScreenProps) => ({\r\n  deviceManager: state.devices.deviceManager,\r\n  callAgent: state.calls.callAgent,\r\n  group: state.calls.group,\r\n  mic: state.controls.mic,\r\n  screenWidth: props.screenWidth,\r\n  audioDeviceInfo: state.devices.audioDeviceInfo,\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  videoDeviceList: state.devices.videoDeviceList,\r\n  audioDeviceList: state.devices.audioDeviceList,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission,\r\n  joinGroup: async (callAgent: CallAgent, groupId: string, localVideoStream: LocalVideoStream): Promise<void> => {\r\n    callAgent &&\r\n      (await joinGroup(\r\n        callAgent,\r\n        {\r\n          groupId\r\n        },\r\n        {\r\n          videoOptions: {\r\n            localVideoStreams: localVideoStream ? [localVideoStream] : undefined\r\n          },\r\n          audioOptions: { muted: !state.controls.mic }\r\n        }\r\n      ));\r\n  },\r\n  getToken: async (): Promise<TokenResponse> => {\r\n    const tokenResponse: CommunicationUserToken = await utils.getTokenForUser();\r\n    const userToken = tokenResponse.token;\r\n    const userId = tokenResponse.user.communicationUserId;\r\n\r\n    const tokenCredential = new AzureCommunicationTokenCredential({\r\n      tokenRefresher: (): Promise<string> => {\r\n        return utils.getRefreshedTokenForUser(userId);\r\n      },\r\n      refreshProactively: true,\r\n      token: userToken\r\n    });\r\n\r\n    return {\r\n      tokenCredential,\r\n      userId\r\n    };\r\n  },\r\n  createCallAgent: async (\r\n    tokenCredential: AzureCommunicationTokenCredential,\r\n    displayName: string\r\n  ): Promise<CallAgent> => {\r\n    const callClient = state.sdk.callClient;\r\n\r\n    if (callClient === undefined) {\r\n      throw new Error('CallClient is not initialized');\r\n    }\r\n\r\n    const callAgent: CallAgent = await callClient.createCallAgent(tokenCredential, { displayName });\r\n    return callAgent;\r\n  }\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setMic: (mic: boolean): void => dispatch(setMic(mic)),\r\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo): void => dispatch(setAudioDeviceInfo(deviceInfo)),\r\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo): void => dispatch(setVideoDeviceInfo(deviceInfo)),\r\n  setupCallClient: (unsupportedStateHandler: () => void): void => dispatch(initCallClient(unsupportedStateHandler)),\r\n  registerToCallEvents: async (\r\n    userId: string,\r\n    callAgent: CallAgent,\r\n    endCallHandler: (reason: CallEndReason) => void\r\n  ): Promise<void> => {\r\n    dispatch(setUserId(userId));\r\n    dispatch(setCallAgent(callAgent));\r\n    dispatch(registerToCallAgent(userId, callAgent, endCallHandler));\r\n  },\r\n  setGroup: (groupId: string): void => dispatch(setGroup(groupId)),\r\n  updateDevices: (): void => dispatch(updateDevices())\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(ConfigurationScreen);\r\n"]},"metadata":{},"sourceType":"module"}