{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport { useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport { mergeStyles } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes } from '../../utils';\n\nvar applyStyles = function applyStyles(element, styles, classes) {\n  if (!styles) {\n    return element;\n  } // if element is DOM element\n\n\n  if (typeof element.type === 'string') {\n    return /*#__PURE__*/React.cloneElement(element, {\n      className: cx(element.props.className, classes.root)\n    });\n  } // assuming element is Fluent UI element\n\n\n  return /*#__PURE__*/React.cloneElement(element, {\n    styles: mergeStyles(styles.root || {}, element.props.styles)\n  });\n};\n\nexport var flexItemClassName = 'ui-flex__item';\n/**\n * A FlexItem is a layout component that customizes alignment of Flex child.\n */\n\nexport var FlexItem = /*#__PURE__*/function () {\n  var FlexItem = function FlexItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(FlexItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var align = props.align,\n        children = props.children,\n        className = props.className,\n        design = props.design,\n        grow = props.grow,\n        flexDirection = props.flexDirection,\n        push = props.push,\n        shrink = props.shrink,\n        size = props.size,\n        styles = props.styles,\n        variables = props.variables;\n\n    var _useStyles = useStyles(FlexItem.displayName, {\n      className: flexItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          align: align,\n          grow: grow,\n          flexDirection: flexDirection,\n          push: push,\n          shrink: shrink,\n          size: size\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var element; // pass calculated bits using Render Props pattern\n\n    if (typeof children === 'function') {\n      element = children({\n        styles: resolvedStyles.root,\n        classes: classes.root\n      });\n    } else if (_isNil(children)) {\n      element = null;\n    } else {\n      element = applyStyles(React.Children.only(children), resolvedStyles, classes);\n    }\n\n    setEnd();\n    return element;\n  };\n\n  FlexItem.displayName = 'FlexItem';\n  FlexItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    accessibility: false,\n    content: false\n  }), {\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n    align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']), PropTypes.string]),\n    shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    push: PropTypes.bool,\n\n    /**\n     * Will be automatically set by parent Flex component\n     */\n    flexDirection: PropTypes.oneOf(['row', 'column'])\n  }); // Boolean flag for now, Symbol-based approach may be used instead.\n  // However, there are  concerns related to browser compatibility if Symbols will be used.\n  // Completely alternative approach - check class name of React element (and generalize this logic).\n\n  FlexItem.__isFlexItem = true;\n  return FlexItem;\n}();","map":{"version":3,"sources":["components/Flex/FlexItem.tsx"],"names":["applyStyles","element","className","cx","classes","styles","mergeStyles","flexItemClassName","FlexItem","context","useFluentContext","setStart","setEnd","useTelemetry","align","children","design","grow","flexDirection","push","shrink","size","variables","props","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","root","React","accessibility","content","PropTypes"],"mappings":"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","sourcesContent":["import { ComponentSlotClasses, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport { ComponentSlotStylesPrepared, ComponentSlotStylesResolved, mergeStyles } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\n\ntype ChildrenFunction = (params: { styles: ComponentSlotStylesPrepared; classes: string }) => React.ReactElement;\n\nexport type FlexItemChildren = React.ReactElement | ChildrenFunction;\n\nexport interface FlexItemProps extends UIComponentProps, ChildrenComponentProps<FlexItemChildren> {\n  /** Controls item's alignment. */\n  align?: 'auto' | 'start' | 'end' | 'center' | 'baseline' | 'stretch';\n\n  /** Defines size of the item. */\n  size?: 'size.half' | 'size.quarter' | 'size.small' | 'size.medium' | 'size.large' | string;\n\n  /**\n   * Item can fill remaining space of the container.\n   * If numeric value is provided, remaining space will be distributed proportionally between all the items.\n   * */\n  grow?: boolean | number;\n\n  /**\n   * Controls item's ability to shrink.\n   * */\n  shrink?: boolean | number;\n\n  /**\n   * Item can be pushed towards opposite side in the container's direction.\n   */\n  push?: boolean;\n\n  /**\n   * IGNORE (will be refactored and not exposed via API).\n   * Value is automatically set by parent Flex component.\n   */\n  flexDirection?: 'row' | 'column';\n}\n\nexport type FlexItemStylesProps = Pick<FlexItemProps, 'align' | 'grow' | 'flexDirection' | 'push' | 'shrink' | 'size'>;\n\nconst applyStyles = (\n  element: React.ReactElement,\n  styles: ComponentSlotStylesResolved,\n  classes: ComponentSlotClasses,\n): React.ReactElement => {\n  if (!styles) {\n    return element;\n  }\n\n  // if element is DOM element\n  if (typeof element.type === 'string') {\n    return React.cloneElement(element, {\n      className: cx(element.props.className, classes.root),\n    });\n  }\n\n  // assuming element is Fluent UI element\n  return React.cloneElement(element, {\n    styles: mergeStyles(styles.root || {}, element.props.styles),\n  });\n};\n\nexport const flexItemClassName = 'ui-flex__item';\n\n/**\n * A FlexItem is a layout component that customizes alignment of Flex child.\n */\nexport const FlexItem: React.FC<FlexItemProps> & { __isFlexItem: boolean } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FlexItem.displayName, context.telemetry);\n  setStart();\n\n  const { align, children, className, design, grow, flexDirection, push, shrink, size, styles, variables } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles<FlexItemStylesProps>(FlexItem.displayName, {\n    className: flexItemClassName,\n    mapPropsToStyles: () => ({\n      align,\n      grow,\n      flexDirection,\n      push,\n      shrink,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  let element: React.ReactElement;\n\n  // pass calculated bits using Render Props pattern\n  if (typeof children === 'function') {\n    element = children({\n      styles: resolvedStyles.root,\n      classes: classes.root,\n    });\n  } else if (_.isNil(children)) {\n    element = null;\n  } else {\n    element = applyStyles(React.Children.only(children) as React.ReactElement, resolvedStyles, classes);\n  }\n\n  setEnd();\n\n  return element;\n};\n\nFlexItem.displayName = 'FlexItem';\n\nFlexItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    accessibility: false,\n    content: false,\n  }),\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n\n  align: PropTypes.oneOf(['auto', 'start', 'end', 'center', 'baseline', 'stretch']),\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['size.half', 'size.quarter', 'size.small', 'size.medium', 'size.large']),\n    PropTypes.string,\n  ]),\n  shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n\n  push: PropTypes.bool,\n\n  /**\n   * Will be automatically set by parent Flex component\n   */\n  flexDirection: PropTypes.oneOf(['row', 'column']),\n};\n\n// Boolean flag for now, Symbol-based approach may be used instead.\n// However, there are  concerns related to browser compatibility if Symbols will be used.\n// Completely alternative approach - check class name of React element (and generalize this logic).\nFlexItem.__isFlexItem = true;\n"]},"metadata":{},"sourceType":"module"}