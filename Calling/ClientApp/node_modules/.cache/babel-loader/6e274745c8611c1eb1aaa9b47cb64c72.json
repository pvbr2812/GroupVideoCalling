{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\n\nvar allowedRedirect = [\"GET\", \"HEAD\"];\nexport var DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\nexport function redirectPolicy(maximumRetries) {\n  if (maximumRetries === void 0) {\n    maximumRetries = 20;\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nvar RedirectPolicy =\n/** @class */\nfunction (_super) {\n  __extends(RedirectPolicy, _super);\n\n  function RedirectPolicy(nextPolicy, options, maxRetries) {\n    if (maxRetries === void 0) {\n      maxRetries = 20;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.maxRetries = maxRetries;\n    return _this;\n  }\n\n  RedirectPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return handleRedirect(_this, response, 0);\n    });\n  };\n\n  return RedirectPolicy;\n}(BaseRequestPolicy);\n\nexport { RedirectPolicy };\n\nfunction handleRedirect(policy, response, currentRetries) {\n  var request = response.request,\n      status = response.status;\n  var locationHeader = response.headers.get(\"location\");\n\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    var builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString(); // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy.sendRequest(request).then(function (res) {\n      return handleRedirect(policy, res, currentRetries + 1);\n    });\n  }\n\n  return Promise.resolve(response);\n}","map":{"version":3,"sources":["../../../src/policies/redirectPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectOptions {\n  /*\n   * When true, redirect responses are followed.  Defaults to true.\n   */\n  handleRedirects: boolean;\n\n  /*\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\nexport const DefaultRedirectOptions: RedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request)\n      .then((response) => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(\n  policy: RedirectPolicy,\n  response: HttpOperationResponse,\n  currentRetries: number\n): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)\n  ) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy\n      .sendRequest(request)\n      .then((res) => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}