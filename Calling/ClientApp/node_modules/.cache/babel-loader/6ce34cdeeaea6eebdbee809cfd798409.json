{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getBasePlacement } from '../../utils/positioner';\nexport var tooltipContentClassName = 'ui-tooltip__content';\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\n\nexport var TooltipContent = /*#__PURE__*/function () {\n  var TooltipContent = function TooltipContent(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(TooltipContent.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        content = props.content,\n        design = props.design,\n        open = props.open,\n        placement = props.placement,\n        pointing = props.pointing,\n        pointerRef = props.pointerRef,\n        styles = props.styles,\n        variables = props.variables;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: TooltipContent.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(TooltipContent.displayName, {\n      className: tooltipContentClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          basePlacement: getBasePlacement(placement, context.rtl),\n          open: open,\n          pointing: pointing\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), unhandledProps)), open && pointing && /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.pointer,\n      ref: pointerRef\n    }), /*#__PURE__*/React.createElement(\"div\", getA11Props('content', {\n      className: classes.content\n    }), childrenExist(children) ? children : content));\n    setEnd();\n    return element;\n  };\n\n  TooltipContent.displayName = 'TooltipContent';\n  TooltipContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),\n    pointing: PropTypes.bool,\n    pointerRef: customPropTypes.ref\n  });\n  TooltipContent.handledProps = Object.keys(TooltipContent.propTypes);\n  TooltipContent.create = createShorthandFactory({\n    Component: TooltipContent,\n    mappedProp: 'content'\n  });\n  return TooltipContent;\n}();","map":{"version":3,"sources":["components/Tooltip/TooltipContent.tsx"],"names":["tooltipContentClassName","TooltipContent","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","children","className","content","design","open","placement","pointing","pointerRef","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","basePlacement","getBasePlacement","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","commonPropTypes","PropTypes","customPropTypes","ref","Object","createShorthandFactory","Component","mappedProp"],"mappings":"AACA,SAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,QAAA,0BAAA;AASA,OAAO,KAAP,eAAA,MAAA,2BAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,aAAA,EAAA,sBAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AAUA,SAAA,gBAAA,QAAA,wBAAA;AA0BA,OAAO,IAAMA,uBAAuB,GAA7B,qBAAA;AAEP;;;;AAGA,OAAO,IAAMC,cAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,cACoC,GAAG,SADvCA,cACuC,CAAA,KAAA,EAAS;AAC3D,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AAD2D,QAAA,aAAA,GAE9BG,YAAY,CAACL,cAAc,CAAf,WAAA,EAA6BC,OAAO,CAFlB,SAElB,CAFkB;AAAA,QAEnDE,QAFmD,GAAA,aAAA,CAAA,QAAA;AAAA,QAEzCC,MAFyC,GAAA,aAAA,CAAA,MAAA;;AAG3DD,IAAAA,QAAQ;AAHmD,QAMzDG,aANyD,GAiBvDW,KAjBuD,CAAA,aAAA;AAAA,QAOzDV,QAPyD,GAiBvDU,KAjBuD,CAAA,QAAA;AAAA,QAQzDT,SARyD,GAiBvDS,KAjBuD,CAAA,SAAA;AAAA,QASzDR,OATyD,GAiBvDQ,KAjBuD,CAAA,OAAA;AAAA,QAUzDP,MAVyD,GAiBvDO,KAjBuD,CAAA,MAAA;AAAA,QAWzDN,IAXyD,GAiBvDM,KAjBuD,CAAA,IAAA;AAAA,QAYzDL,SAZyD,GAiBvDK,KAjBuD,CAAA,SAAA;AAAA,QAazDJ,QAbyD,GAiBvDI,KAjBuD,CAAA,QAAA;AAAA,QAczDH,UAdyD,GAiBvDG,KAjBuD,CAAA,UAAA;AAAA,QAezDF,MAfyD,GAiBvDE,KAjBuD,CAAA,MAAA;AAAA,QAgBzDD,SAhByD,GAiBvDC,KAjBuD,CAAA,SAAA;AAmB3D,QAAMC,WAAW,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AAClDC,MAAAA,SAAS,EAAEpB,cAAc,CADyB,WAAA;AAElDqB,MAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAFqC,KAAhB,CAApC;;AAnB2D,QAAA,UAAA,GAuBvCE,SAAS,CAA4BvB,cAAc,CAA1C,WAAA,EAAwD;AACnFQ,MAAAA,SAAS,EAD0E,uBAAA;AAEnFgB,MAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,eAAO;AACvBC,UAAAA,aAAa,EAAEC,gBAAgB,CAAA,SAAA,EAAYzB,OAAO,CAD3B,GACQ,CADR;AAEvBU,UAAAA,IAAI,EAFmB,IAAA;AAGvBE,UAAAA,QAAQ,EAARA;AAHuB,SAAP;AAFiE,OAAA;AAOnFc,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7BnB,UAAAA,SAAS,EADoB,SAAA;AAE7BE,UAAAA,MAAM,EAFuB,MAAA;AAG7BK,UAAAA,MAAM,EAHuB,MAAA;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAP2D,OAAA;AAanFK,MAAAA,GAAG,EAAEpB,OAAO,CAACoB;AAbsE,KAAxD,CAvB8B;AAAA,QAuBnDC,OAvBmD,GAAA,UAAA,CAAA,OAAA;;AAuC3D,QAAMM,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAAC/B,cAAc,CAAf,YAAA,EAAxC,KAAwC,CAAxC;AAEA,QAAMgC,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,WAAA,EACMd,WAAW,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACbV,MAAAA,SAAS,EAAEc,OAAO,CAACW;AADN,KAAA,EAEV,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAAA,QAAA,EAAA,OAAA;AAAf,KAA/B,CAFU,EADjB,cACiB,CAAA,CADjB,EAOGvB,IAAI,IAAJA,QAAAA,IAAAA,aAAoB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAEW,OAAO,CAAvB,OAAA;AAAiC,MAAA,GAAG,EAAER;AAAtC,KAAA,CAPvB,EAAA,aASE,KAAA,CAAA,aAAA,CAAA,KAAA,EAASI,WAAW,CAAA,SAAA,EAAY;AAAEV,MAAAA,SAAS,EAAEc,OAAO,CAACb;AAArB,KAAZ,CAApB,EACG0B,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAXP,OAUI,CATF,CADF;AAeA/B,IAAAA,MAAM;AAEN,WAAA,OAAA;AA5DK,GAAA;;AA+DPJ,EAAAA,cAAc,CAAdA,WAAAA,GAAAA,gBAAAA;AAEAA,EAAAA,cAAc,CAAdA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKoC,eAAe,CADpBpC,YACKoC,EADLpC,EAAAA;AAEEY,IAAAA,SAAS,EAAEyB,SAAS,CAATA,KAAAA,CAAoC,CAAA,YAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,KAAA,EAAA,SAAA,EAAA,aAAA,EAAA,OAAA,EAAA,WAAA,EAAA,YAAA,EAAA,QAAA,EAAA,cAAA,EAAA,UAAA,EAAA,MAAA,EAFjDrC,YAEiD,CAApCqC,CAFbrC;AAmBEa,IAAAA,QAAQ,EAAEwB,SAAS,CAnBrBrC,IAAAA;AAoBEc,IAAAA,UAAU,EAAEwB,eAAe,CAACC;AApB9BvC,GAAAA,CAAAA;AAsBAA,EAAAA,cAAc,CAAdA,YAAAA,GAA8BwC,MAAM,CAANA,IAAAA,CAAYxC,cAAc,CAAxDA,SAA8BwC,CAA9BxC;AAEAA,EAAAA,cAAc,CAAdA,MAAAA,GAAwByC,sBAAsB,CAAC;AAAEC,IAAAA,SAAS,EAAX,cAAA;AAA6BC,IAAAA,UAAU,EAAE;AAAzC,GAAD,CAA9C3C;AAzFO,SAAA,cAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface TooltipContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n}\n\nexport type TooltipContentStylesProps = Required<Pick<TooltipContentProps, 'pointing' | 'open'>> & {\n  basePlacement: PopperJs.BasePlacement;\n};\n\nexport const tooltipContentClassName = 'ui-tooltip__content';\n\n/**\n * A TooltipContent contains the content of a Tooltip component.\n */\nexport const TooltipContent: ComponentWithAs<'div', TooltipContentProps> &\n  FluentComponentStaticProps<TooltipContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TooltipContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    open,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TooltipContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TooltipContentStylesProps>(TooltipContent.displayName, {\n    className: tooltipContentClassName,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      open,\n      pointing,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TooltipContent.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {open && pointing && <div className={classes.pointer} ref={pointerRef} />}\n\n      <div {...getA11Props('content', { className: classes.content })}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTooltipContent.displayName = 'TooltipContent';\n\nTooltipContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<PopperJs.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  pointerRef: customPropTypes.ref,\n};\nTooltipContent.handledProps = Object.keys(TooltipContent.propTypes) as any;\n\nTooltipContent.create = createShorthandFactory({ Component: TooltipContent, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}