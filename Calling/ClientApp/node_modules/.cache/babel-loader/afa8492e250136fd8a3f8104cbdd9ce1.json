{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { isRestrictedDate } from './isRestrictedDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\n\nexport var findAvailableDate = function findAvailableDate(options) {\n  var targetDate = options.targetDate,\n      initialDate = options.initialDate,\n      direction = options.direction,\n      restrictedDateOptions = _objectWithoutPropertiesLoose(options, [\"targetDate\", \"initialDate\", \"direction\"]);\n\n  var availableDate = targetDate; // if the target date is available, return it immediately\n\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (compareDatePart(initialDate, availableDate) !== 0 && isRestrictedDate(availableDate, restrictedDateOptions) && !isAfterMaxDate(availableDate, restrictedDateOptions) && !isBeforeMinDate(availableDate, restrictedDateOptions)) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};","map":{"version":3,"sources":["utils/date-time-utilities/dateGrid/findAvailableDate.ts"],"names":["findAvailableDate","targetDate","initialDate","direction","restrictedDateOptions","options","availableDate","isRestrictedDate","compareDatePart","isAfterMaxDate","isBeforeMinDate","addDays"],"mappings":";AAEA,SAAA,gBAAA,QAAA,oBAAA;AAEA,SAAA,cAAA,QAAA,kBAAA;AAEA,SAAA,eAAA,QAAA,mBAAA;AACA,SAAA,eAAA,EAAA,OAAA,QAAA,sBAAA;AAEA;;;;;AAIA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,OAAA,EAAsD;AAAA,MAC7EC,UAD6E,GACZI,OADY,CAAA,UAAA;AAAA,MACjEH,WADiE,GACZG,OADY,CAAA,WAAA;AAAA,MACpDF,SADoD,GACZE,OADY,CAAA,SAAA;AAAA,MACtCD,qBADsC,GAAA,6BAAA,CAAA,OAAA,EAAA,CAAA,YAAA,EAAA,aAAA,EAAA,WAAA,CAAA,CAAA;;AAErF,MAAIE,aAAa,GAFoE,UAErF,CAFqF,CAGrF;;AACA,MAAI,CAACC,gBAAgB,CAAA,UAAA,EAArB,qBAAqB,CAArB,EAA0D;AACxD,WAAA,UAAA;AACD;;AAED,SACEC,eAAe,CAAA,WAAA,EAAfA,aAAe,CAAfA,KAAAA,CAAAA,IACAD,gBAAgB,CAAA,aAAA,EADhBC,qBACgB,CADhBA,IAEA,CAACC,cAAc,CAAA,aAAA,EAFfD,qBAEe,CAFfA,IAGA,CAACE,eAAe,CAAA,aAAA,EAJlB,qBAIkB,CAJlB,EAKE;AACAJ,IAAAA,aAAa,GAAGK,OAAO,CAAA,aAAA,EAAvBL,SAAuB,CAAvBA;AACD;;AAED,MAAIE,eAAe,CAAA,WAAA,EAAfA,aAAe,CAAfA,KAAAA,CAAAA,IAAqD,CAACD,gBAAgB,CAAA,aAAA,EAA1E,qBAA0E,CAA1E,EAAkH;AAChH,WAAA,aAAA;AACD;;AAED,SAAA,SAAA;AArBK,CAAA","sourcesContent":["import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}