{"ast":null,"code":"import _map from \"lodash/map\";\nimport { chatBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useFluentContext, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { ChatItem } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\nexport var chatClassName = 'ui-chat';\nexport var chatSlotClassNames = {\n  item: chatClassName + \"__item\"\n};\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\n\nexport var Chat = /*#__PURE__*/function () {\n  var Chat = function Chat(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Chat.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        design = props.design,\n        items = props.items,\n        styles = props.styles,\n        variables = props.variables;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: Chat.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Chat.displayName, {\n      className: chatClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Chat.handledProps, props);\n    var element = getA11Props.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : _map(items, function (item) {\n      return ChatItem.create(item, {\n        defaultProps: function defaultProps() {\n          return {\n            className: chatSlotClassNames.item\n          };\n        }\n      });\n    })));\n    setEnd();\n    return element;\n  };\n\n  Chat.displayName = 'Chat';\n  Chat.defaultProps = {\n    accessibility: chatBehavior,\n    as: 'ul'\n  };\n  Chat.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    items: PropTypes.arrayOf(customPropTypes.itemShorthand)\n  });\n  Chat.handledProps = Object.keys(Chat.propTypes);\n  Chat.Item = ChatItem;\n  Chat.Message = ChatMessage;\n  Chat.MessageDetails = ChatMessageDetails;\n  Chat.create = createShorthandFactory({\n    Component: Chat\n  });\n  return Chat;\n}();","map":{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["chatClassName","chatSlotClassNames","item","Chat","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","children","className","design","items","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","defaultProps","as","content","PropTypes","customPropTypes","Object","createShorthandFactory","Component"],"mappings":";AAAA,SAAA,YAAA,QAAA,yBAAA;AACA,SAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,QAAA,0BAAA;AASA,OAAO,KAAP,eAAA,MAAA,2BAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,aAAA,EAAA,eAAA,EAAA,sBAAA,EAAA,gBAAA,QAAA,aAAA;AASA,SAAA,QAAA,QAAA,YAAA;AACA,SAAA,WAAA,QAAA,eAAA;AACA,SAAA,kBAAA,QAAA,sBAAA;AAeA,OAAO,IAAMA,aAAa,GAAnB,SAAA;AACP,OAAO,IAAMC,kBAAsC,GAAG;AACpDC,EAAAA,IAAI,EAAKF,aAAL,GAAA;AADgD,CAA/C;AAIP;;;;AAGA,OAAO,IAAMG,IAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,IAKV,GAAG,SALOA,IAKP,CAAA,KAAA,EAAS;AACb,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AADa,QAAA,aAAA,GAEgBG,YAAY,CAACL,IAAI,CAAL,WAAA,EAAmBC,OAAO,CAFtD,SAE4B,CAF5B;AAAA,QAELE,QAFK,GAAA,aAAA,CAAA,QAAA;AAAA,QAEKC,MAFL,GAAA,aAAA,CAAA,MAAA;;AAGbD,IAAAA,QAAQ;AAHK,QAKLG,aALK,GAKoEO,KALpE,CAAA,aAAA;AAAA,QAKUN,QALV,GAKoEM,KALpE,CAAA,QAAA;AAAA,QAKoBL,SALpB,GAKoEK,KALpE,CAAA,SAAA;AAAA,QAK+BJ,MAL/B,GAKoEI,KALpE,CAAA,MAAA;AAAA,QAKuCH,KALvC,GAKoEG,KALpE,CAAA,KAAA;AAAA,QAK8CF,MAL9C,GAKoEE,KALpE,CAAA,MAAA;AAAA,QAKsDD,SALtD,GAKoEC,KALpE,CAAA,SAAA;AAOb,QAAMC,WAAW,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AAClDC,MAAAA,SAAS,EAAEhB,IAAI,CADmC,WAAA;AAElDiB,MAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAFqC,KAAhB,CAApC;;AAPa,QAAA,UAAA,GAWOE,SAAS,CAAkBnB,IAAI,CAAtB,WAAA,EAAoC;AAC/DQ,MAAAA,SAAS,EADsD,aAAA;AAE/DY,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7BZ,UAAAA,SAAS,EADoB,SAAA;AAE7BC,UAAAA,MAAM,EAFuB,MAAA;AAG7BE,UAAAA,MAAM,EAHuB,MAAA;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAFuC,OAAA;AAQ/DK,MAAAA,GAAG,EAAEhB,OAAO,CAACgB;AARkD,KAApC,CAXhB;AAAA,QAWLC,OAXK,GAAA,UAAA,CAAA,OAAA;;AAsBb,QAAMG,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAACxB,IAAI,CAAL,YAAA,EAAxC,KAAwC,CAAxC;AAEA,QAAMyB,OAAO,GAAG,WAAW,CAAX,0BAAA,EAAA,aACd,KAAA,CAAA,aAAA,CAAA,WAAA,EACMX,WAAW,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACbN,MAAAA,SAAS,EAAEU,OAAO,CAACQ;AADN,KAAA,EAEV,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,KAA/B,CAFU,EADjB,cACiB,CAAA,CADjB,EAOGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAEG,IAAA,CAAA,KAAA,EAAa,UAAA,IAAA,EAAI;AAAA,aACf,QAAQ,CAAR,MAAA,CAAA,IAAA,EAAsB;AACpBC,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAO;AAAErB,YAAAA,SAAS,EAAEV,kBAAkB,CAACC;AAAhC,WAAP;AAAA;AADM,OAAtB,CADe;AAVzB,KAUQ,CATN,CADc,CAAhB;AAiBAK,IAAAA,MAAM;AAEN,WAAA,OAAA;AAjDK,GAAA;;AAoDPJ,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AAEAA,EAAAA,IAAI,CAAJA,YAAAA,GAAoB;AAClBM,IAAAA,aAAa,EADK,YAAA;AAElBwB,IAAAA,EAAE,EAAE;AAFc,GAApB9B;AAIAA,EAAAA,IAAI,CAAJA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9B+B,IAAAA,OAAO,EAAE;AADqB,GAA7B,CADL/B,EAAAA;AAIEU,IAAAA,KAAK,EAAEsB,SAAS,CAATA,OAAAA,CAAkBC,eAAe,CAAjCD,aAAAA;AAJThC,GAAAA,CAAAA;AAMAA,EAAAA,IAAI,CAAJA,YAAAA,GAAoBkC,MAAM,CAANA,IAAAA,CAAYlC,IAAI,CAApCA,SAAoBkC,CAApBlC;AAEAA,EAAAA,IAAI,CAAJA,IAAAA,GAAAA,QAAAA;AACAA,EAAAA,IAAI,CAAJA,OAAAA,GAAAA,WAAAA;AACAA,EAAAA,IAAI,CAAJA,cAAAA,GAAAA,kBAAAA;AAEAA,EAAAA,IAAI,CAAJA,MAAAA,GAAcmC,sBAAsB,CAAC;AAAEC,IAAAA,SAAS,EAAEpC;AAAb,GAAD,CAApCA;AAtEO,SAAA,IAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { ChatItem, ChatItemProps } from './ChatItem';\nimport { ChatMessage } from './ChatMessage';\nimport { ChatMessageDetails } from './ChatMessageDetails';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = {};\nexport const chatClassName = 'ui-chat';\nexport const chatSlotClassNames: ChatSlotClassNames = {\n  item: `${chatClassName}__item`,\n};\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport const Chat: ComponentWithAs<'ul', ChatProps> &\n  FluentComponentStaticProps<ChatProps> & {\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n    MessageDetails: typeof ChatMessageDetails;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: chatClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : _.map(items, item =>\n            ChatItem.create(item, {\n              defaultProps: () => ({ className: chatSlotClassNames.item }),\n            }),\n          )}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.displayName = 'Chat';\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\nChat.MessageDetails = ChatMessageDetails;\n\nChat.create = createShorthandFactory({ Component: Chat });\n"]},"metadata":{},"sourceType":"module"}