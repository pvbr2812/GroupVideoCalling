{"ast":null,"code":"import { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\n\nexport var isRestrictedDate = function isRestrictedDate(date, options) {\n  var restrictedDates = options.restrictedDates,\n      minDate = options.minDate,\n      maxDate = options.maxDate;\n\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n\n  var inRestrictedDates = restrictedDates && restrictedDates.some(function (rd) {\n    return compareDates(rd, date);\n  });\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};","map":{"version":3,"sources":["utils/date-time-utilities/dateGrid/isRestrictedDate.ts"],"names":["isRestrictedDate","restrictedDates","minDate","maxDate","options","inRestrictedDates","compareDates","isBeforeMinDate","isAfterMaxDate"],"mappings":"AACA,SAAA,YAAA,QAAA,sBAAA;AACA,SAAA,eAAA,QAAA,mBAAA;AACA,SAAA,cAAA,QAAA,kBAAA;AAEA;;;;;;AAKA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA,OAAA,EAA2D;AAAA,MACjFC,eADiF,GAC3CG,OAD2C,CAAA,eAAA;AAAA,MAChEF,OADgE,GAC3CE,OAD2C,CAAA,OAAA;AAAA,MACvDD,OADuD,GAC3CC,OAD2C,CAAA,OAAA;;AAEzF,MAAI,CAAA,eAAA,IAAoB,CAApB,OAAA,IAAgC,CAApC,OAAA,EAA8C;AAC5C,WAAA,KAAA;AACD;;AACD,MAAMC,iBAAiB,GAAGJ,eAAe,IAAI,eAAe,CAAf,IAAA,CAAqB,UAAA,EAAA,EAAA;AAAA,WAAcK,YAAY,CAAA,EAAA,EAA1B,IAA0B,CAA1B;AAAlE,GAA6C,CAA7C;AACA,SAAOD,iBAAiB,IAAIE,eAAe,CAAA,IAAA,EAApCF,OAAoC,CAApCA,IAAuDG,cAAc,CAAA,IAAA,EAA5E,OAA4E,CAA5E;AANK,CAAA","sourcesContent":["import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDates } from '../dateMath/dateMath';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\n/**\n * Checks if `date` falls into the restricted `options`\n * @param date - date to check\n * @param options - restriction options (min date, max date and list of restricted dates)\n */\nexport const isRestrictedDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { restrictedDates, minDate, maxDate } = options;\n  if (!restrictedDates && !minDate && !maxDate) {\n    return false;\n  }\n  const inRestrictedDates = restrictedDates && restrictedDates.some((rd: Date) => compareDates(rd, date));\n  return inRestrictedDates || isBeforeMinDate(date, options) || isAfterMaxDate(date, options);\n};\n"]},"metadata":{},"sourceType":"module"}