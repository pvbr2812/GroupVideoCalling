{"ast":null,"code":"import { ADD_SCREENSHARE_STREAM, REMOVE_SCREENSHARE_STREAM } from '../actions/streams';\nconst initialState = {\n  localVideoRendererIsBusy: false,\n  screenShareStreams: []\n};\nexport const streamsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_SCREENSHARE_STREAM:\n      const newScreenShareStream = {\n        stream: action.stream,\n        user: action.user\n      };\n      return { ...state,\n        screenShareStreams: [...state.screenShareStreams, newScreenShareStream]\n      };\n\n    case REMOVE_SCREENSHARE_STREAM:\n      const screenShareStreams = state.screenShareStreams.filter(stream => stream.stream !== action.stream && stream.user !== action.user);\n      return { ...state,\n        screenShareStreams\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/VSCODE2/communication-services-web-calling-hero/Calling/ClientApp/src/core/reducers/streams.ts"],"names":["ADD_SCREENSHARE_STREAM","REMOVE_SCREENSHARE_STREAM","initialState","localVideoRendererIsBusy","screenShareStreams","streamsReducer","state","action","type","newScreenShareStream","stream","user","filter"],"mappings":"AAEA,SAASA,sBAAT,EAA8CC,yBAA9C,QAA+E,oBAA/E;AAQA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,wBAAwB,EAAE,KADO;AAEjCC,EAAAA,kBAAkB,EAAE;AAFa,CAAnC;AAKA,OAAO,MAAMC,cAAgE,GAAG,CAC9EC,KAAK,GAAGJ,YADsE,EAE9EK,MAF8E,KAG7D;AACjB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,sBAAL;AACE,YAAMS,oBAAuC,GAAG;AAAEC,QAAAA,MAAM,EAAEH,MAAM,CAACG,MAAjB;AAAyBC,QAAAA,IAAI,EAAEJ,MAAM,CAACI;AAAtC,OAAhD;AACA,aAAO,EAAE,GAAGL,KAAL;AAAYF,QAAAA,kBAAkB,EAAE,CAAC,GAAGE,KAAK,CAACF,kBAAV,EAA8BK,oBAA9B;AAAhC,OAAP;;AACF,SAAKR,yBAAL;AACE,YAAMG,kBAAkB,GAAGE,KAAK,CAACF,kBAAN,CAAyBQ,MAAzB,CACxBF,MAAD,IAAYA,MAAM,CAACA,MAAP,KAAkBH,MAAM,CAACG,MAAzB,IAAmCA,MAAM,CAACC,IAAP,KAAgBJ,MAAM,CAACI,IAD7C,CAA3B;AAGA,aAAO,EAAE,GAAGL,KAAL;AAAYF,QAAAA;AAAZ,OAAP;;AACF;AACE,aAAOE,KAAP;AAVJ;AAYD,CAhBM","sourcesContent":["import { Reducer } from 'redux';\r\nimport { ParticipantStream } from './index';\r\nimport { ADD_SCREENSHARE_STREAM, StreamTypes, REMOVE_SCREENSHARE_STREAM } from '../actions/streams';\r\nimport { DeviceTypes } from '../actions/devices';\r\n\r\nexport interface StreamsState {\r\n  screenShareStreams: ParticipantStream[];\r\n  localVideoRendererIsBusy: boolean;\r\n}\r\n\r\nconst initialState: StreamsState = {\r\n  localVideoRendererIsBusy: false,\r\n  screenShareStreams: []\r\n};\r\n\r\nexport const streamsReducer: Reducer<StreamsState, StreamTypes | DeviceTypes> = (\r\n  state = initialState,\r\n  action: StreamTypes | DeviceTypes\r\n): StreamsState => {\r\n  switch (action.type) {\r\n    case ADD_SCREENSHARE_STREAM:\r\n      const newScreenShareStream: ParticipantStream = { stream: action.stream, user: action.user };\r\n      return { ...state, screenShareStreams: [...state.screenShareStreams, newScreenShareStream] };\r\n    case REMOVE_SCREENSHARE_STREAM:\r\n      const screenShareStreams = state.screenShareStreams.filter(\r\n        (stream) => stream.stream !== action.stream && stream.user !== action.user\r\n      );\r\n      return { ...state, screenShareStreams };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}