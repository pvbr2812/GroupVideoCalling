{"ast":null,"code":"import _merge from \"lodash/merge\";\nimport { keyboardKey } from '@fluentui/keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { menuButtonBehavior } from '../MenuButton/menuButtonBehavior';\n/**\n * @description\n * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.\n * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.\n * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.\n * Triggers 'closeAndFocusTrigger' action with 'Escape' or 'altKey'+'ArrowUp'.\n * Triggers 'openAndFocusFirst' action with 'altKey'+'ArrowDown' on 'root' slot.\n * Triggers 'stopPropagation' action with 'ArrowLeft' or 'ArrowRight' on 'root' slot.\n *\n * @specification\n * Adds attribute 'tabIndex=-1' to 'toggleButton' slot.\n * Adds attribute 'aria-haspopup=true' to 'toggleButton' slot.\n * Adds attribute 'data-is-focusable=false' to 'toggleButton' slot.\n */\n\nexport var splitButtonBehavior = function splitButtonBehavior(props) {\n  var _toggleButton;\n\n  var splitButtonMenuButtonBehavior = function splitButtonMenuButtonBehavior() {\n    var menuButtonBehaviorData = menuButtonBehavior(props);\n    menuButtonBehaviorData.attributes.trigger['aria-haspopup'] = undefined;\n    return _merge(menuButtonBehaviorData, {\n      keyActions: {\n        popup: {\n          closeAndFocusTrigger: {\n            keyCombinations: [{\n              keyCode: keyboardKey.Escape\n            }, {\n              keyCode: keyboardKey.ArrowUp,\n              altKey: true\n            }]\n          },\n          stopPropagation: {\n            keyCombinations: [{\n              keyCode: keyboardKey.ArrowLeft\n            }, {\n              keyCode: keyboardKey.ArrowRight\n            }]\n          }\n        },\n        root: Object.assign({}, !props.open && {\n          openAndFocusFirst: {\n            keyCombinations: [{\n              keyCode: keyboardKey.ArrowDown,\n              altKey: true\n            }]\n          }\n        })\n      }\n    });\n  };\n\n  return {\n    attributes: {\n      root: {},\n      toggleButton: (_toggleButton = {\n        tabIndex: -1,\n        'aria-haspopup': true\n      }, _toggleButton[IS_FOCUSABLE_ATTRIBUTE] = false, _toggleButton)\n    },\n    childBehaviors: {\n      menuButton: splitButtonMenuButtonBehavior\n    }\n  };\n};","map":{"version":3,"sources":["behaviors/SplitButton/splitButtonBehavior.ts"],"names":["splitButtonBehavior","splitButtonMenuButtonBehavior","menuButtonBehaviorData","menuButtonBehavior","keyActions","popup","closeAndFocusTrigger","keyCombinations","keyCode","keyboardKey","Escape","altKey","stopPropagation","ArrowLeft","ArrowRight","root","props","openAndFocusFirst","attributes","toggleButton","tabIndex","childBehaviors","menuButton"],"mappings":";AAAA,SAAA,WAAA,QAAA,wBAAA;AAGA,SAAA,sBAAA,QAAA,kBAAA;AAEA,SAAA,kBAAA,QAAA,kCAAA;AAEA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMA,mBAAkC,GAAG,SAArCA,mBAAqC,CAAA,KAAA,EAAS;AAAA,MAAA,aAAA;;AACzD,MAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,GAAM;AAC1C,QAAMC,sBAAsB,GAAGC,kBAAkB,CAAjD,KAAiD,CAAjD;AACAD,IAAAA,sBAAsB,CAAtBA,UAAAA,CAAAA,OAAAA,CAAAA,eAAAA,IAAAA,SAAAA;AAEA,WAAO,MAAA,CAAA,sBAAA,EAAgC;AACrCE,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE;AACLC,UAAAA,oBAAoB,EAAE;AACpBC,YAAAA,eAAe,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,aAAD,EAAkC;AAAEF,cAAAA,OAAO,EAAEC,WAAW,CAAtB,OAAA;AAAgCE,cAAAA,MAAM,EAAE;AAAxC,aAAlC;AADG,WADjB;AAILC,UAAAA,eAAe,EAAE;AACfL,YAAAA,eAAe,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAEC,WAAW,CAACI;AAAvB,aAAD,EAAqC;AAAEL,cAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,aAArC;AADF;AAJZ,SADG;AASVC,QAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACE,CAACC,KAAK,CAAN,IAAA,IAAe;AACjBC,UAAAA,iBAAiB,EAAE;AACjBV,YAAAA,eAAe,EAAE,CAAC;AAAEC,cAAAA,OAAO,EAAEC,WAAW,CAAtB,SAAA;AAAkCE,cAAAA,MAAM,EAAE;AAA1C,aAAD;AADA;AADF,SADjB;AATM;AADyB,KAAhC,CAAP;AAJF,GAAA;;AAyBA,SAAO;AACLO,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EADM,EAAA;AAEVI,MAAAA,YAAY,GAAA,aAAA,GAAA;AACVC,QAAAA,QAAQ,EAAE,CADA,CAAA;AAEV,yBAAiB;AAFP,OAAA,EAAA,aAAA,CAAA,sBAAA,CAAA,GAAA,KAAA,EAAA,aAAA;AAFF,KADP;AASLC,IAAAA,cAAc,EAAE;AACdC,MAAAA,UAAU,EAAErB;AADE;AATX,GAAP;AA1BK,CAAA","sourcesContent":["import { keyboardKey } from '@fluentui/keyboard-key';\nimport * as _ from 'lodash';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\nimport { menuButtonBehavior, MenuButtonBehaviorProps } from '../MenuButton/menuButtonBehavior';\n\n/**\n * @description\n * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.\n * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.\n * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.\n * Triggers 'closeAndFocusTrigger' action with 'Escape' or 'altKey'+'ArrowUp'.\n * Triggers 'openAndFocusFirst' action with 'altKey'+'ArrowDown' on 'root' slot.\n * Triggers 'stopPropagation' action with 'ArrowLeft' or 'ArrowRight' on 'root' slot.\n *\n * @specification\n * Adds attribute 'tabIndex=-1' to 'toggleButton' slot.\n * Adds attribute 'aria-haspopup=true' to 'toggleButton' slot.\n * Adds attribute 'data-is-focusable=false' to 'toggleButton' slot.\n */\nexport const splitButtonBehavior: Accessibility = props => {\n  const splitButtonMenuButtonBehavior = () => {\n    const menuButtonBehaviorData = menuButtonBehavior(props);\n    menuButtonBehaviorData.attributes.trigger['aria-haspopup'] = undefined;\n\n    return _.merge(menuButtonBehaviorData, {\n      keyActions: {\n        popup: {\n          closeAndFocusTrigger: {\n            keyCombinations: [{ keyCode: keyboardKey.Escape }, { keyCode: keyboardKey.ArrowUp, altKey: true }],\n          },\n          stopPropagation: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }, { keyCode: keyboardKey.ArrowRight }],\n          },\n        },\n        root: {\n          ...(!props.open && {\n            openAndFocusFirst: {\n              keyCombinations: [{ keyCode: keyboardKey.ArrowDown, altKey: true }],\n            },\n          }),\n        },\n      },\n    });\n  };\n\n  return {\n    attributes: {\n      root: {},\n      toggleButton: {\n        tabIndex: -1,\n        'aria-haspopup': true,\n        [IS_FOCUSABLE_ATTRIBUTE]: false,\n      },\n    },\n    childBehaviors: {\n      menuButton: splitButtonMenuButtonBehavior,\n    },\n  };\n};\n\nexport type SplitButtonBehaviorProps = Pick<MenuButtonBehaviorProps, 'open'>;\n"]},"metadata":{},"sourceType":"module"}