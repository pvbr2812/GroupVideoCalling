{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Input } from '../Input/Input';\nimport { useFluentContext, useTelemetry, useStyles, useUnhandledProps } from '@fluentui/react-bindings';\nexport var dropdownSearchInputClassName = 'ui-dropdown__searchinput';\nexport var dropdownSearchInputSlotClassNames = {\n  input: dropdownSearchInputClassName + \"__input\",\n  wrapper: dropdownSearchInputClassName + \"__wrapper\"\n};\n/**\n * A DropdownSearchInput represents item of 'search' Dropdown.\n * Used to display the search input field.\n */\n\nexport var DropdownSearchInput = /*#__PURE__*/function () {\n  var DropdownSearchInput = function DropdownSearchInput(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(DropdownSearchInput.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibilityComboboxProps = props.accessibilityComboboxProps,\n        accessibilityInputProps = props.accessibilityInputProps,\n        inputRef = props.inputRef,\n        inline = props.inline,\n        placeholder = props.placeholder,\n        disabled = props.disabled,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var unhandledProps = useUnhandledProps(DropdownSearchInput.handledProps, props);\n\n    var _useStyles = useStyles(DropdownSearchInput.displayName, {\n      className: dropdownSearchInputClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          inline: inline\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      }\n    }),\n        resolvedStyles = _useStyles.styles;\n\n    var handleFocus = function handleFocus(e) {\n      _invoke(props, 'onFocus', e, props);\n    };\n\n    var handleInputKeyDown = function handleInputKeyDown(e) {\n      _invoke(props, 'onInputKeyDown', e, props);\n    };\n\n    var handleInputBlur = function handleInputBlur(e) {\n      _invoke(props, 'onInputBlur', e, props);\n    };\n\n    var handleKeyUp = function handleKeyUp(e) {\n      _invoke(props, 'onKeyUp', e, props);\n    };\n\n    var element = /*#__PURE__*/React.createElement(Input, _extends({\n      disabled: disabled,\n      inputRef: inputRef,\n      onFocus: handleFocus,\n      onKeyUp: handleKeyUp\n    }, unhandledProps, {\n      wrapper: Object.assign({\n        className: dropdownSearchInputSlotClassNames.wrapper,\n        styles: resolvedStyles.root\n      }, accessibilityComboboxProps, unhandledProps.wrapper),\n      input: Object.assign({\n        type: 'text',\n        className: dropdownSearchInputSlotClassNames.input,\n        styles: resolvedStyles.input,\n        placeholder: placeholder,\n        onBlur: handleInputBlur,\n        onKeyDown: handleInputKeyDown\n      }, accessibilityInputProps, unhandledProps.input)\n    }));\n    setEnd();\n    return element;\n  };\n\n  DropdownSearchInput.displayName = 'DropdownSearchInput';\n  DropdownSearchInput.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false\n  }), {\n    accessibilityInputProps: PropTypes.object,\n    accessibilityComboboxProps: PropTypes.object,\n    disabled: PropTypes.bool,\n    inline: PropTypes.bool,\n    inputRef: customPropTypes.ref,\n    onFocus: PropTypes.func,\n    onInputBlur: PropTypes.func,\n    onInputKeyDown: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    placeholder: PropTypes.string\n  });\n  DropdownSearchInput.handledProps = Object.keys(DropdownSearchInput.propTypes);\n  DropdownSearchInput.create = createShorthandFactory({\n    Component: DropdownSearchInput\n  });\n  return DropdownSearchInput;\n}();","map":{"version":3,"sources":["components/Dropdown/DropdownSearchInput.tsx"],"names":["dropdownSearchInputClassName","dropdownSearchInputSlotClassNames","input","wrapper","DropdownSearchInput","context","useFluentContext","setStart","setEnd","useTelemetry","accessibilityComboboxProps","accessibilityInputProps","inputRef","inline","placeholder","disabled","className","design","styles","variables","props","unhandledProps","useUnhandledProps","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleFocus","handleInputKeyDown","handleInputBlur","handleKeyUp","element","root","type","onBlur","onKeyDown","accessibility","children","content","PropTypes","customPropTypes","onFocus","onInputBlur","onInputKeyDown","onKeyUp","string","Object","createShorthandFactory","Component"],"mappings":";;AAAA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAGA,SAAA,sBAAA,EAAA,eAAA,QAAA,aAAA;AAGA,SAAA,KAAA,QAAA,gBAAA;AACA,SAAA,gBAAA,EAAA,YAAA,EAAA,SAAA,EAAA,iBAAA,QAAA,0BAAA;AAiEA,OAAO,IAAMA,4BAA4B,GAAlC,0BAAA;AACP,OAAO,IAAMC,iCAAoE,GAAG;AAClFC,EAAAA,KAAK,EAAKF,4BAAL,GAD6E,SAAA;AAElFG,EAAAA,OAAO,EAAKH,4BAAL,GAAA;AAF2E,CAA7E;AAOP;;;;;AAIA,OAAO,IAAMI,mBAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,mBACyC,GAAG,SAD5CA,mBAC4C,CAAA,KAAA,EAAS;AAChE,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AADgE,QAAA,aAAA,GAEnCG,YAAY,CAACL,mBAAmB,CAApB,WAAA,EAAkCC,OAAO,CAFlB,SAEvB,CAFuB;AAAA,QAExDE,QAFwD,GAAA,aAAA,CAAA,QAAA;AAAA,QAE9CC,MAF8C,GAAA,aAAA,CAAA,MAAA;;AAGhED,IAAAA,QAAQ;AAHwD,QAK9DG,0BAL8D,GAe5DU,KAf4D,CAAA,0BAAA;AAAA,QAM9DT,uBAN8D,GAe5DS,KAf4D,CAAA,uBAAA;AAAA,QAO9DR,QAP8D,GAe5DQ,KAf4D,CAAA,QAAA;AAAA,QAQ9DP,MAR8D,GAe5DO,KAf4D,CAAA,MAAA;AAAA,QAS9DN,WAT8D,GAe5DM,KAf4D,CAAA,WAAA;AAAA,QAU9DL,QAV8D,GAe5DK,KAf4D,CAAA,QAAA;AAAA,QAW9DJ,SAX8D,GAe5DI,KAf4D,CAAA,SAAA;AAAA,QAY9DH,MAZ8D,GAe5DG,KAf4D,CAAA,MAAA;AAAA,QAa9DF,MAb8D,GAe5DE,KAf4D,CAAA,MAAA;AAAA,QAc9DD,SAd8D,GAe5DC,KAf4D,CAAA,SAAA;AAiBhE,QAAMC,cAAc,GAAGC,iBAAiB,CAAClB,mBAAmB,CAApB,YAAA,EAAxC,KAAwC,CAAxC;;AAjBgE,QAAA,UAAA,GAmB7BoB,SAAS,CAAiCpB,mBAAmB,CAApD,WAAA,EAAkE;AAC5GY,MAAAA,SAAS,EADmG,4BAAA;AAE5GS,MAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,eAAO;AAAEZ,UAAAA,MAAM,EAANA;AAAF,SAAP;AAF0F,OAAA;AAG5Ga,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAAEV,UAAAA,SAAS,EAAX,SAAA;AAAaC,UAAAA,MAAM,EAAnB,MAAA;AAAqBC,UAAAA,MAAM,EAA3B,MAAA;AAA6BC,UAAAA,SAAS,EAATA;AAA7B,SAAP;AAAA;AAHoF,KAAlE,CAnBoB;AAAA,QAmBhDI,cAnBgD,GAAA,UAAA,CAAA,MAAA;;AAyBhE,QAAMI,WAAW,GAAG,SAAdA,WAAc,CAAA,CAAA,EAA6B;AAC/C,MAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AADF,KAAA;;AAIA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,CAAA,EAA6B;AACtD,MAAA,OAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AADF,KAAA;;AAIA,QAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,CAAA,EAA6B;AACnD,MAAA,OAAA,CAAA,KAAA,EAAA,aAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AADF,KAAA;;AAIA,QAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,CAAA,EAA6B;AAC/C,MAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AADF,KAAA;;AAIA,QAAMC,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,MAAA,QAAQ,EADV,QAAA;AAEE,MAAA,QAAQ,EAFV,QAAA;AAGE,MAAA,OAAO,EAHT,WAAA;AAIE,MAAA,OAAO,EAAED;AAJX,KAAA,EAAA,cAAA,EAAA;AAME,MAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA;AACLd,QAAAA,SAAS,EAAEf,iCAAiC,CADvC,OAAA;AAELiB,QAAAA,MAAM,EAAEK,cAAc,CAACS;AAFlB,OAAA,EAAA,0BAAA,EAIFX,cAAc,CAVrB,OAMS,CANT;AAYE,MAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA;AACHY,QAAAA,IAAI,EADD,MAAA;AAEHjB,QAAAA,SAAS,EAAEf,iCAAiC,CAFzC,KAAA;AAGHiB,QAAAA,MAAM,EAAEK,cAAc,CAHnB,KAAA;AAIHT,QAAAA,WAAW,EAJR,WAAA;AAKHoB,QAAAA,MAAM,EALH,eAAA;AAMHC,QAAAA,SAAS,EAAEP;AANR,OAAA,EAAA,uBAAA,EAQAP,cAAc,CARd,KAAA;AAZP,KAAA,CAAA,CADF;AAyBAb,IAAAA,MAAM;AACN,WAAA,OAAA;AApEK,GAAA;;AAuEPJ,EAAAA,mBAAmB,CAAnBA,WAAAA,GAAAA,qBAAAA;AAEAA,EAAAA,mBAAmB,CAAnBA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BgC,IAAAA,aAAa,EADiB,KAAA;AAE9BC,IAAAA,QAAQ,EAFsB,KAAA;AAG9BC,IAAAA,OAAO,EAAE;AAHqB,GAA7B,CADLlC,EAAAA;AAMEO,IAAAA,uBAAuB,EAAE4B,SAAS,CANpCnC,MAAAA;AAOEM,IAAAA,0BAA0B,EAAE6B,SAAS,CAPvCnC,MAAAA;AAQEW,IAAAA,QAAQ,EAAEwB,SAAS,CARrBnC,IAAAA;AASES,IAAAA,MAAM,EAAE0B,SAAS,CATnBnC,IAAAA;AAUEQ,IAAAA,QAAQ,EAAE4B,eAAe,CAV3BpC,GAAAA;AAWEqC,IAAAA,OAAO,EAAEF,SAAS,CAXpBnC,IAAAA;AAYEsC,IAAAA,WAAW,EAAEH,SAAS,CAZxBnC,IAAAA;AAaEuC,IAAAA,cAAc,EAAEJ,SAAS,CAb3BnC,IAAAA;AAcEwC,IAAAA,OAAO,EAAEL,SAAS,CAdpBnC,IAAAA;AAeEU,IAAAA,WAAW,EAAEyB,SAAS,CAACM;AAfzBzC,GAAAA,CAAAA;AAkBAA,EAAAA,mBAAmB,CAAnBA,YAAAA,GAAmC0C,MAAM,CAANA,IAAAA,CAAY1C,mBAAmB,CAAlEA,SAAmC0C,CAAnC1C;AAEAA,EAAAA,mBAAmB,CAAnBA,MAAAA,GAA6B2C,sBAAsB,CAAC;AAAEC,IAAAA,SAAS,EAAE5C;AAAb,GAAD,CAAnDA;AA7FO,SAAA,mBAAA;AAAA,CAAA,EAAA","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { Input } from '../Input/Input';\nimport {\n  ComponentWithAs,\n  useFluentContext,\n  useTelemetry,\n  useStyles,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\n\nexport interface DropdownSearchInputSlotClassNames {\n  input: string;\n  wrapper: string;\n}\n\nexport interface DropdownSearchInputProps extends UIComponentProps<DropdownSearchInputProps> {\n  /** Accessibility props for combobox slot. */\n  accessibilityComboboxProps?: any;\n\n  /** Accessibility props for input slot. */\n  accessibilityInputProps?: any;\n\n  /** A dropdown search input can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown search input can be formatted to appear inline in the context of a Dropdown. */\n  inline?: boolean;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLInputElement>;\n\n  /**\n   * Called on input element focus.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onFocus?: ComponentEventHandler<DropdownSearchInputProps>;\n\n  /**\n   * Called on input element blur.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onInputBlur?: ComponentEventHandler<DropdownSearchInputProps>;\n\n  /**\n   * Called on input key down event.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onInputKeyDown?: ComponentEventHandler<DropdownSearchInputProps>;\n\n  /**\n   * Called on input key up event.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyUp?: ComponentEventHandler<DropdownSearchInputProps>;\n\n  /** A placeholder message. */\n  placeholder?: string;\n}\n\nexport const dropdownSearchInputClassName = 'ui-dropdown__searchinput';\nexport const dropdownSearchInputSlotClassNames: DropdownSearchInputSlotClassNames = {\n  input: `${dropdownSearchInputClassName}__input`,\n  wrapper: `${dropdownSearchInputClassName}__wrapper`,\n};\n\nexport type DropdownSearchInputStylesProps = Required<Pick<DropdownSearchInputProps, 'inline'>>;\n\n/**\n * A DropdownSearchInput represents item of 'search' Dropdown.\n * Used to display the search input field.\n */\nexport const DropdownSearchInput: ComponentWithAs<'div', DropdownSearchInputProps> &\n  FluentComponentStaticProps<DropdownSearchInputProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownSearchInput.displayName, context.telemetry);\n  setStart();\n  const {\n    accessibilityComboboxProps,\n    accessibilityInputProps,\n    inputRef,\n    inline,\n    placeholder,\n    disabled,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n\n  const unhandledProps = useUnhandledProps(DropdownSearchInput.handledProps, props);\n\n  const { styles: resolvedStyles } = useStyles<DropdownSearchInputStylesProps>(DropdownSearchInput.displayName, {\n    className: dropdownSearchInputClassName,\n    mapPropsToStyles: () => ({ inline }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleInputKeyDown = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onInputKeyDown', e, props);\n  };\n\n  const handleInputBlur = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onInputBlur', e, props);\n  };\n\n  const handleKeyUp = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onKeyUp', e, props);\n  };\n\n  const element = (\n    <Input\n      disabled={disabled}\n      inputRef={inputRef}\n      onFocus={handleFocus}\n      onKeyUp={handleKeyUp}\n      {...unhandledProps}\n      wrapper={{\n        className: dropdownSearchInputSlotClassNames.wrapper,\n        styles: resolvedStyles.root,\n        ...accessibilityComboboxProps,\n        ...unhandledProps.wrapper,\n      }}\n      input={{\n        type: 'text',\n        className: dropdownSearchInputSlotClassNames.input,\n        styles: resolvedStyles.input,\n        placeholder,\n        onBlur: handleInputBlur,\n        onKeyDown: handleInputKeyDown,\n        ...accessibilityInputProps,\n        ...unhandledProps.input,\n      }}\n    />\n  );\n  setEnd();\n  return element;\n};\n\nDropdownSearchInput.displayName = 'DropdownSearchInput';\n\nDropdownSearchInput.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityInputProps: PropTypes.object,\n  accessibilityComboboxProps: PropTypes.object,\n  disabled: PropTypes.bool,\n  inline: PropTypes.bool,\n  inputRef: customPropTypes.ref,\n  onFocus: PropTypes.func,\n  onInputBlur: PropTypes.func,\n  onInputKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  placeholder: PropTypes.string,\n};\n\nDropdownSearchInput.handledProps = Object.keys(DropdownSearchInput.propTypes) as any;\n\nDropdownSearchInput.create = createShorthandFactory({ Component: DropdownSearchInput });\n"]},"metadata":{},"sourceType":"module"}