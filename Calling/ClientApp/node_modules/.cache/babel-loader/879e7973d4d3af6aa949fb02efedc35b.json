{"ast":null,"code":"import { DateRangeType } from '../dateValues/dateValues';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\n\nexport var getDateRangeTypeToUse = function getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek) {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};","map":{"version":3,"sources":["utils/date-time-utilities/dateGrid/getDateRangeTypeToUse.ts"],"names":["getDateRangeTypeToUse","workWeekDays","dateRangeType","DateRangeType","isContiguous"],"mappings":"AAAA,SAAA,aAAA,QAAA,0BAAA;AACA,SAAA,YAAA,QAAA,gBAAA;AACA;;;;;;;;AAOA,OAAO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,aAAA,EAAA,YAAA,EAAA,cAAA,EAIjB;AAClB,MAAIC,YAAY,IAAIC,aAAa,KAAKC,aAAa,CAAnD,QAAA,EAA8D;AAC5D,QAAI,CAACC,YAAY,CAAA,YAAA,EAAA,IAAA,EAAb,cAAa,CAAb,IAAqDH,YAAY,CAAZA,MAAAA,KAAzD,CAAA,EAAoF;AAClF,aAAOE,aAAa,CAApB,IAAA;AACD;AACF;;AAED,SAAA,aAAA;AAXK,CAAA","sourcesContent":["import { DateRangeType, DayOfWeek } from '../dateValues/dateValues';\nimport { isContiguous } from './isContiguous';\n/**\n * Return corrected date range type, given `dateRangeType` and list of working days.\n * For non-contiguous working days and working week range type, returns general week range type.\n * For other cases returns input date range type.\n * @param dateRangeType - input type of range\n * @param workWeekDays - list of working days in a week\n */\nexport const getDateRangeTypeToUse = (\n  dateRangeType: DateRangeType,\n  workWeekDays: DayOfWeek[] | undefined,\n  firstDayOfWeek: DayOfWeek,\n): DateRangeType => {\n  if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n    if (!isContiguous(workWeekDays, true, firstDayOfWeek) || workWeekDays.length === 0) {\n      return DateRangeType.Week;\n    }\n  }\n\n  return dateRangeType;\n};\n"]},"metadata":{},"sourceType":"module"}