{"ast":null,"code":"import { popupBehavior } from '../Popup/popupBehavior';\n/**\n * @description\n * Implements ARIA Dialog (Modal) design pattern.\n * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.\n *\n * @specification\n * Adds attribute 'aria-disabled=true' to 'trigger' slot if 'disabled' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-modal=true' to 'popup' slot.\n * Adds attribute 'role=dialog' to 'popup' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'popup' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'popup' slot.\n */\n\nexport var dialogBehavior = function dialogBehavior(props) {\n  var behaviorData = popupBehavior(props);\n  var defaultAriaLabelledBy = getDefaultAriaLabelledBy(props);\n  var defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n  behaviorData.attributes.popup = Object.assign({}, behaviorData.attributes.popup, {\n    role: 'dialog',\n    'aria-modal': true,\n    'aria-labelledby': defaultAriaLabelledBy || props['aria-labelledby'],\n    'aria-describedby': defaultAriaDescribedBy || props['aria-describedby']\n  });\n  behaviorData.attributes.header = {\n    id: defaultAriaLabelledBy\n  };\n  behaviorData.attributes.content = {\n    id: defaultAriaDescribedBy\n  };\n  return behaviorData;\n};\n/**\n * Returns the element id of the header, it is used when user does not provide aria-label or\n * aria-labelledby as props.\n */\n\nvar getDefaultAriaLabelledBy = function getDefaultAriaLabelledBy(props) {\n  if (props['aria-label'] || props['aria-labelledby']) {\n    return undefined;\n  }\n\n  return props.headerId;\n};\n/**\n * Returns the element id of the content, it is used when user does not provide aria-describedby\n * as props.\n */\n\n\nvar getDefaultAriaDescribedBy = function getDefaultAriaDescribedBy(props) {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n\n  return props.contentId;\n};","map":{"version":3,"sources":["behaviors/Dialog/dialogBehavior.ts"],"names":["dialogBehavior","behaviorData","popupBehavior","defaultAriaLabelledBy","getDefaultAriaLabelledBy","defaultAriaDescribedBy","getDefaultAriaDescribedBy","role","props","id"],"mappings":"AACA,SAAA,aAAA,QAAA,wBAAA;AAEA;;;;;;;;;;;;;AAYA,OAAO,IAAMA,cAAkD,GAAG,SAArDA,cAAqD,CAAA,KAAA,EAAS;AACzE,MAAMC,YAAY,GAAGC,aAAa,CAAlC,KAAkC,CAAlC;AAEA,MAAMC,qBAAqB,GAAGC,wBAAwB,CAAtD,KAAsD,CAAtD;AACA,MAAMC,sBAAsB,GAAGC,yBAAyB,CAAxD,KAAwD,CAAxD;AAEAL,EAAAA,YAAY,CAAZA,UAAAA,CAAAA,KAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKA,YAAY,CAAZA,UAAAA,CADLA,KAAAA,EAAAA;AAEEM,IAAAA,IAAI,EAFNN,QAAAA;AAGE,kBAHFA,IAAAA;AAIE,uBAAmBE,qBAAqB,IAAIK,KAAK,CAJnDP,iBAImD,CAJnDA;AAKE,wBAAoBI,sBAAsB,IAAIG,KAAK,CAAA,kBAAA;AALrDP,GAAAA,CAAAA;AAOAA,EAAAA,YAAY,CAAZA,UAAAA,CAAAA,MAAAA,GAAiC;AAC/BQ,IAAAA,EAAE,EAAEN;AAD2B,GAAjCF;AAGAA,EAAAA,YAAY,CAAZA,UAAAA,CAAAA,OAAAA,GAAkC;AAChCQ,IAAAA,EAAE,EAAEJ;AAD4B,GAAlCJ;AAIA,SAAA,YAAA;AApBK,CAAA;AAuBP;;;;;AAIA,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAAgC;AAC/D,MAAII,KAAK,CAALA,YAAK,CAALA,IAAuBA,KAAK,CAAhC,iBAAgC,CAAhC,EAAqD;AACnD,WAAA,SAAA;AACD;;AACD,SAAOA,KAAK,CAAZ,QAAA;AAJF,CAAA;AAOA;;;;;;AAIA,IAAMF,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,KAAA,EAAgC;AAChE,MAAIE,KAAK,CAAT,kBAAS,CAAT,EAA+B;AAC7B,WAAA,SAAA;AACD;;AACD,SAAOA,KAAK,CAAZ,SAAA;AAJF,CAAA","sourcesContent":["import { Accessibility, AccessibilityAttributes } from '../../types';\nimport { popupBehavior, PopupBehaviorProps } from '../Popup/popupBehavior';\n\n/**\n * @description\n * Implements ARIA Dialog (Modal) design pattern.\n * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.\n *\n * @specification\n * Adds attribute 'aria-disabled=true' to 'trigger' slot if 'disabled' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-modal=true' to 'popup' slot.\n * Adds attribute 'role=dialog' to 'popup' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'popup' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'popup' slot.\n */\nexport const dialogBehavior: Accessibility<DialogBehaviorProps> = props => {\n  const behaviorData = popupBehavior(props);\n\n  const defaultAriaLabelledBy = getDefaultAriaLabelledBy(props);\n  const defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n\n  behaviorData.attributes.popup = {\n    ...behaviorData.attributes.popup,\n    role: 'dialog',\n    'aria-modal': true,\n    'aria-labelledby': defaultAriaLabelledBy || props['aria-labelledby'],\n    'aria-describedby': defaultAriaDescribedBy || props['aria-describedby'],\n  };\n  behaviorData.attributes.header = {\n    id: defaultAriaLabelledBy,\n  };\n  behaviorData.attributes.content = {\n    id: defaultAriaDescribedBy,\n  };\n\n  return behaviorData;\n};\n\n/**\n * Returns the element id of the header, it is used when user does not provide aria-label or\n * aria-labelledby as props.\n */\nconst getDefaultAriaLabelledBy = (props: DialogBehaviorProps) => {\n  if (props['aria-label'] || props['aria-labelledby']) {\n    return undefined;\n  }\n  return props.headerId;\n};\n\n/**\n * Returns the element id of the content, it is used when user does not provide aria-describedby\n * as props.\n */\nconst getDefaultAriaDescribedBy = (props: DialogBehaviorProps) => {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n  return props.contentId;\n};\n\nexport type DialogBehaviorProps = {\n  headerId?: string;\n  contentId?: string;\n} & PopupBehaviorProps &\n  Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"]},"metadata":{},"sourceType":"module"}