{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport _reduce from \"lodash/reduce\";\nimport { treeBehavior } from '@fluentui/accessibility';\nimport { getNextElement, useAutoControlled, useTelemetry, useUnhandledProps, getElementType, useAccessibility, useStyles, useFluentContext } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { TreeItem } from './TreeItem';\nimport { TreeTitle } from './TreeTitle';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { getAllSelectableChildrenId, isAllGroupChecked, hasSubtree, removeItemAtIndex, getSiblings, TreeContext, processItemsForSelection } from './utils';\nexport var treeClassName = 'ui-tree';\n\nfunction useStableProps(props) {\n  var stableProps = React.useRef(props);\n  React.useEffect(function () {\n    stableProps.current = props;\n  });\n  return stableProps;\n}\n\nvar expandedItemsGenerator = function expandedItemsGenerator(items, acc) {\n  if (acc === void 0) {\n    acc = [];\n  }\n\n  return _reduce(items, function (acc, item) {\n    if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n      acc.push(item['id']);\n    }\n\n    if (item['items']) {\n      return expandedItemsGenerator(item['items'], acc);\n    }\n\n    return acc;\n  }, acc);\n};\n\nvar iterateItems = function iterateItems(items, acc) {\n  if (acc === void 0) {\n    acc = [];\n  }\n\n  return _reduce(items, function (acc, item) {\n    if (item['selected'] && acc.indexOf(item['id']) === -1) {\n      acc.push(item['id']);\n    }\n\n    if (item['items']) {\n      return iterateItems(item['items']);\n    }\n\n    return acc;\n  }, acc);\n};\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\n\nexport var Tree = /*#__PURE__*/function () {\n  var Tree = function Tree(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Tree.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var exclusive = props.exclusive,\n        items = props.items,\n        renderItemTitle = props.renderItemTitle,\n        selectable = props.selectable,\n        children = props.children,\n        renderedItems = props.renderedItems,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var stableProps = useStableProps(props);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Tree.handledProps, props);\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultActiveItemIds,\n      value: props.activeItemIds,\n      initialValue: expandedItemsGenerator(items)\n    }),\n        activeItemIds = _useAutoControlled[0],\n        setActiveItemIdsState = _useAutoControlled[1];\n\n    var _useAutoControlled2 = useAutoControlled({\n      defaultValue: props.defaultSelectedItemIds,\n      value: props.selectedItemIds,\n      initialValue: iterateItems(items)\n    }),\n        selectedItemIds = _useAutoControlled2[0],\n        setSelectedItemIdsState = _useAutoControlled2[1];\n\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Tree.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Tree.displayName, {\n      className: treeClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var treeRef = React.useRef();\n    var itemsRef = React.useRef(new Map());\n    var onFocusParent = React.useCallback(function (parent) {\n      var parentRef = itemsRef.current.get(parent);\n\n      if (!parentRef || !parentRef.current) {\n        return;\n      }\n\n      parentRef.current.focus();\n    }, [itemsRef]);\n    var setSelectedItemIds = React.useCallback(function (e, updateSelectedItemIds) {\n      _invoke(stableProps.current, 'onSelectedItemIdsChange', e, Object.assign({}, stableProps.current, {\n        selectedItemIds: updateSelectedItemIds\n      }));\n\n      setSelectedItemIdsState(updateSelectedItemIds);\n    }, [stableProps, setSelectedItemIdsState]);\n    var setActiveItemIds = React.useCallback(function (e, updateActiveItemIds) {\n      _invoke(stableProps.current, 'onActiveItemIdsChange', e, Object.assign({}, stableProps.current, {\n        activeItemIds: updateActiveItemIds\n      }));\n\n      setActiveItemIdsState(updateActiveItemIds);\n    }, [stableProps, setActiveItemIdsState]);\n    var expandItems = React.useCallback(function (e, treeItemProps) {\n      var id = treeItemProps.id;\n      setActiveItemIds(e, function (currActiveItemIds) {\n        var siblings = getSiblings(stableProps.current.items, id);\n        var activeItemIdIndex = currActiveItemIds.indexOf(id);\n        var nextActiveItemsIds = currActiveItemIds;\n\n        if (activeItemIdIndex > -1) {\n          nextActiveItemsIds = removeItemAtIndex(currActiveItemIds, activeItemIdIndex);\n        } else {\n          if (exclusive) {\n            siblings.some(function (sibling) {\n              var activeSiblingIdIndex = currActiveItemIds.indexOf(sibling['id']);\n\n              if (activeSiblingIdIndex > -1) {\n                nextActiveItemsIds = removeItemAtIndex(currActiveItemIds, activeSiblingIdIndex);\n                return true;\n              }\n\n              return false;\n            });\n          }\n\n          nextActiveItemsIds = [].concat(nextActiveItemsIds, [id]);\n        }\n\n        return nextActiveItemsIds;\n      });\n    }, [stableProps, setActiveItemIds, exclusive]);\n    var onTitleClick = React.useCallback(function (e, treeItemProps, executeSelection) {\n      if (executeSelection === void 0) {\n        executeSelection = false;\n      }\n\n      var treeItemHasSubtree = hasSubtree(treeItemProps);\n\n      if (!treeItemProps) {\n        return;\n      }\n\n      if (treeItemHasSubtree && !executeSelection) {\n        expandItems(e, treeItemProps);\n      }\n\n      if (treeItemProps.selectable) {\n        // parent must be selectable and expanded in order to procced with selection, otherwise return\n        if (treeItemHasSubtree && !(treeItemProps.selectableParent && treeItemProps.expanded)) {\n          return;\n        }\n\n        if (treeItemHasSubtree && !executeSelection) {\n          return;\n        }\n\n        setSelectedItemIds(e, function (currSelectedItemIds) {\n          return processItemsForSelection(treeItemProps, currSelectedItemIds);\n        });\n      }\n    }, [expandItems, setSelectedItemIds]);\n    var onFocusFirstChild = React.useCallback(function (itemId) {\n      var currentElement = itemsRef.current.get(itemId);\n\n      if (!currentElement || !currentElement.current) {\n        return;\n      }\n\n      var elementToBeFocused = getNextElement(treeRef.current, currentElement.current);\n\n      if (!elementToBeFocused) {\n        return;\n      }\n\n      elementToBeFocused.focus();\n    }, [treeRef, itemsRef]);\n    var isActiveItem = React.useCallback(function (id) {\n      return activeItemIds.indexOf(id) > -1;\n    }, [activeItemIds]);\n    var onSiblingsExpand = React.useCallback(function (e, treeItemProps) {\n      if (exclusive) {\n        return;\n      }\n\n      var id = treeItemProps.id;\n      var siblings = getSiblings(stableProps.current.items, id);\n      setActiveItemIds(e, function (currActiveItemIds) {\n        var nextActiveItemsIds = [].concat(currActiveItemIds);\n        siblings.forEach(function (sibling) {\n          if (hasSubtree(sibling) && !isActiveItem(sibling['id'])) {\n            nextActiveItemsIds.push(sibling['id']);\n          }\n        });\n\n        if (hasSubtree(treeItemProps) && !isActiveItem(id)) {\n          nextActiveItemsIds.push(id);\n        }\n\n        return nextActiveItemsIds;\n      });\n    }, [exclusive, stableProps, isActiveItem, setActiveItemIds]);\n\n    var isIndeterminate = function isIndeterminate(item) {\n      if (!item.selectableParent || !item.items) {\n        return false;\n      }\n\n      var selectableItemIds = getAllSelectableChildrenId(item.items);\n      return !isAllGroupChecked(item.items, selectedItemIds) && selectableItemIds.some(function (id) {\n        return selectedItemIds.indexOf(id) > -1;\n      });\n    };\n\n    var isSelectedItem = function isSelectedItem(item) {\n      if (item.selectableParent && item.items) {\n        return isAllGroupChecked(item.items, selectedItemIds);\n      }\n\n      return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;\n    };\n\n    var contextValue = React.useMemo(function () {\n      return {\n        onFocusParent: onFocusParent,\n        onSiblingsExpand: onSiblingsExpand,\n        onFocusFirstChild: onFocusFirstChild,\n        onTitleClick: onTitleClick\n      };\n    }, [onFocusParent, onSiblingsExpand, onFocusFirstChild, onTitleClick]);\n\n    var renderContent = function renderContent() {\n      if (!items) return null;\n\n      var renderItems = function renderItems(items, level, parent) {\n        if (level === void 0) {\n          level = 1;\n        }\n\n        return items.reduce(function (renderedItems, item, index) {\n          var id = item.id;\n          var isSubtree = hasSubtree(item);\n          var isSubtreeExpanded = isSubtree && isActiveItem(id);\n          var indeterminate = isIndeterminate(item);\n\n          if (!itemsRef.current.has(id)) {\n            itemsRef.current.set(id, /*#__PURE__*/React.createRef());\n          }\n\n          var renderedItem = TreeItem.create(item, {\n            defaultProps: function defaultProps() {\n              return getA11yProps('item', {\n                expanded: isSubtreeExpanded,\n                selected: isSelectedItem(item),\n                selectable: selectable,\n                renderItemTitle: renderItemTitle,\n                id: id,\n                key: id,\n                parent: parent,\n                level: level,\n                index: index + 1,\n                // Used for aria-posinset and it's 1-based.\n                contentRef: itemsRef.current.get(id),\n                treeSize: items.length,\n                indeterminate: indeterminate,\n                onSiblingsExpand: onSiblingsExpand\n              });\n            }\n          });\n          return [].concat(renderedItems, [renderedItem], isSubtreeExpanded ? renderItems(item.items, level + 1, id) : []);\n        }, []);\n      };\n\n      var itemsRendered = renderItems(items);\n      return itemsRendered;\n    };\n\n    var element = /*#__PURE__*/React.createElement(TreeContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Ref, {\n      innerRef: treeRef\n    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : renderedItems ? renderedItems(renderContent()) : renderContent()))));\n    setEnd();\n    return element;\n  };\n\n  Tree.displayName = 'Tree';\n  Tree.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    activeItemIds: customPropTypes.collectionShorthand,\n    selectedItemIds: customPropTypes.collectionShorthand,\n    defaultActiveItemIds: customPropTypes.collectionShorthand,\n    defaultSelectedItemIds: customPropTypes.collectionShorthand,\n    exclusive: PropTypes.bool,\n    selectable: PropTypes.bool,\n    items: customPropTypes.collectionObjectShorthand,\n    onActiveItemIdsChange: PropTypes.func,\n    onSelectedItemIdsChange: PropTypes.func,\n    renderItemTitle: PropTypes.func,\n    renderedItems: PropTypes.func\n  });\n  Tree.Item = TreeItem;\n  Tree.Title = TreeTitle;\n  Tree.defaultProps = {\n    accessibility: treeBehavior\n  };\n  Tree.handledProps = Object.keys(Tree.propTypes);\n  Tree.create = createShorthandFactory({\n    Component: Tree,\n    mappedArrayProp: 'items'\n  });\n  return Tree;\n}();","map":{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["treeClassName","stableProps","React","expandedItemsGenerator","acc","item","iterateItems","Tree","context","useFluentContext","setStart","setEnd","useTelemetry","exclusive","items","renderItemTitle","selectable","children","renderedItems","className","design","styles","variables","props","useStableProps","ElementType","getElementType","unhandledProps","useUnhandledProps","activeItemIds","setActiveItemIdsState","useAutoControlled","defaultValue","value","initialValue","selectedItemIds","setSelectedItemIdsState","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","treeRef","itemsRef","onFocusParent","parentRef","setSelectedItemIds","updateSelectedItemIds","setActiveItemIds","updateActiveItemIds","expandItems","id","treeItemProps","siblings","getSiblings","activeItemIdIndex","currActiveItemIds","nextActiveItemsIds","removeItemAtIndex","activeSiblingIdIndex","sibling","onTitleClick","executeSelection","treeItemHasSubtree","hasSubtree","processItemsForSelection","onFocusFirstChild","currentElement","elementToBeFocused","getNextElement","isActiveItem","onSiblingsExpand","isIndeterminate","selectableItemIds","getAllSelectableChildrenId","isAllGroupChecked","isSelectedItem","contextValue","renderContent","renderItems","level","isSubtree","isSubtreeExpanded","indeterminate","renderedItem","defaultProps","expanded","selected","key","parent","index","contentRef","treeSize","itemsRendered","element","root","forElements","childrenExist","content","customPropTypes","defaultActiveItemIds","defaultSelectedItemIds","PropTypes","onActiveItemIdsChange","onSelectedItemIdsChange","func","accessibility","treeBehavior","Object","createShorthandFactory","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeBehavior, TreeBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getNextElement,\n  useAutoControlled,\n  useTelemetry,\n  useUnhandledProps,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { TreeItem, TreeItemProps } from './TreeItem';\nimport { TreeTitle, TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ShorthandRenderFunction,\n  ShorthandCollection,\n  ComponentEventHandler,\n  ObjectShorthandCollection,\n  FluentComponentStaticProps,\n} from '../../types';\nimport {\n  getAllSelectableChildrenId,\n  isAllGroupChecked,\n  hasSubtree,\n  removeItemAtIndex,\n  getSiblings,\n  TreeContext,\n  TreeRenderContextValue,\n  processItemsForSelection,\n} from './utils';\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeBehaviorProps>;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Ids of selected items. */\n  selectedItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Called when tree item selection state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `selectedItemIds` reflecting the new state.\n   */\n  onSelectedItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n\n  /** Whether or not tree items are selectable. */\n  selectable?: boolean;\n}\n\nexport interface TreeItemForRenderProps {\n  elementRef: React.RefObject<HTMLElement>;\n  id: string;\n  index: number;\n  level: number;\n  parent: string;\n  siblings: ShorthandCollection<TreeItemProps>;\n}\n\nexport const treeClassName = 'ui-tree';\n\nexport type TreeStylesProps = never;\n\nfunction useStableProps<P>(props: P) {\n  const stableProps = React.useRef<P>(props);\n\n  React.useEffect(() => {\n    stableProps.current = props;\n  });\n\n  return stableProps;\n}\n\nconst expandedItemsGenerator = (items: TreeProps['items'] | TreeItemProps['items'], acc = []) =>\n  _.reduce(\n    items,\n    (acc, item) => {\n      if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n        acc.push(item['id']);\n      }\n\n      if (item['items']) {\n        return expandedItemsGenerator(item['items'], acc);\n      }\n\n      return acc;\n    },\n    acc,\n  );\n\nconst iterateItems = (items: TreeProps['items'] | TreeItemProps['items'], acc = []): string[] =>\n  _.reduce<TreeProps['items'] | TreeItemProps['items'], string[]>(\n    items,\n    (acc, item) => {\n      if (item['selected'] && acc.indexOf(item['id']) === -1) {\n        acc.push(item['id']);\n      }\n\n      if (item['items']) {\n        return iterateItems(item['items']);\n      }\n\n      return acc;\n    },\n    acc,\n  );\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\nexport const Tree: ComponentWithAs<'div', TreeProps> &\n  FluentComponentStaticProps<TreeProps> & {\n    Item: typeof TreeItem;\n    Title: typeof TreeTitle;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Tree.displayName, context.telemetry);\n  setStart();\n\n  const {\n    exclusive,\n    items,\n    renderItemTitle,\n    selectable,\n    children,\n    renderedItems,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const stableProps = useStableProps(props);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Tree.handledProps, props);\n\n  const [activeItemIds, setActiveItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: props.defaultActiveItemIds,\n    value: props.activeItemIds,\n    initialValue: expandedItemsGenerator(items),\n  });\n\n  const [selectedItemIds, setSelectedItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: props.defaultSelectedItemIds,\n    value: props.selectedItemIds,\n    initialValue: iterateItems(items),\n  });\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Tree.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TreeStylesProps>(Tree.displayName, {\n    className: treeClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const treeRef = React.useRef<HTMLElement>();\n  const itemsRef = React.useRef(new Map<string, React.RefObject<HTMLElement>>());\n\n  const onFocusParent = React.useCallback(\n    (parent: string) => {\n      const parentRef = itemsRef.current.get(parent);\n\n      if (!parentRef || !parentRef.current) {\n        return;\n      }\n\n      parentRef.current.focus();\n    },\n    [itemsRef],\n  );\n\n  const setSelectedItemIds = React.useCallback(\n    (e: React.SyntheticEvent, updateSelectedItemIds: (currSelectedItemIds: string[]) => string[]) => {\n      _.invoke(stableProps.current, 'onSelectedItemIdsChange', e, {\n        ...stableProps.current,\n        selectedItemIds: updateSelectedItemIds,\n      });\n\n      setSelectedItemIdsState(updateSelectedItemIds);\n    },\n    [stableProps, setSelectedItemIdsState],\n  );\n\n  const setActiveItemIds = React.useCallback(\n    (e: React.SyntheticEvent, updateActiveItemIds: (activeItemIds: string[]) => string[]) => {\n      _.invoke(stableProps.current, 'onActiveItemIdsChange', e, {\n        ...stableProps.current,\n        activeItemIds: updateActiveItemIds,\n      });\n      setActiveItemIdsState(updateActiveItemIds);\n    },\n    [stableProps, setActiveItemIdsState],\n  );\n\n  const expandItems = React.useCallback(\n    (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n      const { id } = treeItemProps;\n\n      setActiveItemIds(e, currActiveItemIds => {\n        const siblings = getSiblings(stableProps.current.items, id);\n        const activeItemIdIndex = currActiveItemIds.indexOf(id);\n        let nextActiveItemsIds = currActiveItemIds;\n        if (activeItemIdIndex > -1) {\n          nextActiveItemsIds = removeItemAtIndex(currActiveItemIds, activeItemIdIndex);\n        } else {\n          if (exclusive) {\n            siblings.some(sibling => {\n              const activeSiblingIdIndex = currActiveItemIds.indexOf(sibling['id']);\n              if (activeSiblingIdIndex > -1) {\n                nextActiveItemsIds = removeItemAtIndex(currActiveItemIds, activeSiblingIdIndex);\n                return true;\n              }\n              return false;\n            });\n          }\n          nextActiveItemsIds = [...nextActiveItemsIds, id];\n        }\n        return nextActiveItemsIds;\n      });\n    },\n    [stableProps, setActiveItemIds, exclusive],\n  );\n\n  const onTitleClick = React.useCallback(\n    (e: React.SyntheticEvent, treeItemProps: TreeItemProps, executeSelection: boolean = false) => {\n      const treeItemHasSubtree = hasSubtree(treeItemProps);\n\n      if (!treeItemProps) {\n        return;\n      }\n\n      if (treeItemHasSubtree && !executeSelection) {\n        expandItems(e, treeItemProps);\n      }\n\n      if (treeItemProps.selectable) {\n        // parent must be selectable and expanded in order to procced with selection, otherwise return\n        if (treeItemHasSubtree && !(treeItemProps.selectableParent && treeItemProps.expanded)) {\n          return;\n        }\n\n        if (treeItemHasSubtree && !executeSelection) {\n          return;\n        }\n\n        setSelectedItemIds(e, currSelectedItemIds => processItemsForSelection(treeItemProps, currSelectedItemIds));\n      }\n    },\n    [expandItems, setSelectedItemIds],\n  );\n\n  const onFocusFirstChild = React.useCallback(\n    (itemId: string) => {\n      const currentElement = itemsRef.current.get(itemId);\n\n      if (!currentElement || !currentElement.current) {\n        return;\n      }\n\n      const elementToBeFocused = getNextElement(treeRef.current, currentElement.current);\n\n      if (!elementToBeFocused) {\n        return;\n      }\n\n      elementToBeFocused.focus();\n    },\n    [treeRef, itemsRef],\n  );\n\n  const isActiveItem = React.useCallback(\n    (id: string): boolean => {\n      return activeItemIds.indexOf(id) > -1;\n    },\n    [activeItemIds],\n  );\n\n  const onSiblingsExpand = React.useCallback(\n    (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n      if (exclusive) {\n        return;\n      }\n\n      const { id } = treeItemProps;\n      const siblings = getSiblings(stableProps.current.items, id);\n\n      setActiveItemIds(e, currActiveItemIds => {\n        const nextActiveItemsIds = [...currActiveItemIds];\n\n        siblings.forEach(sibling => {\n          if (hasSubtree(sibling) && !isActiveItem(sibling['id'])) {\n            nextActiveItemsIds.push(sibling['id']);\n          }\n        });\n\n        if (hasSubtree(treeItemProps) && !isActiveItem(id)) {\n          nextActiveItemsIds.push(id);\n        }\n        return nextActiveItemsIds;\n      });\n    },\n    [exclusive, stableProps, isActiveItem, setActiveItemIds],\n  );\n\n  const isIndeterminate = (item: TreeItemProps) => {\n    if (!item.selectableParent || !item.items) {\n      return false;\n    }\n\n    const selectableItemIds = getAllSelectableChildrenId(item.items as TreeItemProps[]);\n\n    return (\n      !isAllGroupChecked(item.items as TreeItemProps[], selectedItemIds) &&\n      selectableItemIds.some(id => selectedItemIds.indexOf(id) > -1)\n    );\n  };\n\n  const isSelectedItem = (item: TreeItemProps): boolean => {\n    if (item.selectableParent && item.items) {\n      return isAllGroupChecked(item.items as TreeItemProps[], selectedItemIds);\n    }\n\n    return selectedItemIds && selectedItemIds.indexOf(item.id) > -1;\n  };\n\n  const contextValue: TreeRenderContextValue = React.useMemo(\n    () => ({\n      onFocusParent,\n      onSiblingsExpand,\n      onFocusFirstChild,\n      onTitleClick,\n    }),\n    [onFocusParent, onSiblingsExpand, onFocusFirstChild, onTitleClick],\n  );\n\n  const renderContent = (): React.ReactElement[] => {\n    if (!items) return null;\n\n    const renderItems = (items: TreeItemProps[], level = 1, parent?: string): React.ReactElement[] => {\n      return items.reduce((renderedItems: React.ReactElement[], item: TreeItemProps, index: number) => {\n        const id = item.id;\n        const isSubtree = hasSubtree(item);\n        const isSubtreeExpanded = isSubtree && isActiveItem(id);\n\n        const indeterminate = isIndeterminate(item);\n\n        if (!itemsRef.current.has(id)) {\n          itemsRef.current.set(id, React.createRef<HTMLElement>());\n        }\n\n        const renderedItem = TreeItem.create(item, {\n          defaultProps: () =>\n            getA11yProps('item', {\n              expanded: isSubtreeExpanded,\n              selected: isSelectedItem(item),\n              selectable,\n              renderItemTitle,\n              id,\n              key: id,\n              parent,\n              level,\n              index: index + 1, // Used for aria-posinset and it's 1-based.\n              contentRef: itemsRef.current.get(id),\n              treeSize: items.length,\n              indeterminate,\n              onSiblingsExpand,\n            }),\n        });\n\n        return [\n          ...renderedItems,\n          renderedItem,\n          ...(isSubtreeExpanded ? renderItems(item.items as TreeItemProps[], level + 1, id) : ([] as any)),\n        ];\n      }, []);\n    };\n    const itemsRendered = renderItems(items as TreeItemProps[]);\n\n    return itemsRendered;\n  };\n\n  const element = (\n    <TreeContext.Provider value={contextValue}>\n      <Ref innerRef={treeRef}>\n        {getA11yProps.unstable_wrapWithFocusZone(\n          <ElementType\n            {...getA11yProps('root', {\n              className: classes.root,\n              ...rtlTextContainer.getAttributes({ forElements: [children] }),\n              ...unhandledProps,\n            })}\n          >\n            {childrenExist(children) ? children : renderedItems ? renderedItems(renderContent()) : renderContent()}\n          </ElementType>,\n        )}\n      </Ref>\n    </TreeContext.Provider>\n  );\n  setEnd();\n  return element;\n};\n\nTree.displayName = 'Tree';\n\nTree.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeItemIds: customPropTypes.collectionShorthand,\n  selectedItemIds: customPropTypes.collectionShorthand,\n  defaultActiveItemIds: customPropTypes.collectionShorthand,\n  defaultSelectedItemIds: customPropTypes.collectionShorthand,\n  exclusive: PropTypes.bool,\n  selectable: PropTypes.bool,\n  items: customPropTypes.collectionObjectShorthand,\n  onActiveItemIdsChange: PropTypes.func,\n  onSelectedItemIdsChange: PropTypes.func,\n  renderItemTitle: PropTypes.func,\n  renderedItems: PropTypes.func,\n};\n\nTree.Item = TreeItem;\nTree.Title = TreeTitle;\n\nTree.defaultProps = {\n  accessibility: treeBehavior,\n};\n\nTree.handledProps = Object.keys(Tree.propTypes) as any;\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n"]},"metadata":{},"sourceType":"module"}