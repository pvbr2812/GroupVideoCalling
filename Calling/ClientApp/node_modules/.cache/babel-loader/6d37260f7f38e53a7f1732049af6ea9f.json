{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _keys from \"lodash/keys\";\nimport _map from \"lodash/map\";\nimport _union from \"lodash/union\";\nimport _forEach from \"lodash/forEach\";\nimport _merge from \"lodash/merge\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport { callable } from './callable';\nimport { isEnabled as isDebugEnabled } from './debugEnabled';\nimport { deepmerge } from './deepmerge';\nimport { objectKeyToValues } from './objectKeysToValues';\nimport { toCompactArray } from './toCompactArray';\nimport { withDebugId } from './withDebugId';\nexport var emptyTheme = {\n  siteVariables: {\n    fontSizes: {}\n  },\n  componentVariables: {},\n  componentStyles: {},\n  fontFaces: [],\n  staticStyles: [],\n  animations: {}\n}; // ----------------------------------------\n// Component level merge functions\n// ----------------------------------------\n\n/**\n * Merges a single component's styles (keyed by component part) with another component's styles.\n */\n\nexport var mergeComponentStyles__PROD = function mergeComponentStyles__PROD() {\n  var initial = {};\n\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  return sources.reduce(function (partStylesPrepared, stylesByPart) {\n    // The of \"[].forEach()\" instead of \"_.forEach\" has zero sense, but somehow it solves a reported memory leak.\n    // There is no 100% confidence that it actually fixes anything.\n    if (_isPlainObject(stylesByPart)) {\n      Object.keys(stylesByPart).forEach(function (partName) {\n        var partStyle = stylesByPart[partName]; // Break references to avoid an infinite loop.\n        // We are replacing functions with a new ones that calls the originals.\n\n        var originalTarget = partStylesPrepared[partName];\n        var originalSource = partStyle; // if there is no source, merging is a no-op, skip it\n\n        if (typeof originalSource === 'undefined' || originalSource === null || typeof originalSource === 'object' && Object.keys(originalSource).length === 0) {\n          return;\n        } // no target means source doesn't need to merge onto anything\n        // just ensure source is callable (prepared format)\n\n\n        if (typeof originalTarget === 'undefined') {\n          partStylesPrepared[partName] = callable(originalSource);\n          return;\n        } // We have both target and source, replace with merge fn\n\n\n        partStylesPrepared[partName] = function (styleParam) {\n          // originalTarget is always prepared, fn is guaranteed\n          return _merge(originalTarget(styleParam), callable(originalSource)(styleParam));\n        };\n      });\n    }\n\n    return partStylesPrepared;\n  }, initial);\n};\nexport var mergeComponentStyles__DEV = function mergeComponentStyles__DEV() {\n  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    sources[_key2] = arguments[_key2];\n  }\n\n  if (!isDebugEnabled) {\n    return mergeComponentStyles__PROD.apply(void 0, sources);\n  }\n\n  var initial = {};\n  return sources.reduce(function (partStylesPrepared, stylesByPart) {\n    _forEach(stylesByPart, function (partStyle, partName) {\n      // Break references to avoid an infinite loop.\n      // We are replacing functions with a new ones that calls the originals.\n      var originalTarget = partStylesPrepared[partName];\n      var originalSource = partStyle; // if there is no source, merging is a no-op, skip it\n\n      if (typeof originalSource === 'undefined' || originalSource === null || typeof originalSource === 'object' && Object.keys(originalSource).length === 0) {\n        return;\n      } // no target means source doesn't need to merge onto anything\n      // just ensure source is callable (prepared format) and has _debug\n\n\n      if (typeof originalTarget === 'undefined') {\n        partStylesPrepared[partName] = function (styleParam) {\n          // originalTarget is always prepared, fn is guaranteed, _debug always exists\n          var _ref = callable(originalSource)(styleParam) || {},\n              _ref$_debug = _ref._debug,\n              _debug = _ref$_debug === void 0 ? undefined : _ref$_debug,\n              styles = _objectWithoutPropertiesLoose(_ref, [\"_debug\"]); // new object required to prevent circular JSON structure error in <Debug />\n\n\n          return Object.assign({}, styles, {\n            _debug: _debug || [{\n              styles: Object.assign({}, styles),\n              debugId: stylesByPart._debugId\n            }]\n          });\n        };\n\n        return;\n      } // We have both target and source, replace with merge fn\n\n\n      partStylesPrepared[partName] = function (styleParam) {\n        // originalTarget is always prepared, fn is guaranteed, _debug always exists\n        var _originalTarget = originalTarget(styleParam),\n            targetDebug = _originalTarget._debug,\n            targetStyles = _objectWithoutPropertiesLoose(_originalTarget, [\"_debug\"]);\n\n        var _ref2 = callable(originalSource)(styleParam) || {},\n            _ref2$_debug = _ref2._debug,\n            sourceDebug = _ref2$_debug === void 0 ? undefined : _ref2$_debug,\n            sourceStyles = _objectWithoutPropertiesLoose(_ref2, [\"_debug\"]);\n\n        var merged = _merge(targetStyles, sourceStyles);\n\n        merged._debug = targetDebug.concat(sourceDebug || {\n          styles: sourceStyles,\n          debugId: stylesByPart._debugId\n        });\n        return merged;\n      };\n    });\n\n    return partStylesPrepared;\n  }, initial);\n};\nexport var mergeComponentStyles = process.env.NODE_ENV === 'production' ? mergeComponentStyles__PROD : mergeComponentStyles__DEV;\n/**\n * Merges a single component's variables with another component's variables.\n */\n\nexport var mergeComponentVariables__PROD = function mergeComponentVariables__PROD() {\n  var initial = function initial() {\n    return {};\n  }; // filtering is required as some arguments can be undefined\n\n\n  for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    sources[_key3] = arguments[_key3];\n  }\n\n  var filteredSources = sources.filter(Boolean); // a short circle to avoid calls of deepmerge()\n\n  if (filteredSources.length === 1) {\n    return typeof filteredSources[0] === 'function' ? filteredSources[0] : callable(filteredSources[0]);\n  }\n\n  return filteredSources.reduce(function (acc, next) {\n    return function mergeComponentVariables() {\n      var accumulatedVariables = acc.apply(void 0, arguments);\n      var fn = typeof next === 'function' ? next : callable(next);\n      var computedComponentVariables = fn.apply(void 0, arguments);\n      return deepmerge(accumulatedVariables, computedComponentVariables);\n    };\n  }, initial);\n};\nexport var mergeComponentVariables__DEV = function mergeComponentVariables__DEV() {\n  for (var _len4 = arguments.length, sources = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    sources[_key4] = arguments[_key4];\n  }\n\n  if (!isDebugEnabled) {\n    return mergeComponentVariables__PROD.apply(void 0, sources);\n  }\n\n  var initial = function initial() {\n    return {};\n  };\n\n  return sources.reduce(function (acc, next) {\n    return function (siteVariables) {\n      var _acc = acc(siteVariables),\n          _acc$_debug = _acc._debug,\n          _debug = _acc$_debug === void 0 ? [] : _acc$_debug,\n          accumulatedVariables = _objectWithoutPropertiesLoose(_acc, [\"_debug\"]);\n\n      var _ref3 = callable(next)(siteVariables) || {},\n          _ref3$_debug = _ref3._debug,\n          computedDebug = _ref3$_debug === void 0 ? undefined : _ref3$_debug,\n          _ref3$_debugId = _ref3._debugId,\n          _debugId = _ref3$_debugId === void 0 ? undefined : _ref3$_debugId,\n          computedComponentVariables = _objectWithoutPropertiesLoose(_ref3, [\"_debug\", \"_debugId\"]);\n\n      var merged = deepmerge(accumulatedVariables, computedComponentVariables);\n      merged._debug = _debug.concat(computedDebug || {\n        resolved: computedComponentVariables,\n        debugId: _debugId,\n        input: siteVariables ? siteVariables._invertedKeys && callable(next)(siteVariables._invertedKeys) : callable(next)()\n      });\n      return merged;\n    };\n  }, initial);\n};\nexport var mergeComponentVariables = process.env.NODE_ENV === 'production' ? mergeComponentVariables__PROD : mergeComponentVariables__DEV; // ----------------------------------------\n// Theme level merge functions\n// ----------------------------------------\n\n/**\n * Site variables can safely be merged at each Provider in the tree.\n * They are flat objects and do not depend on render-time values, such as props.\n */\n\nexport var mergeSiteVariables__PROD = function mergeSiteVariables__PROD() {\n  var initial = {\n    fontSizes: {}\n  };\n\n  for (var _len5 = arguments.length, sources = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    sources[_key5] = arguments[_key5];\n  }\n\n  return deepmerge.apply(void 0, [initial].concat(sources));\n};\nexport var mergeSiteVariables__DEV = function mergeSiteVariables__DEV() {\n  for (var _len6 = arguments.length, sources = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    sources[_key6] = arguments[_key6];\n  }\n\n  if (!isDebugEnabled) {\n    return mergeSiteVariables__PROD.apply(void 0, sources);\n  }\n\n  var initial = {\n    fontSizes: {}\n  };\n  return sources.reduce(function (acc, next) {\n    var _acc$_debug2 = acc._debug,\n        _debug = _acc$_debug2 === void 0 ? [] : _acc$_debug2,\n        accumulatedSiteVariables = _objectWithoutPropertiesLoose(acc, [\"_debug\"]);\n\n    var _ref4 = next || {},\n        _ref4$_debug = _ref4._debug,\n        computedDebug = _ref4$_debug === void 0 ? undefined : _ref4$_debug,\n        _ref4$_invertedKeys = _ref4._invertedKeys,\n        _invertedKeys = _ref4$_invertedKeys === void 0 ? undefined : _ref4$_invertedKeys,\n        _ref4$_debugId = _ref4._debugId,\n        _debugId = _ref4$_debugId === void 0 ? undefined : _ref4$_debugId,\n        nextSiteVariables = _objectWithoutPropertiesLoose(_ref4, [\"_debug\", \"_invertedKeys\", \"_debugId\"]);\n\n    var merged = deepmerge(Object.assign({}, accumulatedSiteVariables, {\n      _invertedKeys: undefined\n    }), nextSiteVariables);\n    merged._debug = _debug.concat(computedDebug || {\n      resolved: nextSiteVariables,\n      debugId: _debugId\n    });\n    merged._invertedKeys = _invertedKeys || objectKeyToValues(merged, function (key) {\n      return \"siteVariables.\" + key;\n    });\n    return merged;\n  }, initial);\n};\nexport var mergeSiteVariables = process.env.NODE_ENV === 'production' ? mergeSiteVariables__PROD : mergeSiteVariables__DEV;\n/**\n * Component variables can be objects, functions, or an array of these.\n * The functions must be called with the final result of siteVariables, otherwise\n *   the component variable objects would have no ability to apply siteVariables.\n * Therefore, componentVariables must be resolved by the component at render time.\n * We instead pass down call stack of component variable functions to be resolved later.\n */\n\nexport var mergeThemeVariables__PROD = function mergeThemeVariables__PROD() {\n  for (var _len7 = arguments.length, sources = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    sources[_key7] = arguments[_key7];\n  }\n\n  var displayNames = _union.apply(void 0, _map(sources, _keys));\n\n  return displayNames.reduce(function (componentVariables, displayName) {\n    componentVariables[displayName] = mergeComponentVariables.apply(void 0, _map(sources, displayName));\n    return componentVariables;\n  }, {});\n};\nexport var mergeThemeVariables__DEV = function mergeThemeVariables__DEV() {\n  for (var _len8 = arguments.length, sources = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    sources[_key8] = arguments[_key8];\n  }\n\n  if (!isDebugEnabled) {\n    return mergeThemeVariables__PROD.apply(void 0, sources);\n  }\n\n  var displayNames = _union.apply(void 0, _map(sources, _keys));\n\n  return displayNames.reduce(function (componentVariables, displayName) {\n    componentVariables[displayName] = mergeComponentVariables.apply(void 0, _map(sources, function (source) {\n      return source && withDebugId(source[displayName], source._debugId);\n    }));\n    return componentVariables;\n  }, {});\n};\nexport var mergeThemeVariables = process.env.NODE_ENV === 'production' ? mergeThemeVariables__PROD : mergeThemeVariables__DEV;\n/**\n * See mergeThemeVariables() description.\n * Component styles adhere to the same pattern as component variables, except\n *   that they return style objects.\n */\n\nexport var mergeThemeStyles = function mergeThemeStyles() {\n  var initial = {};\n\n  for (var _len9 = arguments.length, sources = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    sources[_key9] = arguments[_key9];\n  }\n\n  return sources.reduce(function (themeComponentStyles, next) {\n    _forEach(next, function (stylesByPart, displayName) {\n      themeComponentStyles[displayName] = mergeComponentStyles(themeComponentStyles[displayName], withDebugId(stylesByPart, next._debugId));\n    });\n\n    return themeComponentStyles;\n  }, initial);\n};\nexport var mergeFontFaces = function mergeFontFaces() {\n  return toCompactArray.apply(void 0, arguments);\n};\nexport var mergeStaticStyles = function mergeStaticStyles() {\n  return toCompactArray.apply(void 0, arguments);\n};\nexport var mergeAnimations = function mergeAnimations() {\n  for (var _len10 = arguments.length, sources = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    sources[_key10] = arguments[_key10];\n  }\n\n  return Object.assign.apply(Object, [{}].concat(sources));\n};\nexport var mergeStyles = function mergeStyles() {\n  for (var _len11 = arguments.length, sources = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    sources[_key11] = arguments[_key11];\n  }\n\n  return function () {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n\n    return sources.reduce(function (acc, next) {\n      return _merge(acc, callable(next).apply(void 0, args));\n    }, {});\n  };\n};\nexport var mergeThemes = function mergeThemes() {\n  for (var _len13 = arguments.length, themes = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n    themes[_key13] = arguments[_key13];\n  }\n\n  return themes.reduce(function (acc, next) {\n    if (!next) return acc;\n    var nextDebugId = next['_debugId'];\n    acc.siteVariables = mergeSiteVariables(acc.siteVariables, withDebugId(next.siteVariables, nextDebugId));\n    acc.componentVariables = mergeThemeVariables(acc.componentVariables, withDebugId(next.componentVariables, nextDebugId));\n    acc.componentStyles = mergeThemeStyles(acc.componentStyles, withDebugId(next.componentStyles, nextDebugId));\n    acc.fontFaces = mergeFontFaces.apply(void 0, acc.fontFaces.concat(next.fontFaces || []));\n    acc.staticStyles = mergeStaticStyles.apply(void 0, acc.staticStyles.concat(next.staticStyles || []));\n    acc.animations = mergeAnimations(acc.animations, next.animations);\n    return acc;\n  }, // .reduce() will modify \"emptyTheme\" object, so we should clone it before actual usage\n  Object.assign({}, emptyTheme));\n};","map":{"version":3,"sources":["mergeThemes.ts"],"names":["isEnabled","emptyTheme","siteVariables","fontSizes","componentVariables","componentStyles","fontFaces","staticStyles","animations","mergeComponentStyles__PROD","sources","initial","Object","partStyle","stylesByPart","originalTarget","partStylesPrepared","originalSource","callable","mergeComponentStyles__DEV","_debug","styles","debugId","_debugId","targetDebug","targetStyles","sourceDebug","sourceStyles","merged","mergeComponentStyles","process","mergeComponentVariables__PROD","filteredSources","accumulatedVariables","acc","fn","computedComponentVariables","deepmerge","mergeComponentVariables__DEV","computedDebug","resolved","input","mergeComponentVariables","mergeSiteVariables__PROD","mergeSiteVariables__DEV","accumulatedSiteVariables","_invertedKeys","nextSiteVariables","next","undefined","objectKeyToValues","mergeSiteVariables","mergeThemeVariables__PROD","displayNames","mergeThemeVariables__DEV","source","withDebugId","mergeThemeVariables","mergeThemeStyles","themeComponentStyles","mergeFontFaces","toCompactArray","mergeStaticStyles","mergeAnimations","mergeStyles","args","mergeThemes","themes","nextDebugId"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\n\nimport { callable } from './callable';\nimport {\n  ComponentSlotStyle,\n  ComponentSlotStylesInput,\n  ComponentSlotStylesPrepared,\n  ComponentVariablesInput,\n  ComponentVariablesPrepared,\n  FontFace,\n  SiteVariablesInput,\n  SiteVariablesPrepared,\n  StaticStyle,\n  ThemeAnimation,\n  ThemeComponentStylesInput,\n  ThemeComponentStylesPrepared,\n  ThemeComponentVariablesInput,\n  ThemeComponentVariablesPrepared,\n  ThemeInput,\n  ThemePrepared,\n} from './types';\n\nimport { isEnabled as isDebugEnabled } from './debugEnabled';\nimport { deepmerge } from './deepmerge';\nimport { objectKeyToValues } from './objectKeysToValues';\nimport { toCompactArray } from './toCompactArray';\nimport { withDebugId } from './withDebugId';\n\nexport const emptyTheme: ThemePrepared = {\n  siteVariables: {\n    fontSizes: {},\n  },\n  componentVariables: {},\n  componentStyles: {},\n  fontFaces: [],\n  staticStyles: [],\n  animations: {},\n};\n\n// ----------------------------------------\n// Component level merge functions\n// ----------------------------------------\n\n/**\n * Merges a single component's styles (keyed by component part) with another component's styles.\n */\nexport const mergeComponentStyles__PROD = (\n  ...sources: (ComponentSlotStylesInput | null | undefined)[]\n): ComponentSlotStylesPrepared => {\n  const initial: ComponentSlotStylesPrepared = {};\n\n  return sources.reduce<ComponentSlotStylesPrepared>((partStylesPrepared, stylesByPart) => {\n    // The of \"[].forEach()\" instead of \"_.forEach\" has zero sense, but somehow it solves a reported memory leak.\n    // There is no 100% confidence that it actually fixes anything.\n    if (_.isPlainObject(stylesByPart)) {\n      Object.keys(stylesByPart).forEach(partName => {\n        const partStyle = stylesByPart[partName];\n\n        // Break references to avoid an infinite loop.\n        // We are replacing functions with a new ones that calls the originals.\n        const originalTarget = partStylesPrepared[partName];\n        const originalSource = partStyle;\n\n        // if there is no source, merging is a no-op, skip it\n        if (\n          typeof originalSource === 'undefined' ||\n          originalSource === null ||\n          (typeof originalSource === 'object' && Object.keys(originalSource).length === 0)\n        ) {\n          return;\n        }\n\n        // no target means source doesn't need to merge onto anything\n        // just ensure source is callable (prepared format)\n        if (typeof originalTarget === 'undefined') {\n          partStylesPrepared[partName] = callable(originalSource);\n          return;\n        }\n\n        // We have both target and source, replace with merge fn\n        partStylesPrepared[partName] = styleParam => {\n          // originalTarget is always prepared, fn is guaranteed\n          return _.merge(originalTarget(styleParam), callable(originalSource)(styleParam));\n        };\n      });\n    }\n\n    return partStylesPrepared;\n  }, initial);\n};\n\nexport const mergeComponentStyles__DEV = (\n  ...sources: (ComponentSlotStylesInput | null | undefined)[]\n): ComponentSlotStylesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeComponentStyles__PROD(...sources);\n  }\n  const initial: ComponentSlotStylesPrepared = {};\n\n  return sources.reduce<ComponentSlotStylesPrepared>((partStylesPrepared, stylesByPart) => {\n    _.forEach(stylesByPart, (partStyle, partName) => {\n      // Break references to avoid an infinite loop.\n      // We are replacing functions with a new ones that calls the originals.\n      const originalTarget = partStylesPrepared[partName];\n      const originalSource = partStyle;\n\n      // if there is no source, merging is a no-op, skip it\n      if (\n        typeof originalSource === 'undefined' ||\n        originalSource === null ||\n        (typeof originalSource === 'object' && Object.keys(originalSource).length === 0)\n      ) {\n        return;\n      }\n\n      // no target means source doesn't need to merge onto anything\n      // just ensure source is callable (prepared format) and has _debug\n      if (typeof originalTarget === 'undefined') {\n        partStylesPrepared[partName] = styleParam => {\n          // originalTarget is always prepared, fn is guaranteed, _debug always exists\n          const { _debug = undefined, ...styles } = callable(originalSource)(styleParam) || {};\n\n          // new object required to prevent circular JSON structure error in <Debug />\n          return {\n            ...styles,\n            _debug: _debug || [{ styles: { ...styles }, debugId: stylesByPart._debugId }],\n          };\n        };\n\n        return;\n      }\n\n      // We have both target and source, replace with merge fn\n      partStylesPrepared[partName] = styleParam => {\n        // originalTarget is always prepared, fn is guaranteed, _debug always exists\n        const { _debug: targetDebug, ...targetStyles } = originalTarget(styleParam);\n        const { _debug: sourceDebug = undefined, ...sourceStyles } = callable(originalSource)(styleParam) || {};\n\n        const merged = _.merge(targetStyles, sourceStyles);\n        merged._debug = targetDebug.concat(sourceDebug || { styles: sourceStyles, debugId: stylesByPart._debugId });\n        return merged;\n      };\n    });\n\n    return partStylesPrepared;\n  }, initial);\n};\n\nexport const mergeComponentStyles: (\n  ...sources: (ComponentSlotStylesInput | null | undefined)[]\n) => ComponentSlotStylesPrepared =\n  process.env.NODE_ENV === 'production' ? mergeComponentStyles__PROD : mergeComponentStyles__DEV;\n\n/**\n * Merges a single component's variables with another component's variables.\n */\nexport const mergeComponentVariables__PROD = (...sources: ComponentVariablesInput[]): ComponentVariablesPrepared => {\n  const initial = () => ({});\n\n  // filtering is required as some arguments can be undefined\n  const filteredSources = sources.filter(Boolean);\n\n  // a short circle to avoid calls of deepmerge()\n  if (filteredSources.length === 1) {\n    return typeof filteredSources[0] === 'function' ? filteredSources[0] : callable(filteredSources[0]);\n  }\n\n  return filteredSources.reduce<ComponentVariablesPrepared>((acc, next) => {\n    return function mergeComponentVariables(...args) {\n      const accumulatedVariables = acc(...args);\n      const fn = typeof next === 'function' ? next : callable(next);\n      const computedComponentVariables = fn(...args);\n\n      return deepmerge(accumulatedVariables, computedComponentVariables);\n    };\n  }, initial);\n};\n\nexport const mergeComponentVariables__DEV = (...sources: ComponentVariablesInput[]): ComponentVariablesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeComponentVariables__PROD(...sources);\n  }\n  const initial = () => ({});\n\n  return sources.reduce<ComponentVariablesPrepared>((acc, next) => {\n    return siteVariables => {\n      const { _debug = [], ...accumulatedVariables } = acc(siteVariables);\n      const { _debug: computedDebug = undefined, _debugId = undefined, ...computedComponentVariables } =\n        callable(next)(siteVariables) || {};\n\n      const merged = deepmerge(accumulatedVariables, computedComponentVariables);\n\n      merged._debug = _debug.concat(\n        computedDebug || {\n          resolved: computedComponentVariables,\n          debugId: _debugId,\n          input: siteVariables\n            ? siteVariables._invertedKeys && callable(next)(siteVariables._invertedKeys)\n            : callable(next)(),\n        },\n      );\n      return merged;\n    };\n  }, initial);\n};\n\nexport const mergeComponentVariables =\n  process.env.NODE_ENV === 'production' ? mergeComponentVariables__PROD : mergeComponentVariables__DEV;\n\n// ----------------------------------------\n// Theme level merge functions\n// ----------------------------------------\n\n/**\n * Site variables can safely be merged at each Provider in the tree.\n * They are flat objects and do not depend on render-time values, such as props.\n */\nexport const mergeSiteVariables__PROD = (\n  ...sources: (SiteVariablesInput | null | undefined)[]\n): SiteVariablesPrepared => {\n  const initial: SiteVariablesPrepared = {\n    fontSizes: {},\n  };\n  return deepmerge(initial, ...sources);\n};\n\nexport const mergeSiteVariables__DEV = (\n  ...sources: (SiteVariablesInput | null | undefined)[]\n): SiteVariablesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeSiteVariables__PROD(...sources);\n  }\n\n  const initial: SiteVariablesPrepared = {\n    fontSizes: {},\n  };\n\n  return sources.reduce<SiteVariablesPrepared>((acc, next) => {\n    const { _debug = [], ...accumulatedSiteVariables } = acc;\n    const { _debug: computedDebug = undefined, _invertedKeys = undefined, _debugId = undefined, ...nextSiteVariables } =\n      next || {};\n\n    const merged = deepmerge({ ...accumulatedSiteVariables, _invertedKeys: undefined }, nextSiteVariables);\n    merged._debug = _debug.concat(computedDebug || { resolved: nextSiteVariables, debugId: _debugId });\n    merged._invertedKeys = _invertedKeys || objectKeyToValues(merged, key => `siteVariables.${key}`);\n    return merged;\n  }, initial);\n};\n\nexport const mergeSiteVariables =\n  process.env.NODE_ENV === 'production' ? mergeSiteVariables__PROD : mergeSiteVariables__DEV;\n\n/**\n * Component variables can be objects, functions, or an array of these.\n * The functions must be called with the final result of siteVariables, otherwise\n *   the component variable objects would have no ability to apply siteVariables.\n * Therefore, componentVariables must be resolved by the component at render time.\n * We instead pass down call stack of component variable functions to be resolved later.\n */\n\nexport const mergeThemeVariables__PROD = (\n  ...sources: (ThemeComponentVariablesInput | null | undefined)[]\n): ThemeComponentVariablesPrepared => {\n  const displayNames = _.union(..._.map(sources, _.keys));\n  return displayNames.reduce((componentVariables, displayName) => {\n    componentVariables[displayName] = mergeComponentVariables(..._.map(sources, displayName));\n    return componentVariables;\n  }, {});\n};\n\nexport const mergeThemeVariables__DEV = (\n  ...sources: (ThemeComponentVariablesInput | null | undefined)[]\n): ThemeComponentVariablesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeThemeVariables__PROD(...sources);\n  }\n\n  const displayNames = _.union(..._.map(sources, _.keys));\n  return displayNames.reduce((componentVariables, displayName) => {\n    componentVariables[displayName] = mergeComponentVariables(\n      ..._.map(sources, source => source && withDebugId(source[displayName], source._debugId)),\n    );\n    return componentVariables;\n  }, {});\n};\n\nexport const mergeThemeVariables =\n  process.env.NODE_ENV === 'production' ? mergeThemeVariables__PROD : mergeThemeVariables__DEV;\n\n/**\n * See mergeThemeVariables() description.\n * Component styles adhere to the same pattern as component variables, except\n *   that they return style objects.\n */\nexport const mergeThemeStyles = (\n  ...sources: (ThemeComponentStylesInput | null | undefined)[]\n): ThemeComponentStylesPrepared => {\n  const initial: ThemeComponentStylesPrepared = {};\n\n  return sources.reduce<ThemeComponentStylesPrepared>((themeComponentStyles, next) => {\n    _.forEach(next, (stylesByPart, displayName) => {\n      themeComponentStyles[displayName] = mergeComponentStyles(\n        themeComponentStyles[displayName],\n        withDebugId(stylesByPart, (next as ThemeComponentStylesPrepared & { _debugId: string })._debugId),\n      );\n    });\n\n    return themeComponentStyles;\n  }, initial);\n};\n\nexport const mergeFontFaces = (...sources: FontFace[]) => {\n  return toCompactArray<FontFace>(...sources);\n};\n\nexport const mergeStaticStyles = (...sources: StaticStyle[]) => {\n  return toCompactArray<StaticStyle>(...sources);\n};\n\nexport const mergeAnimations = (...sources: { [key: string]: ThemeAnimation }[]): { [key: string]: ThemeAnimation } => {\n  return Object.assign({}, ...sources);\n};\n\nexport const mergeStyles = (...sources: ComponentSlotStyle[]) => {\n  return (...args) => {\n    return sources.reduce((acc, next) => {\n      return _.merge(acc, callable(next)(...args));\n    }, {});\n  };\n};\n\nexport const mergeThemes = (...themes: ThemeInput[]): ThemePrepared => {\n  return themes.reduce<ThemePrepared>(\n    (acc: ThemePrepared, next: ThemeInput) => {\n      if (!next) return acc;\n      const nextDebugId = next['_debugId'];\n\n      acc.siteVariables = mergeSiteVariables(acc.siteVariables, withDebugId(next.siteVariables, nextDebugId));\n\n      acc.componentVariables = mergeThemeVariables(\n        acc.componentVariables,\n        withDebugId(next.componentVariables, nextDebugId),\n      );\n\n      acc.componentStyles = mergeThemeStyles(acc.componentStyles, withDebugId(next.componentStyles, nextDebugId));\n\n      acc.fontFaces = mergeFontFaces(...acc.fontFaces, ...(next.fontFaces || []));\n\n      acc.staticStyles = mergeStaticStyles(...acc.staticStyles, ...(next.staticStyles || []));\n\n      acc.animations = mergeAnimations(acc.animations, next.animations);\n\n      return acc;\n    },\n    // .reduce() will modify \"emptyTheme\" object, so we should clone it before actual usage\n    { ...emptyTheme },\n  );\n};\n"]},"metadata":{},"sourceType":"module"}