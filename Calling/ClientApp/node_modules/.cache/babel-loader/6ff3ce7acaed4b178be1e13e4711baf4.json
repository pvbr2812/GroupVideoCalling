{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { cardBehavior } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useFluentContext, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { CardBody } from './CardBody';\nimport { CardColumn } from './CardColumn';\nimport { CardFooter } from './CardFooter';\nimport { CardHeader } from './CardHeader';\nimport { CardPreview } from './CardPreview';\nimport { CardTopControls } from './CardTopControls';\nimport { CardExpandableBox } from './CardExpandableBox';\nexport var cardClassName = 'ui-card';\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\n\nexport var Card = /*#__PURE__*/function () {\n  var Card = function Card(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Card.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var cardRef = React.useRef();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        children = props.children,\n        compact = props.compact,\n        horizontal = props.horizontal,\n        centered = props.centered,\n        size = props.size,\n        fluid = props.fluid,\n        onClick = props.onClick,\n        disabled = props.disabled,\n        expandable = props.expandable,\n        elevated = props.elevated,\n        inverted = props.inverted,\n        quiet = props.quiet,\n        selected = props.selected;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Card.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Card.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          // prevent Spacebar from scrolling\n          e.preventDefault();\n          handleClick(e);\n        },\n        focusCard: function focusCard(e) {\n          cardRef.current.focus();\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          disabled: disabled\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Card.displayName, {\n      className: cardClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          centered: centered,\n          horizontal: horizontal,\n          compact: compact,\n          size: size,\n          fluid: fluid,\n          actionable: !!onClick,\n          disabled: disabled,\n          expandable: expandable,\n          elevated: elevated,\n          inverted: inverted,\n          quiet: quiet,\n          selected: selected\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: cardRef\n    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick\n    }, unhandledProps)), children)));\n    setEnd();\n    return element;\n  };\n\n  Card.displayName = 'Card';\n  Card.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    onClick: PropTypes.func,\n    compact: PropTypes.bool,\n    horizontal: PropTypes.bool,\n    centered: PropTypes.bool,\n    size: CustomPropTypes.size,\n    fluid: PropTypes.bool,\n    expandable: PropTypes.bool,\n    disabled: PropTypes.bool,\n    elevated: PropTypes.bool,\n    quiet: PropTypes.bool,\n    inverted: PropTypes.bool,\n    selected: PropTypes.bool\n  });\n  Card.defaultProps = {\n    accessibility: cardBehavior,\n    size: 'medium'\n  };\n  Card.handledProps = Object.keys(Card.propTypes);\n  Card.Header = CardHeader;\n  Card.Body = CardBody;\n  Card.Footer = CardFooter;\n  Card.Preview = CardPreview;\n  Card.TopControls = CardTopControls;\n  Card.Column = CardColumn;\n  Card.ExpandableBox = CardExpandableBox;\n  Card.create = createShorthandFactory({\n    Component: Card\n  });\n  return Card;\n}();","map":{"version":3,"sources":["components/Card/Card.tsx"],"names":["cardClassName","Card","context","useFluentContext","setStart","setEnd","useTelemetry","cardRef","React","className","design","styles","variables","children","compact","horizontal","centered","size","fluid","onClick","disabled","expandable","elevated","inverted","quiet","selected","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","focusCard","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","actionable","mapPropsToInlineStyles","element","commonPropTypes","PropTypes","CustomPropTypes","bool","accessibility","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, cardBehavior, CardBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { commonPropTypes, createShorthandFactory, SizeValue, UIComponentProps } from '../../utils';\nimport { CardBody } from './CardBody';\nimport { CardColumn } from './CardColumn';\nimport { CardFooter } from './CardFooter';\nimport { CardHeader } from './CardHeader';\nimport { CardPreview } from './CardPreview';\nimport { CardTopControls } from './CardTopControls';\nimport { CardExpandableBox } from './CardExpandableBox';\n\nexport interface CardProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CardBehaviorProps>;\n\n  /** A primary content. */\n  children?: React.ReactNode;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CardProps>;\n\n  /** A card can be compact, without any padding inside. */\n  compact?: boolean;\n\n  /** A card will used horizontal layout. */\n  horizontal?: boolean;\n\n  /** Centers content in a card. */\n  centered?: boolean;\n\n  /** A card can be sized. */\n  size?: SizeValue;\n\n  /** A card can take up the width and height of its container. */\n  fluid?: boolean;\n\n  /** A card can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A card can be hiding part of the content and expand on hover/focus. */\n  expandable?: boolean;\n\n  /** A card can have elevation styles. */\n  elevated?: boolean;\n\n  /** A card can have inverted background styles. */\n  inverted?: boolean;\n\n  /** A card can have quiet styles. */\n  quiet?: boolean;\n\n  /** A card can show that it is currently selected or not. */\n  selected?: boolean;\n}\n\nexport type CardStylesProps = Pick<\n  CardProps,\n  | 'compact'\n  | 'horizontal'\n  | 'centered'\n  | 'size'\n  | 'fluid'\n  | 'disabled'\n  | 'expandable'\n  | 'elevated'\n  | 'inverted'\n  | 'quiet'\n  | 'selected'\n> & {\n  actionable: boolean;\n};\n\nexport const cardClassName = 'ui-card';\n\n/**\n * A Card is used to display data in sematically grouped way.\n * * @accessibility\n * By default adds `group` role ([more information available in aria documentation](https://www.w3.org/TR/wai-aria-1.1/#group)), thus it's necessary to provide `aria-roledescription` for correct widget description. [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription-property)\n * When card is actionable (i.e. has `onClick` property), use [cardFocusableBehavior](/components/card/accessibility#card-focusable). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * When card contains actionable elements, use [cardChildrenFocusableBehavior](/components/card/accessibility#card-children-focusable).\n *\n */\nexport const Card: ComponentWithAs<'div', CardProps> &\n  FluentComponentStaticProps<CardProps> & {\n    Header: typeof CardHeader;\n    Body: typeof CardBody;\n    Footer: typeof CardFooter;\n    Preview: typeof CardPreview;\n    TopControls: typeof CardPreview;\n    Column: typeof CardColumn;\n    ExpandableBox: typeof CardExpandableBox;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Card.displayName, context.telemetry);\n  setStart();\n  const cardRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    children,\n    compact,\n    horizontal,\n    centered,\n    size,\n    fluid,\n    onClick,\n    disabled,\n    expandable,\n    elevated,\n    inverted,\n    quiet,\n    selected,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Card.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: e => {\n        // prevent Spacebar from scrolling\n        e.preventDefault();\n        handleClick(e);\n      },\n      focusCard: e => {\n        cardRef.current.focus();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardStylesProps>(Card.displayName, {\n    className: cardClassName,\n    mapPropsToStyles: () => ({\n      centered,\n      horizontal,\n      compact,\n      size,\n      fluid,\n      actionable: !!onClick,\n      disabled,\n      expandable,\n      elevated,\n      inverted,\n      quiet,\n      selected,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <Ref innerRef={cardRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {children}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool,\n  expandable: PropTypes.bool,\n  disabled: PropTypes.bool,\n  elevated: PropTypes.bool,\n  quiet: PropTypes.bool,\n  inverted: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium',\n};\n\nCard.handledProps = Object.keys(Card.propTypes) as any;\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\nCard.ExpandableBox = CardExpandableBox;\n\nCard.create = createShorthandFactory({ Component: Card });\n"]},"metadata":{},"sourceType":"module"}