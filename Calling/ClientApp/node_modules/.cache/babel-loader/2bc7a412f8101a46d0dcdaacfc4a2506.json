{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @description\n * The behavior is designed for particular structure of menu item. The item consists of root element and anchor inside the root element.\n *\n * @specification\n * Adds role 'presentation' to 'wrapper' slot.\n * Adds role 'menuitem' to 'root' slot.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'menuOpen' if the component has 'hasMenu' property to 'root' slot.\n * Adds attribute 'aria-haspopup=true' to 'root' slot if 'hasMenu' property is set.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper'.\n * Triggers 'closeAllMenusAndFocusNextParentItem' action with 'ArrowRight' on 'wrapper'.\n * Triggers 'closeMenu' action with 'ArrowLeft' on 'wrapper'.\n * Triggers 'openMenu' action with 'ArrowDown' on 'wrapper', when orientation is horizontal.\n * Triggers 'openMenu' action with 'ArrowRight' on 'wrapper', when orientation is vertical.\n */\n\nexport var menuItemBehavior = function menuItemBehavior(props) {\n  var _root;\n\n  return {\n    attributes: {\n      wrapper: {\n        role: 'presentation'\n      },\n      root: (_root = {\n        role: 'menuitem',\n        tabIndex: 0,\n        'aria-expanded': props.hasMenu ? props.menuOpen || false : undefined,\n        'aria-haspopup': props.hasMenu ? 'true' : undefined,\n        'aria-label': props['aria-label'],\n        'aria-labelledby': props['aria-labelledby'],\n        'aria-describedby': props['aria-describedby'],\n        'aria-disabled': props.disabled\n      }, _root[IS_FOCUSABLE_ATTRIBUTE] = !props.disabled, _root)\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      },\n      wrapper: {\n        closeAllMenus: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        },\n        closeAllMenusAndFocusNextParentItem: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        },\n        closeMenuAndFocusTrigger: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Escape\n          }]\n        },\n        closeMenu: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        openMenu: {\n          keyCombinations: [{\n            keyCode: props.vertical ? keyboardKey.ArrowRight : keyboardKey.ArrowDown\n          }]\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["behaviors/Menu/menuItemBehavior.ts"],"names":["menuItemBehavior","attributes","wrapper","role","root","tabIndex","props","disabled","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","closeAllMenus","closeAllMenusAndFocusNextParentItem","ArrowRight","closeMenuAndFocusTrigger","Escape","closeMenu","ArrowLeft","openMenu","ArrowDown"],"mappings":"AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAMA,gBAAsD,GAAG,SAAzDA,gBAAyD,CAAA,KAAA,EAAK;AAAA,MAAA,KAAA;;AAAA,SAAK;AAC9EC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC,OADC;AAIVC,MAAAA,IAAI,GAAA,KAAA,GAAA;AACFD,QAAAA,IAAI,EADF,UAAA;AAEFE,QAAAA,QAAQ,EAFN,CAAA;AAGF,yBAAiBC,KAAK,CAALA,OAAAA,GAAgBA,KAAK,CAALA,QAAAA,IAAhBA,KAAAA,GAHf,SAAA;AAIF,yBAAiBA,KAAK,CAALA,OAAAA,GAAAA,MAAAA,GAJf,SAAA;AAKF,sBAAcA,KAAK,CALjB,YAKiB,CALjB;AAMF,2BAAmBA,KAAK,CANtB,iBAMsB,CANtB;AAOF,4BAAoBA,KAAK,CAPvB,kBAOuB,CAPvB;AAQF,yBAAiBA,KAAK,CAACC;AARrB,OAAA,EAAA,KAAA,CAAA,sBAAA,CAAA,GASwB,CAACD,KAAK,CAT9B,QAAA,EAAA,KAAA;AAJM,KADkE;AAkB9EE,IAAAA,UAAU,EAAE;AACVJ,MAAAA,IAAI,EAAE;AACJK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADV,OADI;AAMVZ,MAAAA,OAAO,EAAE;AACPa,QAAAA,aAAa,EAAE;AACbL,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADJ,SADR;AAIPE,QAAAA,mCAAmC,EAAE;AACnCN,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD;AADkB,SAJ9B;AAOPC,QAAAA,wBAAwB,EAAE;AACxBR,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACO;AAAvB,WAAD;AADO,SAPnB;AAUPC,QAAAA,SAAS,EAAE;AACTV,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACS;AAAvB,WAAD;AADR,SAVJ;AAaPC,QAAAA,QAAQ,EAAE;AACRZ,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEL,KAAK,CAALA,QAAAA,GAAiBM,WAAW,CAA5BN,UAAAA,GAA0CM,WAAW,CAACW;AAAjE,WAAD;AADT;AAbH;AANC;AAlBkE,GAAL;AAApE,CAAA","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @description\n * The behavior is designed for particular structure of menu item. The item consists of root element and anchor inside the root element.\n *\n * @specification\n * Adds role 'presentation' to 'wrapper' slot.\n * Adds role 'menuitem' to 'root' slot.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'menuOpen' if the component has 'hasMenu' property to 'root' slot.\n * Adds attribute 'aria-haspopup=true' to 'root' slot if 'hasMenu' property is set.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper'.\n * Triggers 'closeAllMenusAndFocusNextParentItem' action with 'ArrowRight' on 'wrapper'.\n * Triggers 'closeMenu' action with 'ArrowLeft' on 'wrapper'.\n * Triggers 'openMenu' action with 'ArrowDown' on 'wrapper', when orientation is horizontal.\n * Triggers 'openMenu' action with 'ArrowRight' on 'wrapper', when orientation is vertical.\n */\nexport const menuItemBehavior: Accessibility<MenuItemBehaviorProps> = props => ({\n  attributes: {\n    wrapper: {\n      role: 'presentation',\n    },\n    root: {\n      role: 'menuitem',\n      tabIndex: 0,\n      'aria-expanded': props.hasMenu ? props.menuOpen || false : undefined,\n      'aria-haspopup': props.hasMenu ? 'true' : undefined,\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-describedby': props['aria-describedby'],\n      'aria-disabled': props.disabled,\n      [IS_FOCUSABLE_ATTRIBUTE]: !props.disabled,\n    },\n  },\n\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n    wrapper: {\n      closeAllMenus: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n      closeAllMenusAndFocusNextParentItem: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n      },\n      closeMenuAndFocusTrigger: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n      closeMenu: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n      },\n      openMenu: {\n        keyCombinations: [{ keyCode: props.vertical ? keyboardKey.ArrowRight : keyboardKey.ArrowDown }],\n      },\n    },\n  },\n});\n\nexport type MenuItemBehaviorProps = {\n  /** Indicated if menu item has submenu. */\n  hasMenu?: boolean | object;\n  /** Defines if submenu is opened. */\n  menuOpen?: boolean;\n  /** If a menu item can is currently unable to be interacted with. */\n  disabled?: boolean;\n  /** If a menu displays elements vertically. */\n  vertical?: boolean;\n} & Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"]},"metadata":{},"sourceType":"module"}