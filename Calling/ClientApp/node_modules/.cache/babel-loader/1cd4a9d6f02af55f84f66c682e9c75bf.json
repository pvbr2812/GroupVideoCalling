{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Context = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Context =\n/** @class */\nfunction () {\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  function Context(parentContext) {\n    this._currentContext = parentContext ? new Map(parentContext) : new Map();\n  }\n  /** Get a key to uniquely identify a context value */\n\n\n  Context.createKey = function (description) {\n    return Symbol(description);\n  };\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n\n\n  Context.prototype.getValue = function (key) {\n    return this._currentContext.get(key);\n  };\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n\n\n  Context.prototype.setValue = function (key, value) {\n    var context = new Context(this._currentContext);\n\n    context._currentContext.set(key, value);\n\n    return context;\n  };\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n\n\n  Context.prototype.deleteValue = function (key) {\n    var context = new Context(this._currentContext);\n\n    context._currentContext.delete(key);\n\n    return context;\n  };\n  /** The root context is used as the default parent context when there is no active context */\n\n\n  Context.ROOT_CONTEXT = new Context();\n  /**\n   * This is another identifier to the root context which allows developers to easily search the\n   * codebase for direct uses of context which need to be removed in later PRs.\n   *\n   * It's existence is temporary and it should be removed when all references are fixed.\n   */\n\n  Context.TODO = Context.ROOT_CONTEXT;\n  return Context;\n}();\n\nexports.Context = Context;","map":{"version":3,"sources":["../../src/context.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,IAAA,OAAA;AAAA;AAAA,YAAA;AAmBE;;;;AAIG;AACH,WAAA,OAAA,CAAoB,aAApB,EAAwD;AACtD,SAAK,eAAL,GAAuB,aAAa,GAAG,IAAI,GAAJ,CAAQ,aAAR,CAAH,GAA4B,IAAI,GAAJ,EAAhE;AACD;AAZD;;;AACc,EAAA,OAAA,CAAA,SAAA,GAAd,UAAwB,WAAxB,EAA2C;AACzC,WAAO,MAAM,CAAC,WAAD,CAAb;AACD,GAFa;AAad;;;;AAIG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAoB;AAClB,WAAO,KAAK,eAAL,CAAqB,GAArB,CAAyB,GAAzB,CAAP;AACD,GAFD;AAIA;;;;;;AAMG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAsB,KAAtB,EAAoC;AAClC,QAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,KAAK,eAAjB,CAAhB;;AACA,IAAA,OAAO,CAAC,eAAR,CAAwB,GAAxB,CAA4B,GAA5B,EAAiC,KAAjC;;AACA,WAAO,OAAP;AACD,GAJD;AAMA;;;;;AAKG;;;AACH,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,GAAZ,EAAuB;AACrB,QAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,KAAK,eAAjB,CAAhB;;AACA,IAAA,OAAO,CAAC,eAAR,CAAwB,MAAxB,CAA+B,GAA/B;;AACA,WAAO,OAAP;AACD,GAJD;AArDA;;;AACuB,EAAA,OAAA,CAAA,YAAA,GAAe,IAAI,OAAJ,EAAf;AAEvB;;;;;AAKG;;AACoB,EAAA,OAAA,CAAA,IAAA,GAAO,OAAO,CAAC,YAAf;AAiDzB,SAAA,OAAA;AAAC,CA7DD,EAAA;;AAAa,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Context = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function Context(parentContext) {\n        this._currentContext = parentContext ? new Map(parentContext) : new Map();\n    }\n    /** Get a key to uniquely identify a context value */\n    Context.createKey = function (description) {\n        return Symbol(description);\n    };\n    /**\n     * Get a value from the context.\n     *\n     * @param key key which identifies a context value\n     */\n    Context.prototype.getValue = function (key) {\n        return this._currentContext.get(key);\n    };\n    /**\n     * Create a new context which inherits from this context and has\n     * the given key set to the given value.\n     *\n     * @param key context key for which to set the value\n     * @param value value to set for the given key\n     */\n    Context.prototype.setValue = function (key, value) {\n        var context = new Context(this._currentContext);\n        context._currentContext.set(key, value);\n        return context;\n    };\n    /**\n     * Return a new context which inherits from this context but does\n     * not contain a value for the given key.\n     *\n     * @param key context key for which to clear a value\n     */\n    Context.prototype.deleteValue = function (key) {\n        var context = new Context(this._currentContext);\n        context._currentContext.delete(key);\n        return context;\n    };\n    /** The root context is used as the default parent context when there is no active context */\n    Context.ROOT_CONTEXT = new Context();\n    /**\n     * This is another identifier to the root context which allows developers to easily search the\n     * codebase for direct uses of context which need to be removed in later PRs.\n     *\n     * It's existence is temporary and it should be removed when all references are fixed.\n     */\n    Context.TODO = Context.ROOT_CONTEXT;\n    return Context;\n}());\nexports.Context = Context;\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"script"}