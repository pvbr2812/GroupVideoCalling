{"ast":null,"code":"import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getElementType, useUnhandledProps, useFluentContext, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nexport var textClassName = 'ui-text';\n/**\n * A Text consistently styles and formats occurrences of text.\n */\n\nexport var Text = /*#__PURE__*/function () {\n  var Text = function Text(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Text.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        align = props.align,\n        atMention = props.atMention,\n        children = props.children,\n        className = props.className,\n        color = props.color,\n        content = props.content,\n        design = props.design,\n        disabled = props.disabled,\n        error = props.error,\n        important = props.important,\n        size = props.size,\n        styles = props.styles,\n        success = props.success,\n        timestamp = props.timestamp,\n        truncated = props.truncated,\n        temporary = props.temporary,\n        variables = props.variables,\n        weight = props.weight;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: Text.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Text.displayName, {\n      className: textClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          atMention: atMention,\n          color: color,\n          important: important,\n          timestamp: timestamp,\n          truncated: truncated,\n          disabled: disabled,\n          error: error,\n          success: success,\n          temporary: temporary,\n          align: align,\n          weight: weight,\n          size: size\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var unhandledProps = useUnhandledProps(Text.handledProps, props);\n    var ElementType = getElementType(props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), unhandledProps)), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  };\n\n  Text.displayName = 'Text';\n  Text.defaultProps = {\n    as: 'span'\n  };\n  Text.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    color: true\n  }), {\n    atMention: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['me'])]),\n    disabled: PropTypes.bool,\n    error: PropTypes.bool,\n    important: PropTypes.bool,\n    size: customPropTypes.size,\n    weight: PropTypes.oneOf(['light', 'semilight', 'regular', 'semibold', 'bold']),\n    success: PropTypes.bool,\n    temporary: PropTypes.bool,\n    align: customPropTypes.align,\n    timestamp: PropTypes.bool,\n    truncated: PropTypes.bool\n  });\n  Text.handledProps = Object.keys(Text.propTypes);\n  Text.create = createShorthandFactory({\n    Component: Text,\n    mappedProp: 'content'\n  });\n  return Text;\n}();","map":{"version":3,"sources":["components/Text/Text.tsx"],"names":["textClassName","Text","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","align","atMention","children","className","color","content","design","disabled","error","important","size","styles","success","timestamp","truncated","temporary","variables","weight","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","element","root","forElements","childrenExist","as","PropTypes","customPropTypes","bool","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ColorComponentProps,\n  rtlTextContainer,\n  SizeValue,\n  AlignValue,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\n\nexport interface TextProps\n  extends UIComponentProps,\n    ContentComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** At mentions can be formatted to draw users' attention. Mentions for \"me\" can be formatted to appear differently. */\n  atMention?: boolean | 'me';\n\n  /** Set as disabled Text component */\n  disabled?: boolean;\n\n  /** Set as error Text component */\n  error?: boolean;\n\n  /** The text can appear more important and draw user's attention */\n  important?: boolean;\n\n  /** The size for the Text component */\n  size?: SizeValue;\n\n  /** The weight for the Text component */\n  weight?: 'light' | 'semilight' | 'regular' | 'semibold' | 'bold';\n\n  /** Set as success Text component */\n  success?: boolean;\n\n  /** The text can signify a temporary state */\n  temporary?: boolean;\n\n  /** Align text content. */\n  align?: AlignValue;\n\n  /** Set as timestamp Text component */\n  timestamp?: boolean;\n\n  /** Truncates text as needed */\n  truncated?: boolean;\n}\n\nexport type TextStylesProps = Pick<\n  TextProps,\n  | 'atMention'\n  | 'color'\n  | 'important'\n  | 'timestamp'\n  | 'truncated'\n  | 'disabled'\n  | 'error'\n  | 'success'\n  | 'temporary'\n  | 'align'\n  | 'weight'\n  | 'size'\n>;\n\nexport const textClassName = 'ui-text';\n\n/**\n * A Text consistently styles and formats occurrences of text.\n */\nexport const Text: ComponentWithAs<'span', TextProps> & FluentComponentStaticProps<TextProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Text.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    align,\n    atMention,\n    children,\n    className,\n    color,\n    content,\n    design,\n    disabled,\n    error,\n    important,\n    size,\n    styles,\n    success,\n    timestamp,\n    truncated,\n    temporary,\n    variables,\n    weight,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Text.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TextStylesProps>(Text.displayName, {\n    className: textClassName,\n    mapPropsToStyles: () => ({\n      atMention,\n      color,\n      important,\n      timestamp,\n      truncated,\n      disabled,\n      error,\n      success,\n      temporary,\n      align,\n      weight,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(Text.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nText.displayName = 'Text';\n\nText.defaultProps = {\n  as: 'span',\n};\nText.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  atMention: PropTypes.oneOfType<any>([PropTypes.bool, PropTypes.oneOf(['me'])]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  important: PropTypes.bool,\n  size: customPropTypes.size,\n  weight: PropTypes.oneOf(['light', 'semilight', 'regular', 'semibold', 'bold']),\n  success: PropTypes.bool,\n  temporary: PropTypes.bool,\n  align: customPropTypes.align,\n  timestamp: PropTypes.bool,\n  truncated: PropTypes.bool,\n};\nText.handledProps = Object.keys(Text.propTypes) as any;\n\nText.create = createShorthandFactory({ Component: Text, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}