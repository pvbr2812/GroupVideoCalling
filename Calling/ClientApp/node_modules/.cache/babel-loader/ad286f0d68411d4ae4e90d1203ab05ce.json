{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Constants } from \"./constants\";\nimport { XML_ATTRKEY } from \"./serializer.common\";\nvar validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\n\nexport var isNode = typeof process !== \"undefined\" && !!process.version && !!process.versions && !!process.versions.node;\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param urlToCheck - The url to check\n * @returns True if the URL is HTTPS; false otherwise.\n */\n\nexport function urlIsHTTPS(urlToCheck) {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n/**\n * Encodes an URI.\n *\n * @param uri - The URI to be encoded.\n * @returns The encoded URI.\n */\n\nexport function encodeUri(uri) {\n  return encodeURIComponent(uri).replace(/!/g, \"%21\").replace(/\"/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n}\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param response - The Http Response\n * @returns The stripped version of Http Response.\n */\n\nexport function stripResponse(response) {\n  var strippedResponse = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param request - The Http Request object\n * @returns The stripped version of Http Request.\n */\n\nexport function stripRequest(request) {\n  var strippedRequest = request.clone();\n\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n\n  return strippedRequest;\n}\n/**\n * Validates the given uuid as a string\n *\n * @param uuid - The uuid as a string that needs to be validated\n * @returns True if the uuid is valid; false otherwise.\n */\n\nexport function isValidUuid(uuid) {\n  return validUuidRegex.test(uuid);\n}\n/**\n * Generated UUID\n *\n * @returns RFC4122 v4 UUID.\n */\n\nexport function generateUuid() {\n  return uuidv4();\n}\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param promiseFactories - An array of promise factories(A function that return a promise)\n * @param kickstart - Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n * @returns A chain of resolved or rejected promises\n */\n\nexport function executePromisesSequentially(promiseFactories, kickstart) {\n  var result = Promise.resolve(kickstart);\n  promiseFactories.forEach(function (promiseFactory) {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\n\nexport function delay(t, value) {\n  return new Promise(function (resolve) {\n    return setTimeout(function () {\n      return resolve(value);\n    }, t);\n  });\n}\n/**\n * Converts a Promise to a callback.\n * @param promise - The Promise to be converted to a callback\n * @returns A function that takes the callback `(cb: Function) => void`\n * @deprecated generated code should instead depend on responseToBody\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function promiseToCallback(promise) {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  } // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  return function (cb) {\n    promise.then(function (data) {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      return cb(undefined, data);\n    }).catch(function (err) {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      cb(err);\n    });\n  };\n}\n/**\n * Converts a Promise to a service callback.\n * @param promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns A function that takes the service callback (cb: ServiceCallback<T>): void\n */\n\nexport function promiseToServiceCallback(promise) {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n\n  return function (cb) {\n    promise.then(function (data) {\n      return process.nextTick(cb, undefined, data.parsedBody, data.request, data);\n    }).catch(function (err) {\n      process.nextTick(cb, err);\n    });\n  };\n}\nexport function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n  var _a, _b, _c;\n\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return _a = {}, _a[elementName] = obj, _a;\n  }\n\n  var result = (_b = {}, _b[elementName] = obj, _b);\n  result[XML_ATTRKEY] = (_c = {}, _c[xmlNamespaceKey] = xmlNamespace, _c);\n  return result;\n}\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param targetCtor - The target object on which the properties need to be applied.\n * @param sourceCtors - An array of source objects from which the properties need to be taken.\n */\n\nexport function applyMixins(targetCtorParam, sourceCtors) {\n  var castTargetCtorParam = targetCtorParam;\n  sourceCtors.forEach(function (sourceCtor) {\n    Object.getOwnPropertyNames(sourceCtor.prototype).forEach(function (name) {\n      castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];\n    });\n  });\n}\nvar validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @returns `true` if valid, `false` otherwise.\n */\n\nexport function isDuration(value) {\n  return validateISODuration.test(value);\n}\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\n\nexport function replaceAll(value, searchValue, replaceValue) {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value - Any entity\n * @returns true is it is primitive type, false otherwise.\n */\n\nexport function isPrimitiveType(value) {\n  return typeof value !== \"object\" && typeof value !== \"function\" || value === null;\n}\nexport function getEnvironmentValue(name) {\n  if (process.env[name]) {\n    return process.env[name];\n  } else if (process.env[name.toLowerCase()]) {\n    return process.env[name.toLowerCase()];\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../src/util/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { Constants } from \"./constants\";\nimport { XML_ATTRKEY } from \"./serializer.common\";\n\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  !!process.version &&\n  !!process.versions &&\n  !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param urlToCheck - The url to check\n * @returns True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param uri - The URI to be encoded.\n * @returns The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param response - The Http Response\n * @returns The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param request - The Http Request object\n * @returns The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResourceLike): WebResourceLike {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param uuid - The uuid as a string that needs to be validated\n * @returns True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Generated UUID\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param promiseFactories - An array of promise factories(A function that return a promise)\n * @param kickstart - Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n * @returns A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(\n  promiseFactories: Array<any>,\n  kickstart: unknown\n): Promise<any> {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T | void> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param err - The error occurred if any, while executing the request; otherwise null.\n   * @param result - The deserialized response body if an error did not occur.\n   * @param request - The raw/actual request sent to the server if an error did not occur.\n   * @param response - The raw/actual response from the server if an error did not occur.\n   */\n  (\n    err: Error | RestError | null,\n    result?: TResult,\n    request?: WebResourceLike,\n    response?: HttpOperationResponse\n  ): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param promise - The Promise to be converted to a callback\n * @returns A function that takes the callback `(cb: Function) => void`\n * @deprecated generated code should instead depend on responseToBody\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function promiseToCallback(promise: Promise<any>): (cb: Function) => void {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (cb: Function): void => {\n    promise\n      .then((data: any) => {\n        // eslint-disable-next-line promise/no-callback-in-promise\n        return cb(undefined, data);\n      })\n      .catch((err: Error) => {\n        // eslint-disable-next-line promise/no-callback-in-promise\n        cb(err);\n      });\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(\n  promise: Promise<HttpOperationResponse>\n): (cb: ServiceCallback<T>) => void {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise\n      .then((data: HttpOperationResponse) => {\n        return process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n      })\n      .catch((err: Error) => {\n        process.nextTick(cb, err);\n      });\n  };\n}\n\nexport function prepareXMLRootList(\n  obj: unknown,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string\n): { [s: string]: any } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param targetCtor - The target object on which the properties need to be applied.\n * @param sourceCtors - An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtorParam: unknown, sourceCtors: any[]): void {\n  const castTargetCtorParam = targetCtorParam as {\n    prototype: Record<string, unknown>;\n  };\n  sourceCtors.forEach((sourceCtor) => {\n    Object.getOwnPropertyNames(sourceCtor.prototype).forEach((name) => {\n      castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @returns `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param value - The value to search and replace in.\n * @param searchValue - The value to search for in the value argument.\n * @param replaceValue - The value to replace searchValue with in the value argument.\n * @returns The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(\n  value: string | undefined,\n  searchValue: string,\n  replaceValue: string\n): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given entity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value - Any entity\n * @returns true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: unknown): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}\n\nexport function getEnvironmentValue(name: string): string | undefined {\n  if (process.env[name]) {\n    return process.env[name];\n  } else if (process.env[name.toLowerCase()]) {\n    return process.env[name.toLowerCase()];\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}