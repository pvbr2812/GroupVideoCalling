{"ast":null,"code":"import * as React from 'react'; // Stops React Context propagation\n// https://github.com/facebook/react/blob/95bd7aad7daa80c381faa3215c80b0906ab5ead5/packages/react-reconciler/src/ReactFiberBeginWork.js#L2656\n\nvar calculateChangedBits = function calculateChangedBits() {\n  return 0;\n};\n\nvar createProvider = function createProvider(Original) {\n  var Provider = function Provider(props) {\n    var listeners = React.useRef([]); // We call listeners in render intentionally. Listeners are not technically pure, but\n    // otherwise we can't get benefits from concurrent mode.\n    //\n    // We make sure to work with double or more invocation of listeners.\n\n    listeners.current.forEach(function (listener) {\n      return listener(props.value);\n    }); // Disables updates propogation for React Context as `value` is always shallow equal\n\n    var subscribe = React.useCallback(function (listener) {\n      listeners.current.push(listener);\n\n      var unsubscribe = function unsubscribe() {\n        var index = listeners.current.indexOf(listener);\n        listeners.current.splice(index, 1);\n      };\n\n      return unsubscribe;\n    }, []);\n    return /*#__PURE__*/React.createElement(Original, {\n      value: {\n        subscribe: subscribe,\n        value: props.value\n      }\n    }, props.children);\n  };\n  /* istanbul ignore else */\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    Provider.displayName = 'ContextSelector.Provider';\n  }\n\n  return Provider;\n};\n\nexport var createContext = function createContext(defaultValue, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? true : _options$strict;\n  var context = /*#__PURE__*/React.createContext({\n    get subscribe() {\n      if (strict) {\n        /* istanbul ignore next */\n        throw new Error(process.env.NODE_ENV === 'production' ? '' : \"Please use <Provider /> component from \\\"@fluentui/react-context-selector\\\"\");\n      }\n      /* istanbul ignore next */\n\n\n      return function () {\n        return function () {};\n      };\n    },\n\n    value: defaultValue\n  }, calculateChangedBits);\n  context.Provider = createProvider(context.Provider); // We don't support Consumer API\n\n  delete context.Consumer;\n  return context;\n};","map":{"version":3,"sources":["createContext.ts"],"names":["calculateChangedBits","createProvider","Provider","listeners","React","listener","props","subscribe","unsubscribe","index","value","process","createContext","options","strict","context","defaultValue"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA,C,CAGA;AACA;;AACA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAA;AAAA,SAAA,CAAA;AAA7B,CAAA;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,QAAA,EAA0D;AAC/E,MAAMC,QAA8C,GAAG,SAAjDA,QAAiD,CAAA,KAAA,EAAS;AAC9D,QAAMC,SAAS,GAAGC,KAAK,CAALA,MAAAA,CAD4C,EAC5CA,CAAlB,CAD8D,CAG9D;AACA;AACA;AACA;;AACAD,IAAAA,SAAS,CAATA,OAAAA,CAAAA,OAAAA,CAA0B,UAAA,QAAA,EAAQ;AAAA,aAAIE,QAAQ,CAACC,KAAK,CAAlB,KAAY,CAAZ;AAP4B,KAO9DH,EAP8D,CAS9D;;AACA,QAAMI,SAAS,GAAG,KAAK,CAAL,WAAA,CAAkB,UAAA,QAAA,EAAsC;AACxEJ,MAAAA,SAAS,CAATA,OAAAA,CAAAA,IAAAA,CAAAA,QAAAA;;AAEA,UAAMK,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,YAAMC,KAAK,GAAGN,SAAS,CAATA,OAAAA,CAAAA,OAAAA,CAAd,QAAcA,CAAd;AACAA,QAAAA,SAAS,CAATA,OAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AAFF,OAAA;;AAKA,aAAA,WAAA;AARgB,KAAA,EAAlB,EAAkB,CAAlB;AAWA,WAAA,aAAO,KAAK,CAAL,aAAA,CAAA,QAAA,EAA8B;AAAEO,MAAAA,KAAK,EAAE;AAAEH,QAAAA,SAAS,EAAX,SAAA;AAAaG,QAAAA,KAAK,EAAEJ,KAAK,CAACI;AAA1B;AAAT,KAA9B,EAA4EJ,KAAK,CAAxF,QAAO,CAAP;AArBF,GAAA;AAwBA;;;AACA,MAAIK,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCT,IAAAA,QAAQ,CAARA,WAAAA,GAAAA,0BAAAA;AACD;;AAED,SAAA,QAAA;AA9BF,CAAA;;AAiCA,OAAO,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAAA,YAAA,EAAA,OAAA,EAAoF;AAAA,MAAvDC,OAAuD,KAAA,KAAA,CAAA,EAAA;AAAvDA,IAAAA,OAAuD,GAAvB,EAAhCA;AAAuD;;AAAA,MAAA,QAAA,GAAA,OAAA;AAAA,MAAA,eAAA,GAAA,QAAA,CAAA,MAAA;AAAA,MACvGC,MADuG,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,eAAA;AAG/G,MAAMC,OAAO,GAAA,aAAG,KAAK,CAAL,aAAA,CACd;AACE,QAAA,SAAA,GAAgB;AACd,UAAA,MAAA,EAAY;AACV;AACA,cAAM,IAAA,KAAA,CACJJ,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,GAAAA,EAAAA,GADF,6EAAM,CAAN;AAKD;AAED;;;AACA,aAAO,YAAA;AAAA,eAAM,YAAM,CAAZ,CAAA;AAAP,OAAA;AAZJ,KAAA;;AAcED,IAAAA,KAAK,EAAEM;AAdT,GADc,EAAhB,oBAAgB,CAAhB;AAmBAD,EAAAA,OAAO,CAAPA,QAAAA,GAAmBd,cAAc,CAAQc,OAAO,CAtB+D,QAsB9E,CAAjCA,CAtB+G,CAwB/G;;AACA,SAAOA,OAAO,CAAd,QAAA;AAEA,SAAA,OAAA;AA3BK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Context, ContextListener, ContextValue, CreateContextOptions } from './types';\n\n// Stops React Context propagation\n// https://github.com/facebook/react/blob/95bd7aad7daa80c381faa3215c80b0906ab5ead5/packages/react-reconciler/src/ReactFiberBeginWork.js#L2656\nconst calculateChangedBits = () => 0;\n\nconst createProvider = <Value>(Original: React.Provider<ContextValue<Value>>) => {\n  const Provider: React.FC<React.ProviderProps<Value>> = props => {\n    const listeners = React.useRef<ContextListener<Value>[]>([]);\n\n    // We call listeners in render intentionally. Listeners are not technically pure, but\n    // otherwise we can't get benefits from concurrent mode.\n    //\n    // We make sure to work with double or more invocation of listeners.\n    listeners.current.forEach(listener => listener(props.value));\n\n    // Disables updates propogation for React Context as `value` is always shallow equal\n    const subscribe = React.useCallback((listener: ContextListener<Value>) => {\n      listeners.current.push(listener);\n\n      const unsubscribe = () => {\n        const index = listeners.current.indexOf(listener);\n        listeners.current.splice(index, 1);\n      };\n\n      return unsubscribe;\n    }, []);\n\n    return React.createElement(Original, { value: { subscribe, value: props.value } }, props.children);\n  };\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    Provider.displayName = 'ContextSelector.Provider';\n  }\n\n  return Provider;\n};\n\nexport const createContext = <Value>(defaultValue: Value, options: CreateContextOptions = {}): Context<Value> => {\n  const { strict = true } = options;\n\n  const context = React.createContext<ContextValue<Value>>(\n    {\n      get subscribe() {\n        if (strict) {\n          /* istanbul ignore next */\n          throw new Error(\n            process.env.NODE_ENV === 'production'\n              ? ''\n              : `Please use <Provider /> component from \"@fluentui/react-context-selector\"`,\n          );\n        }\n\n        /* istanbul ignore next */\n        return () => () => {};\n      },\n      value: defaultValue,\n    },\n    calculateChangedBits,\n  );\n  context.Provider = createProvider<Value>(context.Provider) as any;\n\n  // We don't support Consumer API\n  delete context.Consumer;\n\n  return (context as unknown) as Context<Value>;\n};\n"]},"metadata":{},"sourceType":"module"}