{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport { accordionContentBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { useTelemetry, useFluentContext, getElementType, useAccessibility, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var accordionContentClassName = 'ui-accordion__content';\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\n\nexport var AccordionContent = /*#__PURE__*/function () {\n  var AccordionContent = function AccordionContent(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(AccordionContent.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        content = props.content,\n        accordionTitleId = props.accordionTitleId,\n        active = props.active,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: AccordionContent.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          accordionTitleId: accordionTitleId\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var _useStyles = useStyles(AccordionContent.displayName, {\n      className: accordionContentClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          active: active\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick\n    }, unhandledProps)), rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    })), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  };\n\n  AccordionContent.displayName = 'AccordionContent';\n  AccordionContent.shorthandConfig = {\n    mappedProp: 'content'\n  };\n  AccordionContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    accordionTitleId: PropTypes.string,\n    active: PropTypes.bool,\n    onClick: PropTypes.func\n  });\n  AccordionContent.defaultProps = {\n    accessibility: accordionContentBehavior,\n    as: 'dd'\n  };\n  AccordionContent.handledProps = Object.keys(AccordionContent.propTypes);\n  AccordionContent.create = createShorthandFactory({\n    Component: AccordionContent,\n    mappedProp: 'content'\n  });\n  return AccordionContent;\n}();","map":{"version":3,"sources":["components/Accordion/AccordionContent.tsx"],"names":["accordionContentClassName","AccordionContent","context","useFluentContext","setStart","setEnd","useTelemetry","children","content","accordionTitleId","active","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","handleClick","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","onClick","forElements","childrenExist","mappedProp","commonPropTypes","PropTypes","func","accessibility","as","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { accordionContentBehavior, Accessibility, AccordionContentBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\n\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useAccessibility,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionContentBehaviorProps>;\n\n  /** Id of the title it belongs to. */\n  accordionTitleId?: string;\n\n  /** Whether or not the content is visible. */\n  active?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionContentProps>;\n}\n\nexport const accordionContentClassName = 'ui-accordion__content';\n\nexport type AccordionContentStylesProps = Required<Pick<AccordionContentProps, 'active'>>;\n\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\nexport const AccordionContent: ComponentWithAs<'dd', AccordionContentProps> &\n  FluentComponentStaticProps<AccordionContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AccordionContent.displayName, context.telemetry);\n\n  setStart();\n  const { children, content, accordionTitleId, active, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionContent.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: AccordionContent.displayName,\n    mapPropsToBehavior: () => ({\n      accordionTitleId,\n    }),\n    rtl: context.rtl,\n  });\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const { classes } = useStyles<AccordionContentStylesProps>(AccordionContent.displayName, {\n    className: accordionContentClassName,\n    mapPropsToStyles: () => ({\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordionContent.displayName = 'AccordionContent';\n\nAccordionContent.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAccordionContent.defaultProps = {\n  accessibility: accordionContentBehavior,\n  as: 'dd',\n};\n\nAccordionContent.handledProps = Object.keys(AccordionContent.propTypes) as any;\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content',\n});\n"]},"metadata":{},"sourceType":"module"}