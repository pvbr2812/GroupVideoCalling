{"ast":null,"code":"import { callable, mergeComponentVariables, withDebugId } from '@fluentui/styles';\nvar variablesCache = new WeakMap();\nexport var resolveVariables = function resolveVariables(displayNames, theme, variables, enabledVariablesCaching) {\n  var componentThemeVariables; // Filter out components that doesn't have defined variables in theme\n\n  var effectiveDisplayNames = displayNames.filter(function (displayName) {\n    return !!theme.componentVariables[displayName];\n  }); //\n  // Simple caching model, works only if there is no `props.variables`\n  // Resolves variables for this component, cache the result in provider\n  //\n\n  if (enabledVariablesCaching) {\n    if (!variablesCache.has(theme)) {\n      variablesCache.set(theme, {});\n    }\n\n    var variablesThemeCache = variablesCache.get(theme) || {}; // const displayNames = { Foo: variables, Bar: undefined, Baz: undefined }\n    // This allows to avoid creating useless cache entries for `Bar` & `Baz` components\n\n    var handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];\n\n    if (!variablesThemeCache[handlingDisplayName]) {\n      // A short circle to avoid additional merging for non-composed components\n      if (effectiveDisplayNames.length === 1) {\n        variablesThemeCache[handlingDisplayName] = callable(theme.componentVariables[handlingDisplayName])(theme.siteVariables);\n      } else {\n        variablesThemeCache[handlingDisplayName] = mergeComponentVariables.apply(void 0, effectiveDisplayNames.map(function (displayName) {\n          return theme.componentVariables[displayName];\n        }))(theme.siteVariables);\n      }\n\n      variablesCache.set(theme, variablesThemeCache);\n    }\n\n    componentThemeVariables = variablesThemeCache[handlingDisplayName];\n  } else if (effectiveDisplayNames.length === 1) {\n    componentThemeVariables = callable(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};\n  } else {\n    componentThemeVariables = mergeComponentVariables.apply(void 0, effectiveDisplayNames.map(function (displayName) {\n      return theme.componentVariables[displayName];\n    }))(theme.siteVariables);\n  }\n\n  if (variables === undefined) {\n    return componentThemeVariables;\n  }\n\n  return mergeComponentVariables(componentThemeVariables, withDebugId(variables, 'props.variables'))(theme.siteVariables);\n};","map":{"version":3,"sources":["styles/resolveVariables.ts"],"names":["variablesCache","resolveVariables","effectiveDisplayNames","theme","variablesThemeCache","handlingDisplayName","callable","componentThemeVariables","variables","mergeComponentVariables","withDebugId"],"mappings":"AAAA,SAAA,QAAA,EAAA,uBAAA,EAAA,WAAA,QAAA,kBAAA;AASA,IAAMA,cAAc,GAAG,IAAvB,OAAuB,EAAvB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,YAAA,EAAA,KAAA,EAAA,SAAA,EAAA,uBAAA,EAKD;AAC7B,MAD6B,uBAC7B,CAD6B,CAG7B;;AACA,MAAMC,qBAAqB,GAAG,YAAY,CAAZ,MAAA,CAAoB,UAAA,WAAA,EAAW;AAAA,WAAI,CAAC,CAACC,KAAK,CAALA,kBAAAA,CAAN,WAAMA,CAAN;AAJhC,GAIC,CAA9B,CAJ6B,CAM7B;AACA;AACA;AACA;;AAEA,MAAA,uBAAA,EAA6B;AAC3B,QAAI,CAACH,cAAc,CAAdA,GAAAA,CAAL,KAAKA,CAAL,EAAgC;AAC9BA,MAAAA,cAAc,CAAdA,GAAAA,CAAAA,KAAAA,EAAAA,EAAAA;AACD;;AAED,QAAMI,mBAAmB,GAAGJ,cAAc,CAAdA,GAAAA,CAAAA,KAAAA,KALD,EAK3B,CAL2B,CAO3B;AACA;;AACA,QAAMK,mBAAmB,GAAGH,qBAAqB,CAACA,qBAAqB,CAArBA,MAAAA,GAAlD,CAAiD,CAAjD;;AAEA,QAAI,CAACE,mBAAmB,CAAxB,mBAAwB,CAAxB,EAA+C;AAC7C;AACA,UAAIF,qBAAqB,CAArBA,MAAAA,KAAJ,CAAA,EAAwC;AACtCE,QAAAA,mBAAmB,CAAnBA,mBAAmB,CAAnBA,GAA2CE,QAAQ,CAACH,KAAK,CAALA,kBAAAA,CAATG,mBAASH,CAAD,CAARG,CACzCH,KAAK,CADPC,aAA2CE,CAA3CF;AADF,OAAA,MAIO;AACLA,QAAAA,mBAAmB,CAAnBA,mBAAmB,CAAnBA,GAA2C,uBAAuB,CAAvB,KAAA,CAAA,KAAA,CAAA,EACtC,qBAAqB,CAArB,GAAA,CAA0B,UAAA,WAAA,EAAW;AAAA,iBAAID,KAAK,CAALA,kBAAAA,CAAJ,WAAIA,CAAJ;AADC,SACtC,CADsC,EAEzCA,KAAK,CAFPC,aAA2C,CAA3CA;AAGD;;AAEDJ,MAAAA,cAAc,CAAdA,GAAAA,CAAAA,KAAAA,EAAAA,mBAAAA;AACD;;AAEDO,IAAAA,uBAAuB,GAAGH,mBAAmB,CAA7CG,mBAA6C,CAA7CA;AA1BF,GAAA,MA2BO,IAAIL,qBAAqB,CAArBA,MAAAA,KAAJ,CAAA,EAAwC;AAC7CK,IAAAA,uBAAuB,GAAGD,QAAQ,CAACH,KAAK,CAALA,kBAAAA,CAAyBD,qBAAqB,CAAvDI,CAAuD,CAA9CH,CAAD,CAARG,CAA6DH,KAAK,CAAlEG,aAAAA,KAA1BC,EAAAA;AADK,GAAA,MAEA;AACLA,IAAAA,uBAAuB,GAAG,uBAAuB,CAAvB,KAAA,CAAA,KAAA,CAAA,EACrB,qBAAqB,CAArB,GAAA,CAA0B,UAAA,WAAA,EAAW;AAAA,aAAIJ,KAAK,CAALA,kBAAAA,CAAJ,WAAIA,CAAJ;AADhB,KACrB,CADqB,EAExBA,KAAK,CAFPI,aAA0B,CAA1BA;AAGD;;AAED,MAAIC,SAAS,KAAb,SAAA,EAA6B;AAC3B,WAAA,uBAAA;AACD;;AAED,SAAOC,uBAAuB,CAAA,uBAAA,EAE5BC,WAAW,CAAA,SAAA,EAFND,iBAEM,CAFiB,CAAvBA,CAGLN,KAAK,CAHP,aAAOM,CAAP;AAvDK,CAAA","sourcesContent":["import {\n  callable,\n  ComponentVariablesInput,\n  ComponentVariablesObject,\n  mergeComponentVariables,\n  ThemePrepared,\n  withDebugId,\n} from '@fluentui/styles';\n\nconst variablesCache = new WeakMap<ThemePrepared, Record<string, ComponentVariablesObject>>();\n\nexport const resolveVariables = (\n  displayNames: string[],\n  theme: ThemePrepared,\n  variables: ComponentVariablesInput | undefined,\n  enabledVariablesCaching: boolean | undefined,\n): ComponentVariablesObject => {\n  let componentThemeVariables: ComponentVariablesObject;\n\n  // Filter out components that doesn't have defined variables in theme\n  const effectiveDisplayNames = displayNames.filter(displayName => !!theme.componentVariables[displayName]);\n\n  //\n  // Simple caching model, works only if there is no `props.variables`\n  // Resolves variables for this component, cache the result in provider\n  //\n\n  if (enabledVariablesCaching) {\n    if (!variablesCache.has(theme)) {\n      variablesCache.set(theme, {});\n    }\n\n    const variablesThemeCache = variablesCache.get(theme) || {};\n\n    // const displayNames = { Foo: variables, Bar: undefined, Baz: undefined }\n    // This allows to avoid creating useless cache entries for `Bar` & `Baz` components\n    const handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];\n\n    if (!variablesThemeCache[handlingDisplayName]) {\n      // A short circle to avoid additional merging for non-composed components\n      if (effectiveDisplayNames.length === 1) {\n        variablesThemeCache[handlingDisplayName] = callable(theme.componentVariables[handlingDisplayName])(\n          theme.siteVariables,\n        );\n      } else {\n        variablesThemeCache[handlingDisplayName] = mergeComponentVariables(\n          ...effectiveDisplayNames.map(displayName => theme.componentVariables[displayName]),\n        )(theme.siteVariables);\n      }\n\n      variablesCache.set(theme, variablesThemeCache);\n    }\n\n    componentThemeVariables = variablesThemeCache[handlingDisplayName];\n  } else if (effectiveDisplayNames.length === 1) {\n    componentThemeVariables = callable(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};\n  } else {\n    componentThemeVariables = mergeComponentVariables(\n      ...effectiveDisplayNames.map(displayName => theme.componentVariables[displayName]),\n    )(theme.siteVariables);\n  }\n\n  if (variables === undefined) {\n    return componentThemeVariables;\n  }\n\n  return mergeComponentVariables(\n    componentThemeVariables,\n    withDebugId(variables, 'props.variables'),\n  )(theme.siteVariables);\n};\n"]},"metadata":{},"sourceType":"module"}