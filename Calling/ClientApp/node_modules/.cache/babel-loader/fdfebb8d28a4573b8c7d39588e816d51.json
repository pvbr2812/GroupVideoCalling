{"ast":null,"code":"import * as React from 'react';\nimport { useFluentContext } from '../context';\nimport { getStyles } from '../styles/getStyles';\nexport var useStyles = function useStyles(displayName, options) {\n  var _composeOptions$mapPr;\n\n  var context = useFluentContext();\n  var _options$className = options.className,\n      className = _options$className === void 0 ? process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰' : _options$className,\n      composeOptions = options.composeOptions,\n      _options$mapPropsToSt = options.mapPropsToStyles,\n      mapPropsToStyles = _options$mapPropsToSt === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToSt,\n      _options$mapPropsToIn = options.mapPropsToInlineStyles,\n      mapPropsToInlineStyles = _options$mapPropsToIn === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToIn,\n      _options$unstable_pro = options.unstable_props,\n      unstable_props = _options$unstable_pro === void 0 ? {} : _options$unstable_pro,\n      _options$rtl = options.rtl,\n      rtl = _options$rtl === void 0 ? false : _options$rtl;\n  var componentStylesProps = mapPropsToStyles(); // `composeProps` should include all props including stylesProps as they can contain state\n\n  var composeProps = Object.assign({}, unstable_props, componentStylesProps);\n  var composeStylesProps = composeOptions == null ? void 0 : (_composeOptions$mapPr = composeOptions.mapPropsToStylesPropsChain) == null ? void 0 : _composeOptions$mapPr.reduce(function (acc, fn) {\n    return Object.assign({}, acc, fn(composeProps));\n  }, {}); // Stores debug information for component.\n\n  var debug = React.useRef({\n    fluentUIDebug: null\n  });\n\n  var _getStyles = getStyles({\n    // Input values\n    allDisplayNames: (composeOptions == null ? void 0 : composeOptions.displayNames) || [displayName],\n    className: (composeOptions == null ? void 0 : composeOptions.className) || className,\n    primaryDisplayName: (composeOptions == null ? void 0 : composeOptions.displayName) || displayName,\n    componentProps: Object.assign({}, componentStylesProps, composeStylesProps),\n    inlineStylesProps: mapPropsToInlineStyles(),\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl: rtl,\n    saveDebug: function saveDebug(fluentUIDebug) {\n      return debug.current = {\n        fluentUIDebug: fluentUIDebug\n      };\n    },\n    theme: context.theme,\n    performance: context.performance,\n    telemetry: context.telemetry\n  }),\n      classes = _getStyles.classes,\n      resolvedStyles = _getStyles.styles;\n\n  return {\n    classes: classes,\n    styles: resolvedStyles\n  };\n};","map":{"version":3,"sources":["hooks/useStyles.ts"],"names":["useStyles","context","useFluentContext","className","process","composeOptions","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","rtl","options","componentStylesProps","composeProps","composeStylesProps","fn","debug","fluentUIDebug","classes","resolvedStyles","getStyles","allDisplayNames","primaryDisplayName","componentProps","inlineStylesProps","disableAnimations","renderer","saveDebug","theme","performance","telemetry","styles"],"mappings":"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","sourcesContent":["import { ComposePreparedOptions } from '@fluentui/react-compose';\nimport { ComponentSlotStyle, ComponentSlotStylesResolved, ComponentVariablesInput, DebugData } from '@fluentui/styles';\nimport * as React from 'react';\n\nimport { useFluentContext } from '../context';\nimport { ComponentDesignProp, ComponentSlotClasses, PrimitiveProps } from '../styles/types';\nimport { getStyles } from '../styles/getStyles';\n\ntype UseStylesOptions<StyleProps extends PrimitiveProps> = {\n  /** A classname that will be added by default to all instances of a component on the `root` slot. */\n  className?: string;\n\n  /** An options from compose(), should be used only if component was created by `compose()`. */\n  composeOptions?: ComposePreparedOptions;\n\n  /**\n   * A mapping from component's props to styles functions props. Can be only primitive types as they will be used for\n   * cache keys.\n   */\n  mapPropsToStyles?: () => StyleProps;\n\n  /**\n   * A set props of that contain mapping for props that perform inline styles overrides, for example `styles` or\n   * `variables`.\n   */\n  mapPropsToInlineStyles?: () => InlineStyleProps<StyleProps>;\n\n  /**\n   * All components props, should be used only if component was created by `compose()`. Will be replaced in future with\n   * better approach.\n   */\n  unstable_props?: Record<string, any>;\n\n  /** A current mode for text direction (ltr or rtl). */\n  rtl?: boolean;\n};\n\nexport type UseStylesResult = {\n  classes: ComponentSlotClasses;\n  styles: ComponentSlotStylesResolved;\n};\n\ntype InlineStyleProps<StyleProps> = {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  design?: ComponentDesignProp;\n\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<StyleProps, any>; // TODO: see if we can improve it\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n};\n\nexport const useStyles = <StyleProps extends PrimitiveProps>(\n  displayName: string,\n  options: UseStylesOptions<StyleProps>,\n): UseStylesResult => {\n  const context = useFluentContext();\n\n  const {\n    className = process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n    composeOptions,\n    mapPropsToStyles = () => ({} as StyleProps),\n    mapPropsToInlineStyles = () => ({} as InlineStyleProps<StyleProps>),\n    unstable_props = {},\n    rtl = false,\n  } = options;\n  const componentStylesProps = mapPropsToStyles();\n\n  // `composeProps` should include all props including stylesProps as they can contain state\n  const composeProps = { ...unstable_props, ...componentStylesProps };\n  const composeStylesProps = composeOptions?.mapPropsToStylesPropsChain?.reduce(\n    (acc, fn) => ({ ...acc, ...fn(composeProps) }),\n    {},\n  );\n\n  // Stores debug information for component.\n  const debug = React.useRef<{ fluentUIDebug: DebugData | null }>({ fluentUIDebug: null });\n  const { classes, styles: resolvedStyles } = getStyles({\n    // Input values\n    allDisplayNames: composeOptions?.displayNames || [displayName],\n    className: composeOptions?.className || className,\n    primaryDisplayName: composeOptions?.displayName || displayName,\n    componentProps: {\n      ...componentStylesProps,\n      ...composeStylesProps,\n    },\n    inlineStylesProps: mapPropsToInlineStyles(),\n\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl,\n    saveDebug: fluentUIDebug => (debug.current = { fluentUIDebug }),\n    theme: context.theme,\n    performance: context.performance,\n    telemetry: context.telemetry,\n  });\n\n  return { classes, styles: resolvedStyles };\n};\n"]},"metadata":{},"sourceType":"module"}