{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { Constants } from \"../util/constants\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n\nfunction getRuntimeInfo() {\n  var msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo, keySeparator, valueSeparator) {\n  if (keySeparator === void 0) {\n    keySeparator = \" \";\n  }\n\n  if (valueSeparator === void 0) {\n    valueSeparator = \"/\";\n  }\n\n  return telemetryInfo.map(function (info) {\n    var value = info.value ? \"\" + valueSeparator + info.value : \"\";\n    return \"\" + info.key + value;\n  }).join(keySeparator);\n}\n\nexport var getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\nexport function getDefaultUserAgentValue() {\n  var runtimeInfo = getRuntimeInfo();\n  var platformSpecificData = getPlatformSpecificData();\n  var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\nexport function userAgentPolicy(userAgentData) {\n  var key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? getDefaultUserAgentKey() : userAgentData.key;\n  var value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;\n  return {\n    create: function (nextPolicy, options) {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nvar UserAgentPolicy =\n/** @class */\nfunction (_super) {\n  __extends(UserAgentPolicy, _super);\n\n  function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {\n    var _this = _super.call(this, _nextPolicy, _options) || this;\n\n    _this._nextPolicy = _nextPolicy;\n    _this._options = _options;\n    _this.headerKey = headerKey;\n    _this.headerValue = headerValue;\n    return _this;\n  }\n\n  UserAgentPolicy.prototype.sendRequest = function (request) {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  };\n\n  UserAgentPolicy.prototype.addUserAgentHeader = function (request) {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  };\n\n  return UserAgentPolicy;\n}(BaseRequestPolicy);\n\nexport { UserAgentPolicy };","map":{"version":3,"sources":["../../../src/policies/userAgentPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentOptions {\n  /*\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(\n  telemetryInfo: TelemetryInfo[],\n  keySeparator = \" \",\n  valueSeparator = \"/\"\n): string {\n  return telemetryInfo\n    .map((info) => {\n      const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n      return `${info.key}${value}`;\n    })\n    .join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string =\n    !userAgentData || userAgentData.key === undefined || userAgentData.key === null\n      ? getDefaultUserAgentKey()\n      : userAgentData.key;\n  const value: string =\n    !userAgentData || userAgentData.value === undefined || userAgentData.value === null\n      ? getDefaultUserAgentValue()\n      : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(\n    readonly _nextPolicy: RequestPolicy,\n    readonly _options: RequestPolicyOptions,\n    protected headerKey: string,\n    protected headerValue: string\n  ) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResourceLike): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}