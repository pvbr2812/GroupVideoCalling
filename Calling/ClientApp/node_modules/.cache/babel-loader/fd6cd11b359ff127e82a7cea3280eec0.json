{"ast":null,"code":"import _inRange from \"lodash/inRange\";\nimport _first from \"lodash/first\";\nimport _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport _some from \"lodash/some\";\n/**\n * Determines if a click's coordinates are within the bounds of a node.\n *\n * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384\n *\n * @param node - A DOM node.\n * @param e - A SyntheticEvent or DOM Event.\n * @param target - A target document.\n */\n\nexport var doesNodeContainClick = function doesNodeContainClick(node, e, // eslint-disable-next-line no-undef\ntarget) {\n  if (target === void 0) {\n    target = document;\n  }\n\n  if (_some([e, node], _isNil)) return false; // if there is an e.target and it is in the document, use a simple node.contains() check\n\n  if (e.target) {\n    _invoke(e.target, 'setAttribute', 'data-suir-click-target', true);\n\n    if (target.querySelector('[data-suir-click-target=true]')) {\n      _invoke(e.target, 'removeAttribute', 'data-suir-click-target');\n\n      return node.contains(e.target);\n    }\n  } // Below logic handles cases where the e.target is no longer in the document.\n  // The result of the click likely has removed the e.target node.\n  // Instead of node.contains(), we'll identify the click by X/Y position.\n  // return early if the event properties aren't available\n  // prevent measuring the node and repainting if we don't need to\n\n\n  var clientX = e.clientX,\n      clientY = e.clientY;\n  if (_some([clientX, clientY], _isNil)) return false; // false if the node is not visible\n\n  var clientRects = node.getClientRects(); // Heads Up!\n  // getClientRects returns a DOMRectList, not an array nor a plain object\n  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes\n\n  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false; // false if the node doesn't have a valid bounding rect\n\n  var _first2 = _first(clientRects),\n      top = _first2.top,\n      bottom = _first2.bottom,\n      left = _first2.left,\n      right = _first2.right;\n\n  if (_some([top, bottom, left, right], _isNil)) return false; // we add a small decimal to the upper bound just to make it inclusive\n  // don't add an whole pixel (1) as the event/node values may be decimal sensitive\n\n  return _inRange(clientY, top, bottom + 0.001) && _inRange(clientX, left, right + 0.001);\n};","map":{"version":3,"sources":["utils/doesNodeContainClick.tsx"],"names":["doesNodeContainClick","target","document","e","node","clientX","clientY","clientRects","top","bottom","left","right"],"mappings":";;;;;AAEA;;;;;;;;;;AASA,OAAO,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,IAAA,EAAA,CAAA,EAGlC;AAHkC,MAAA,EAKtB;AAAA,MADZC,MACY,KAAA,KAAA,CAAA,EAAA;AADZA,IAAAA,MACY,GADOC,QAAnBD;AACY;;AACZ,MAAI,KAAA,CAAO,CAAA,CAAA,EAAP,IAAO,CAAP,EAAJ,MAAI,CAAJ,EAAgC,OADpB,KACoB,CADpB,CAGZ;;AACA,MAAIE,CAAC,CAAL,MAAA,EAAc;AACZ,IAAA,OAAA,CAASA,CAAC,CAAV,MAAA,EAAA,cAAA,EAAA,wBAAA,EAAA,IAAA,CAAA;;AAEA,QAAIF,MAAM,CAANA,aAAAA,CAAJ,+BAAIA,CAAJ,EAA2D;AACzD,MAAA,OAAA,CAASE,CAAC,CAAV,MAAA,EAAA,iBAAA,EAAA,wBAAA,CAAA;;AACA,aAAOC,IAAI,CAAJA,QAAAA,CAAcD,CAAC,CAAtB,MAAOC,CAAP;AACD;AAVS,GAAA,CAaZ;AACA;AACA;AAEA;AACA;;;AAlBY,MAmBJC,OAnBI,GAmBiBF,CAnBjB,CAAA,OAAA;AAAA,MAmBKG,OAnBL,GAmBiBH,CAnBjB,CAAA,OAAA;AAoBZ,MAAI,KAAA,CAAO,CAAA,OAAA,EAAP,OAAO,CAAP,EAAJ,MAAI,CAAJ,EAAyC,OApB7B,KAoB6B,CApB7B,CAsBZ;;AACA,MAAMI,WAAW,GAAGH,IAAI,CAvBZ,cAuBQA,EAApB,CAvBY,CAwBZ;AACA;AACA;;AACA,MAAI,CAACA,IAAI,CAAL,WAAA,IAAqB,CAACA,IAAI,CAA1B,YAAA,IAA2C,CAA3C,WAAA,IAA2D,CAACG,WAAW,CAA3E,MAAA,EAAoF,OA3BxE,KA2BwE,CA3BxE,CA6BZ;;AA7BY,MAAA,OAAA,GA8ByB,MAAA,CA9BzB,WA8ByB,CA9BzB;AAAA,MA8BJC,GA9BI,GAAA,OAAA,CAAA,GAAA;AAAA,MA8BCC,MA9BD,GAAA,OAAA,CAAA,MAAA;AAAA,MA8BSC,IA9BT,GAAA,OAAA,CAAA,IAAA;AAAA,MA8BeC,KA9Bf,GAAA,OAAA,CAAA,KAAA;;AA+BZ,MAAI,KAAA,CAAO,CAAA,GAAA,EAAA,MAAA,EAAA,IAAA,EAAP,KAAO,CAAP,EAAJ,MAAI,CAAJ,EAAiD,OA/BrC,KA+BqC,CA/BrC,CAiCZ;AACA;;AACA,SAAO,QAAA,CAAA,OAAA,EAAA,GAAA,EAAwBF,MAAM,GAA9B,KAAA,CAAA,IAA2C,QAAA,CAAA,OAAA,EAAA,IAAA,EAAyBE,KAAK,GAAhF,KAAkD,CAAlD;AAxCK,CAAA","sourcesContent":["import * as _ from 'lodash';\n\n/**\n * Determines if a click's coordinates are within the bounds of a node.\n *\n * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384\n *\n * @param node - A DOM node.\n * @param e - A SyntheticEvent or DOM Event.\n * @param target - A target document.\n */\nexport const doesNodeContainClick = (\n  node: HTMLElement,\n  e: MouseEvent,\n  // eslint-disable-next-line no-undef\n  target: Document = document,\n): boolean => {\n  if (_.some([e, node], _.isNil)) return false;\n\n  // if there is an e.target and it is in the document, use a simple node.contains() check\n  if (e.target) {\n    _.invoke(e.target, 'setAttribute', 'data-suir-click-target', true);\n\n    if (target.querySelector('[data-suir-click-target=true]')) {\n      _.invoke(e.target, 'removeAttribute', 'data-suir-click-target');\n      return node.contains(e.target as HTMLElement);\n    }\n  }\n\n  // Below logic handles cases where the e.target is no longer in the document.\n  // The result of the click likely has removed the e.target node.\n  // Instead of node.contains(), we'll identify the click by X/Y position.\n\n  // return early if the event properties aren't available\n  // prevent measuring the node and repainting if we don't need to\n  const { clientX, clientY } = e;\n  if (_.some([clientX, clientY], _.isNil)) return false;\n\n  // false if the node is not visible\n  const clientRects = node.getClientRects();\n  // Heads Up!\n  // getClientRects returns a DOMRectList, not an array nor a plain object\n  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes\n  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false;\n\n  // false if the node doesn't have a valid bounding rect\n  const { top, bottom, left, right } = _.first(clientRects);\n  if (_.some([top, bottom, left, right], _.isNil)) return false;\n\n  // we add a small decimal to the upper bound just to make it inclusive\n  // don't add an whole pixel (1) as the event/node values may be decimal sensitive\n  return _.inRange(clientY, top, bottom + 0.001) && _.inRange(clientX, left, right + 0.001);\n};\n"]},"metadata":{},"sourceType":"module"}