{"ast":null,"code":"import _get from \"lodash/get\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarMenuBehavior, toolbarMenuItemCheckboxBehavior } from '@fluentui/accessibility';\nimport { compose, getElementType, mergeVariablesOverrides, useUnhandledProps, useFluentContext, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthand, commonPropTypes, childrenExist } from '../../utils';\nimport { ToolbarMenuRadioGroup } from './ToolbarMenuRadioGroup';\nimport { ToolbarMenuDivider } from './ToolbarMenuDivider';\nimport { ToolbarMenuItem } from './ToolbarMenuItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarMenuClassName = 'ui-toolbar__menu';\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\n\nexport var ToolbarMenu = /*#__PURE__*/function () {\n  var ToolbarMenu = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        className = props.className,\n        children = props.children,\n        design = props.design,\n        items = props.items,\n        styles = props.styles,\n        variables = props.variables;\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          _invoke(props, 'onClick', e, props);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergedVariables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var handleItemOverrides = function handleItemOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, itemProps) {\n          _invoke(predefinedProps, 'onClick', e, itemProps);\n\n          _invoke(props, 'onItemClick', e, Object.assign({}, itemProps, {\n            menuOpen: !!itemProps.menu\n          }));\n        }\n      };\n    };\n\n    var handleRadioGroupOverrides = function handleRadioGroupOverrides(predefinedProps) {\n      return {\n        onItemClick: function onItemClick(e, itemProps) {\n          _invoke(predefinedProps, 'onItemClick', e, itemProps);\n\n          _invoke(props, 'onItemClick', e, itemProps);\n        }\n      };\n    };\n\n    var renderItems = function renderItems() {\n      return _map(items, function (item) {\n        var kind = _get(item, 'kind', 'item');\n\n        switch (kind) {\n          case 'divider':\n            return createShorthand(composeOptions.slots.divider, item, {\n              defaultProps: function defaultProps() {\n                return slotProps.divider;\n              }\n            });\n\n          case 'group':\n            return createShorthand(composeOptions.slots.group, item, {\n              defaultProps: function defaultProps() {\n                return slotProps.group;\n              },\n              overrideProps: handleRadioGroupOverrides\n            });\n\n          case 'toggle':\n            return createShorthand(composeOptions.slots.toggle, item, {\n              defaultProps: function defaultProps() {\n                return slotProps.toggle;\n              },\n              overrideProps: handleItemOverrides\n            });\n\n          default:\n            return createShorthand(composeOptions.slots.item, item, {\n              defaultProps: function defaultProps() {\n                return slotProps.item;\n              },\n              overrideProps: handleItemOverrides\n            });\n        }\n      });\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n      className: classes.root\n    })), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {\n      value: mergedVariables\n    }, childrenExist(children) ? children : renderItems())));\n    setEnd(); // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref\n\n    return ref ? /*#__PURE__*/React.createElement(Ref, {\n      innerRef: ref\n    }, element) : element;\n  }, {\n    displayName: 'ToolbarMenu',\n    className: toolbarMenuClassName,\n    slots: {\n      item: ToolbarMenuItem,\n      divider: ToolbarMenuDivider,\n      group: ToolbarMenuRadioGroup,\n      toggle: ToolbarMenuItem\n    },\n    slotProps: function slotProps(props) {\n      return {\n        item: {\n          submenuIndicator: props.submenuIndicator,\n          inSubmenu: props.submenu\n        },\n        toggle: {\n          accessibility: toolbarMenuItemCheckboxBehavior\n        }\n      };\n    },\n    shorthandConfig: {\n      mappedArrayProp: 'items'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'items', 'onItemClick', 'styles', 'submenu', 'submenuIndicator', 'variables']\n  });\n  ToolbarMenu.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n    onItemClick: PropTypes.func,\n    submenu: PropTypes.bool,\n    submenuIndicator: customPropTypes.shorthandAllowingChildren\n  });\n  ToolbarMenu.defaultProps = {\n    accessibility: toolbarMenuBehavior,\n    as: 'ul'\n  };\n  return ToolbarMenu;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarMenu.tsx"],"names":["toolbarMenuClassName","ToolbarMenu","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","className","children","design","items","styles","variables","props","parentVariables","React","mergedVariables","mergeVariablesOverrides","slotProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","rtl","classes","useStyles","mapPropsToInlineStyles","unstable_props","handleItemOverrides","onClick","menuOpen","itemProps","menu","handleRadioGroupOverrides","onItemClick","renderItems","kind","createShorthand","defaultProps","overrideProps","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","childrenExist","ref","displayName","slots","item","divider","group","toggle","ToolbarMenuItem","submenuIndicator","inSubmenu","submenu","toolbarMenuItemCheckboxBehavior","shorthandConfig","mappedArrayProp","handledProps","commonPropTypes","customPropTypes","PropTypes","shorthandAllowingChildren","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuBehavior,\n  toolbarMenuItemCheckboxBehavior,\n  ToolbarMenuBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  createShorthand,\n  commonPropTypes,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n} from '../../utils';\n\nimport { ComponentEventHandler, ShorthandCollection, ShorthandValue } from '../../types';\n\nimport { ToolbarMenuRadioGroup, ToolbarMenuRadioGroupProps } from './ToolbarMenuRadioGroup';\nimport { ToolbarMenuDivider } from './ToolbarMenuDivider';\nimport { ToolbarMenuItem, ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport { BoxProps } from '../Box/Box';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItemProps } from './ToolbarItem';\n\nexport type ToolbarMenuItemShorthandKinds = {\n  divider: ToolbarDividerProps;\n  item: ToolbarItemProps;\n  toggle: ToolbarItemProps;\n};\n\nexport interface ToolbarMenuProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuBehaviorProps>;\n\n  /** Shorthand array of props for ToolbarMenu. */\n  items?: ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Indicates whether the menu is submenu. */\n  submenu?: boolean;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuStylesProps = never;\nexport const toolbarMenuClassName = 'ui-toolbar__menu';\n\n/**\n * A ToolbarMenu creates a pop-up menu attached to a ToolbarItem.\n *\n * @accessibility\n * Implements pop-up menu (submenu) behavior of [ARIA Menu](https://www.w3.org/TR/wai-aria-practices-1.1/#menu) design pattern.\n */\nexport const ToolbarMenu = compose<'ul', ToolbarMenuProps, ToolbarMenuStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, children, design, items, styles, variables } = props;\n\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    const slotProps = composeOptions.resolveSlotProps<ToolbarMenuProps>(props);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: e => {\n          _.invoke(props, 'onClick', e, props);\n        },\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const handleItemOverrides = predefinedProps => ({\n      onClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, {\n          ...itemProps,\n          menuOpen: !!itemProps.menu,\n        });\n      },\n    });\n\n    const handleRadioGroupOverrides = (predefinedProps: ToolbarMenuRadioGroupProps) => ({\n      onItemClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, itemProps);\n      },\n    });\n\n    const renderItems = () => {\n      return _.map(items, item => {\n        const kind = _.get(item, 'kind', 'item');\n\n        switch (kind) {\n          case 'divider':\n            return createShorthand(composeOptions.slots.divider, item, {\n              defaultProps: () => slotProps.divider,\n            });\n\n          case 'group':\n            return createShorthand(composeOptions.slots.group, item, {\n              defaultProps: () => slotProps.group,\n              overrideProps: handleRadioGroupOverrides,\n            });\n\n          case 'toggle':\n            return createShorthand(composeOptions.slots.toggle, item, {\n              defaultProps: () => slotProps.toggle,\n              overrideProps: handleItemOverrides,\n            });\n\n          default:\n            return createShorthand(composeOptions.slots.item, item, {\n              defaultProps: () => slotProps.item,\n              overrideProps: handleItemOverrides,\n            });\n        }\n      });\n    };\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = getA11yProps.unstable_wrapWithFocusZone(\n      <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })}>\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {childrenExist(children) ? children : renderItems()}\n        </ToolbarVariablesProvider>\n      </ElementType>,\n    );\n    setEnd();\n\n    // TODO: As ElementType is wrapped with FocusZone which doesn't ref forwarding we have to use Ref\n    return ref ? <Ref innerRef={ref}>{element}</Ref> : element;\n  },\n  {\n    displayName: 'ToolbarMenu',\n    className: toolbarMenuClassName,\n\n    slots: {\n      item: ToolbarMenuItem,\n      divider: ToolbarMenuDivider,\n      group: ToolbarMenuRadioGroup,\n      toggle: ToolbarMenuItem,\n    },\n    slotProps: props => ({\n      item: {\n        submenuIndicator: props.submenuIndicator,\n        inSubmenu: props.submenu,\n      },\n      toggle: {\n        accessibility: toolbarMenuItemCheckboxBehavior,\n      },\n    }),\n\n    shorthandConfig: {\n      mappedArrayProp: 'items',\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'items',\n      'onItemClick',\n      'styles',\n      'submenu',\n      'submenuIndicator',\n      'variables',\n    ],\n  },\n);\n\nToolbarMenu.propTypes = {\n  ...commonPropTypes.createCommon(),\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n  onItemClick: PropTypes.func,\n  submenu: PropTypes.bool,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n};\nToolbarMenu.defaultProps = {\n  accessibility: toolbarMenuBehavior,\n  as: 'ul',\n};\n"]},"metadata":{},"sourceType":"module"}