{"ast":null,"code":"var getCSSTemplateValue = function getCSSTemplateValue(template) {\n  var templateAsNumber = Number(template);\n  return !isNaN(templateAsNumber) && templateAsNumber > 0 ? \"repeat(\" + template + \", 1fr)\" : String(template);\n};\n\nexport var gridStyles = {\n  root: function root(_ref) {\n    var props = _ref.props,\n        _ref$variables = _ref.variables,\n        height = _ref$variables.height,\n        width = _ref$variables.width,\n        defaultColumnCount = _ref$variables.defaultColumnCount,\n        gridGap = _ref$variables.gridGap,\n        padding = _ref$variables.padding;\n    var rows = props.rows,\n        _props$columns = props.columns,\n        columns = _props$columns === void 0 ? !props.rows && defaultColumnCount : _props$columns;\n    return Object.assign({\n      height: height,\n      width: width,\n      padding: padding,\n      gridGap: gridGap,\n      display: ['grid', '-ms-grid'],\n      justifyContent: 'space-evenly'\n    }, rows && !columns && {\n      gridAutoFlow: 'column'\n    }, rows && {\n      gridTemplateRows: getCSSTemplateValue(rows),\n      msGridRows: getCSSTemplateValue(rows)\n    }, columns && {\n      gridTemplateColumns: getCSSTemplateValue(columns),\n      msGridColumns: getCSSTemplateValue(columns)\n    }, {\n      '& > *': {\n        outlineOffset: '-3px'\n      }\n    });\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Grid/gridStyles.ts"],"names":["getCSSTemplateValue","templateAsNumber","Number","isNaN","String","gridStyles","root","props","variables","height","width","defaultColumnCount","gridGap","padding","rows","columns","display","justifyContent","gridAutoFlow","gridTemplateRows","msGridRows","gridTemplateColumns","msGridColumns","outlineOffset"],"mappings":"AAIA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,QAAA,EAAuC;AACjE,MAAMC,gBAAgB,GAAGC,MAAM,CAA/B,QAA+B,CAA/B;AAEA,SAAO,CAACC,KAAK,CAAN,gBAAM,CAAN,IAA4BF,gBAAgB,GAA5C,CAAA,GAAA,YAAA,QAAA,GAAA,QAAA,GAAgFG,MAAM,CAA7F,QAA6F,CAA7F;AAHF,CAAA;;AAMA,OAAO,IAAMC,UAAuE,GAAG;AACrFC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,IAAA,EAAkG;AAAA,QAA/FC,KAA+F,GAAA,IAAA,CAA/FA,KAA+F;AAAA,QAAA,cAAA,GAAA,IAAA,CAAxFC,SAAwF;AAAA,QAA3EC,MAA2E,GAAA,cAAA,CAA3EA,MAA2E;AAAA,QAAnEC,KAAmE,GAAA,cAAA,CAAnEA,KAAmE;AAAA,QAA5DC,kBAA4D,GAAA,cAAA,CAA5DA,kBAA4D;AAAA,QAAxCC,OAAwC,GAAA,cAAA,CAAxCA,OAAwC;AAAA,QAA/BC,OAA+B,GAAA,cAAA,CAA/BA,OAA+B;AAAA,QAC9FC,IAD8F,GACxCP,KADwC,CAAA,IAAA;AAAA,QAAA,cAAA,GACxCA,KADwC,CAAA,OAAA;AAAA,QACxFQ,OADwF,GAAA,cAAA,KAAA,KAAA,CAAA,GAC9E,CAACR,KAAK,CAAN,IAAA,IAD8E,kBAAA,GAAA,cAAA;AAGtG,WAAA,MAAA,CAAA,MAAA,CAAA;AACEE,MAAAA,MAAM,EADR,MAAA;AAEEC,MAAAA,KAAK,EAFP,KAAA;AAGEG,MAAAA,OAAO,EAHT,OAAA;AAIED,MAAAA,OAAO,EAJT,OAAA;AAKEI,MAAAA,OAAO,EAAE,CAAA,MAAA,EALX,UAKW,CALX;AAMEC,MAAAA,cAAc,EAAE;AANlB,KAAA,EAQMH,IAAI,IAAI,CAARA,OAAAA,IAAoB;AAAEI,MAAAA,YAAY,EAAE;AAAhB,KAR1B,EASMJ,IAAI,IAAI;AACVK,MAAAA,gBAAgB,EAAEnB,mBAAmB,CAD3B,IAC2B,CAD3B;AAEVoB,MAAAA,UAAU,EAAEpB,mBAAmB,CAAA,IAAA;AAFrB,KATd,EAaMe,OAAO,IAAI;AACbM,MAAAA,mBAAmB,EAAErB,mBAAmB,CAD3B,OAC2B,CAD3B;AAEbsB,MAAAA,aAAa,EAAEtB,mBAAmB,CAAA,OAAA;AAFrB,KAbjB,EAAA;AAkBE,eAAS;AAAEuB,QAAAA,aAAa,EAAE;AAAjB;AAlBX,KAAA,CAAA;AAoBD;AAxBoF,CAAhF","sourcesContent":["import { GridVariables } from './gridVariables';\nimport { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { GridStylesProps } from '../../../../components/Grid/Grid';\n\nconst getCSSTemplateValue = (template: string | number): string => {\n  const templateAsNumber = Number(template);\n\n  return !isNaN(templateAsNumber) && templateAsNumber > 0 ? `repeat(${template}, 1fr)` : String(template);\n};\n\nexport const gridStyles: ComponentSlotStylesPrepared<GridStylesProps, GridVariables> = {\n  root: ({ props, variables: { height, width, defaultColumnCount, gridGap, padding } }): ICSSInJSStyle => {\n    const { rows, columns = !props.rows && defaultColumnCount } = props;\n\n    return {\n      height,\n      width,\n      padding,\n      gridGap,\n      display: ['grid', '-ms-grid'],\n      justifyContent: 'space-evenly',\n\n      ...(rows && !columns && { gridAutoFlow: 'column' }),\n      ...(rows && {\n        gridTemplateRows: getCSSTemplateValue(rows),\n        msGridRows: getCSSTemplateValue(rows),\n      }),\n      ...(columns && {\n        gridTemplateColumns: getCSSTemplateValue(columns),\n        msGridColumns: getCSSTemplateValue(columns),\n      }),\n\n      '& > *': { outlineOffset: '-3px' },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}