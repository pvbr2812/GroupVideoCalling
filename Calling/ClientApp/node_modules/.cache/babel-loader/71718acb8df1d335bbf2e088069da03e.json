{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _some from \"lodash/some\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarMenuItemBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { compose, focusAsync, mergeVariablesOverrides, useTelemetry, useStyles, useAutoControlled, useFluentContext, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { useContextSelectors } from '@fluentui/react-context-selector';\nimport { createShorthand, commonPropTypes, childrenExist, doesNodeContainClick } from '../../utils';\nimport { partitionPopperPropsFromShorthand, Popper } from '../../utils/positioner';\nimport { Box } from '../Box/Box';\nimport { Popup } from '../Popup/Popup';\nimport { ToolbarMenu } from './ToolbarMenu';\nimport { ToolbarMenuItemIcon } from './ToolbarMenuItemIcon';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarMenuItemSubmenuIndicator } from './ToolbarMenuItemSubmenuIndicator';\nimport { ToolbarMenuItemActiveIndicator } from './ToolbarMenuItemActiveIndicator';\nimport { ToolbarMenuContext } from './toolbarMenuContext';\nexport var toolbarMenuItemClassName = 'ui-toolbar__menuitem';\nexport var toolbarMenuItemSlotClassNames = {\n  wrapper: toolbarMenuItemClassName + \"__wrapper\",\n  submenu: toolbarMenuItemClassName + \"__submenu\"\n};\n/**\n * A ToolbarMenuItem renders ToolbarMenu item as button.\n */\n\nexport var ToolbarMenuItem = /*#__PURE__*/function () {\n  var ToolbarMenuItem = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var active = props.active,\n        activeIndicator = props.activeIndicator,\n        children = props.children,\n        content = props.content,\n        disabled = props.disabled,\n        submenuIndicator = props.submenuIndicator,\n        icon = props.icon,\n        popup = props.popup,\n        wrapper = props.wrapper,\n        inSubmenu = props.inSubmenu,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n\n    var _partitionPopperProps = partitionPopperPropsFromShorthand(props.menu),\n        menu = _partitionPopperProps[0],\n        menuPositioningProps = _partitionPopperProps[1];\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultMenuOpen,\n      value: props.menuOpen,\n      initialValue: false\n    }),\n        menuOpen = _useAutoControlled[0],\n        setMenuOpen = _useAutoControlled[1];\n\n    var itemRef = React.useRef();\n    var menuRef = React.useRef();\n\n    var _ref = useContextSelectors(ToolbarMenuContext, {\n      menuSlot: function menuSlot(v) {\n        return v.slots.menu;\n      }\n    }),\n        menuSlot = _ref.menuSlot; // TODO: we should improve typings for the useContextSelectors\n\n\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    var ElementType = getElementType(props);\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          menu: menu,\n          active: active,\n          menuOpen: menuOpen,\n          disabled: disabled,\n          'aria-label': props['aria-label'],\n          'aria-labelledby': props['aria-labelledby'],\n          'aria-describedby': props['aria-describedby']\n        };\n      },\n      actionHandlers: {\n        performClick: function performClick(event) {\n          event.preventDefault();\n          handleClick(event);\n        },\n        openMenu: function (_openMenu) {\n          function openMenu(_x) {\n            return _openMenu.apply(this, arguments);\n          }\n\n          openMenu.toString = function () {\n            return _openMenu.toString();\n          };\n\n          return openMenu;\n        }(function (event) {\n          return openMenu(event);\n        }),\n        closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {\n          return closeAllMenus(event);\n        },\n        closeMenu: function (_closeMenu) {\n          function closeMenu(_x2) {\n            return _closeMenu.apply(this, arguments);\n          }\n\n          closeMenu.toString = function () {\n            return _closeMenu.toString();\n          };\n\n          return closeMenu;\n        }(function (event) {\n          return closeMenu(event);\n        }),\n        closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {\n          return closeMenu(event);\n        },\n        doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {\n          event.stopPropagation();\n        },\n        closeAllMenus: function (_closeAllMenus) {\n          function closeAllMenus(_x3) {\n            return _closeAllMenus.apply(this, arguments);\n          }\n\n          closeAllMenus.toString = function () {\n            return _closeAllMenus.toString();\n          };\n\n          return closeAllMenus;\n        }(function (event) {\n          return closeAllMenus(event);\n        })\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          disabled: disabled,\n          hasContent: !!content\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergedVariables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var openMenu = function openMenu(e) {\n      if (menu && !menuOpen) {\n        trySetMenuOpen(true, e);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    };\n\n    var closeMenu = function closeMenu(e) {\n      if (!isSubmenuOpen()) {\n        return;\n      }\n\n      trySetMenuOpen(false, e, function () {\n        focusAsync(itemRef.current);\n      });\n      e.stopPropagation();\n    };\n\n    var closeAllMenus = function closeAllMenus(e) {\n      if (!isSubmenuOpen()) {\n        return;\n      }\n\n      trySetMenuOpen(false, e, function () {\n        if (!inSubmenu) {\n          focusAsync(itemRef.current);\n        }\n      }); // avoid spacebar scrolling the page\n\n      if (!inSubmenu) {\n        e.preventDefault();\n      }\n    };\n\n    var isSubmenuOpen = function isSubmenuOpen() {\n      return !!(menu && menuOpen);\n    };\n\n    var trySetMenuOpen = function trySetMenuOpen(newValue, e, onStateChanged) {\n      setMenuOpen(newValue); // The reason why post-effect is not passed as callback to trySetState method\n      // is that in 'controlled' mode the post-effect is applied before final re-rendering\n      // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.\n      // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.\n\n      onStateChanged && onStateChanged();\n\n      _invoke(props, 'onMenuOpenChange', e, Object.assign({}, props, {\n        menuOpen: newValue\n      }));\n    };\n\n    var outsideClickHandler = function outsideClickHandler(getRefs) {\n      return function (e) {\n        var isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n\n        var isNestedClick = _some(getRefs(), function (childRef) {\n          return doesNodeContainClick(childRef.current, e, context.target);\n        });\n\n        var isInside = isItemClick || isNestedClick;\n\n        if (!isInside) {\n          trySetMenuOpen(false, e);\n        }\n      };\n    };\n\n    var handleMenuOverrides = function handleMenuOverrides(predefinedProps) {\n      return {\n        onItemClick: function onItemClick(e, itemProps) {\n          var popup = itemProps.popup,\n              menuOpen = itemProps.menuOpen;\n\n          _invoke(predefinedProps, 'onItemClick', e, itemProps);\n\n          if (popup) {\n            return;\n          }\n\n          trySetMenuOpen(menuOpen, e);\n\n          if (!menuOpen) {\n            _invoke(itemRef.current, 'focus');\n          }\n        }\n      };\n    };\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (menu) {\n        // the menuItem element was clicked => toggle the open/close and stop propagation\n        trySetMenuOpen(!menuOpen, e);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      if (popup) {\n        e.stopPropagation();\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick,\n      disabled: disabled,\n      ref: ref\n    }, unhandledProps)), childrenExist(children) ? children : /*#__PURE__*/React.createElement(React.Fragment, null, createShorthand(composeOptions.slots.icon, icon, {\n      defaultProps: function defaultProps() {\n        return slotProps.icon;\n      }\n    }), content, active && createShorthand(composeOptions.slots.activeIndicator, activeIndicator, {\n      defaultProps: function defaultProps() {\n        return slotProps.activeIndicator;\n      }\n    }), menu && createShorthand(composeOptions.slots.submenuIndicator, submenuIndicator, {\n      defaultProps: function defaultProps() {\n        return slotProps.submenuIndicator;\n      }\n    })));\n    var hasChildren = childrenExist(children);\n\n    if (popup && !hasChildren) {\n      var popupElement = createShorthand(composeOptions.slots.popup, popup, {\n        defaultProps: function defaultProps() {\n          return Object.assign({}, slotProps.popup, {\n            onOpenChange: function onOpenChange(e) {\n              e.stopPropagation();\n            }\n          });\n        },\n        overrideProps: {\n          trigger: element,\n          children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`\n\n        }\n      });\n      setEnd();\n      return popupElement;\n    }\n\n    var menuItemInner = hasChildren ? children : /*#__PURE__*/React.createElement(Ref, {\n      innerRef: itemRef\n    }, element);\n    var maybeSubmenu = menu && menuOpen ? /*#__PURE__*/React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Ref, {\n        innerRef: function innerRef(node) {\n          nestingRef.current = node;\n          menuRef.current = node;\n        }\n      }, /*#__PURE__*/React.createElement(Popper, _extends({\n        align: \"top\",\n        position: context.rtl ? 'before' : 'after',\n        targetRef: itemRef\n      }, menuPositioningProps), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {\n        value: mergedVariables\n      }, createShorthand(composeOptions.slots.menu || menuSlot || ToolbarMenu, menu, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: toolbarMenuItemSlotClassNames.submenu,\n            styles: resolvedStyles.menu,\n            submenu: true,\n            submenuIndicator: submenuIndicator\n          }, slotProps.menu);\n        },\n        overrideProps: handleMenuOverrides\n      })))), /*#__PURE__*/React.createElement(EventListener, {\n        listener: outsideClickHandler(getRefs),\n        target: context.target,\n        type: \"click\"\n      }));\n    }) : null;\n\n    if (!wrapper) {\n      setEnd();\n      return menuItemInner;\n    }\n\n    var wrapperElement = Box.create(wrapper, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('wrapper', {\n          className: cx(toolbarMenuItemSlotClassNames.wrapper, classes.wrapper)\n        });\n      },\n      overrideProps: function overrideProps() {\n        return {\n          children: /*#__PURE__*/React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu)\n        };\n      }\n    });\n    setEnd();\n    return wrapperElement;\n  }, {\n    className: toolbarMenuItemClassName,\n    displayName: 'ToolbarMenuItem',\n    slots: {\n      icon: ToolbarMenuItemIcon,\n      submenuIndicator: ToolbarMenuItemSubmenuIndicator,\n      activeIndicator: ToolbarMenuItemActiveIndicator,\n      popup: Popup\n    },\n    slotProps: function slotProps(props) {\n      return {\n        icon: {\n          hasContent: !!props.content\n        },\n        submenuIndicator: {\n          accessibility: indicatorBehavior\n        },\n        activeIndicator: {\n          accessibility: indicatorBehavior\n        },\n        popup: {\n          trapFocus: true\n        }\n      };\n    },\n    shorthandConfig: {\n      mappedProp: 'content'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'active', 'activeIndicator', 'defaultMenuOpen', 'disabled', 'icon', 'index', 'submenuIndicator', 'inSubmenu', 'menu', 'menuOpen', 'onClick', 'onMenuOpenChange', 'popup', 'wrapper']\n  });\n  ToolbarMenuItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    active: PropTypes.bool,\n    activeIndicator: customPropTypes.shorthandAllowingChildren,\n    defaultMenuOpen: PropTypes.bool,\n    disabled: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    index: PropTypes.number,\n    submenuIndicator: customPropTypes.shorthandAllowingChildren,\n    inSubmenu: PropTypes.bool,\n    menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    menuOpen: PropTypes.bool,\n    onClick: PropTypes.func,\n    onMenuOpenChange: PropTypes.func,\n    popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {\n      trigger: customPropTypes.never,\n      children: customPropTypes.never\n    })), PropTypes.string]),\n    wrapper: customPropTypes.itemShorthand\n  });\n  ToolbarMenuItem.defaultProps = {\n    as: 'button',\n    accessibility: toolbarMenuItemBehavior,\n    activeIndicator: {},\n    submenuIndicator: {},\n    wrapper: {\n      as: 'li'\n    }\n  };\n  return ToolbarMenuItem;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarMenuItem.tsx"],"names":["toolbarMenuItemClassName","toolbarMenuItemSlotClassNames","wrapper","submenu","ToolbarMenuItem","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","active","activeIndicator","children","content","disabled","submenuIndicator","icon","popup","inSubmenu","className","design","styles","variables","props","menu","menuPositioningProps","partitionPopperPropsFromShorthand","menuOpen","setMenuOpen","useAutoControlled","defaultValue","value","initialValue","itemRef","React","menuRef","menuSlot","useContextSelectors","v","parentVariables","mergedVariables","mergeVariablesOverrides","ElementType","getElementType","slotProps","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","event","handleClick","openMenu","closeAllMenusAndFocusNextParentItem","closeAllMenus","closeMenu","closeMenuAndFocusTrigger","doNotNavigateNextParentItem","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","mapPropsToInlineStyles","unstable_props","trySetMenuOpen","e","isSubmenuOpen","focusAsync","onStateChanged","newValue","outsideClickHandler","isItemClick","doesNodeContainClick","isNestedClick","getRefs","childRef","isInside","handleMenuOverrides","onItemClick","itemProps","element","onClick","ref","childrenExist","createShorthand","defaultProps","hasChildren","popupElement","onOpenChange","overrideProps","trigger","menuItemInner","maybeSubmenu","nestingRef","wrapperElement","cx","displayName","slots","Popup","accessibility","indicatorBehavior","trapFocus","shorthandConfig","mappedProp","handledProps","commonPropTypes","PropTypes","customPropTypes","defaultMenuOpen","index","onMenuOpenChange","never","itemShorthand","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuItemBehavior,\n  ToolbarMenuItemBehaviorProps,\n  indicatorBehavior,\n} from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\n\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport {\n  compose,\n  focusAsync,\n  mergeVariablesOverrides,\n  useTelemetry,\n  useStyles,\n  useAutoControlled,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nimport { GetRefs, NodeRef, Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { useContextSelectors } from '@fluentui/react-context-selector';\n\nimport {\n  createShorthand,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  UIComponentProps,\n  childrenExist,\n  doesNodeContainClick,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, ShorthandCollection } from '../../types';\nimport { partitionPopperPropsFromShorthand, Popper, PopperShorthandProps } from '../../utils/positioner';\n\nimport { Box, BoxProps } from '../Box/Box';\nimport { Popup, PopupProps } from '../Popup/Popup';\nimport { ToolbarMenu, ToolbarMenuProps, ToolbarMenuItemShorthandKinds } from './ToolbarMenu';\nimport { ToolbarMenuItemIcon, ToolbarMenuItemIconProps } from './ToolbarMenuItemIcon';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nimport { ToolbarMenuItemSubmenuIndicator } from './ToolbarMenuItemSubmenuIndicator';\nimport { ToolbarMenuItemActiveIndicator } from './ToolbarMenuItemActiveIndicator';\nimport { ToolbarItemSubscribedValue, ToolbarMenuContext } from './toolbarMenuContext';\n\nexport interface ToolbarMenuItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuItemBehaviorProps>;\n\n  /** A toolbar item can be active. */\n  active?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  activeIndicator?: ShorthandValue<BoxProps>;\n\n  /** A toolbar item can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Name or shorthand for Toolbar Item Icon */\n  icon?: ShorthandValue<ToolbarMenuItemIconProps>;\n\n  /** ToolbarMenuItem index inside ToolbarMenu. */\n  index?: number;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the menu item is part of submenu. */\n  inSubmenu?: boolean;\n\n  /** Shorthand for the submenu. */\n  menu?:\n    | ShorthandValue<ToolbarMenuProps & { popper?: PopperShorthandProps }>\n    | ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /** Indicates if the menu inside the item is open. */\n  menuOpen?: boolean;\n\n  /** Default menu open */\n  defaultMenuOpen?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /**\n   * Called when the menu inside the item opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `menuOpen` reflecting the new state.\n   */\n  onMenuOpenChange?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /**\n   * Attaches a `Popup` component to the ToolbarMenuItem.\n   * Accepts all props as a `Popup`, except `trigger` and `children`.\n   * Traps focus by default.\n   * @see PopupProps\n   */\n  popup?: Omit<PopupProps, 'trigger' | 'children'> | string;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuItemStylesProps = Pick<ToolbarMenuItemProps, 'disabled'> & { hasContent: boolean };\n\nexport interface ToolbarMenuItemSlotClassNames {\n  wrapper: string;\n  submenu: string;\n}\n\nexport const toolbarMenuItemClassName = 'ui-toolbar__menuitem';\nexport const toolbarMenuItemSlotClassNames: ToolbarMenuItemSlotClassNames = {\n  wrapper: `${toolbarMenuItemClassName}__wrapper`,\n  submenu: `${toolbarMenuItemClassName}__submenu`,\n};\n\n/**\n * A ToolbarMenuItem renders ToolbarMenu item as button.\n */\nexport const ToolbarMenuItem = compose<'button', ToolbarMenuItemProps, ToolbarMenuItemStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const {\n      active,\n      activeIndicator,\n      children,\n      content,\n      disabled,\n      submenuIndicator,\n      icon,\n      popup,\n      wrapper,\n      inSubmenu,\n      className,\n      design,\n      styles,\n      variables,\n    } = props;\n    const [menu, menuPositioningProps] = partitionPopperPropsFromShorthand(props.menu);\n\n    const [menuOpen, setMenuOpen] = useAutoControlled({\n      defaultValue: props.defaultMenuOpen,\n      value: props.menuOpen,\n      initialValue: false,\n    });\n\n    const itemRef = React.useRef<HTMLElement>();\n    const menuRef = React.useRef<HTMLElement>();\n\n    const { menuSlot } = (useContextSelectors(ToolbarMenuContext, {\n      menuSlot: v => v.slots.menu,\n    }) as unknown) as ToolbarItemSubscribedValue; // TODO: we should improve typings for the useContextSelectors\n\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    const ElementType = getElementType(props);\n    const slotProps = composeOptions.resolveSlotProps<ToolbarMenuItemProps>(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: () => ({\n        menu,\n        active,\n        menuOpen,\n        disabled,\n        'aria-label': props['aria-label'],\n        'aria-labelledby': props['aria-labelledby'],\n        'aria-describedby': props['aria-describedby'],\n      }),\n      actionHandlers: {\n        performClick: event => {\n          event.preventDefault();\n          handleClick(event);\n        },\n        openMenu: event => openMenu(event),\n        closeAllMenusAndFocusNextParentItem: event => closeAllMenus(event),\n        closeMenu: event => closeMenu(event),\n        closeMenuAndFocusTrigger: event => closeMenu(event),\n        doNotNavigateNextParentItem: event => {\n          event.stopPropagation();\n        },\n        closeAllMenus: event => closeAllMenus(event),\n      },\n      rtl: context.rtl,\n    });\n\n    const { classes, styles: resolvedStyles } = useStyles<ToolbarMenuItemStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToStyles: () => ({\n        disabled,\n        hasContent: !!content,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const openMenu = (e: React.KeyboardEvent) => {\n      if (menu && !menuOpen) {\n        trySetMenuOpen(true, e);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    };\n\n    const closeMenu = (e: React.KeyboardEvent) => {\n      if (!isSubmenuOpen()) {\n        return;\n      }\n\n      trySetMenuOpen(false, e, () => {\n        focusAsync(itemRef.current);\n      });\n\n      e.stopPropagation();\n    };\n\n    const closeAllMenus = (e: React.KeyboardEvent) => {\n      if (!isSubmenuOpen()) {\n        return;\n      }\n      trySetMenuOpen(false, e, () => {\n        if (!inSubmenu) {\n          focusAsync(itemRef.current);\n        }\n      });\n\n      // avoid spacebar scrolling the page\n      if (!inSubmenu) {\n        e.preventDefault();\n      }\n    };\n\n    const isSubmenuOpen = (): boolean => {\n      return !!(menu && menuOpen);\n    };\n\n    const trySetMenuOpen = (newValue: boolean, e: Event | React.SyntheticEvent, onStateChanged?: any) => {\n      setMenuOpen(newValue);\n      // The reason why post-effect is not passed as callback to trySetState method\n      // is that in 'controlled' mode the post-effect is applied before final re-rendering\n      // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.\n      // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.\n      onStateChanged && onStateChanged();\n      _.invoke(props, 'onMenuOpenChange', e, {\n        ...props,\n        menuOpen: newValue,\n      });\n    };\n\n    const outsideClickHandler = (getRefs: GetRefs) => (e: MouseEvent) => {\n      const isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n      const isNestedClick = _.some(getRefs(), (childRef: NodeRef) => {\n        return doesNodeContainClick(childRef.current as HTMLElement, e, context.target);\n      });\n      const isInside = isItemClick || isNestedClick;\n\n      if (!isInside) {\n        trySetMenuOpen(false, e);\n      }\n    };\n\n    const handleMenuOverrides = (predefinedProps: ToolbarMenuProps) => ({\n      onItemClick: (e, itemProps: ToolbarMenuItemProps) => {\n        const { popup, menuOpen } = itemProps;\n        _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n        if (popup) {\n          return;\n        }\n\n        trySetMenuOpen(menuOpen, e);\n        if (!menuOpen) {\n          _.invoke(itemRef.current, 'focus');\n        }\n      },\n    });\n\n    const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (menu) {\n        // the menuItem element was clicked => toggle the open/close and stop propagation\n        trySetMenuOpen(!menuOpen, e);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      if (popup) {\n        e.stopPropagation();\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          disabled,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? (\n          children\n        ) : (\n          <>\n            {createShorthand(composeOptions.slots.icon, icon, { defaultProps: () => slotProps.icon })}\n            {content}\n            {active &&\n              createShorthand(composeOptions.slots.activeIndicator, activeIndicator, {\n                defaultProps: () => slotProps.activeIndicator,\n              })}\n            {menu &&\n              createShorthand(composeOptions.slots.submenuIndicator, submenuIndicator, {\n                defaultProps: () => slotProps.submenuIndicator,\n              })}\n          </>\n        )}\n      </ElementType>\n    );\n\n    const hasChildren = childrenExist(children);\n\n    if (popup && !hasChildren) {\n      const popupElement = createShorthand(composeOptions.slots.popup, popup, {\n        defaultProps: () => ({\n          ...slotProps.popup,\n          onOpenChange: e => {\n            e.stopPropagation();\n          },\n        }),\n        overrideProps: {\n          trigger: element,\n          children: undefined, // force-reset `children` defined for `Popup` as it collides with the `trigger`\n        },\n      });\n      setEnd();\n\n      return popupElement;\n    }\n\n    const menuItemInner = hasChildren ? (children as React.ReactElement) : <Ref innerRef={itemRef}>{element}</Ref>;\n\n    const maybeSubmenu =\n      menu && menuOpen ? (\n        <Unstable_NestingAuto>\n          {(getRefs, nestingRef) => {\n            return (\n              <>\n                <Ref\n                  innerRef={(node: HTMLElement) => {\n                    nestingRef.current = node;\n                    menuRef.current = node;\n                  }}\n                >\n                  <Popper\n                    align=\"top\"\n                    position={context.rtl ? 'before' : 'after'}\n                    targetRef={itemRef}\n                    {...menuPositioningProps}\n                  >\n                    <ToolbarVariablesProvider value={mergedVariables}>\n                      {createShorthand(composeOptions.slots.menu || menuSlot || ToolbarMenu, menu, {\n                        defaultProps: () => ({\n                          className: toolbarMenuItemSlotClassNames.submenu,\n                          styles: resolvedStyles.menu,\n                          submenu: true,\n                          submenuIndicator,\n                          ...slotProps.menu,\n                        }),\n                        overrideProps: handleMenuOverrides,\n                      })}\n                    </ToolbarVariablesProvider>\n                  </Popper>\n                </Ref>\n                <EventListener listener={outsideClickHandler(getRefs)} target={context.target} type=\"click\" />\n              </>\n            );\n          }}\n        </Unstable_NestingAuto>\n      ) : null;\n\n    if (!wrapper) {\n      setEnd();\n      return menuItemInner;\n    }\n\n    const wrapperElement = Box.create(wrapper, {\n      defaultProps: () =>\n        getA11yProps('wrapper', {\n          className: cx(toolbarMenuItemSlotClassNames.wrapper, classes.wrapper),\n        }),\n      overrideProps: () => ({\n        children: (\n          <>\n            {menuItemInner}\n            {maybeSubmenu}\n          </>\n        ),\n      }),\n    });\n    setEnd();\n\n    return wrapperElement;\n  },\n  {\n    className: toolbarMenuItemClassName,\n    displayName: 'ToolbarMenuItem',\n\n    slots: {\n      icon: ToolbarMenuItemIcon,\n      submenuIndicator: ToolbarMenuItemSubmenuIndicator,\n      activeIndicator: ToolbarMenuItemActiveIndicator,\n      popup: Popup,\n    },\n    slotProps: props => ({\n      icon: {\n        hasContent: !!props.content,\n      },\n      submenuIndicator: {\n        accessibility: indicatorBehavior,\n      },\n      activeIndicator: {\n        accessibility: indicatorBehavior,\n      },\n      popup: {\n        trapFocus: true,\n      },\n    }),\n\n    shorthandConfig: {\n      mappedProp: 'content',\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n\n      'active',\n      'activeIndicator',\n      'defaultMenuOpen',\n      'disabled',\n      'icon',\n      'index',\n      'submenuIndicator',\n      'inSubmenu',\n      'menu',\n      'menuOpen',\n      'onClick',\n      'onMenuOpenChange',\n      'popup',\n      'wrapper',\n    ],\n  },\n);\n\nToolbarMenuItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  activeIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultMenuOpen: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  index: PropTypes.number,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n  inSubmenu: PropTypes.bool,\n  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  menuOpen: PropTypes.bool,\n  onClick: PropTypes.func,\n  onMenuOpenChange: PropTypes.func,\n  popup: PropTypes.oneOfType([\n    PropTypes.shape({\n      ...Popup.propTypes,\n      trigger: customPropTypes.never,\n      children: customPropTypes.never,\n    }),\n    PropTypes.string,\n  ]),\n  wrapper: customPropTypes.itemShorthand,\n};\nToolbarMenuItem.defaultProps = {\n  as: 'button',\n  accessibility: toolbarMenuItemBehavior,\n  activeIndicator: {},\n  submenuIndicator: {},\n  wrapper: { as: 'li' },\n};\n"]},"metadata":{},"sourceType":"module"}