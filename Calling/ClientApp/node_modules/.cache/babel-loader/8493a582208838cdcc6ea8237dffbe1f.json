{"ast":null,"code":"import { setDominantParticipants } from './actions/calls';\n\nclass AudioChangedEvent {\n  constructor(participantId, isUnMuted) {\n    this.participantId = void 0;\n    this.timeStamp = void 0;\n    this.isUnMuted = false;\n    this.participantId = participantId;\n    this.isUnMuted = isUnMuted;\n    this.timeStamp = Date.now();\n  }\n\n  process(participant) {\n    if (this.isUnMuted && !participant.isUnMuted) {\n      participant.lastUnMuted = this.timeStamp;\n    }\n\n    participant.isUnMuted = this.isUnMuted;\n  }\n\n}\n\nclass VideoChangedEvent {\n  constructor(participantId, isVideoOn) {\n    this.participantId = void 0;\n    this.timeStamp = void 0;\n    this.isVideoOn = false;\n    this.participantId = participantId;\n    this.isVideoOn = isVideoOn;\n    this.timeStamp = Date.now();\n  }\n\n  process(participant) {\n    participant.isVideoOn = this.isVideoOn;\n  }\n\n}\n\nexport class SelectionState {\n  constructor(participantId, displayName, isUnMuted = false, isVideoOn = false) {\n    this.isVideoOn = void 0;\n    this.isUnMuted = void 0;\n    this.lastUnMuted = void 0;\n    this.participantId = void 0;\n    this.displayName = void 0;\n    this.participantId = participantId;\n    this.displayName = displayName;\n    this.isUnMuted = isUnMuted;\n    this.isVideoOn = isVideoOn;\n    this.lastUnMuted = -1;\n  }\n\n}\nexport default class RemoteStreamSelector {\n  constructor(dominantParticipantsCount, dispatch) {\n    this.dominantParticipantsCount = void 0;\n    this.dipatch = void 0;\n    this.batchedCommands = void 0;\n    this.remoteParticipants = void 0;\n\n    this.compareFn = (a, b) => {\n      if (a.isVideoOn === b.isVideoOn) {\n        if (a.isUnMuted === b.isUnMuted) return b.lastUnMuted - a.lastUnMuted;\n        return a.isUnMuted ? -1 : 1;\n      }\n\n      return a.isVideoOn ? -1 : 1;\n    };\n\n    this.processCommands = (commands = this.batchedCommands) => {\n      commands.forEach(command => {\n        const participant = this.remoteParticipants.get(command.participantId);\n\n        if (!participant) {\n          console.error(`RemoteStreamSelector: Participant ${command.participantId} not found`);\n          return;\n        }\n\n        command.process(participant);\n      });\n      this.batchedCommands = [];\n      const sortedList = [...this.remoteParticipants.values()].sort(this.compareFn);\n      console.log('RemoteStreamSelector: Participants sorted list', sortedList);\n      this.dipatch(setDominantParticipants(sortedList.slice(0, this.dominantParticipantsCount)));\n    };\n\n    this.participantAudioChanged = (participantId, isUnmuted) => {\n      this.batchedCommands.push(new AudioChangedEvent(participantId, isUnmuted));\n    };\n\n    this.participantVideoChanged = (participantId, isVideoOn) => {\n      this.batchedCommands.push(new VideoChangedEvent(participantId, isVideoOn));\n    };\n\n    this.participantStateChanged = (participantId, displayName, state, isUnMuted, isVideoOn) => {\n      switch (state) {\n        case 'Connecting':\n          this.remoteParticipants.set(participantId, new SelectionState(participantId, displayName, isUnMuted, isVideoOn));\n          break;\n\n        case 'Connected':\n          this.remoteParticipants.set(participantId, new SelectionState(participantId, displayName, isUnMuted, isVideoOn));\n          this.participantAudioChanged(participantId, isUnMuted);\n          this.participantVideoChanged(participantId, isVideoOn);\n          break;\n\n        case 'Disconnected':\n          this.remoteParticipants.delete(participantId);\n          this.processCommands(); // Force update Redux list with removed participant.\n\n          break;\n      }\n    };\n\n    this.dominantParticipantsCount = dominantParticipantsCount;\n    this.dipatch = dispatch;\n    this.batchedCommands = [];\n    this.remoteParticipants = new Map();\n    setInterval(() => this.batchedCommands.length > 0 && this.processCommands(), RemoteStreamSelector.ProcessingDelayInSeconds);\n  }\n\n}\nRemoteStreamSelector.ProcessingDelayInSeconds = 2000;\nRemoteStreamSelector.Singleton = void 0;\n\nRemoteStreamSelector.getInstance = (dominantParticipantsCount, dispatch) => {\n  var _RemoteStreamSelector;\n\n  return RemoteStreamSelector.Singleton = (_RemoteStreamSelector = RemoteStreamSelector.Singleton) !== null && _RemoteStreamSelector !== void 0 ? _RemoteStreamSelector : new RemoteStreamSelector(dominantParticipantsCount, dispatch);\n};","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Git Uploads/GroupVideoCalling/Calling/ClientApp/src/core/RemoteStreamSelector.ts"],"names":["setDominantParticipants","AudioChangedEvent","constructor","participantId","isUnMuted","timeStamp","Date","now","process","participant","lastUnMuted","VideoChangedEvent","isVideoOn","SelectionState","displayName","RemoteStreamSelector","dominantParticipantsCount","dispatch","dipatch","batchedCommands","remoteParticipants","compareFn","a","b","processCommands","commands","forEach","command","get","console","error","sortedList","values","sort","log","slice","participantAudioChanged","isUnmuted","push","participantVideoChanged","participantStateChanged","state","set","delete","Map","setInterval","length","ProcessingDelayInSeconds","Singleton","getInstance"],"mappings":"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","sourcesContent":["import { setDominantParticipants } from './actions/calls';\r\nimport { Dispatch } from 'redux';\r\nimport { RemoteParticipantState } from '@azure/communication-calling';\r\n\r\ninterface Event {\r\n  participantId: string;\r\n  timeStamp: number;\r\n  process: Function;\r\n}\r\n\r\nclass AudioChangedEvent implements Event {\r\n  participantId: string;\r\n  timeStamp: number;\r\n  isUnMuted = false;\r\n\r\n  constructor(participantId: string, isUnMuted: boolean) {\r\n    this.participantId = participantId;\r\n    this.isUnMuted = isUnMuted;\r\n    this.timeStamp = Date.now();\r\n  }\r\n\r\n  process(participant: SelectionState): void {\r\n    if (this.isUnMuted && !participant.isUnMuted) {\r\n      participant.lastUnMuted = this.timeStamp;\r\n    }\r\n    participant.isUnMuted = this.isUnMuted;\r\n  }\r\n}\r\n\r\nclass VideoChangedEvent implements Event {\r\n  participantId: string;\r\n  timeStamp: number;\r\n  isVideoOn = false;\r\n\r\n  constructor(participantId: string, isVideoOn: boolean) {\r\n    this.participantId = participantId;\r\n    this.isVideoOn = isVideoOn;\r\n    this.timeStamp = Date.now();\r\n  }\r\n\r\n  process(participant: SelectionState): void {\r\n    participant.isVideoOn = this.isVideoOn;\r\n  }\r\n}\r\n\r\nexport class SelectionState {\r\n  isVideoOn: boolean;\r\n  isUnMuted: boolean;\r\n  lastUnMuted: number;\r\n  participantId: string;\r\n  displayName: string;\r\n\r\n  constructor(participantId: string, displayName: string, isUnMuted = false, isVideoOn = false) {\r\n    this.participantId = participantId;\r\n    this.displayName = displayName;\r\n    this.isUnMuted = isUnMuted;\r\n    this.isVideoOn = isVideoOn;\r\n    this.lastUnMuted = -1;\r\n  }\r\n}\r\n\r\nexport default class RemoteStreamSelector {\r\n  private readonly dominantParticipantsCount: number;\r\n  private readonly dipatch: Dispatch;\r\n  private batchedCommands: Event[];\r\n  private remoteParticipants: Map<string, SelectionState>;\r\n  private static ProcessingDelayInSeconds = 2000;\r\n  private static Singleton: RemoteStreamSelector;\r\n\r\n  constructor(dominantParticipantsCount: number, dispatch: Dispatch) {\r\n    this.dominantParticipantsCount = dominantParticipantsCount;\r\n    this.dipatch = dispatch;\r\n    this.batchedCommands = [];\r\n    this.remoteParticipants = new Map();\r\n\r\n    setInterval(\r\n      () => this.batchedCommands.length > 0 && this.processCommands(),\r\n      RemoteStreamSelector.ProcessingDelayInSeconds\r\n    );\r\n  }\r\n\r\n  private compareFn = (a: SelectionState, b: SelectionState): number => {\r\n    if (a.isVideoOn === b.isVideoOn) {\r\n      if (a.isUnMuted === b.isUnMuted) return b.lastUnMuted - a.lastUnMuted;\r\n      return a.isUnMuted ? -1 : 1;\r\n    }\r\n    return a.isVideoOn ? -1 : 1;\r\n  };\r\n\r\n  public processCommands = (commands = this.batchedCommands): void => {\r\n    commands.forEach((command) => {\r\n      const participant = this.remoteParticipants.get(command.participantId);\r\n      if (!participant) {\r\n        console.error(`RemoteStreamSelector: Participant ${command.participantId} not found`);\r\n        return;\r\n      }\r\n      command.process(participant);\r\n    });\r\n    this.batchedCommands = [];\r\n\r\n    const sortedList = [...this.remoteParticipants.values()].sort(this.compareFn);\r\n    console.log('RemoteStreamSelector: Participants sorted list', sortedList);\r\n\r\n    this.dipatch(setDominantParticipants(sortedList.slice(0, this.dominantParticipantsCount)));\r\n  };\r\n\r\n  public participantAudioChanged = (participantId: string, isUnmuted: boolean): void => {\r\n    this.batchedCommands.push(new AudioChangedEvent(participantId, isUnmuted));\r\n  };\r\n\r\n  public participantVideoChanged = (participantId: string, isVideoOn: boolean): void => {\r\n    this.batchedCommands.push(new VideoChangedEvent(participantId, isVideoOn));\r\n  };\r\n\r\n  public participantStateChanged = (\r\n    participantId: string,\r\n    displayName: string,\r\n    state: RemoteParticipantState,\r\n    isUnMuted: boolean,\r\n    isVideoOn: boolean\r\n  ): void => {\r\n    switch (state) {\r\n      case 'Connecting':\r\n        this.remoteParticipants.set(\r\n          participantId,\r\n          new SelectionState(participantId, displayName, isUnMuted, isVideoOn)\r\n        );\r\n        break;\r\n      case 'Connected':\r\n        this.remoteParticipants.set(\r\n          participantId,\r\n          new SelectionState(participantId, displayName, isUnMuted, isVideoOn)\r\n        );\r\n        this.participantAudioChanged(participantId, isUnMuted);\r\n        this.participantVideoChanged(participantId, isVideoOn);\r\n        break;\r\n      case 'Disconnected':\r\n        this.remoteParticipants.delete(participantId);\r\n        this.processCommands(); // Force update Redux list with removed participant.\r\n        break;\r\n    }\r\n  };\r\n\r\n  public static getInstance = (dominantParticipantsCount: number, dispatch: Dispatch): RemoteStreamSelector =>\r\n    (RemoteStreamSelector.Singleton =\r\n      RemoteStreamSelector.Singleton ?? new RemoteStreamSelector(dominantParticipantsCount, dispatch));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}