{"ast":null,"code":"import _noop from \"lodash/noop\";\nimport { unstable_getStyles as getStyles, unstable_createAnimationStyles as createAnimationStyles, useFluentContext } from '@fluentui/react-bindings';\nvar animationCache = new WeakMap();\nexport var animationClassName = 'ui-animation';\nexport var useAnimationStyles = function useAnimationStyles(displayName, props) {\n  var _useFluentContext = useFluentContext(),\n      theme = _useFluentContext.theme,\n      rtl = _useFluentContext.rtl,\n      disableAnimations = _useFluentContext.disableAnimations,\n      renderer = _useFluentContext.renderer,\n      performance = _useFluentContext.performance;\n\n  if (disableAnimations) {\n    return {\n      className: animationClassName,\n      animationDuration: '0ms',\n      animationDelay: '0ms'\n    };\n  }\n\n  var animation = {\n    name: props.name,\n    keyframeParams: props.keyframeParams,\n    duration: props.duration,\n    delay: props.delay,\n    iterationCount: props.iterationCount,\n    direction: props.direction,\n    fillMode: props.fillMode,\n    playState: props.playState,\n    timingFunction: props.timingFunction\n  };\n  var cacheEnabled = performance.enableStylesCaching;\n  var cachePerTheme = {};\n  var cacheKey = '';\n\n  if (cacheEnabled) {\n    if (!animationCache.has(theme)) {\n      animationCache.set(theme, {});\n    }\n\n    cachePerTheme = animationCache.get(theme);\n    cacheKey = JSON.stringify(animation);\n\n    if (cachePerTheme[cacheKey]) {\n      return cachePerTheme[cacheKey];\n    }\n  }\n\n  var _getStyles = getStyles({\n    allDisplayNames: [displayName],\n    className: animationClassName,\n    primaryDisplayName: displayName,\n    componentProps: {},\n    inlineStylesProps: {\n      styles: createAnimationStyles(animation, theme)\n    },\n    disableAnimations: disableAnimations,\n    renderer: renderer,\n    rtl: rtl,\n    performance: {\n      enableSanitizeCssPlugin: false,\n      enableStylesCaching: false,\n      enableVariablesCaching: false,\n      enableBooleanVariablesCaching: false\n    },\n    saveDebug: _noop,\n    theme: theme,\n    telemetry: undefined\n  }),\n      classes = _getStyles.classes,\n      styles = _getStyles.styles;\n\n  var result = {\n    className: classes.root,\n    animationDuration: styles.root.animationDuration,\n    animationDelay: styles.root.animationDelay\n  };\n\n  if (cacheEnabled) {\n    cachePerTheme[cacheKey] = result;\n    animationCache.set(theme, cachePerTheme);\n  }\n\n  return result;\n};","map":{"version":3,"sources":["components/Animation/useAnimationStyles.ts"],"names":["unstable_getStyles","unstable_createAnimationStyles","animationCache","animationClassName","useAnimationStyles","theme","rtl","disableAnimations","renderer","performance","useFluentContext","className","animationDuration","animationDelay","animation","name","props","keyframeParams","duration","delay","iterationCount","direction","fillMode","playState","timingFunction","cacheEnabled","cachePerTheme","cacheKey","JSON","classes","styles","getStyles","allDisplayNames","primaryDisplayName","componentProps","inlineStylesProps","createAnimationStyles","enableSanitizeCssPlugin","enableStylesCaching","enableVariablesCaching","enableBooleanVariablesCaching","saveDebug","telemetry","undefined","result"],"mappings":"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","sourcesContent":["import {\n  ComponentAnimationProp,\n  unstable_getStyles as getStyles,\n  unstable_createAnimationStyles as createAnimationStyles,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport { ThemePrepared } from '@fluentui/styles';\n\nimport * as _ from 'lodash';\nimport { AnimationProps } from './Animation';\n\ntype UseAnimationStylesResult = {\n  className: string;\n  animationDuration?: string;\n  animationDelay?: string;\n};\n\nconst animationCache = new WeakMap<ThemePrepared, Record<string, UseAnimationStylesResult>>();\nexport const animationClassName = 'ui-animation';\n\nexport const useAnimationStyles = (displayName: string, props: AnimationProps): UseAnimationStylesResult => {\n  const { theme, rtl, disableAnimations, renderer, performance } = useFluentContext();\n\n  if (disableAnimations) {\n    return {\n      className: animationClassName,\n      animationDuration: '0ms',\n      animationDelay: '0ms',\n    };\n  }\n\n  const animation: ComponentAnimationProp = {\n    name: props.name,\n    keyframeParams: props.keyframeParams,\n    duration: props.duration,\n    delay: props.delay,\n    iterationCount: props.iterationCount,\n    direction: props.direction,\n    fillMode: props.fillMode,\n    playState: props.playState,\n    timingFunction: props.timingFunction,\n  };\n\n  const cacheEnabled = performance.enableStylesCaching;\n\n  let cachePerTheme = {};\n  let cacheKey = '';\n\n  if (cacheEnabled) {\n    if (!animationCache.has(theme)) {\n      animationCache.set(theme, {});\n    }\n\n    cachePerTheme = animationCache.get(theme);\n    cacheKey = JSON.stringify(animation);\n\n    if (cachePerTheme[cacheKey]) {\n      return cachePerTheme[cacheKey];\n    }\n  }\n\n  const { classes, styles } = getStyles({\n    allDisplayNames: [displayName],\n    className: animationClassName,\n    primaryDisplayName: displayName,\n    componentProps: {},\n    inlineStylesProps: {\n      styles: createAnimationStyles(animation, theme),\n    },\n\n    disableAnimations,\n    renderer,\n    rtl,\n    performance: {\n      enableSanitizeCssPlugin: false,\n      enableStylesCaching: false,\n      enableVariablesCaching: false,\n      enableBooleanVariablesCaching: false,\n    },\n    saveDebug: _.noop,\n    theme,\n    telemetry: undefined,\n  });\n\n  const result = {\n    className: classes.root,\n    animationDuration: styles.root.animationDuration,\n    animationDelay: styles.root.animationDelay,\n  };\n\n  if (cacheEnabled) {\n    cachePerTheme[cacheKey] = result;\n    animationCache.set(theme, cachePerTheme);\n  }\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}