{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\nexport var chatItemClassName = 'ui-chat__item';\nexport var chatItemSlotClassNames = {\n  message: chatItemClassName + \"__message\",\n  gutter: chatItemClassName + \"__gutter\"\n};\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\n\nexport var ChatItem = /*#__PURE__*/function () {\n  var ChatItem = function ChatItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(ChatItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        attached = props.attached,\n        children = props.children,\n        className = props.className,\n        contentPosition = props.contentPosition,\n        design = props.design,\n        gutter = props.gutter,\n        message = props.message,\n        styles = props.styles,\n        variables = props.variables;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: ChatItem.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(ChatItem.displayName, {\n      className: chatItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          attached: attached,\n          contentPosition: contentPosition\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var renderContent = function renderContent() {\n      var gutterElement = Box.create(gutter, {\n        defaultProps: function defaultProps() {\n          return getA11Props('gutter', {\n            className: chatItemSlotClassNames.gutter,\n            styles: resolvedStyles.gutter\n          });\n        }\n      });\n      var messageElement = Box.create(message, {\n        defaultProps: function defaultProps() {\n          return getA11Props('message', {\n            className: chatItemSlotClassNames.message,\n            styles: resolvedStyles.message\n          });\n        }\n      });\n      return /*#__PURE__*/React.createElement(ChatItemContextProvider, {\n        value: {\n          attached: attached\n        }\n      }, contentPosition === 'start' && gutterElement, messageElement, contentPosition === 'end' && gutterElement);\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : renderContent());\n    setEnd();\n    return element;\n  };\n\n  ChatItem.displayName = 'ChatItem';\n  ChatItem.defaultProps = {\n    as: 'li',\n    contentPosition: 'start',\n    attached: false\n  };\n  ChatItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n    gutter: customPropTypes.itemShorthand,\n    contentPosition: PropTypes.oneOf(['start', 'end']),\n    message: customPropTypes.itemShorthand\n  });\n  ChatItem.handledProps = Object.keys(ChatItem.propTypes);\n  ChatItem.create = createShorthandFactory({\n    Component: ChatItem,\n    mappedProp: 'message'\n  });\n  return ChatItem;\n}();","map":{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["chatItemClassName","chatItemSlotClassNames","message","gutter","ChatItem","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","attached","children","className","contentPosition","design","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","renderContent","gutterElement","defaultProps","messageElement","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","as","content","PropTypes","customPropTypes","itemShorthand","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport const chatItemClassName = 'ui-chat__item';\nexport const chatItemSlotClassNames: ChatItemSlotClassNames = {\n  message: `${chatItemClassName}__message`,\n  gutter: `${chatItemClassName}__gutter`,\n};\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport const ChatItem: ComponentWithAs<'li', ChatItemProps> & FluentComponentStaticProps<ChatItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: chatItemClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: chatItemSlotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: chatItemSlotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.displayName = 'ChatItem';\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n"]},"metadata":{},"sourceType":"module"}