{"ast":null,"code":"export var stringLiteralsArray = function stringLiteralsArray() {\n  var tuple = function tuple() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args;\n  };\n\n  return tuple.apply(void 0, arguments);\n};","map":{"version":3,"sources":["utils/stringLiteralsArray.ts"],"names":["stringLiteralsArray","tuple","args"],"mappings":"AAAA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAyC;AAC1E,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAA;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAsBC,IAAtB,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAsBA,MAAAA,IAAtB,CAAA,IAAA,CAAsBA,GAAtB,SAAA,CAAA,IAAA,CAAsBA;AAAtB;;AAAA,WAAA,IAAA;AAAd,GAAA;;AACA,SAAOD,KAAK,CAALA,KAAAA,CAAAA,KAAAA,CAAAA,EAAP,SAAOA,CAAP;AAFK,CAAA","sourcesContent":["export const stringLiteralsArray = <T extends string>(...args: T[]): T[] => {\n  const tuple = <T extends string>(...args: T[]) => args;\n  return tuple(...args);\n};\n"]},"metadata":{},"sourceType":"module"}