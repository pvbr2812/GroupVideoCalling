{"ast":null,"code":"import * as React from 'react';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useFluentContext, useAccessibility } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nexport var cardBodyClassName = 'ui-card__body';\n/**\n * A CardBody is used to display data in Card body.\n */\n\nexport var CardBody = /*#__PURE__*/function () {\n  var CardBody = function CardBody(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(CardBody.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        children = props.children,\n        fitted = props.fitted;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(CardBody.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: CardBody.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(CardBody.displayName, {\n      className: cardBodyClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          fitted: fitted\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), children);\n    setEnd();\n    return element;\n  };\n\n  CardBody.displayName = 'CardBody';\n  CardBody.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    fitted: PropTypes.bool\n  });\n  CardBody.handledProps = Object.keys(CardBody.propTypes);\n  CardBody.create = createShorthandFactory({\n    Component: CardBody\n  });\n  return CardBody;\n}();","map":{"version":3,"sources":["components/Card/CardBody.tsx"],"names":["cardBodyClassName","CardBody","context","useFluentContext","setStart","setEnd","useTelemetry","className","design","styles","variables","children","fitted","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","commonPropTypes","PropTypes","bool","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FluentComponentStaticProps } from '../../types';\nimport { Accessibility } from '@fluentui/accessibility';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useStyles,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\n\nexport interface CardBodyProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A body can be fitted, without any space above or below it. */\n  fitted?: boolean;\n}\n\nexport type CardBodyStylesProps = Pick<CardBodyProps, 'fitted'>;\nexport const cardBodyClassName = 'ui-card__body';\n\n/**\n * A CardBody is used to display data in Card body.\n */\nexport const CardBody: ComponentWithAs<'div', CardBodyProps> & FluentComponentStaticProps<CardBodyProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CardBody.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, fitted } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardBody.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardBody.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardBodyStylesProps>(CardBody.displayName, {\n    className: cardBodyClassName,\n    mapPropsToStyles: () => ({ fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardBody.displayName = 'CardBody';\n\nCardBody.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.bool,\n};\n\nCardBody.handledProps = Object.keys(CardBody.propTypes) as any;\n\nCardBody.create = createShorthandFactory({ Component: CardBody });\n"]},"metadata":{},"sourceType":"module"}