{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\n\nexport var treeItemBehavior = function treeItemBehavior(props) {\n  var _ref;\n\n  var definition = {\n    attributes: {\n      root: Object.assign({\n        role: 'none'\n      }, props.hasSubtree && (_ref = {\n        'aria-expanded': props.expanded,\n        'aria-selected': props.selectable ? props.selected || false : undefined,\n        tabIndex: -1\n      }, _ref[IS_FOCUSABLE_ATTRIBUTE] = true, _ref.role = 'treeitem', _ref['aria-setsize'] = props.treeSize, _ref['aria-posinset'] = props.index, _ref['aria-level'] = props.level, _ref))\n    },\n    keyActions: {\n      root: Object.assign({\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }, isSubtreeExpanded(props) && {\n        collapse: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        },\n        focusFirstChild: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        },\n        focusParent: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        }\n      }, !isSubtreeExpanded(props) && props.hasSubtree && {\n        expand: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        },\n        focusParent: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        }\n      }, {\n        expandSiblings: {\n          keyCombinations: [{\n            keyCode: keyboardKey['*']\n          }]\n        }\n      }, props.selectable && {\n        performClick: {\n          keyCombinations: props.hasSubtree ? [{\n            keyCode: keyboardKey.Enter\n          }] : [{\n            keyCode: SpacebarKey\n          }]\n        },\n        performSelection: {\n          keyCombinations: [{\n            keyCode: SpacebarKey\n          }]\n        }\n      })\n    },\n    childBehaviors: {\n      title: treeTitleBehavior\n    }\n  };\n\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n\n  return definition;\n};\n/** Checks if current tree item has a subtree and it is expanded */\n\nvar isSubtreeExpanded = function isSubtreeExpanded(props) {\n  var hasSubtree = props.hasSubtree,\n      expanded = props.expanded;\n  return !!(hasSubtree && expanded);\n};","map":{"version":3,"sources":["behaviors/Tree/treeItemBehavior.ts"],"names":["treeItemBehavior","definition","attributes","root","role","props","tabIndex","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","isSubtreeExpanded","collapse","ArrowLeft","focusFirstChild","ArrowRight","focusParent","expand","expandSiblings","performSelection","childBehaviors","title","treeTitleBehavior","process","hasSubtree","expanded"],"mappings":"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","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { Accessibility, AriaRole } from '../../types';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const definition = {\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          'aria-expanded': props.expanded,\n          'aria-selected': props.selectable ? props.selected || false : undefined,\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          'aria-level': props.level,\n        }),\n      },\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n        ...(isSubtreeExpanded(props) && {\n          collapse: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n          },\n          focusFirstChild: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n          },\n          focusParent: {\n            keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n          },\n        }),\n        ...(!isSubtreeExpanded(props) &&\n          props.hasSubtree && {\n            expand: {\n              keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n            },\n            focusParent: {\n              keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n            },\n          }),\n        expandSiblings: {\n          keyCombinations: [{ keyCode: keyboardKey['*'] }],\n        },\n        ...(props.selectable && {\n          performClick: {\n            keyCombinations: props.hasSubtree ? [{ keyCode: keyboardKey.Enter }] : [{ keyCode: SpacebarKey }],\n          },\n          performSelection: {\n            keyCombinations: [{ keyCode: SpacebarKey }],\n          },\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n\n  return definition;\n};\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it indicates if it's expanded. */\n  expanded?: boolean;\n  level?: number;\n  index?: number;\n  hasSubtree?: boolean;\n  treeSize?: number;\n  selectable?: boolean;\n  selected?: boolean;\n};\n\n/** Checks if current tree item has a subtree and it is expanded */\nconst isSubtreeExpanded = (props: TreeItemBehaviorProps): boolean => {\n  const { hasSubtree, expanded } = props;\n  return !!(hasSubtree && expanded);\n};\n"]},"metadata":{},"sourceType":"module"}