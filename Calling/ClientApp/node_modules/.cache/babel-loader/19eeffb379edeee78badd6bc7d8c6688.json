{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { TestSpan } from \"./testSpan\";\nimport { NoOpTracer } from \"../noop/noOpTracer\";\nimport { SpanKind, TraceFlags } from \"@opentelemetry/api\";\n/**\n * A mock tracer useful for testing\n */\n\nvar TestTracer =\n/** @class */\nfunction (_super) {\n  __extends(TestTracer, _super);\n\n  function TestTracer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.traceIdCounter = 0;\n    _this.spanIdCounter = 0;\n    _this.rootSpans = [];\n    _this.knownSpans = [];\n    return _this;\n  }\n\n  TestTracer.prototype.getNextTraceId = function () {\n    this.traceIdCounter++;\n    return String(this.traceIdCounter);\n  };\n\n  TestTracer.prototype.getNextSpanId = function () {\n    this.spanIdCounter++;\n    return String(this.spanIdCounter);\n  };\n  /**\n   * Returns all Spans that were created without a parent\n   */\n\n\n  TestTracer.prototype.getRootSpans = function () {\n    return this.rootSpans;\n  };\n  /**\n   * Returns all Spans this Tracer knows about\n   */\n\n\n  TestTracer.prototype.getKnownSpans = function () {\n    return this.knownSpans;\n  };\n  /**\n   * Returns all Spans where end() has not been called\n   */\n\n\n  TestTracer.prototype.getActiveSpans = function () {\n    return this.knownSpans.filter(function (span) {\n      return !span.endCalled;\n    });\n  };\n  /**\n   * Return all Spans for a particular trace, grouped by their\n   * parent Span in a tree-like structure\n   * @param traceId The traceId to return the graph for\n   */\n\n\n  TestTracer.prototype.getSpanGraph = function (traceId) {\n    var traceSpans = this.knownSpans.filter(function (span) {\n      return span.context().traceId === traceId;\n    });\n    var roots = [];\n    var nodeMap = new Map();\n\n    for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {\n      var span = traceSpans_1[_i];\n      var spanId = span.context().spanId;\n      var node = {\n        name: span.name,\n        children: []\n      };\n      nodeMap.set(spanId, node);\n\n      if (span.parentSpanId) {\n        var parent = nodeMap.get(span.parentSpanId);\n\n        if (!parent) {\n          throw new Error(\"Span with name \" + node.name + \" has an unknown parentSpan with id \" + span.parentSpanId);\n        }\n\n        parent.children.push(node);\n      } else {\n        roots.push(node);\n      }\n    }\n\n    return {\n      roots: roots\n    };\n  };\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n\n\n  TestTracer.prototype.startSpan = function (name, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var parentContext = this._getParentContext(options);\n\n    var traceId;\n    var isRootSpan = false;\n\n    if (parentContext && parentContext.traceId) {\n      traceId = parentContext.traceId;\n    } else {\n      traceId = this.getNextTraceId();\n      isRootSpan = true;\n    }\n\n    var context = {\n      traceId: traceId,\n      spanId: this.getNextSpanId(),\n      traceFlags: TraceFlags.NONE\n    };\n    var span = new TestSpan(this, name, context, options.kind || SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options.startTime);\n    this.knownSpans.push(span);\n\n    if (isRootSpan) {\n      this.rootSpans.push(span);\n    }\n\n    return span;\n  };\n\n  TestTracer.prototype._getParentContext = function (options) {\n    var parent = options.parent;\n    var result;\n\n    if (parent) {\n      if (\"traceId\" in parent) {\n        result = parent;\n      } else {\n        result = parent.context();\n      }\n    }\n\n    return result;\n  };\n\n  return TestTracer;\n}(NoOpTracer);\n\nexport { TestTracer };","map":{"version":3,"sources":["../../../../src/tracers/test/testTracer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TestSpan } from \"./testSpan\";\nimport { NoOpTracer } from \"../noop/noOpTracer\";\nimport { SpanContext, SpanKind, SpanOptions, TraceFlags } from \"@opentelemetry/api\";\n\n/**\n * Simple representation of a Span that only has name and child relationships.\n * Children should be arranged in the order they were created.\n */\nexport interface SpanGraphNode {\n  /**\n   * The Span name\n   */\n  name: string;\n  /**\n   * All child Spans of this Span\n   */\n  children: SpanGraphNode[];\n}\n\n/**\n * Contains all the spans for a particular TraceID\n * starting at unparented roots\n */\nexport interface SpanGraph {\n  /**\n   * All Spans without a parentSpanId\n   */\n  roots: SpanGraphNode[];\n}\n\n/**\n * A mock tracer useful for testing\n */\nexport class TestTracer extends NoOpTracer {\n  private traceIdCounter = 0;\n  private getNextTraceId(): string {\n    this.traceIdCounter++;\n    return String(this.traceIdCounter);\n  }\n\n  private spanIdCounter = 0;\n  private getNextSpanId(): string {\n    this.spanIdCounter++;\n    return String(this.spanIdCounter);\n  }\n\n  private rootSpans: TestSpan[] = [];\n  private knownSpans: TestSpan[] = [];\n\n  /**\n   * Returns all Spans that were created without a parent\n   */\n  getRootSpans(): TestSpan[] {\n    return this.rootSpans;\n  }\n\n  /**\n   * Returns all Spans this Tracer knows about\n   */\n  getKnownSpans(): TestSpan[] {\n    return this.knownSpans;\n  }\n\n  /**\n   * Returns all Spans where end() has not been called\n   */\n  getActiveSpans(): TestSpan[] {\n    return this.knownSpans.filter((span) => {\n      return !span.endCalled;\n    });\n  }\n\n  /**\n   * Return all Spans for a particular trace, grouped by their\n   * parent Span in a tree-like structure\n   * @param traceId The traceId to return the graph for\n   */\n  getSpanGraph(traceId: string): SpanGraph {\n    const traceSpans = this.knownSpans.filter((span) => {\n      return span.context().traceId === traceId;\n    });\n\n    const roots: SpanGraphNode[] = [];\n    const nodeMap: Map<string, SpanGraphNode> = new Map<string, SpanGraphNode>();\n\n    for (const span of traceSpans) {\n      const spanId = span.context().spanId;\n      const node: SpanGraphNode = {\n        name: span.name,\n        children: []\n      };\n      nodeMap.set(spanId, node);\n      if (span.parentSpanId) {\n        const parent = nodeMap.get(span.parentSpanId);\n        if (!parent) {\n          throw new Error(\n            `Span with name ${node.name} has an unknown parentSpan with id ${span.parentSpanId}`\n          );\n        }\n        parent.children.push(node);\n      } else {\n        roots.push(node);\n      }\n    }\n\n    return {\n      roots\n    };\n  }\n\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  startSpan(name: string, options: SpanOptions = {}): TestSpan {\n    const parentContext = this._getParentContext(options);\n\n    let traceId: string;\n    let isRootSpan = false;\n\n    if (parentContext && parentContext.traceId) {\n      traceId = parentContext.traceId;\n    } else {\n      traceId = this.getNextTraceId();\n      isRootSpan = true;\n    }\n\n    const context: SpanContext = {\n      traceId,\n      spanId: this.getNextSpanId(),\n      traceFlags: TraceFlags.NONE\n    };\n    const span = new TestSpan(\n      this,\n      name,\n      context,\n      options.kind || SpanKind.INTERNAL,\n      parentContext ? parentContext.spanId : undefined,\n      options.startTime\n    );\n    this.knownSpans.push(span);\n    if (isRootSpan) {\n      this.rootSpans.push(span);\n    }\n    return span;\n  }\n\n  private _getParentContext(options: SpanOptions): SpanContext | undefined {\n    const parent = options.parent;\n    let result: SpanContext | undefined;\n    if (parent) {\n      if (\"traceId\" in parent) {\n        result = parent;\n      } else {\n        result = parent.context();\n      }\n    }\n    return result;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}