{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\nexport function logPolicy(loggingOptions) {\n  if (loggingOptions === void 0) {\n    loggingOptions = {};\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n\nvar LogPolicy =\n/** @class */\nfunction (_super) {\n  __extends(LogPolicy, _super);\n\n  function LogPolicy(nextPolicy, options, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.logger,\n        logger = _c === void 0 ? coreLogger.info : _c,\n        _d = _b.allowedHeaderNames,\n        allowedHeaderNames = _d === void 0 ? [] : _d,\n        _e = _b.allowedQueryParameters,\n        allowedQueryParameters = _e === void 0 ? [] : _e;\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.logger = logger;\n    _this.sanitizer = new Sanitizer({\n      allowedHeaderNames: allowedHeaderNames,\n      allowedQueryParameters: allowedQueryParameters\n    });\n    return _this;\n  }\n\n  Object.defineProperty(LogPolicy.prototype, \"allowedHeaderNames\", {\n    /**\n     * Header names whose values will be logged when logging is enabled. Defaults to\n     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n     * specified in this field will be added to that list.  Any other values will\n     * be written to logs as \"REDACTED\".\n     * @deprecated Pass these into the constructor instead.\n     */\n    get: function () {\n      return this.sanitizer.allowedHeaderNames;\n    },\n\n    /**\n     * Header names whose values will be logged when logging is enabled. Defaults to\n     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n     * specified in this field will be added to that list.  Any other values will\n     * be written to logs as \"REDACTED\".\n     * @deprecated Pass these into the constructor instead.\n     */\n    set: function (allowedHeaderNames) {\n      this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LogPolicy.prototype, \"allowedQueryParameters\", {\n    /**\n     * Query string names whose values will be logged when logging is enabled. By default no\n     * query string values are logged.\n     * @deprecated Pass these into the constructor instead.\n     */\n    get: function () {\n      return this.sanitizer.allowedQueryParameters;\n    },\n\n    /**\n     * Query string names whose values will be logged when logging is enabled. By default no\n     * query string values are logged.\n     * @deprecated Pass these into the constructor instead.\n     */\n    set: function (allowedQueryParameters) {\n      this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LogPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return _this.logResponse(response);\n    });\n  };\n\n  LogPolicy.prototype.logRequest = function (request) {\n    this.logger(\"Request: \" + this.sanitizer.sanitize(request));\n  };\n\n  LogPolicy.prototype.logResponse = function (response) {\n    this.logger(\"Response status code: \" + response.status);\n    this.logger(\"Headers: \" + this.sanitizer.sanitize(response.headers));\n    return response;\n  };\n\n  return LogPolicy;\n}(BaseRequestPolicy);\n\nexport { LogPolicy };","map":{"version":3,"sources":["../../../src/policies/logPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport { Debugger } from \"@azure/logger\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n\n  /**\n   * The Debugger (logger) instance to use for writing pipeline logs.\n   */\n  logger?: Debugger;\n}\n\nexport function logPolicy(loggingOptions: LogPolicyOptions = {}): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n\nexport class LogPolicy extends BaseRequestPolicy {\n  logger: Debugger;\n  sanitizer: Sanitizer;\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedHeaderNames(): Set<string> {\n    return this.sanitizer.allowedHeaderNames;\n  }\n\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedHeaderNames(allowedHeaderNames: Set<string>) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public get allowedQueryParameters(): Set<string> {\n    return this.sanitizer.allowedQueryParameters;\n  }\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n  public set allowedQueryParameters(allowedQueryParameters: Set<string>) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    {\n      logger = coreLogger.info,\n      allowedHeaderNames = [],\n      allowedQueryParameters = []\n    }: LogPolicyOptions = {}\n  ) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({ allowedHeaderNames, allowedQueryParameters });\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then((response) => this.logResponse(response));\n  }\n\n  private logRequest(request: WebResourceLike): void {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  private logResponse(response: HttpOperationResponse): HttpOperationResponse {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}