{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\n\nexport function isHttpHeadersLike(object) {\n  if (object && typeof object === \"object\") {\n    var castObject = object;\n\n    if (typeof castObject.rawHeaders === \"function\" && typeof castObject.clone === \"function\" && typeof castObject.get === \"function\" && typeof castObject.set === \"function\" && typeof castObject.contains === \"function\" && typeof castObject.remove === \"function\" && typeof castObject.headersArray === \"function\" && typeof castObject.headerValues === \"function\" && typeof castObject.headerNames === \"function\" && typeof castObject.toJson === \"function\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\n\nvar HttpHeaders =\n/** @class */\nfunction () {\n  function HttpHeaders(rawHeaders) {\n    this._headersMap = {};\n\n    if (rawHeaders) {\n      for (var headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n\n\n  HttpHeaders.prototype.set = function (headerName, headerValue) {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  };\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n\n\n  HttpHeaders.prototype.get = function (headerName) {\n    var header = this._headersMap[getHeaderKey(headerName)];\n\n    return !header ? undefined : header.value;\n  };\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n\n\n  HttpHeaders.prototype.contains = function (headerName) {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  };\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n\n\n  HttpHeaders.prototype.remove = function (headerName) {\n    var result = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  };\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n\n\n  HttpHeaders.prototype.rawHeaders = function () {\n    var result = {};\n\n    for (var headerKey in this._headersMap) {\n      var header = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n\n    return result;\n  };\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n\n\n  HttpHeaders.prototype.headersArray = function () {\n    var headers = [];\n\n    for (var headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n\n    return headers;\n  };\n  /**\n   * Get the header names that are contained in this collection.\n   */\n\n\n  HttpHeaders.prototype.headerNames = function () {\n    var headerNames = [];\n    var headers = this.headersArray();\n\n    for (var i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n\n    return headerNames;\n  };\n  /**\n   * Get the header values that are contained in this collection.\n   */\n\n\n  HttpHeaders.prototype.headerValues = function () {\n    var headerValues = [];\n    var headers = this.headersArray();\n\n    for (var i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n\n    return headerValues;\n  };\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n\n\n  HttpHeaders.prototype.toJson = function () {\n    return this.rawHeaders();\n  };\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n\n\n  HttpHeaders.prototype.toString = function () {\n    return JSON.stringify(this.toJson());\n  };\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n\n\n  HttpHeaders.prototype.clone = function () {\n    return new HttpHeaders(this.rawHeaders());\n  };\n\n  return HttpHeaders;\n}();\n\nexport { HttpHeaders };","map":{"version":3,"sources":["../../src/httpHeaders.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string): string {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport interface HttpHeadersLike {\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  set(headerName: string, headerValue: string | number): void;\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  get(headerName: string): string | undefined;\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName: string): boolean;\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  remove(headerName: string): boolean;\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders(): RawHttpHeaders;\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray(): HttpHeader[];\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames(): string[];\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues(): string[];\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone(): HttpHeadersLike;\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   * The result is the same as `rawHeaders()`.\n   */\n  toJson(): RawHttpHeaders;\n}\n\nexport function isHttpHeadersLike(object?: unknown): object is HttpHeadersLike {\n  if (object && typeof object === \"object\") {\n    const castObject = object as {\n      rawHeaders: unknown;\n      clone: unknown;\n      get: unknown;\n      set: unknown;\n      contains: unknown;\n      remove: unknown;\n      headersArray: unknown;\n      headerValues: unknown;\n      headerNames: unknown;\n      toJson: unknown;\n    };\n    if (\n      typeof castObject.rawHeaders === \"function\" &&\n      typeof castObject.clone === \"function\" &&\n      typeof castObject.get === \"function\" &&\n      typeof castObject.set === \"function\" &&\n      typeof castObject.contains === \"function\" &&\n      typeof castObject.remove === \"function\" &&\n      typeof castObject.headersArray === \"function\" &&\n      typeof castObject.headerValues === \"function\" &&\n      typeof castObject.headerNames === \"function\" &&\n      typeof castObject.toJson === \"function\"\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders implements HttpHeadersLike {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}