{"ast":null,"code":"import _includes from \"lodash/includes\";\nimport _isArray from \"lodash/isArray\";\nimport { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n/**\n * @description\n * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.\n *\n * @specification\n * Adds attribute 'aria-disabled=true' to 'trigger' slot if 'disabled' property is true. Does not set the attribute otherwise.\n * Adds attribute 'role=dialog' to 'popup' slot if 'trapFocus' property is true. Sets the attribute to 'complementary' otherwise.\n * Adds attribute 'aria-modal=true' to 'popup' slot if 'trapFocus' property is true. Does not set the attribute otherwise.\n */\n\nexport var popupBehavior = function popupBehavior(props) {\n  var onAsArray = _isArray(props.on) ? props.on : [props.on];\n  var tabbableTriggerProps = props.tabbableTrigger ? {\n    tabIndex: getAriaAttributeFromProps('tabIndex', props, 0)\n  } : undefined;\n\n  if (tabbableTriggerProps) {\n    tabbableTriggerProps['aria-haspopup'] = 'dialog';\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Override the default trigger's accessibility schema class.\n      tabbableTriggerProps['data-aa-class'] = 'PopupButton';\n    }\n  }\n\n  return {\n    attributes: {\n      trigger: Object.assign({}, tabbableTriggerProps, {\n        'aria-disabled': props.disabled\n      }),\n      popup: {\n        role: props.trapFocus ? 'dialog' : 'complementary',\n        'aria-modal': props.trapFocus ? true : undefined\n      }\n    },\n    keyActions: {\n      popup: {\n        closeAndFocusTrigger: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Escape\n          }]\n        },\n        preventScroll: {\n          keyCombinations: props.isOpenedByRightClick && _includes(onAsArray, 'context') && [{\n            keyCode: keyboardKey.ArrowDown\n          }, {\n            keyCode: keyboardKey.ArrowUp\n          }, {\n            keyCode: keyboardKey.PageDown\n          }, {\n            keyCode: keyboardKey.PageUp\n          }, {\n            keyCode: keyboardKey.Home\n          }, {\n            keyCode: keyboardKey.End\n          }]\n        }\n      },\n      trigger: {\n        close: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Escape\n          }]\n        },\n        toggle: {\n          keyCombinations: _includes(onAsArray, 'click') && [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        },\n        open: {\n          keyCombinations: _includes(onAsArray, 'hover') && !_includes(onAsArray, 'context') && [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        },\n        click: {\n          keyCombinations: _includes(onAsArray, 'hover') && !_includes(onAsArray, 'context') && [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }\n    }\n  };\n};\n\nvar isFocusable = function isFocusable(propsData) {\n  try {\n    var as = propsData.as,\n        href = propsData.href,\n        type = propsData.type;\n    return type === 'button' || type === 'input' || type === 'a' && href !== undefined || as === 'button';\n  } catch (_unused) {\n    return false;\n  }\n};\n\nvar getAriaAttributeFromProps = function getAriaAttributeFromProps(attributeName, props, defaultValue) {\n  if (!props.trigger) return undefined;\n\n  if (props.trigger.props[attributeName]) {\n    return props.trigger.props[attributeName];\n  }\n\n  var _props$trigger$props = props.trigger.props,\n      as = _props$trigger$props.as,\n      href = _props$trigger$props.href;\n  var type = props.trigger.type;\n\n  if (isFocusable({\n    as: as,\n    href: href,\n    type: type\n  })) {\n    return undefined;\n  }\n\n  return defaultValue;\n};","map":{"version":3,"sources":["behaviors/Popup/popupBehavior.ts"],"names":["popupBehavior","onAsArray","props","tabbableTriggerProps","tabIndex","getAriaAttributeFromProps","process","attributes","trigger","disabled","popup","role","undefined","keyActions","closeAndFocusTrigger","keyCombinations","keyCode","keyboardKey","Escape","preventScroll","ArrowDown","ArrowUp","PageDown","PageUp","Home","End","close","toggle","Enter","SpacebarKey","open","click","isFocusable","as","href","type","propsData"],"mappings":"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","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport * as _ from 'lodash';\n\nimport { Accessibility } from '../../types';\n\n/**\n * @description\n * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.\n *\n * @specification\n * Adds attribute 'aria-disabled=true' to 'trigger' slot if 'disabled' property is true. Does not set the attribute otherwise.\n * Adds attribute 'role=dialog' to 'popup' slot if 'trapFocus' property is true. Sets the attribute to 'complementary' otherwise.\n * Adds attribute 'aria-modal=true' to 'popup' slot if 'trapFocus' property is true. Does not set the attribute otherwise.\n */\nexport const popupBehavior: Accessibility<PopupBehaviorProps> = props => {\n  const onAsArray = _.isArray(props.on) ? props.on : [props.on];\n  const tabbableTriggerProps = props.tabbableTrigger\n    ? { tabIndex: getAriaAttributeFromProps('tabIndex', props, 0) }\n    : undefined;\n\n  if (tabbableTriggerProps) {\n    tabbableTriggerProps['aria-haspopup'] = 'dialog';\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Override the default trigger's accessibility schema class.\n      tabbableTriggerProps['data-aa-class'] = 'PopupButton';\n    }\n  }\n\n  return {\n    attributes: {\n      trigger: {\n        ...tabbableTriggerProps,\n        'aria-disabled': props.disabled,\n      },\n      popup: {\n        role: props.trapFocus ? 'dialog' : 'complementary',\n        'aria-modal': props.trapFocus ? true : undefined,\n      },\n    },\n    keyActions: {\n      popup: {\n        closeAndFocusTrigger: {\n          keyCombinations: [{ keyCode: keyboardKey.Escape }],\n        },\n        preventScroll: {\n          keyCombinations: props.isOpenedByRightClick &&\n            _.includes(onAsArray, 'context') && [\n              { keyCode: keyboardKey.ArrowDown },\n              { keyCode: keyboardKey.ArrowUp },\n              { keyCode: keyboardKey.PageDown },\n              { keyCode: keyboardKey.PageUp },\n              { keyCode: keyboardKey.Home },\n              { keyCode: keyboardKey.End },\n            ],\n        },\n      },\n      trigger: {\n        close: {\n          keyCombinations: [{ keyCode: keyboardKey.Escape }],\n        },\n        toggle: {\n          keyCombinations: _.includes(onAsArray, 'click') && [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n        open: {\n          keyCombinations: _.includes(onAsArray, 'hover') &&\n            !_.includes(onAsArray, 'context') && [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n        click: {\n          keyCombinations: _.includes(onAsArray, 'hover') &&\n            !_.includes(onAsArray, 'context') && [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n        },\n      },\n    },\n  };\n};\n\nconst isFocusable = propsData => {\n  try {\n    const { as, href, type } = propsData;\n    return type === 'button' || type === 'input' || (type === 'a' && href !== undefined) || as === 'button';\n  } catch {\n    return false;\n  }\n};\n\nconst getAriaAttributeFromProps = (attributeName: string, props: any, defaultValue: number | string) => {\n  if (!props.trigger) return undefined;\n  if (props.trigger.props[attributeName]) {\n    return props.trigger.props[attributeName];\n  }\n  const { as, href } = props.trigger.props;\n  const { type } = props.trigger;\n  if (isFocusable({ as, href, type })) {\n    return undefined;\n  }\n  return defaultValue;\n};\n\ntype PopupEvents = 'click' | 'hover' | 'focus' | 'context';\ntype RestrictedClickEvents = 'click' | 'focus';\ntype RestrictedHoverEvents = 'hover' | 'focus' | 'context';\ntype PopupEventsArray = RestrictedClickEvents[] | RestrictedHoverEvents[];\n\nexport type PopupBehaviorProps = {\n  /** Indicates if focus should be trapped inside popup's container. */\n  trapFocus?: boolean | object;\n  /** Events triggering the popup. */\n  on?: PopupEvents | PopupEventsArray;\n  /** Indicates if popup's trigger is disabled. */\n  disabled?: boolean;\n  /** Element which triggers popup */\n  trigger?: {\n    props?: {\n      /** Element type. */\n      as?: string;\n      href?: string;\n      tabIndex?: string;\n    };\n    /** Element type. */\n    type?: string;\n  };\n  /** Whether the trigger should be tabbable */\n  tabbableTrigger?: boolean;\n  /** Whether the popup was opened by right click */\n  isOpenedByRightClick?: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}