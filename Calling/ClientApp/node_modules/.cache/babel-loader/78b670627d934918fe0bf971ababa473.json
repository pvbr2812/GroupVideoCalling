{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { resolveClasses } from './resolveClasses';\nimport { resolveSlotProps } from './resolveSlotProps';\n/**\n * Merge props takes in state and compose options, and resolves slots and slotProps.\n * It's expected that the component will call mergeProps(state, options) from within\n * render; after resolving state and before rendering slots and slotProps.\n */\n\nexport function mergeProps(state, options) {\n  var result = {\n    state: state,\n    slots: __assign(__assign({}, options.slots), {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      root: state.as || options.slots.root || 'div'\n    }),\n    slotProps: {}\n  }; // Resolve classes.\n\n  resolveClasses(result, options.classes); // Resolve slotProps/slots from state.\n\n  resolveSlotProps(result, options); // TODO: Resolve inline styles.\n\n  return result;\n}","map":{"version":3,"sources":["mergeProps.ts"],"names":[],"mappings":";AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,UAAV,CAMJ,KANI,EAMW,OANX,EAM0D;AAC9D,MAAM,MAAM,GAA6B;AACvC,IAAA,KAAK,EAAE,KADgC;AAEvC,IAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,OAAO,CAAC,KADR,CAAA,EACa;AAChB;AACA,MAAA,IAAI,EAAG,KAAa,CAAC,EAAd,IAAoB,OAAO,CAAC,KAAR,CAAc,IAAlC,IAA0C;AAFjC,KADb,CAFkC;AAOvC,IAAA,SAAS,EAAE;AAP4B,GAAzC,CAD8D,CAW9D;;AACA,EAAA,cAAc,CAAC,MAAD,EAAS,OAAO,CAAC,OAAjB,CAAd,CAZ8D,CAc9D;;AACA,EAAA,gBAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAf8D,CAiB9D;;AAEA,SAAO,MAAP;AACD","sourcesContent":["import { ComposePreparedOptions, MergePropsResult, GenericDictionary } from './types';\nimport { resolveClasses } from './resolveClasses';\nimport { resolveSlotProps } from './resolveSlotProps';\n\n/**\n * Merge props takes in state and compose options, and resolves slots and slotProps.\n * It's expected that the component will call mergeProps(state, options) from within\n * render; after resolving state and before rendering slots and slotProps.\n */\nexport function mergeProps<\n  TProps,\n  TState = TProps,\n  TSlots = GenericDictionary,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TSlotProps = { [key in keyof TSlots]: any }\n>(state: TState, options: ComposePreparedOptions<TProps, TState>): MergePropsResult<TState, TSlots, TSlotProps> {\n  const result: MergePropsResult<TState> = {\n    state: state,\n    slots: {\n      ...options.slots,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      root: (state as any).as || options.slots.root || 'div',\n    },\n    slotProps: {},\n  };\n\n  // Resolve classes.\n  resolveClasses(result, options.classes);\n\n  // Resolve slotProps/slots from state.\n  resolveSlotProps(result, options);\n\n  // TODO: Resolve inline styles.\n\n  return result as MergePropsResult<TState, TSlots, TSlotProps>;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}