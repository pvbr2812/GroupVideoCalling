{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Git Uploads\\\\GroupVideoCalling\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\MediaGallery.tsx\";\nimport React, { useMemo, useState } from 'react';\nimport { mediaGalleryGridStyle, mediaGalleryStyle, mediaGallerySubstageStyle, substageMediaGalleryStyle } from './styles/MediaGallery.styles';\nimport { utils } from '../Utils/Utils';\nimport LocalStreamMedia from './LocalStreamMedia';\nimport RemoteStreamMedia from './RemoteStreamMedia';\nimport { Stack } from '@fluentui/react';\nimport { Constants } from '../core/constants';\nexport default (props => {\n  const [gridCol, setGridCol] = useState(1);\n  const [gridRow, setGridRow] = useState(1); // For now we are only going to support up to a 4x3 grid or 10 participants in a call\n  // Since this is a sample, we will just hard-code how we want the grid to scale\n  // the rows and columns for the number of users in the call\n\n  const rows = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3];\n  const cols = [1, 2, 2, 2, 3, 3, 3, 3, 3, 4];\n\n  if (Constants.DOMINANT_PARTICIPANTS_COUNT < 0 || Constants.DOMINANT_PARTICIPANTS_COUNT > rows.length - 1) {\n    console.warn(`Please use a value for dominant participants between 0 <= x <= ${rows.length - 1}`);\n  }\n\n  const numRemoteParticipantsToRender = Math.min(Constants.DOMINANT_PARTICIPANTS_COUNT, rows.length - 1);\n\n  const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n  const getMediaGalleryTilesForParticipants = (participants, displayName) => {\n    const remoteParticipantsMediaGalleryItems = participants.map(participant => {\n      var _participant$displayN;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: `${utils.getId(participant.identifier)}-tile`,\n        className: mediaGalleryStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(RemoteStreamMedia, {\n        key: utils.getId(participant.identifier),\n        stream: participant.videoStreams[0],\n        isParticipantStreamSelected: props.dominantParticipants.filter(p => p.participantId === utils.getId(participant.identifier)).length > 0,\n        label: (_participant$displayN = participant.displayName) !== null && _participant$displayN !== void 0 ? _participant$displayN : utils.getId(participant.identifier),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }));\n    }); // for now we will always add the local user to the main stage\n\n    const localParticipantMediaGalleryItem = /*#__PURE__*/React.createElement(\"div\", {\n      key: \"localParticipantTile\",\n      className: mediaGalleryStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LocalStreamMedia, {\n      label: displayName,\n      stream: props.localVideoStream,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n    remoteParticipantsMediaGalleryItems.unshift(localParticipantMediaGalleryItem);\n    return remoteParticipantsMediaGalleryItems;\n  };\n\n  const getSubstageMediaGalleryTilesForParticipants = participants => {\n    const remoteParticipantsMediaGalleryItems = participants.map(participant => {\n      var _participant$displayN2;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: `${utils.getId(participant.identifier)}-tile`,\n        className: substageMediaGalleryStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(RemoteStreamMedia, {\n        key: utils.getId(participant.identifier),\n        stream: participant.videoStreams[0],\n        isParticipantStreamSelected: false,\n        label: (_participant$displayN2 = participant.displayName) !== null && _participant$displayN2 !== void 0 ? _participant$displayN2 : utils.getId(participant.identifier),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }));\n    });\n    return remoteParticipantsMediaGalleryItems;\n  }; // determine number of rows/columns to add to the grid\n\n\n  const numberStreamsToRender = useMemo(() => clamp(props.remoteParticipants.length, 0, numRemoteParticipantsToRender), [numRemoteParticipantsToRender, props.remoteParticipants.length]);\n\n  if (cols[numberStreamsToRender] !== gridCol) {\n    if (numberStreamsToRender > cols.length - 1) {\n      throw new Error(`attempting to set up a number of columns in the gallery for an unexpected number of participants ${numberStreamsToRender}`);\n    }\n\n    setGridCol(cols[numberStreamsToRender]);\n  }\n\n  if (rows[numberStreamsToRender] !== gridRow) {\n    if (numberStreamsToRender > rows.length - 1) {\n      throw new Error(`attempting to set up a number of rows in the gallery for an expected number of participants ${numberStreamsToRender}`);\n    }\n\n    setGridRow(rows[numberStreamsToRender]);\n  } // sort by dominance\n\n\n  const participantsToLayout = props.remoteParticipants.sort((a, b) => {\n    const isParticipantADominant = props.dominantParticipants.filter(p => p.participantId === utils.getId(a.identifier)).length > 0;\n    const isParticipantBDominant = props.dominantParticipants.filter(p => p.participantId === utils.getId(b.identifier)).length > 0;\n\n    if (isParticipantADominant && !isParticipantBDominant) {\n      return -1;\n    } else if (!isParticipantADominant && isParticipantBDominant) {\n      return 1;\n    }\n\n    return 0;\n  });\n  const mainStageParticipants = participantsToLayout.slice(0, numRemoteParticipantsToRender);\n  const substageParticipants = participantsToLayout.slice(numRemoteParticipantsToRender); // don't show the substage if its not necessary\n\n  const isSubstageVisible = substageParticipants.length > 0;\n  return /*#__PURE__*/React.createElement(Stack, {\n    style: {\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"video-gallery\",\n    className: mediaGalleryGridStyle,\n    style: {\n      gridTemplateRows: `repeat(${gridRow}, minmax(0, 1fr))`,\n      gridTemplateColumns: `repeat(${gridCol}, 1fr)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, getMediaGalleryTilesForParticipants(mainStageParticipants, props.displayName)), isSubstageVisible && /*#__PURE__*/React.createElement(Stack, {\n    horizontal: true,\n    className: mediaGallerySubstageStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, getSubstageMediaGalleryTilesForParticipants(substageParticipants)));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Git Uploads/GroupVideoCalling/Calling/ClientApp/src/components/MediaGallery.tsx"],"names":["React","useMemo","useState","mediaGalleryGridStyle","mediaGalleryStyle","mediaGallerySubstageStyle","substageMediaGalleryStyle","utils","LocalStreamMedia","RemoteStreamMedia","Stack","Constants","props","gridCol","setGridCol","gridRow","setGridRow","rows","cols","DOMINANT_PARTICIPANTS_COUNT","length","console","warn","numRemoteParticipantsToRender","Math","min","clamp","num","max","getMediaGalleryTilesForParticipants","participants","displayName","remoteParticipantsMediaGalleryItems","map","participant","getId","identifier","videoStreams","dominantParticipants","filter","p","participantId","localParticipantMediaGalleryItem","localVideoStream","unshift","getSubstageMediaGalleryTilesForParticipants","numberStreamsToRender","remoteParticipants","Error","participantsToLayout","sort","a","b","isParticipantADominant","isParticipantBDominant","mainStageParticipants","slice","substageParticipants","isSubstageVisible","height","gridTemplateRows","gridTemplateColumns"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport {\r\n  mediaGalleryGridStyle,\r\n  mediaGalleryStyle,\r\n  mediaGallerySubstageStyle,\r\n  substageMediaGalleryStyle\r\n} from './styles/MediaGallery.styles';\r\nimport { RemoteParticipant, LocalVideoStream } from '@azure/communication-calling';\r\nimport { utils } from '../Utils/Utils';\r\nimport LocalStreamMedia from './LocalStreamMedia';\r\nimport RemoteStreamMedia from './RemoteStreamMedia';\r\nimport { SelectionState } from 'core/RemoteStreamSelector';\r\nimport { Stack } from '@fluentui/react';\r\nimport { Constants } from '../core/constants';\r\n\r\nexport interface MediaGalleryProps {\r\n  userId: string;\r\n  displayName: string;\r\n  remoteParticipants: RemoteParticipant[];\r\n  localVideoStream: LocalVideoStream;\r\n  dominantParticipants: SelectionState[];\r\n}\r\n\r\nexport default (props: MediaGalleryProps): JSX.Element => {\r\n  const [gridCol, setGridCol] = useState(1);\r\n  const [gridRow, setGridRow] = useState(1);\r\n\r\n  // For now we are only going to support up to a 4x3 grid or 10 participants in a call\r\n  // Since this is a sample, we will just hard-code how we want the grid to scale\r\n  // the rows and columns for the number of users in the call\r\n  const rows = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3];\r\n  const cols = [1, 2, 2, 2, 3, 3, 3, 3, 3, 4];\r\n\r\n  if (Constants.DOMINANT_PARTICIPANTS_COUNT < 0 || Constants.DOMINANT_PARTICIPANTS_COUNT > rows.length - 1) {\r\n    console.warn(`Please use a value for dominant participants between 0 <= x <= ${rows.length - 1}`);\r\n  }\r\n\r\n  const numRemoteParticipantsToRender = Math.min(Constants.DOMINANT_PARTICIPANTS_COUNT, rows.length - 1);\r\n\r\n  const clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\r\n\r\n  const getMediaGalleryTilesForParticipants = (\r\n    participants: RemoteParticipant[],\r\n    displayName: string\r\n  ): JSX.Element[] => {\r\n    const remoteParticipantsMediaGalleryItems = participants.map((participant) => (\r\n      <div key={`${utils.getId(participant.identifier)}-tile`} className={mediaGalleryStyle}>\r\n        <RemoteStreamMedia\r\n          key={utils.getId(participant.identifier)}\r\n          stream={participant.videoStreams[0]}\r\n          isParticipantStreamSelected={\r\n            props.dominantParticipants.filter((p) => p.participantId === utils.getId(participant.identifier)).length > 0\r\n          }\r\n          label={participant.displayName ?? utils.getId(participant.identifier)}\r\n        />\r\n      </div>\r\n    ));\r\n\r\n    // for now we will always add the local user to the main stage\r\n    const localParticipantMediaGalleryItem = (\r\n      <div key=\"localParticipantTile\" className={mediaGalleryStyle}>\r\n        <LocalStreamMedia label={displayName} stream={props.localVideoStream} />\r\n      </div>\r\n    );\r\n\r\n    remoteParticipantsMediaGalleryItems.unshift(localParticipantMediaGalleryItem);\r\n\r\n    return remoteParticipantsMediaGalleryItems;\r\n  };\r\n\r\n  const getSubstageMediaGalleryTilesForParticipants = (participants: RemoteParticipant[]): JSX.Element[] => {\r\n    const remoteParticipantsMediaGalleryItems = participants.map((participant) => (\r\n      <div key={`${utils.getId(participant.identifier)}-tile`} className={substageMediaGalleryStyle}>\r\n        <RemoteStreamMedia\r\n          key={utils.getId(participant.identifier)}\r\n          stream={participant.videoStreams[0]}\r\n          isParticipantStreamSelected={false}\r\n          label={participant.displayName ?? utils.getId(participant.identifier)}\r\n        />\r\n      </div>\r\n    ));\r\n\r\n    return remoteParticipantsMediaGalleryItems;\r\n  };\r\n\r\n  // determine number of rows/columns to add to the grid\r\n  const numberStreamsToRender = useMemo(\r\n    () => clamp(props.remoteParticipants.length, 0, numRemoteParticipantsToRender),\r\n    [numRemoteParticipantsToRender, props.remoteParticipants.length]\r\n  );\r\n  if (cols[numberStreamsToRender] !== gridCol) {\r\n    if (numberStreamsToRender > cols.length - 1) {\r\n      throw new Error(\r\n        `attempting to set up a number of columns in the gallery for an unexpected number of participants ${numberStreamsToRender}`\r\n      );\r\n    }\r\n    setGridCol(cols[numberStreamsToRender]);\r\n  }\r\n\r\n  if (rows[numberStreamsToRender] !== gridRow) {\r\n    if (numberStreamsToRender > rows.length - 1) {\r\n      throw new Error(\r\n        `attempting to set up a number of rows in the gallery for an expected number of participants ${numberStreamsToRender}`\r\n      );\r\n    }\r\n    setGridRow(rows[numberStreamsToRender]);\r\n  }\r\n\r\n  // sort by dominance\r\n  const participantsToLayout = props.remoteParticipants.sort((a, b) => {\r\n    const isParticipantADominant =\r\n      props.dominantParticipants.filter((p) => p.participantId === utils.getId(a.identifier)).length > 0;\r\n    const isParticipantBDominant =\r\n      props.dominantParticipants.filter((p) => p.participantId === utils.getId(b.identifier)).length > 0;\r\n    if (isParticipantADominant && !isParticipantBDominant) {\r\n      return -1;\r\n    } else if (!isParticipantADominant && isParticipantBDominant) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  const mainStageParticipants = participantsToLayout.slice(0, numRemoteParticipantsToRender);\r\n  const substageParticipants = participantsToLayout.slice(numRemoteParticipantsToRender);\r\n  // don't show the substage if its not necessary\r\n  const isSubstageVisible = substageParticipants.length > 0;\r\n  return (\r\n    <Stack style={{ height: '100%' }}>\r\n      <div\r\n        id=\"video-gallery\"\r\n        className={mediaGalleryGridStyle}\r\n        style={{\r\n          gridTemplateRows: `repeat(${gridRow}, minmax(0, 1fr))`,\r\n          gridTemplateColumns: `repeat(${gridCol}, 1fr)`\r\n        }}\r\n      >\r\n        {getMediaGalleryTilesForParticipants(mainStageParticipants, props.displayName)}\r\n      </div>\r\n      {isSubstageVisible && (\r\n        <Stack horizontal className={mediaGallerySubstageStyle}>\r\n          {getSubstageMediaGalleryTilesForParticipants(substageParticipants)}\r\n        </Stack>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}