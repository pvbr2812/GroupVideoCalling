{"ast":null,"code":"import { statusBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Box } from '../Box/Box';\nexport var statusClassName = 'ui-status';\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\n\nexport var Status = /*#__PURE__*/function () {\n  var Status = function Status(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Status.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        color = props.color,\n        icon = props.icon,\n        size = props.size,\n        state = props.state,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n\n    var _useStyles = useStyles(Status.displayName, {\n      className: statusClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          color: color,\n          size: size,\n          state: state\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var getA11Props = useAccessibility(props.accessibility, {\n      debugName: Status.displayName,\n      rtl: context.rtl\n    });\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Status.handledProps, props);\n    var iconElement = Box.create(icon, {\n      defaultProps: function defaultProps() {\n        return getA11Props('icon', {\n          styles: resolvedStyles.icon,\n          as: 'span'\n        });\n      }\n    });\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), iconElement);\n    setEnd();\n    return element;\n  };\n\n  Status.displayName = 'Status';\n  Status.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: false\n  }), {\n    color: PropTypes.string,\n    icon: customPropTypes.shorthandAllowingChildren,\n    size: customPropTypes.size,\n    state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown'])\n  });\n  Status.handledProps = Object.keys(Status.propTypes);\n  Status.defaultProps = {\n    accessibility: statusBehavior,\n    as: 'span',\n    size: 'medium',\n    state: 'unknown'\n  };\n  Status.create = createShorthandFactory({\n    Component: Status,\n    mappedProp: 'state'\n  });\n  return Status;\n}();","map":{"version":3,"sources":["components/Status/Status.tsx"],"names":["statusClassName","Status","context","useFluentContext","setStart","setEnd","useTelemetry","className","color","icon","size","state","design","styles","variables","props","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","getA11Props","useAccessibility","debugName","ElementType","getElementType","unhandledProps","useUnhandledProps","iconElement","defaultProps","as","element","root","children","content","PropTypes","customPropTypes","Object","accessibility","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, statusBehavior, StatusBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes, SizeValue } from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface StatusProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<StatusBehaviorProps>;\n\n  /** A custom color. */\n  color?: string;\n\n  /** Shorthand for the icon, to provide customizing status */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Size multiplier */\n  size?: SizeValue;\n\n  /** The pre-defined state values which can be consumed directly. */\n  state?: 'success' | 'info' | 'warning' | 'error' | 'unknown';\n}\n\nexport type StatusStylesProps = Pick<StatusProps, 'color' | 'size' | 'state'>;\nexport const statusClassName = 'ui-status';\n\n/**\n * A Status represents someone's or something's state.\n *\n * @accessibility\n * Implements [ARIA img](https://www.w3.org/TR/wai-aria-1.1/#img) role.\n */\nexport const Status: ComponentWithAs<'span', StatusProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Status.displayName, context.telemetry);\n  setStart();\n\n  const { className, color, icon, size, state, design, styles, variables } = props;\n  const { classes, styles: resolvedStyles } = useStyles<StatusStylesProps>(Status.displayName, {\n    className: statusClassName,\n    mapPropsToStyles: () => ({\n      color,\n      size,\n      state,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Status.displayName,\n    rtl: context.rtl,\n  });\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Status.handledProps, props);\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11Props('icon', {\n        styles: resolvedStyles.icon,\n        as: 'span',\n      }),\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })}>{iconElement}</ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nStatus.displayName = 'Status';\nStatus.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  color: PropTypes.string,\n  icon: customPropTypes.shorthandAllowingChildren,\n  size: customPropTypes.size,\n  state: PropTypes.oneOf(['success', 'info', 'warning', 'error', 'unknown']),\n};\nStatus.handledProps = Object.keys(Status.propTypes) as any;\nStatus.defaultProps = {\n  accessibility: statusBehavior,\n  as: 'span',\n  size: 'medium',\n  state: 'unknown',\n};\n\nStatus.create = createShorthandFactory({ Component: Status, mappedProp: 'state' });\n"]},"metadata":{},"sourceType":"module"}