{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { useStyles, getElementType, useFluentContext, useUnhandledProps, useAccessibility, useTelemetry } from '@fluentui/react-bindings';\nexport var layoutClassName = 'ui-layout';\nexport var layoutSlotClassNames = {\n  start: layoutClassName + \"__start\",\n  main: layoutClassName + \"__main\",\n  end: layoutClassName + \"__end\",\n  gap: layoutClassName + \"__gap\",\n  reducedStart: layoutClassName + \"--reduced__start\",\n  reducedMain: layoutClassName + \"--reduced__main\",\n  reducedEnd: layoutClassName + \"--reduced__end\"\n};\n/**\n * (DEPRECATED) A layout is a utility for arranging the content of a component.\n */\n\nexport var Layout = /*#__PURE__*/function () {\n  var Layout = function Layout(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Layout.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var reducing = props.reducing,\n        disappearing = props.disappearing,\n        renderStartArea = props.renderStartArea,\n        renderMainArea = props.renderMainArea,\n        renderEndArea = props.renderEndArea,\n        renderGap = props.renderGap,\n        alignItems = props.alignItems,\n        debug = props.debug,\n        gap = props.gap,\n        justifyItems = props.justifyItems,\n        main = props.main,\n        mainSize = props.mainSize,\n        end = props.end,\n        endSize = props.endSize,\n        start = props.start,\n        startSize = props.startSize,\n        vertical = props.vertical,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Layout.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Layout.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Layout.displayName, {\n      className: layoutClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          alignItems: alignItems,\n          debug: debug,\n          gap: gap,\n          justifyItems: justifyItems,\n          hasMain: !!main,\n          mainSize: mainSize,\n          hasEnd: !!end,\n          endSize: endSize,\n          hasStart: !!start,\n          startSize: startSize,\n          vertical: vertical\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var startArea = renderStartArea(Object.assign({}, props, {\n      classes: classes\n    }));\n    var mainArea = renderMainArea(Object.assign({}, props, {\n      classes: classes\n    }));\n    var endArea = renderEndArea(Object.assign({}, props, {\n      classes: classes\n    }));\n\n    if (!startArea && !mainArea && !endArea) {\n      setEnd();\n      return /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n        className: classes.root\n      }, unhandledProps)));\n    }\n\n    var activeAreas = [startArea, mainArea, endArea].filter(Boolean);\n    var isSingleArea = activeAreas.length === 1; // disappear: render the content directly without wrapping layout or area elements\n\n    if (disappearing && isSingleArea) {\n      setEnd();\n      return start || main || end;\n    }\n\n    if (reducing && isSingleArea) {\n      var composedClasses = cx(classes.root, startArea && layoutSlotClassNames.reducedStart, mainArea && layoutSlotClassNames.reducedMain, endArea && layoutSlotClassNames.reducedEnd);\n      setEnd();\n      return /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n        className: composedClasses\n      }, unhandledProps)), start || main || end);\n    }\n\n    setEnd();\n    return /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), startArea, startArea && mainArea && renderGap(Object.assign({}, props, {\n      classes: classes\n    })), mainArea, (startArea || mainArea) && endArea && renderGap(Object.assign({}, props, {\n      classes: classes\n    })), endArea);\n  };\n\n  Layout.displayName = 'Layout';\n  Layout.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false\n  }), {\n    debug: PropTypes.bool,\n    renderStartArea: PropTypes.func,\n    renderMainArea: PropTypes.func,\n    renderEndArea: PropTypes.func,\n    renderGap: PropTypes.func,\n    rootCSS: PropTypes.object,\n    start: PropTypes.any,\n    startCSS: PropTypes.object,\n    startSize: PropTypes.string,\n    main: PropTypes.any,\n    mainCSS: PropTypes.object,\n    mainSize: PropTypes.string,\n    end: PropTypes.any,\n    endCSS: PropTypes.object,\n    endSize: PropTypes.string,\n    justifyItems: PropTypes.any,\n    alignItems: PropTypes.any,\n    gap: PropTypes.string,\n    reducing: PropTypes.bool,\n    disappearing: PropTypes.bool,\n    vertical: PropTypes.bool\n  });\n  Layout.defaultProps = {\n    startSize: 'auto',\n    mainSize: '1fr',\n    endSize: 'auto',\n    // TODO: when an area is another Layout, do not wrap them in an extra div\n    // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root\n    renderStartArea: function renderStartArea(_ref) {\n      var start = _ref.start,\n          classes = _ref.classes;\n      return start && /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: cx(layoutSlotClassNames.start, classes.start)\n      }, rtlTextContainer.getAttributes({\n        forElements: [start]\n      })), start);\n    },\n    renderMainArea: function renderMainArea(_ref2) {\n      var main = _ref2.main,\n          classes = _ref2.classes;\n      return main && /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: cx(layoutSlotClassNames.main, classes.main)\n      }, rtlTextContainer.getAttributes({\n        forElements: [main]\n      })), main);\n    },\n    renderEndArea: function renderEndArea(_ref3) {\n      var end = _ref3.end,\n          classes = _ref3.classes;\n      return end && /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: cx(layoutSlotClassNames.end, classes.end)\n      }, rtlTextContainer.getAttributes({\n        forElements: [end]\n      })), end);\n    },\n    // Heads up!\n    // IE11 Doesn't support grid-gap, insert virtual columns instead\n    renderGap: function renderGap(_ref4) {\n      var gap = _ref4.gap,\n          classes = _ref4.classes;\n      return gap && /*#__PURE__*/React.createElement(\"span\", {\n        className: cx(layoutSlotClassNames.gap, classes.gap)\n      });\n    }\n  };\n  Layout.handledProps = Object.keys(Layout.propTypes);\n  Layout.create = createShorthandFactory({\n    Component: Layout\n  });\n  return Layout;\n}();","map":{"version":3,"sources":["components/Layout/Layout.tsx"],"names":["layoutClassName","layoutSlotClassNames","start","main","end","gap","reducedStart","reducedMain","reducedEnd","Layout","context","useFluentContext","setStart","setEnd","useTelemetry","reducing","disappearing","renderStartArea","renderMainArea","renderEndArea","renderGap","alignItems","debug","justifyItems","mainSize","endSize","startSize","vertical","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","hasMain","hasEnd","hasStart","mapPropsToInlineStyles","startArea","mainArea","endArea","root","activeAreas","isSingleArea","composedClasses","cx","accessibility","children","content","PropTypes","rootCSS","startCSS","mainCSS","endCSS","bool","forElements","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { UIComponentProps, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  useStyles,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useTelemetry,\n} from '@fluentui/react-bindings';\n\nexport interface LayoutSlotClassNames {\n  start: string;\n  main: string;\n  end: string;\n  gap: string;\n  reducedStart: string;\n  reducedMain: string;\n  reducedEnd: string;\n}\n\nexport interface LayoutProps extends UIComponentProps {\n  debug?: boolean;\n  renderStartArea?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  renderMainArea?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  renderEndArea?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  renderGap?: (params: LayoutProps & { classes: Record<string, string> }) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: ICSSInJSStyle;\n  start?: any;\n  startCSS?: ICSSInJSStyle;\n  startSize?: string;\n  main?: any;\n  mainCSS?: ICSSInJSStyle;\n  mainSize?: string;\n  end?: any;\n  endCSS?: ICSSInJSStyle;\n  endSize?: string;\n  /** How to align items on-axis within the layout (i.e. vertical or not). */\n  justifyItems?: React.CSSProperties['justifyItems'];\n  /** How to align cross-axis items within the layout (i.e. vertical or not). */\n  alignItems?: React.CSSProperties['alignItems'];\n  /** A layout can have gaps of whitespace between areas. */\n  gap?: string;\n  /** A layout can reduce to the minimum required areas. */\n  reducing?: boolean;\n  /** A layout can render its content directly if only one piece of content exists. */\n  disappearing?: boolean;\n  vertical?: boolean;\n}\n\nexport const layoutClassName = 'ui-layout';\nexport const layoutSlotClassNames: LayoutSlotClassNames = {\n  start: `${layoutClassName}__start`,\n  main: `${layoutClassName}__main`,\n  end: `${layoutClassName}__end`,\n  gap: `${layoutClassName}__gap`,\n  reducedStart: `${layoutClassName}--reduced__start`,\n  reducedMain: `${layoutClassName}--reduced__main`,\n  reducedEnd: `${layoutClassName}--reduced__end`,\n};\n\nexport type LayoutStylesProps = Required<\n  Pick<LayoutProps, 'alignItems' | 'debug' | 'gap' | 'justifyItems' | 'mainSize' | 'endSize' | 'startSize' | 'vertical'>\n> & { hasStart: boolean; hasMain: boolean; hasEnd: boolean };\n\n/**\n * (DEPRECATED) A layout is a utility for arranging the content of a component.\n */\nexport const Layout: ComponentWithAs<'div', LayoutProps> & FluentComponentStaticProps<LayoutProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Layout.displayName, context.telemetry);\n  setStart();\n  const {\n    reducing,\n    disappearing,\n    renderStartArea,\n    renderMainArea,\n    renderEndArea,\n    renderGap,\n    alignItems,\n    debug,\n    gap,\n    justifyItems,\n    main,\n    mainSize,\n    end,\n    endSize,\n    start,\n    startSize,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Layout.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Layout.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<LayoutStylesProps>(Layout.displayName, {\n    className: layoutClassName,\n    mapPropsToStyles: () => ({\n      alignItems,\n      debug,\n      gap,\n      justifyItems,\n      hasMain: !!main,\n      mainSize,\n      hasEnd: !!end,\n      endSize,\n      hasStart: !!start,\n      startSize,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const startArea = renderStartArea({ ...props, classes });\n  const mainArea = renderMainArea({ ...props, classes });\n  const endArea = renderEndArea({ ...props, classes });\n\n  if (!startArea && !mainArea && !endArea) {\n    setEnd();\n    return (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        })}\n      />\n    );\n  }\n\n  const activeAreas = [startArea, mainArea, endArea].filter(Boolean);\n  const isSingleArea = activeAreas.length === 1;\n\n  // disappear: render the content directly without wrapping layout or area elements\n  if (disappearing && isSingleArea) {\n    setEnd();\n    return start || main || end;\n  }\n\n  if (reducing && isSingleArea) {\n    const composedClasses = cx(\n      classes.root,\n      startArea && layoutSlotClassNames.reducedStart,\n      mainArea && layoutSlotClassNames.reducedMain,\n      endArea && layoutSlotClassNames.reducedEnd,\n    );\n    setEnd();\n    return (\n      <ElementType\n        {...getA11yProps('root', {\n          className: composedClasses,\n          ...unhandledProps,\n        })}\n      >\n        {start || main || end}\n      </ElementType>\n    );\n  }\n  setEnd();\n  return (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {startArea}\n      {startArea && mainArea && renderGap({ ...props, classes })}\n      {mainArea}\n      {(startArea || mainArea) && endArea && renderGap({ ...props, classes })}\n      {endArea}\n    </ElementType>\n  );\n};\n\nLayout.displayName = 'Layout';\n\nLayout.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  debug: PropTypes.bool,\n\n  renderStartArea: PropTypes.func,\n  renderMainArea: PropTypes.func,\n  renderEndArea: PropTypes.func,\n  renderGap: PropTypes.func,\n\n  rootCSS: PropTypes.object,\n\n  start: PropTypes.any,\n  startCSS: PropTypes.object,\n  startSize: PropTypes.string,\n\n  main: PropTypes.any,\n  mainCSS: PropTypes.object,\n  mainSize: PropTypes.string,\n\n  end: PropTypes.any,\n  endCSS: PropTypes.object,\n  endSize: PropTypes.string,\n\n  justifyItems: PropTypes.any,\n\n  alignItems: PropTypes.any,\n\n  gap: PropTypes.string,\n  reducing: PropTypes.bool,\n  disappearing: PropTypes.bool,\n\n  vertical: PropTypes.bool,\n};\n\nLayout.defaultProps = {\n  startSize: 'auto',\n  mainSize: '1fr',\n  endSize: 'auto',\n\n  // TODO: when an area is another Layout, do not wrap them in an extra div\n  // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root\n  renderStartArea({ start, classes }) {\n    return (\n      start && (\n        <div\n          className={cx(layoutSlotClassNames.start, classes.start)}\n          {...rtlTextContainer.getAttributes({ forElements: [start] })}\n        >\n          {start}\n        </div>\n      )\n    );\n  },\n\n  renderMainArea({ main, classes }) {\n    return (\n      main && (\n        <div\n          className={cx(layoutSlotClassNames.main, classes.main)}\n          {...rtlTextContainer.getAttributes({ forElements: [main] })}\n        >\n          {main}\n        </div>\n      )\n    );\n  },\n\n  renderEndArea({ end, classes }) {\n    return (\n      end && (\n        <div\n          className={cx(layoutSlotClassNames.end, classes.end)}\n          {...rtlTextContainer.getAttributes({ forElements: [end] })}\n        >\n          {end}\n        </div>\n      )\n    );\n  },\n\n  // Heads up!\n  // IE11 Doesn't support grid-gap, insert virtual columns instead\n  renderGap({ gap, classes }) {\n    return gap && <span className={cx(layoutSlotClassNames.gap, classes.gap)} />;\n  },\n};\n\nLayout.handledProps = Object.keys(Layout.propTypes) as any;\n\nLayout.create = createShorthandFactory({\n  Component: Layout,\n});\n"]},"metadata":{},"sourceType":"module"}