{"ast":null,"code":"import { getIconFillOrOutlineStyles } from '../../getIconFillOrOutlineStyles';\nimport { getColorScheme } from '../../colors';\nimport { getBorderFocusStyles } from '../../getBorderFocusStyles';\nexport var toolbarItemStyles = {\n  root: function root(_ref) {\n    var p = _ref.props,\n        v = _ref.variables,\n        siteVariables = _ref.theme.siteVariables;\n    var colors = getColorScheme(v.colorScheme);\n    var borderWidth = siteVariables.borderWidth;\n    var borderFocusStyles = getBorderFocusStyles({\n      variables: siteVariables\n    });\n    return Object.assign({\n      position: 'relative',\n      backgroundColor: v.background,\n      borderWidth: borderWidth,\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      borderRadius: v.borderRadius,\n      height: v.itemHeight,\n      minWidth: v.itemHeight,\n      padding: v.itemPadding,\n      color: v.foreground || colors.foreground1,\n      cursor: 'pointer',\n      ':focus': borderFocusStyles[':focus']\n    }, p.active && Object.assign({\n      color: v.foregroundActive || colors.foregroundActive,\n      backgroundColor: v.backgroundActive\n    }, getIconFillOrOutlineStyles({\n      outline: false\n    })), {\n      ':hover': Object.assign({\n        color: v.foregroundHover || colors.foregroundHover,\n        backgroundColor: v.backgroundHover || colors.backgroundHover\n      }, getIconFillOrOutlineStyles({\n        outline: false\n      })),\n      ':focus-visible': borderFocusStyles[':focus-visible']\n    }, p.disabled && {\n      color: v.foregroundDisabled || colors.foregroundDisabled1,\n      backgroundColor: v.backgroundDisabled,\n      cursor: 'default',\n      pointerEvents: 'none',\n      ':hover': {// empty to overwrite all existing hover styles\n      }\n    });\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Toolbar/toolbarItemStyles.ts"],"names":["toolbarItemStyles","root","props","p","variables","v","theme","siteVariables","colors","getColorScheme","borderWidth","borderFocusStyles","getBorderFocusStyles","position","backgroundColor","borderStyle","borderColor","borderRadius","height","minWidth","padding","color","cursor","backgroundActive","getIconFillOrOutlineStyles","outline","backgroundHover","pointerEvents"],"mappings":"AAGA,SAAA,0BAAA,QAAA,kCAAA;AACA,SAAA,cAAA,QAAA,cAAA;AACA,SAAA,oBAAA,QAAA,4BAAA;AAEA,OAAO,IAAMA,iBAAwF,GAAG;AACtGC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,IAAA,EAAyE;AAAA,QAA/DE,CAA+D,GAAA,IAAA,CAAtED,KAAsE;AAAA,QAAjDG,CAAiD,GAAA,IAAA,CAA5DD,SAA4D;AAAA,QAArCG,aAAqC,GAAA,IAAA,CAA9CD,KAA8C,CAArCC,aAAqC;AAC7E,QAAMC,MAAM,GAAGC,cAAc,CAACJ,CAAC,CAA/B,WAA6B,CAA7B;AAD6E,QAErEK,WAFqE,GAErDH,aAFqD,CAAA,WAAA;AAG7E,QAAMI,iBAAiB,GAAGC,oBAAoB,CAAC;AAC7CR,MAAAA,SAAS,EAAEG;AADkC,KAAD,CAA9C;AAIA,WAAA,MAAA,CAAA,MAAA,CAAA;AACEM,MAAAA,QAAQ,EADV,UAAA;AAEEC,MAAAA,eAAe,EAAET,CAAC,CAFpB,UAAA;AAGEK,MAAAA,WAAW,EAHb,WAAA;AAIEK,MAAAA,WAAW,EAJb,OAAA;AAKEC,MAAAA,WAAW,EALb,aAAA;AAMEC,MAAAA,YAAY,EAAEZ,CAAC,CANjB,YAAA;AAOEa,MAAAA,MAAM,EAAEb,CAAC,CAPX,UAAA;AAQEc,MAAAA,QAAQ,EAAEd,CAAC,CARb,UAAA;AASEe,MAAAA,OAAO,EAAEf,CAAC,CATZ,WAAA;AAUEgB,MAAAA,KAAK,EAAEhB,CAAC,CAADA,UAAAA,IAAgBG,MAAM,CAV/B,WAAA;AAWEc,MAAAA,MAAM,EAXR,SAAA;AAaE,gBAAUX,iBAAiB,CAAA,QAAA;AAb7B,KAAA,EAeM,CAAC,CAAD,MAAA,IAAA,MAAA,CAAA,MAAA,CAAA;AACFU,MAAAA,KAAK,EAAEhB,CAAC,CAADA,gBAAAA,IAAsBG,MAAM,CADjC,gBAAA;AAEFM,MAAAA,eAAe,EAAET,CAAC,CAACkB;AAFjB,KAAA,EAGCC,0BAA0B,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAH3B,CAfN,EAAA;AAqBE,gBAAA,MAAA,CAAA,MAAA,CAAA;AACEJ,QAAAA,KAAK,EAAEhB,CAAC,CAADA,eAAAA,IAAqBG,MAAM,CADpC,eAAA;AAEEM,QAAAA,eAAe,EAAET,CAAC,CAADA,eAAAA,IAAqBG,MAAM,CAACkB;AAF/C,OAAA,EAGKF,0BAA0B,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAH/B,CArBF;AA2BE,wBAAkBd,iBAAiB,CAAA,gBAAA;AA3BrC,KAAA,EA6BMR,CAAC,CAADA,QAAAA,IAAc;AAChBkB,MAAAA,KAAK,EAAEhB,CAAC,CAADA,kBAAAA,IAAwBG,MAAM,CADrB,mBAAA;AAEhBM,MAAAA,eAAe,EAAET,CAAC,CAFF,kBAAA;AAGhBiB,MAAAA,MAAM,EAHU,SAAA;AAIhBK,MAAAA,aAAa,EAJG,MAAA;AAKhB,gBAAU,CACR;AADQ;AALM,KA7BpB,CAAA;AAuCD;AA/CqG,CAAjG","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { ToolbarItemStylesProps } from '../../../../components/Toolbar/ToolbarItem';\nimport { ToolbarVariables } from './toolbarVariables';\nimport { getIconFillOrOutlineStyles } from '../../getIconFillOrOutlineStyles';\nimport { getColorScheme } from '../../colors';\nimport { getBorderFocusStyles } from '../../getBorderFocusStyles';\n\nexport const toolbarItemStyles: ComponentSlotStylesPrepared<ToolbarItemStylesProps, ToolbarVariables> = {\n  root: ({ props: p, variables: v, theme: { siteVariables } }): ICSSInJSStyle => {\n    const colors = getColorScheme(v.colorScheme);\n    const { borderWidth } = siteVariables;\n    const borderFocusStyles = getBorderFocusStyles({\n      variables: siteVariables,\n    });\n\n    return {\n      position: 'relative',\n      backgroundColor: v.background,\n      borderWidth,\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      borderRadius: v.borderRadius,\n      height: v.itemHeight,\n      minWidth: v.itemHeight,\n      padding: v.itemPadding,\n      color: v.foreground || colors.foreground1,\n      cursor: 'pointer',\n\n      ':focus': borderFocusStyles[':focus'],\n\n      ...(p.active && {\n        color: v.foregroundActive || colors.foregroundActive,\n        backgroundColor: v.backgroundActive,\n        ...getIconFillOrOutlineStyles({ outline: false }),\n      }),\n\n      ':hover': {\n        color: v.foregroundHover || colors.foregroundHover,\n        backgroundColor: v.backgroundHover || colors.backgroundHover,\n        ...getIconFillOrOutlineStyles({ outline: false }),\n      },\n\n      ':focus-visible': borderFocusStyles[':focus-visible'],\n\n      ...(p.disabled && {\n        color: v.foregroundDisabled || colors.foregroundDisabled1,\n        backgroundColor: v.backgroundDisabled,\n        cursor: 'default',\n        pointerEvents: 'none',\n        ':hover': {\n          // empty to overwrite all existing hover styles\n        },\n      }),\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}