{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getGlobalObject } from \"./global\"; // V1 = OpenTelemetry 0.1\n// V2 = OpenTelemetry 0.2\n// V3 = OpenTelemetry 0.6.1\n\nvar GLOBAL_TRACER_VERSION = 3; // preview5 shipped with @azure/core-tracing.tracerCache\n// and didn't have smart detection for collisions\n\nvar GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache2\");\nvar cache;\n\nfunction loadTracerCache() {\n  var globalObj = getGlobalObject();\n  var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  var setGlobalCache = true;\n\n  if (existingCache) {\n    if (existingCache.version === GLOBAL_TRACER_VERSION) {\n      cache = existingCache;\n    } else {\n      setGlobalCache = false;\n\n      if (existingCache.tracer) {\n        throw new Error(\"Two incompatible versions of @azure/core-tracing have been loaded.\\n          This library is \" + GLOBAL_TRACER_VERSION + \", existing is \" + existingCache.version + \".\");\n      }\n    }\n  }\n\n  if (!cache) {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n  }\n\n  if (setGlobalCache) {\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\n\nexport function getCache() {\n  if (!cache) {\n    loadTracerCache();\n  }\n\n  return cache;\n}","map":{"version":3,"sources":["../../../src/utils/cache.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,eAAT,QAAgC,UAAhC,C,CAEA;AACA;AACA;;AACA,IAAM,qBAAqB,GAAG,CAA9B,C,CACA;AACA;;AACA,IAAM,oBAAoB,GAAG,MAAM,CAAC,GAAP,CAAW,kCAAX,CAA7B;AAOA,IAAI,KAAJ;;AAEA,SAAS,eAAT,GAAwB;AACtB,MAAM,SAAS,GAAG,eAAe,EAAjC;AACA,MAAM,aAAa,GAAgB,SAAS,CAAC,oBAAD,CAA5C;AACA,MAAI,cAAc,GAAG,IAArB;;AACA,MAAI,aAAJ,EAAmB;AACjB,QAAI,aAAa,CAAC,OAAd,KAA0B,qBAA9B,EAAqD;AACnD,MAAA,KAAK,GAAG,aAAR;AACD,KAFD,MAEO;AACL,MAAA,cAAc,GAAG,KAAjB;;AACA,UAAI,aAAa,CAAC,MAAlB,EAA0B;AACxB,cAAM,IAAI,KAAJ,CACJ,mGACkB,qBADlB,GACuC,gBADvC,GACwD,aAAa,CAAC,OADtE,GAC6E,GAFzE,CAAN;AAID;AACF;AACF;;AAED,MAAI,CAAC,KAAL,EAAY;AACV,IAAA,KAAK,GAAG;AACN,MAAA,MAAM,EAAE,SADF;AAEN,MAAA,OAAO,EAAE;AAFH,KAAR;AAID;;AACD,MAAI,cAAJ,EAAoB;AAClB,IAAA,SAAS,CAAC,oBAAD,CAAT,GAAkC,KAAlC;AACD;AACF;;AAED,OAAM,SAAU,QAAV,GAAkB;AACtB,MAAI,CAAC,KAAL,EAAY;AACV,IAAA,eAAe;AAChB;;AACD,SAAO,KAAP;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Tracer } from \"@opentelemetry/api\";\nimport { getGlobalObject } from \"./global\";\n\n// V1 = OpenTelemetry 0.1\n// V2 = OpenTelemetry 0.2\n// V3 = OpenTelemetry 0.6.1\nconst GLOBAL_TRACER_VERSION = 3;\n// preview5 shipped with @azure/core-tracing.tracerCache\n// and didn't have smart detection for collisions\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache2\");\n\nexport interface TracerCache {\n  version: number;\n  tracer?: Tracer;\n}\n\nlet cache: TracerCache;\n\nfunction loadTracerCache(): void {\n  const globalObj = getGlobalObject();\n  const existingCache: TracerCache = globalObj[GLOBAL_TRACER_SYMBOL];\n  let setGlobalCache = true;\n  if (existingCache) {\n    if (existingCache.version === GLOBAL_TRACER_VERSION) {\n      cache = existingCache;\n    } else {\n      setGlobalCache = false;\n      if (existingCache.tracer) {\n        throw new Error(\n          `Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is ${GLOBAL_TRACER_VERSION}, existing is ${existingCache.version}.`\n        );\n      }\n    }\n  }\n\n  if (!cache) {\n    cache = {\n      tracer: undefined,\n      version: GLOBAL_TRACER_VERSION\n    };\n  }\n  if (setGlobalCache) {\n    globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n  }\n}\n\nexport function getCache(): TracerCache {\n  if (!cache) {\n    loadTracerCache();\n  }\n  return cache;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}