{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout) {\n  if (retryTimeout === void 0) {\n    retryTimeout = 30;\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nvar RPRegistrationPolicy =\n/** @class */\nfunction (_super) {\n  __extends(RPRegistrationPolicy, _super);\n\n  function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {\n    if (_retryTimeout === void 0) {\n      _retryTimeout = 30;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this._retryTimeout = _retryTimeout;\n    return _this;\n  }\n\n  RPRegistrationPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n      return registerIfNeeded(_this, request, response);\n    });\n  };\n\n  return RPRegistrationPolicy;\n}(BaseRequestPolicy);\n\nexport { RPRegistrationPolicy };\n\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    var rpName = checkRPNotRegisteredError(response.bodyAsText);\n\n    if (rpName) {\n      var urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request) // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(function () {\n        return false;\n      }).then(function (registrationStatus) {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n\n        return response;\n      });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\n\n\nfunction getRequestEssentials(originalRequest, reuseUrlToo) {\n  if (reuseUrlToo === void 0) {\n    reuseUrlToo = false;\n  }\n\n  var reqOptions = originalRequest.clone();\n\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  } // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n\n\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid()); // Set content-type to application/json\n\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\n\n\nfunction checkRPNotRegisteredError(body) {\n  var result, responseBody;\n\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {// do nothing;\n    }\n\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\n\n\nfunction extractSubscriptionUrl(url) {\n  var result;\n  var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(\"Unable to extract subscriptionId from the given url - \" + url + \".\");\n  }\n\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param callback - The callback that handles the RP registration\n */\n\n\nfunction registerRP(policy, urlPrefix, provider, originalRequest) {\n  var postUrl = urlPrefix + \"providers/\" + provider + \"/register?api-version=2016-02-01\";\n  var getUrl = urlPrefix + \"providers/\" + provider + \"?api-version=2016-02-01\";\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {\n    if (response.status !== 200) {\n      throw new Error(\"Autoregistration of \" + provider + \" failed. Please try registering manually.\");\n    }\n\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\n\n\nfunction getRegistrationStatus(policy, url, originalRequest) {\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {\n    var obj = res.parsedBody;\n\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(function () {\n        return getRegistrationStatus(policy, url, originalRequest);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/policies/rpRegistrationPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    readonly _retryTimeout = 30\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => registerIfNeeded(this, request, response));\n  }\n}\n\nfunction registerIfNeeded(\n  policy: RPRegistrationPolicy,\n  request: WebResourceLike,\n  response: HttpOperationResponse\n): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return (\n        registerRP(policy, urlPrefix, rpName, request)\n          // Autoregistration of ${provider} failed for some reason. We will not return this error\n          // instead will return the initial response with 409 status code back to the user.\n          // do nothing here as we are returning the original response at the end of this method.\n          .catch(() => false)\n          .then((registrationStatus) => {\n            if (registrationStatus) {\n              // Retry the original request. We have to change the x-ms-client-request-id\n              // otherwise Azure endpoint will return the initial 409 (cached) response.\n              request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n              return policy._nextPolicy.sendRequest(request.clone());\n            }\n            return response;\n          })\n      );\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(\n  originalRequest: WebResourceLike,\n  reuseUrlToo = false\n): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (\n      responseBody &&\n      responseBody.error &&\n      responseBody.error.message &&\n      responseBody.error.code &&\n      responseBody.error.code === \"MissingSubscriptionRegistration\"\n    ) {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param callback - The callback that handles the RP registration\n */\nfunction registerRP(\n  policy: RPRegistrationPolicy,\n  urlPrefix: string,\n  provider: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nfunction getRegistrationStatus(\n  policy: RPRegistrationPolicy,\n  url: string,\n  originalRequest: WebResourceLike\n): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then((res) => {\n    const obj = res.parsedBody as any;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils\n        .delay(policy._retryTimeout * 1000)\n        .then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}