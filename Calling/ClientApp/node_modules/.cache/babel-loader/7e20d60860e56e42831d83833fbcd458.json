{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport _get from \"lodash/get\";\nimport _toNumber from \"lodash/toNumber\";\nimport { sliderBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStateManager, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createSliderManager } from '@fluentui/state';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, partitionHTMLProps, setWhatInputSource, createShorthandFactory } from '../../utils';\nimport { Box } from '../Box/Box';\n\nvar processInputValues = function processInputValues(p) {\n  var min = _toNumber(p.min);\n\n  var max = _toNumber(p.max);\n\n  var value = _toNumber(p.value);\n\n  if (isNaN(min)) min = Number(Slider.defaultProps.min);\n  if (isNaN(max)) max = Number(Slider.defaultProps.max);\n  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));\n  var valueAsPercentage = 100 * (value - min) / (max - min) + \"%\";\n  return {\n    min: min,\n    max: max,\n    value: value,\n    valueAsPercentage: valueAsPercentage\n  };\n};\n\nexport var sliderClassName = 'ui-slider';\nexport var sliderSlotClassNames = {\n  input: sliderClassName + \"__input\",\n  inputWrapper: sliderClassName + \"__input-wrapper\",\n  rail: sliderClassName + \"__rail\",\n  thumb: sliderClassName + \"__thumb\",\n  track: sliderClassName + \"__track\"\n};\n/**\n * A Slider represents an input that allows user to choose a value from within a specific range.\n *\n * @accessibility\n * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.\n * @accessibilityIssues\n * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)\n * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)\n */\n\nexport var Slider = /*#__PURE__*/function () {\n  var Slider = function Slider(props) {\n    var _ref;\n\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Slider.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        min = props.min,\n        max = props.max,\n        value = props.value,\n        getA11yValueMessageOnChange = props.getA11yValueMessageOnChange,\n        defaultValue = props.defaultValue,\n        input = props.input,\n        userInputRef = props.inputRef,\n        step = props.step,\n        className = props.className,\n        styles = props.styles,\n        variables = props.variables,\n        design = props.design,\n        fluid = props.fluid,\n        vertical = props.vertical,\n        disabled = props.disabled;\n    var inputRef = React.useRef();\n\n    var _useStateManager = useStateManager(createSliderManager, {\n      mapPropsToInitialState: function mapPropsToInitialState() {\n        return {\n          value: defaultValue\n        };\n      },\n      mapPropsToState: function mapPropsToState() {\n        return {\n          value: value\n        };\n      }\n    }),\n        state = _useStateManager.state,\n        actions = _useStateManager.actions;\n\n    var _processInputValues = processInputValues({\n      min: min,\n      max: max,\n      value: state.value || ''\n    }),\n        numericMin = _processInputValues.min,\n        numericMax = _processInputValues.max,\n        numericValue = _processInputValues.value,\n        valueAsPercentage = _processInputValues.valueAsPercentage;\n\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: Slider.displayName,\n      rtl: context.rtl,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          disabled: disabled,\n          getA11yValueMessageOnChange: getA11yValueMessageOnChange,\n          max: numericMax,\n          min: numericMax,\n          value: numericValue,\n          vertical: vertical\n        };\n      }\n    });\n\n    var _useStyles = useStyles(Slider.displayName, {\n      className: sliderClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          fluid: fluid,\n          vertical: vertical,\n          disabled: disabled\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          styles: styles,\n          variables: variables,\n          design: design\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var handleInputOverrides = function handleInputOverrides() {\n      return {\n        onChange: function onChange(e) {\n          var value = _get(e, 'target.value');\n\n          _invoke(props, 'onChange', e, Object.assign({}, props, {\n            value: value\n          }));\n\n          actions.change(value);\n        },\n        onMouseDown: function onMouseDown(e) {\n          setWhatInputSource(context.target, 'mouse');\n\n          _invoke(props, 'onMouseDown', e, props);\n        }\n      };\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Slider.handledProps, props);\n\n    var _partitionHTMLProps = partitionHTMLProps(unhandledProps),\n        htmlInputProps = _partitionHTMLProps[0],\n        restProps = _partitionHTMLProps[1];\n\n    var type = 'range'; // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes\n\n    var inputElement = Box.create(input || type, {\n      defaultProps: function defaultProps() {\n        return getA11Props('input', Object.assign({}, htmlInputProps, {\n          as: 'input',\n          className: sliderSlotClassNames.input,\n          min: numericMin,\n          max: numericMax,\n          step: step,\n          styles: resolvedStyles.input,\n          type: type,\n          value: numericValue\n        }));\n      },\n      overrideProps: handleInputOverrides\n    });\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, restProps)), /*#__PURE__*/React.createElement(\"div\", getA11Props('inputWrapper', {\n      className: cx(sliderSlotClassNames.inputWrapper, classes.inputWrapper)\n    }), /*#__PURE__*/React.createElement(\"span\", getA11Props('rail', {\n      className: cx(sliderSlotClassNames.rail, classes.rail)\n    })), /*#__PURE__*/React.createElement(\"span\", _extends({}, getA11Props('track', {\n      className: cx(sliderSlotClassNames.track, classes.track)\n    }), {\n      style: {\n        width: valueAsPercentage\n      }\n    })), /*#__PURE__*/React.createElement(Ref, {\n      innerRef: function innerRef(inputElement) {\n        handleRef(inputRef, inputElement);\n        handleRef(userInputRef, inputElement);\n      }\n    }, inputElement), /*#__PURE__*/React.createElement(\"span\", _extends({}, getA11Props('thumb', {\n      className: cx(sliderSlotClassNames.thumb, classes.thumb)\n    }), {\n      style: (_ref = {}, _ref[context.rtl ? 'right' : 'left'] = valueAsPercentage, _ref)\n    }))));\n    setEnd();\n    return element;\n  };\n\n  Slider.displayName = 'Slider';\n  Slider.defaultProps = {\n    accessibility: sliderBehavior,\n    getA11yValueMessageOnChange: function getA11yValueMessageOnChange(_ref2) {\n      var value = _ref2.value;\n      return String(value);\n    },\n    max: 100,\n    min: 0,\n    step: 1\n  };\n  Slider.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    fluid: PropTypes.bool,\n    getA11yValueMessageOnChange: PropTypes.func,\n    input: customPropTypes.itemShorthand,\n    inputRef: customPropTypes.ref,\n    max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    onChange: PropTypes.func,\n    step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    vertical: PropTypes.bool\n  });\n  Slider.handledProps = Object.keys(Slider.propTypes);\n  Slider.create = createShorthandFactory({\n    Component: Slider,\n    mappedProp: 'value'\n  });\n  return Slider;\n}();","map":{"version":3,"sources":["components/Slider/Slider.tsx"],"names":["processInputValues","min","p","max","value","isNaN","Number","Slider","Math","valueAsPercentage","sliderClassName","sliderSlotClassNames","input","inputWrapper","rail","thumb","track","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","getA11yValueMessageOnChange","defaultValue","userInputRef","step","className","styles","variables","design","fluid","vertical","disabled","props","inputRef","React","state","actions","useStateManager","mapPropsToInitialState","mapPropsToState","numericMin","numericMax","numericValue","getA11Props","useAccessibility","debugName","rtl","mapPropsToBehavior","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleInputOverrides","onChange","onMouseDown","setWhatInputSource","ElementType","getElementType","unhandledProps","useUnhandledProps","htmlInputProps","restProps","partitionHTMLProps","type","inputElement","defaultProps","as","overrideProps","element","root","cx","width","handleRef","String","content","PropTypes","customPropTypes","bool","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, sliderBehavior, SliderBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createSliderManager } from '@fluentui/state';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  partitionHTMLProps,\n  UIComponentProps,\n  setWhatInputSource,\n  createShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { Box, BoxProps } from '../Box/Box';\n\nconst processInputValues = (\n  p: Pick<SliderProps, 'min' | 'max'> & { value: string },\n): { min: number; max: number; value: number; valueAsPercentage: string } => {\n  let min = _.toNumber(p.min);\n  let max = _.toNumber(p.max);\n  let value = _.toNumber(p.value);\n\n  if (isNaN(min)) min = Number(Slider.defaultProps.min);\n  if (isNaN(max)) max = Number(Slider.defaultProps.max);\n  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));\n  const valueAsPercentage = `${(100 * (value - min)) / (max - min)}%`;\n\n  return { min, max, value, valueAsPercentage };\n};\n\nexport interface SliderSlotClassNames {\n  input: string;\n  inputWrapper: string;\n  rail: string;\n  thumb: string;\n  track: string;\n}\n\nexport interface SliderProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    Omit<SupportedIntrinsicInputProps, 'defaultValue'> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<SliderBehaviorProps>;\n\n  /** The default value of the slider. */\n  defaultValue?: string | number;\n\n  /** A slider can be read-only and unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A slider can take the width of its container. */\n  fluid?: boolean;\n\n  /**\n   * Callback that creates custom accessibility message a screen reader narrates when the value changes.\n   * @param props - Slider props.\n   */\n  getA11yValueMessageOnChange?: (props: SliderProps) => string;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The maximum value of the slider. */\n  max?: SupportedIntrinsicInputProps['max'];\n\n  /** The minimum value of the slider. */\n  min?: SupportedIntrinsicInputProps['min'];\n\n  /**\n   * Called after item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<SliderProps & { value: string }>;\n\n  /**\n   * A number that specifies the granularity that the value must adhere to, or the special value 'any'.\n   * A string value of any means that no stepping is implied, and any value is allowed\n   * (barring other constraints, such as min and max).\n   */\n  step?: SupportedIntrinsicInputProps['step'];\n\n  /** The value of the slider. */\n  value?: string | number;\n\n  /** A slider can be displayed vertically. */\n  vertical?: boolean;\n}\n\nexport type SliderStylesProps = Pick<SliderProps, 'fluid' | 'disabled' | 'vertical'>;\nexport const sliderClassName = 'ui-slider';\nexport const sliderSlotClassNames: SliderSlotClassNames = {\n  input: `${sliderClassName}__input`,\n  inputWrapper: `${sliderClassName}__input-wrapper`,\n  rail: `${sliderClassName}__rail`,\n  thumb: `${sliderClassName}__thumb`,\n  track: `${sliderClassName}__track`,\n};\n\n/**\n * A Slider represents an input that allows user to choose a value from within a specific range.\n *\n * @accessibility\n * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.\n * @accessibilityIssues\n * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)\n * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)\n */\nexport const Slider: ComponentWithAs<'input', SliderProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Slider.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    min,\n    max,\n    value,\n    getA11yValueMessageOnChange,\n    defaultValue,\n    input,\n    inputRef: userInputRef,\n    step,\n    className,\n    styles,\n    variables,\n    design,\n    fluid,\n    vertical,\n    disabled,\n  } = props;\n  const inputRef = React.useRef<HTMLElement>();\n\n  const { state, actions } = useStateManager(createSliderManager, {\n    mapPropsToInitialState: () => ({\n      value: defaultValue as string,\n    }),\n    mapPropsToState: () => ({\n      value: value as string,\n    }),\n  });\n  const { min: numericMin, max: numericMax, value: numericValue, valueAsPercentage } = processInputValues({\n    min,\n    max,\n    value: state.value || '',\n  });\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Slider.displayName,\n    rtl: context.rtl,\n    mapPropsToBehavior: () => ({\n      disabled,\n      getA11yValueMessageOnChange,\n      max: numericMax,\n      min: numericMax,\n      value: numericValue,\n      vertical,\n    }),\n  });\n  const { classes, styles: resolvedStyles } = useStyles<SliderStylesProps>(Slider.displayName, {\n    className: sliderClassName,\n    mapPropsToStyles: () => ({\n      fluid,\n      vertical,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      styles,\n      variables,\n      design,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleInputOverrides = () => ({\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = _.get(e, 'target.value');\n      _.invoke(props, 'onChange', e, { ...props, value });\n      actions.change(value);\n    },\n    onMouseDown: (e: React.MouseEvent<HTMLInputElement>) => {\n      setWhatInputSource(context.target, 'mouse');\n      _.invoke(props, 'onMouseDown', e, props);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Slider.handledProps, props);\n  const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n  const type = 'range';\n\n  // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes\n\n  const inputElement = Box.create(input || type, {\n    defaultProps: () =>\n      getA11Props('input', {\n        ...htmlInputProps,\n        as: 'input',\n        className: sliderSlotClassNames.input,\n        min: numericMin,\n        max: numericMax,\n        step,\n        styles: resolvedStyles.input,\n        type,\n        value: numericValue,\n      }),\n    overrideProps: handleInputOverrides,\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...restProps })}>\n      <div\n        {...getA11Props('inputWrapper', {\n          className: cx(sliderSlotClassNames.inputWrapper, classes.inputWrapper),\n        })}\n      >\n        <span {...getA11Props('rail', { className: cx(sliderSlotClassNames.rail, classes.rail) })} />\n        <span\n          {...getA11Props('track', { className: cx(sliderSlotClassNames.track, classes.track) })}\n          style={{ width: valueAsPercentage }}\n        />\n        <Ref\n          innerRef={(inputElement: HTMLElement) => {\n            handleRef(inputRef, inputElement);\n            handleRef(userInputRef, inputElement);\n          }}\n        >\n          {inputElement}\n        </Ref>\n        {/* the thumb slot needs to appear after the input slot */}\n        <span\n          {...getA11Props('thumb', { className: cx(sliderSlotClassNames.thumb, classes.thumb) })}\n          style={{ [context.rtl ? 'right' : 'left']: valueAsPercentage }}\n        />\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSlider.displayName = 'Slider';\n\nSlider.defaultProps = {\n  accessibility: sliderBehavior,\n  getA11yValueMessageOnChange: ({ value }) => String(value),\n  max: 100,\n  min: 0,\n  step: 1,\n};\nSlider.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fluid: PropTypes.bool,\n  getA11yValueMessageOnChange: PropTypes.func,\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool,\n};\nSlider.handledProps = Object.keys(Slider.propTypes) as any;\n\nSlider.create = createShorthandFactory({ Component: Slider, mappedProp: 'value' });\n"]},"metadata":{},"sourceType":"module"}