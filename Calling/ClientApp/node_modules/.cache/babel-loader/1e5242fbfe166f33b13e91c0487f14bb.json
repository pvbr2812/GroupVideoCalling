{"ast":null,"code":"import { loaderBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { useTelemetry, useFluentContext, getElementType, useUnhandledProps, useStyles, useAccessibility } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthandFactory, commonPropTypes, getOrGenerateIdFromShorthand } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { Text } from '../Text/Text';\nexport var loaderClassName = 'ui-loader';\nexport var loaderSlotClassNames = {\n  indicator: loaderClassName + \"__indicator\",\n  label: loaderClassName + \"__label\",\n  svg: loaderClassName + \"__svg\"\n};\n/**\n * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.\n *\n * @accessibility\n * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.\n */\n\nexport var Loader = /*#__PURE__*/function () {\n  var Loader = function Loader(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Loader.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var delay = props.delay,\n        label = props.label,\n        indicator = props.indicator,\n        svg = props.svg,\n        inline = props.inline,\n        labelPosition = props.labelPosition,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        size = props.size;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Loader.handledProps, props);\n    var delayTimer = React.useRef();\n\n    var _React$useState = React.useState(props.delay === 0),\n        visible = _React$useState[0],\n        setVisible = _React$useState[1];\n\n    var labelId = React.useRef();\n    labelId.current = getOrGenerateIdFromShorthand('loader-label-', label, labelId.current);\n\n    var _useStyles = useStyles(Loader.displayName, {\n      className: loaderClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          inline: inline,\n          labelPosition: labelPosition,\n          size: size\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Loader.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          labelId: labelId.current\n        };\n      },\n      rtl: context.rtl\n    });\n    React.useEffect(function () {\n      if (delay > 0) {\n        // @ts-ignore We have a collision between types from DOM and @types/node\n        delayTimer.current = setTimeout(function () {\n          setVisible(true);\n        }, delay);\n      }\n\n      return function () {\n        return clearTimeout(delayTimer.current);\n      };\n    }, [delay]);\n    var svgElement = Box.create(svg, {\n      defaultProps: function defaultProps() {\n        return {\n          className: loaderSlotClassNames.svg,\n          styles: resolvedStyles.svg\n        };\n      }\n    });\n    var element = visible && /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), Box.create(indicator, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('indicator', {\n          children: svgElement,\n          className: loaderSlotClassNames.indicator,\n          styles: resolvedStyles.indicator\n        });\n      }\n    }), Text.create(label, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('label', {\n          className: loaderSlotClassNames.label,\n          styles: resolvedStyles.label,\n          id: labelId.current\n        });\n      }\n    }));\n    setEnd();\n    return element;\n  };\n\n  Loader.displayName = 'Loader';\n  Loader.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: false\n  }), {\n    delay: PropTypes.number,\n    indicator: customPropTypes.itemShorthand,\n    inline: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),\n    size: customPropTypes.size,\n    svg: customPropTypes.itemShorthand\n  });\n  Loader.defaultProps = {\n    accessibility: loaderBehavior,\n    delay: 0,\n    indicator: {},\n    labelPosition: 'below',\n    svg: '',\n    size: 'medium'\n  };\n  Loader.handledProps = Object.keys(Loader.propTypes);\n  Loader.create = createShorthandFactory({\n    Component: Loader,\n    mappedProp: 'label'\n  });\n  Loader.shorthandConfig = {\n    mappedProp: 'label'\n  };\n  return Loader;\n}();","map":{"version":3,"sources":["components/Loader/Loader.tsx"],"names":["loaderClassName","loaderSlotClassNames","indicator","label","svg","Loader","context","useFluentContext","setStart","setEnd","useTelemetry","delay","inline","labelPosition","className","design","styles","variables","size","props","ElementType","getElementType","unhandledProps","useUnhandledProps","delayTimer","React","visible","setVisible","labelId","getOrGenerateIdFromShorthand","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","current","setTimeout","clearTimeout","svgElement","defaultProps","element","root","children","id","content","PropTypes","customPropTypes","itemShorthand","accessibility","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, loaderBehavior, LoaderBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport {\n  ComponentWithAs,\n  ShorthandConfig,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  SizeValue,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Text, TextProps } from '../Text/Text';\n\nexport interface LoaderSlotClassNames {\n  indicator: string;\n  label: string;\n  svg: string;\n}\n\nexport interface LoaderProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<LoaderBehaviorProps>;\n\n  /** Time in milliseconds after component mount before spinner is visible. */\n  delay?: number;\n\n  /** A loader can contain an indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** Loaders can appear inline with content. */\n  inline?: boolean;\n\n  /** A loader can contain a label. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A label in the loader can have different positions. */\n  labelPosition?: 'above' | 'below' | 'start' | 'end';\n\n  /** A size of the loader. */\n  size?: SizeValue;\n\n  /** A loader can contain a custom svg element. */\n  svg?: ShorthandValue<BoxProps>;\n}\n\nexport interface LoaderState {\n  visible: boolean;\n  labelId: string;\n}\n\nexport const loaderClassName = 'ui-loader';\nexport const loaderSlotClassNames: LoaderSlotClassNames = {\n  indicator: `${loaderClassName}__indicator`,\n  label: `${loaderClassName}__label`,\n  svg: `${loaderClassName}__svg`,\n};\n\nexport type LoaderStylesProps = Pick<LoaderProps, 'inline' | 'labelPosition' | 'size'>;\n\n/**\n * A loader alerts a user that content is being loaded or processed and they should wait for the activity to complete.\n *\n * @accessibility\n * Implements [ARIA progressbar](https://www.w3.org/TR/wai-aria-1.1/#progressbar) role.\n */\nexport const Loader: ComponentWithAs<'div', LoaderProps> &\n  FluentComponentStaticProps<LoaderProps> & {\n    shorthandConfig: ShorthandConfig<LoaderProps>;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Loader.displayName, context.telemetry);\n  setStart();\n  const { delay, label, indicator, svg, inline, labelPosition, className, design, styles, variables, size } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Loader.handledProps, props);\n\n  const delayTimer = React.useRef<number>();\n  const [visible, setVisible] = React.useState(props.delay === 0);\n\n  const labelId = React.useRef<string>();\n  labelId.current = getOrGenerateIdFromShorthand('loader-label-', label, labelId.current);\n\n  const { classes, styles: resolvedStyles } = useStyles<LoaderStylesProps>(Loader.displayName, {\n    className: loaderClassName,\n    mapPropsToStyles: () => ({\n      inline,\n      labelPosition,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<LoaderBehaviorProps>(props.accessibility, {\n    debugName: Loader.displayName,\n    mapPropsToBehavior: () => ({\n      labelId: labelId.current,\n    }),\n    rtl: context.rtl,\n  });\n\n  React.useEffect(() => {\n    if (delay > 0) {\n      // @ts-ignore We have a collision between types from DOM and @types/node\n      delayTimer.current = setTimeout(() => {\n        setVisible(true);\n      }, delay);\n    }\n\n    return () => clearTimeout(delayTimer.current);\n  }, [delay]);\n\n  const svgElement = Box.create(svg, {\n    defaultProps: () => ({ className: loaderSlotClassNames.svg, styles: resolvedStyles.svg }),\n  });\n\n  const element = visible && (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11yProps('indicator', {\n            children: svgElement,\n            className: loaderSlotClassNames.indicator,\n            styles: resolvedStyles.indicator,\n          }),\n      })}\n      {Text.create(label, {\n        defaultProps: () =>\n          getA11yProps('label', {\n            className: loaderSlotClassNames.label,\n            styles: resolvedStyles.label,\n            id: labelId.current,\n          }),\n      })}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nLoader.displayName = 'Loader';\n\nLoader.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  delay: PropTypes.number,\n  indicator: customPropTypes.itemShorthand,\n  inline: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['above', 'below', 'start', 'end']),\n  size: customPropTypes.size,\n  svg: customPropTypes.itemShorthand,\n};\n\nLoader.defaultProps = {\n  accessibility: loaderBehavior,\n  delay: 0,\n  indicator: {},\n  labelPosition: 'below',\n  svg: '',\n  size: 'medium',\n};\n\nLoader.handledProps = Object.keys(Loader.propTypes) as any;\n\nLoader.create = createShorthandFactory({ Component: Loader, mappedProp: 'label' });\n\nLoader.shorthandConfig = { mappedProp: 'label' };\n"]},"metadata":{},"sourceType":"module"}