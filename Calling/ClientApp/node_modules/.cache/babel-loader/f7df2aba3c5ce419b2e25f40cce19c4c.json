{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _invoke from \"lodash/invoke\";\nimport { treeTitleBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry } from '@fluentui/react-bindings';\nimport { Box } from '../Box/Box';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nexport var treeTitleClassName = 'ui-tree__title';\nexport var treeTitleSlotClassNames = {\n  indicator: treeTitleClassName + \"__selection-indicator\"\n};\n/**\n * A TreeTitle renders a title of TreeItem.\n */\n\nexport var TreeTitle = /*#__PURE__*/function () {\n  var TreeTitle = function TreeTitle(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(TreeTitle.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        content = props.content,\n        design = props.design,\n        hasSubtree = props.hasSubtree,\n        level = props.level,\n        index = props.index,\n        styles = props.styles,\n        treeSize = props.treeSize,\n        variables = props.variables,\n        selectionIndicator = props.selectionIndicator,\n        disabled = props.disabled,\n        selected = props.selected,\n        selectable = props.selectable,\n        selectableParent = props.selectableParent,\n        expanded = props.expanded,\n        indeterminate = props.indeterminate;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: TreeTitle.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleClick(e);\n        },\n        performSelection: function performSelection(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleClick(e);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          hasSubtree: hasSubtree,\n          level: level,\n          index: index,\n          treeSize: treeSize,\n          selected: selected,\n          selectable: selectable,\n          selectableParent: selectableParent\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(TreeTitle.displayName, {\n      className: treeTitleClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          selected: selected,\n          selectableParent: selectableParent,\n          disabled: disabled,\n          selectable: selectable,\n          indeterminate: indeterminate\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var selectionIndicatorOverrideProps = function selectionIndicatorOverrideProps(predefinedProps) {\n      return {\n        onClick: function onClick(e) {\n          e.stopPropagation(); // otherwise onClick on title will also be executed\n\n          handleClick(e);\n\n          _invoke(predefinedProps, 'onClick', e);\n        }\n      };\n    };\n\n    var selectIndicator = Box.create(selectionIndicator, {\n      defaultProps: function defaultProps() {\n        return Object.assign({\n          as: 'span',\n          selected: selected\n        }, selectableParent && !_isEmpty(selectionIndicator) && {\n          expanded: expanded\n        }, getA11Props('indicator', Object.assign({\n          className: treeTitleSlotClassNames.indicator\n        }, (selectable && !hasSubtree || selectableParent && expanded) && _isEmpty(selectionIndicator) && {\n          styles: resolvedStyles.selectionIndicator\n        })));\n      },\n      overrideProps: selectionIndicatorOverrideProps\n    });\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick,\n      selected: selected\n    }, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), unhandledProps)), childrenExist(children) ? children : content, selectable && selectIndicator);\n    setEnd();\n    return element;\n  };\n\n  TreeTitle.displayName = 'TreeTitle';\n  TreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    hasSubtree: PropTypes.bool,\n    index: PropTypes.number,\n    level: PropTypes.number,\n    onClick: PropTypes.func,\n    expanded: PropTypes.bool,\n    selected: PropTypes.bool,\n    selectable: PropTypes.bool,\n    selectableParent: PropTypes.bool,\n    treeSize: PropTypes.number,\n    selectionIndicator: customPropTypes.shorthandAllowingChildren,\n    indeterminate: PropTypes.bool\n  });\n  TreeTitle.defaultProps = {\n    as: 'a',\n    selectionIndicator: {},\n    accessibility: treeTitleBehavior\n  };\n  TreeTitle.handledProps = Object.keys(TreeTitle.propTypes);\n  TreeTitle.create = createShorthandFactory({\n    Component: TreeTitle,\n    mappedProp: 'content'\n  });\n  return TreeTitle;\n}();","map":{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["treeTitleClassName","treeTitleSlotClassNames","indicator","TreeTitle","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","selectionIndicator","disabled","selected","selectable","selectableParent","expanded","indeterminate","props","getA11Props","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","performSelection","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","selectionIndicatorOverrideProps","onClick","selectIndicator","defaultProps","as","overrideProps","element","forElements","childrenExist","commonPropTypes","PropTypes","customPropTypes","bool","treeTitleBehavior","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Box, BoxProps } from '../Box/Box';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\n\nexport interface TreeTitleSlotClassNames {\n  indicator: string;\n}\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n\n  /** Whether or not tree title is part of the selectable parent. */\n  selectableParent?: boolean;\n\n  /** A selection indicator icon can be customized. */\n  selectionIndicator?: ShorthandValue<BoxProps>;\n\n  /** A selection indicator can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A state of selection indicator. */\n  selected?: boolean;\n\n  /** Whether or not tree title is selectable. */\n  selectable?: boolean;\n\n  /** For selectable parents define if all nested children are checked */\n  indeterminate?: boolean;\n}\n\nexport type TreeTitleStylesProps = Pick<\n  TreeTitleProps,\n  'selected' | 'selectable' | 'disabled' | 'selectableParent' | 'indeterminate'\n>;\n\nexport const treeTitleClassName = 'ui-tree__title';\n\nexport const treeTitleSlotClassNames = {\n  indicator: `${treeTitleClassName}__selection-indicator`,\n};\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport const TreeTitle: ComponentWithAs<'a', TreeTitleProps> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n    selectionIndicator,\n    disabled,\n    selected,\n    selectable,\n    selectableParent,\n    expanded,\n    indeterminate,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n      performSelection: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n      selected,\n      selectable,\n      selectableParent,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: treeTitleClassName,\n    mapPropsToStyles: () => ({\n      selected,\n      selectableParent,\n      disabled,\n      selectable,\n      indeterminate,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const selectionIndicatorOverrideProps = (predefinedProps: BoxProps) => ({\n    onClick: (e: React.SyntheticEvent) => {\n      e.stopPropagation(); // otherwise onClick on title will also be executed\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e);\n    },\n  });\n\n  const selectIndicator = Box.create(selectionIndicator, {\n    defaultProps: () => ({\n      as: 'span',\n      selected,\n      ...(selectableParent && !_.isEmpty(selectionIndicator) && { expanded }),\n      ...getA11Props('indicator', {\n        className: treeTitleSlotClassNames.indicator,\n        ...(((selectable && !hasSubtree) || (selectableParent && expanded)) &&\n          _.isEmpty(selectionIndicator) && {\n            styles: resolvedStyles.selectionIndicator,\n          }),\n      }),\n    }),\n    overrideProps: selectionIndicatorOverrideProps,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        selected,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n\n      {selectable && selectIndicator}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectable: PropTypes.bool,\n  selectableParent: PropTypes.bool,\n  treeSize: PropTypes.number,\n  selectionIndicator: customPropTypes.shorthandAllowingChildren,\n  indeterminate: PropTypes.bool,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  selectionIndicator: {},\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n"]},"metadata":{},"sourceType":"module"}