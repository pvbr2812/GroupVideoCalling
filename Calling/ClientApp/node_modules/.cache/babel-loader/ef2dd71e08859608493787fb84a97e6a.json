{"ast":null,"code":"var _rtlKeyMap;\n\nimport { keyboardKey } from '@fluentui/keyboard-key';\nimport { shouldHandleOnKeys } from './shouldHandleOnKeys';\nvar rtlKeyMap = (_rtlKeyMap = {}, _rtlKeyMap[keyboardKey.ArrowRight] = keyboardKey.ArrowLeft, _rtlKeyMap[keyboardKey.ArrowLeft] = keyboardKey.ArrowRight, _rtlKeyMap);\n/**\n * Assigns onKeyDown handler to the slot element, based on Component's actions\n * and keys mappings defined in Accessibility behavior\n * @param {AccessibilityActionHandlers} componentActionHandlers Actions handlers defined in a component.\n * @param {KeyActions} behaviorActions Mappings of actions and keys defined in Accessibility behavior.\n * @param {boolean} isRtlEnabled Indicates if Left and Right arrow keys should be swapped in RTL mode.\n */\n\nexport var getKeyDownHandlers = function getKeyDownHandlers(componentActionHandlers, behaviorActions, isRtlEnabled) {\n  var slotKeyHandlers = {};\n\n  if (!componentActionHandlers || !behaviorActions) {\n    return slotKeyHandlers;\n  }\n\n  var componentHandlerNames = Object.keys(componentActionHandlers);\n  Object.keys(behaviorActions).forEach(function (slotName) {\n    var behaviorSlotActions = behaviorActions[slotName];\n    var handledActions = Object.keys(behaviorSlotActions).filter(function (actionName) {\n      var slotAction = behaviorSlotActions[actionName];\n      var actionHasKeyCombinations = Array.isArray(slotAction.keyCombinations) && slotAction.keyCombinations.length > 0;\n      var actionHandledByComponent = componentHandlerNames.indexOf(actionName) !== -1;\n      return actionHasKeyCombinations && actionHandledByComponent;\n    });\n\n    if (handledActions.length > 0) {\n      slotKeyHandlers[slotName] = {\n        onKeyDown: function onKeyDown(event) {\n          handledActions.forEach(function (actionName) {\n            var keyCombinations = behaviorSlotActions[actionName].keyCombinations;\n\n            if (keyCombinations) {\n              if (isRtlEnabled) {\n                keyCombinations = keyCombinations.map(function (keyCombination) {\n                  var keyToRtlKey = rtlKeyMap[keyCombination.keyCode];\n\n                  if (keyToRtlKey) {\n                    keyCombination.keyCode = keyToRtlKey;\n                  }\n\n                  return keyCombination;\n                });\n              }\n\n              if (shouldHandleOnKeys(event, keyCombinations)) {\n                componentActionHandlers[actionName](event);\n              }\n            }\n          });\n        }\n      };\n    }\n  });\n  return slotKeyHandlers;\n};","map":{"version":3,"sources":["accessibility/getKeyDownHandlers.ts"],"names":["rtlKeyMap","keyboardKey","getKeyDownHandlers","slotKeyHandlers","componentHandlerNames","Object","behaviorSlotActions","behaviorActions","handledActions","slotAction","actionHasKeyCombinations","Array","actionHandledByComponent","onKeyDown","keyCombinations","keyToRtlKey","keyCombination","shouldHandleOnKeys","componentActionHandlers"],"mappings":";;AACA,SAAA,WAAA,QAAA,wBAAA;AAGA,SAAA,kBAAA,QAAA,sBAAA;AAGA,IAAMA,SAAiC,IAAA,UAAA,GAAA,EAAA,EAAA,UAAA,CACpCC,WAAW,CADyB,UAAA,CAAA,GACXA,WAAW,CADA,SAAA,EAAA,UAAA,CAEpCA,WAAW,CAFyB,SAAA,CAAA,GAEZA,WAAW,CAFC,UAAA,EAAvC,UAAuC,CAAvC;AAKA;;;;;;;;AAOA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,uBAAA,EAAA,eAAA,EAAA,YAAA,EAIH;AAC7B,MAAMC,eAAyC,GAA/C,EAAA;;AAEA,MAAI,CAAA,uBAAA,IAA4B,CAAhC,eAAA,EAAkD;AAChD,WAAA,eAAA;AACD;;AAED,MAAMC,qBAAqB,GAAGC,MAAM,CAANA,IAAAA,CAA9B,uBAA8BA,CAA9B;AAEAA,EAAAA,MAAM,CAANA,IAAAA,CAAAA,eAAAA,EAAAA,OAAAA,CAAqC,UAAA,QAAA,EAAY;AAC/C,QAAMC,mBAAmB,GAAGC,eAAe,CAA3C,QAA2C,CAA3C;AACA,QAAMC,cAAc,GAAG,MAAM,CAAN,IAAA,CAAA,mBAAA,EAAA,MAAA,CAAwC,UAAA,UAAA,EAAc;AAC3E,UAAMC,UAAU,GAAGH,mBAAmB,CAAtC,UAAsC,CAAtC;AAEA,UAAMI,wBAAwB,GAC5BC,KAAK,CAALA,OAAAA,CAAcF,UAAU,CAAxBE,eAAAA,KAA6CF,UAAU,CAAVA,eAAAA,CAAAA,MAAAA,GAD/C,CAAA;AAEA,UAAMG,wBAAwB,GAAGR,qBAAqB,CAArBA,OAAAA,CAAAA,UAAAA,MAA8C,CAA/E,CAAA;AAEA,aAAOM,wBAAwB,IAA/B,wBAAA;AAPF,KAAuB,CAAvB;;AAUA,QAAIF,cAAc,CAAdA,MAAAA,GAAJ,CAAA,EAA+B;AAC7BL,MAAAA,eAAe,CAAfA,QAAe,CAAfA,GAA4B;AAC1BU,QAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAAgC;AACzCL,UAAAA,cAAc,CAAdA,OAAAA,CAAuB,UAAA,UAAA,EAAc;AACnC,gBAAIM,eAAe,GAAGR,mBAAmB,CAAnBA,UAAmB,CAAnBA,CAAtB,eAAA;;AAEA,gBAAA,eAAA,EAAqB;AACnB,kBAAA,YAAA,EAAkB;AAChBQ,gBAAAA,eAAe,GAAG,eAAe,CAAf,GAAA,CAAoB,UAAA,cAAA,EAAkB;AACtD,sBAAMC,WAAW,GAAGf,SAAS,CAACgB,cAAc,CAA5C,OAA6B,CAA7B;;AACA,sBAAA,WAAA,EAAiB;AACfA,oBAAAA,cAAc,CAAdA,OAAAA,GAAAA,WAAAA;AACD;;AACD,yBAAA,cAAA;AALFF,iBAAkB,CAAlBA;AAOD;;AAED,kBAAIG,kBAAkB,CAAA,KAAA,EAAtB,eAAsB,CAAtB,EAAgD;AAC9CC,gBAAAA,uBAAuB,CAAvBA,UAAuB,CAAvBA,CAAAA,KAAAA;AACD;AACF;AAjBHV,WAAAA;AAmBD;AArByB,OAA5BL;AAuBD;AApCHE,GAAAA;AAuCA,SAAA,eAAA;AApDK,CAAA","sourcesContent":["import { KeyActions } from '@fluentui/accessibility';\nimport { keyboardKey } from '@fluentui/keyboard-key';\nimport * as React from 'react';\n\nimport { shouldHandleOnKeys } from './shouldHandleOnKeys';\nimport { AccessibilityActionHandlers, AccessibilityKeyHandlers } from './types';\n\nconst rtlKeyMap: Record<number, number> = {\n  [keyboardKey.ArrowRight]: keyboardKey.ArrowLeft,\n  [keyboardKey.ArrowLeft]: keyboardKey.ArrowRight,\n};\n\n/**\n * Assigns onKeyDown handler to the slot element, based on Component's actions\n * and keys mappings defined in Accessibility behavior\n * @param {AccessibilityActionHandlers} componentActionHandlers Actions handlers defined in a component.\n * @param {KeyActions} behaviorActions Mappings of actions and keys defined in Accessibility behavior.\n * @param {boolean} isRtlEnabled Indicates if Left and Right arrow keys should be swapped in RTL mode.\n */\nexport const getKeyDownHandlers = (\n  componentActionHandlers: AccessibilityActionHandlers,\n  behaviorActions: KeyActions,\n  isRtlEnabled?: boolean,\n): AccessibilityKeyHandlers => {\n  const slotKeyHandlers: AccessibilityKeyHandlers = {};\n\n  if (!componentActionHandlers || !behaviorActions) {\n    return slotKeyHandlers;\n  }\n\n  const componentHandlerNames = Object.keys(componentActionHandlers);\n\n  Object.keys(behaviorActions).forEach(slotName => {\n    const behaviorSlotActions = behaviorActions[slotName];\n    const handledActions = Object.keys(behaviorSlotActions).filter(actionName => {\n      const slotAction = behaviorSlotActions[actionName];\n\n      const actionHasKeyCombinations =\n        Array.isArray(slotAction.keyCombinations) && slotAction.keyCombinations.length > 0;\n      const actionHandledByComponent = componentHandlerNames.indexOf(actionName) !== -1;\n\n      return actionHasKeyCombinations && actionHandledByComponent;\n    });\n\n    if (handledActions.length > 0) {\n      slotKeyHandlers[slotName] = {\n        onKeyDown: (event: React.KeyboardEvent) => {\n          handledActions.forEach(actionName => {\n            let keyCombinations = behaviorSlotActions[actionName].keyCombinations;\n\n            if (keyCombinations) {\n              if (isRtlEnabled) {\n                keyCombinations = keyCombinations.map(keyCombination => {\n                  const keyToRtlKey = rtlKeyMap[keyCombination.keyCode];\n                  if (keyToRtlKey) {\n                    keyCombination.keyCode = keyToRtlKey;\n                  }\n                  return keyCombination;\n                });\n              }\n\n              if (shouldHandleOnKeys(event, keyCombinations)) {\n                componentActionHandlers[actionName](event);\n              }\n            }\n          });\n        },\n      };\n    }\n  });\n\n  return slotKeyHandlers;\n};\n"]},"metadata":{},"sourceType":"module"}