{"ast":null,"code":"import { isBrowser } from './isBrowser'; // Taken from https://github.com/ten1seven/what-input/blob/master/src/scripts/what-input.js\n\n/* eslint-disable */\n\n/*\n * variables\n */\n// last used input type\n\nvar currentInput = 'initial'; // event buffer timer\n\nvar eventTimer = null; // list of modifier keys commonly used with the mouse and\n// can be safely ignored to prevent false keyboard detection\n\nvar ignoreMap = [16, // shift\n17, // control\n18, // alt\n91, // Windows key / left Apple cmd\n93 // Windows menu / right Apple cmd\n]; // used to count how many Providers needed to initialize whatinput.\n\nvar whatInputInitialized = 'whatInputInitialized'; // mapping of events to input types\n\nvar inputMap = {\n  keydown: 'keyboard',\n  keyup: 'keyboard',\n  mousedown: 'mouse',\n  mousemove: 'mouse',\n  MSPointerDown: 'pointer',\n  MSPointerMove: 'pointer',\n  pointerdown: 'pointer',\n  pointermove: 'pointer',\n  touchstart: 'touch'\n}; // boolean: true if touch buffer is active\n\nvar isBuffering = false; // map of IE 10 pointer events\n\nvar pointerMap = {\n  2: 'touch',\n  3: 'touch',\n  // treat pen like touch\n  4: 'mouse'\n}; // check support for passive event listeners\n\nvar supportsPassive = false;\n\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      supportsPassive = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {}\n/*\n * set up\n */\n\n\nvar setUp = function setUp() {\n  // add correct mouse wheel event mapping to `inputMap`\n  inputMap[detectWheel()] = 'mouse';\n  addListeners(window);\n  doUpdate(window.document);\n};\n/*\n * events\n */\n\n\nvar addListeners = function addListeners(eventTarget) {\n  // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n  // can only demonstrate potential, but not actual, interaction\n  // and are treated separately\n  var options = supportsPassive ? {\n    passive: true,\n    capture: true\n  } : true; // pointer events (mouse, pen, touch)\n  // @ts-ignore\n\n  if (eventTarget.PointerEvent) {\n    eventTarget.addEventListener('pointerdown', setInput); // @ts-ignore\n  } else if (window.MSPointerEvent) {\n    eventTarget.addEventListener('MSPointerDown', setInput);\n  } else {\n    // mouse events\n    eventTarget.addEventListener('mousedown', setInput, true); // touch events\n\n    if ('ontouchstart' in eventTarget) {\n      eventTarget.addEventListener('touchstart', eventBuffer, options);\n      eventTarget.addEventListener('touchend', setInput, true);\n    }\n  } // keyboard events\n\n\n  eventTarget.addEventListener('keydown', eventBuffer, true);\n  eventTarget.addEventListener('keyup', eventBuffer, true);\n}; // checks conditions before updating new input\n\n\nvar setInput = function setInput(event) {\n  // only execute if the event buffer timer isn't running\n  if (!isBuffering) {\n    var eventKey = event.which;\n    var value = inputMap[event.type];\n\n    if (value === 'pointer') {\n      value = pointerType(event);\n    }\n\n    var ignoreMatch = ignoreMap.indexOf(eventKey) === -1;\n    var shouldUpdate = value === 'keyboard' && eventKey && ignoreMatch || value === 'mouse' || value === 'touch';\n\n    if (currentInput !== value && shouldUpdate) {\n      currentInput = value;\n      doUpdate(event.view.document);\n    }\n  }\n}; // updates the doc and `inputTypes` array with new input\n\n\nvar doUpdate = function doUpdate(target) {\n  target.documentElement.setAttribute(\"data-whatinput\", currentInput);\n}; // buffers events that frequently also fire mouse events\n\n\nvar eventBuffer = function eventBuffer(event) {\n  // set the current input\n  setInput(event); // clear the timer if it happens to be running\n\n  window.clearTimeout(eventTimer); // set the isBuffering to `true`\n\n  isBuffering = true; // run the timer\n\n  eventTimer = window.setTimeout(function () {\n    // if the timer runs out, set isBuffering back to `false`\n    isBuffering = false;\n  }, 100);\n};\n/*\n * utilities\n */\n\n\nvar pointerType = function pointerType(event) {\n  if (typeof event.pointerType === 'number') {\n    return pointerMap[event.pointerType];\n  } // treat pen like touch\n\n\n  return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n}; // detect version of mouse wheel event to use\n// via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\n\nvar detectWheel = function detectWheel() {\n  var wheelType; // Modern browsers support \"wheel\"\n\n  if ('onwheel' in document.createElement('div')) {\n    wheelType = 'wheel';\n  } else {\n    // Webkit and IE support at least \"mousewheel\"\n    // or assume that remaining browsers are older Firefox\n    wheelType = // @ts-ignore\n    document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n  }\n\n  return wheelType;\n}; // don't start script unless browser cuts the mustard\n// (also passes if polyfills are used)\n\n\nif (isBrowser() && 'addEventListener' in window && Array.prototype.indexOf) {\n  setUp();\n}\n/*\n * set up for document\n */\n\n\nexport var setUpWhatInput = function setUpWhatInput(target) {\n  var targetWindow = target.defaultView;\n\n  if (isBrowser() && targetWindow && 'addEventListener' in targetWindow && Array.prototype.indexOf) {\n    var initializedTimes = target[whatInputInitialized];\n\n    if (typeof initializedTimes === 'number' && initializedTimes > 0) {\n      target[whatInputInitialized] = initializedTimes + 1;\n      return;\n    }\n\n    target[whatInputInitialized] = 1;\n    addListeners(targetWindow);\n    doUpdate(target);\n  }\n};\n\nfunction cleanupWhatInput(eventTarget) {\n  var options = supportsPassive ? {\n    capture: true\n  } : true; // @ts-ignore\n\n  if (eventTarget.PointerEvent) {\n    eventTarget.removeEventListener('pointerdown', setInput); // @ts-ignore\n  } else if (window.MSPointerEvent) {\n    eventTarget.removeEventListener('MSPointerDown', setInput);\n  } else {\n    // mouse events\n    eventTarget.removeEventListener('mousedown', setInput, true); // touch events\n\n    if ('ontouchstart' in eventTarget) {\n      eventTarget.removeEventListener('touchstart', eventBuffer, options);\n      eventTarget.removeEventListener('touchend', setInput, true);\n    }\n  } // keyboard events\n\n\n  eventTarget.removeEventListener('keydown', eventBuffer, true);\n  eventTarget.removeEventListener('keyup', eventBuffer, true);\n}\n\nexport var tryCleanupWhatInput = function tryCleanupWhatInput(target) {\n  var targetWindow = target.defaultView;\n\n  if (isBrowser() && targetWindow && 'removeEventListener' in targetWindow) {\n    if (target[whatInputInitialized] === 1) {\n      delete target[whatInputInitialized];\n      cleanupWhatInput(targetWindow);\n    } else {\n      target[whatInputInitialized] = target[whatInputInitialized] - 1;\n    }\n  }\n};\nexport var setWhatInputSource = function setWhatInputSource(target, newInput) {\n  currentInput = newInput;\n  doUpdate(target);\n}; // returns string: the current input type\n// returns the same value as the `data-whatinput` attribute\n\nexport var ask = function ask() {\n  return currentInput;\n};\nexport var isFromKeyboard = function isFromKeyboard() {\n  return ask() === 'keyboard';\n};","map":{"version":3,"sources":["utils/whatInput.ts"],"names":["currentInput","eventTimer","ignoreMap","whatInputInitialized","inputMap","keydown","keyup","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","isBuffering","pointerMap","supportsPassive","opts","get","window","setUp","detectWheel","addListeners","doUpdate","options","passive","capture","eventTarget","setInput","eventKey","event","value","pointerType","ignoreMatch","shouldUpdate","target","eventBuffer","document","wheelType","isBrowser","Array","setUpWhatInput","targetWindow","initializedTimes","tryCleanupWhatInput","cleanupWhatInput","setWhatInputSource","ask","isFromKeyboard"],"mappings":"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","sourcesContent":["import { isBrowser } from './isBrowser';\n\n// Taken from https://github.com/ten1seven/what-input/blob/master/src/scripts/what-input.js\n/* eslint-disable */\n\n/*\n * variables\n */\n\n// last used input type\nlet currentInput = 'initial';\n\n// event buffer timer\nlet eventTimer = null;\n\n// list of modifier keys commonly used with the mouse and\n// can be safely ignored to prevent false keyboard detection\nconst ignoreMap = [\n  16, // shift\n  17, // control\n  18, // alt\n  91, // Windows key / left Apple cmd\n  93, // Windows menu / right Apple cmd\n];\n// used to count how many Providers needed to initialize whatinput.\nconst whatInputInitialized = 'whatInputInitialized';\n\n// mapping of events to input types\nconst inputMap = {\n  keydown: 'keyboard',\n  keyup: 'keyboard',\n  mousedown: 'mouse',\n  mousemove: 'mouse',\n  MSPointerDown: 'pointer',\n  MSPointerMove: 'pointer',\n  pointerdown: 'pointer',\n  pointermove: 'pointer',\n  touchstart: 'touch',\n};\n\n// boolean: true if touch buffer is active\nlet isBuffering = false;\n\n// map of IE 10 pointer events\nconst pointerMap = {\n  2: 'touch',\n  3: 'touch', // treat pen like touch\n  4: 'mouse',\n};\n\n// check support for passive event listeners\nlet supportsPassive = false;\n\ntry {\n  const opts = Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    },\n  });\n\n  window.addEventListener('test', null, opts);\n} catch (e) {}\n\n/*\n * set up\n */\n\nconst setUp = () => {\n  // add correct mouse wheel event mapping to `inputMap`\n  inputMap[detectWheel()] = 'mouse';\n\n  addListeners(window);\n  doUpdate(window.document);\n};\n\n/*\n * events\n */\n\nconst addListeners = (eventTarget: Window) => {\n  // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n  // can only demonstrate potential, but not actual, interaction\n  // and are treated separately\n  const options = supportsPassive ? { passive: true, capture: true } : true;\n\n  // pointer events (mouse, pen, touch)\n  // @ts-ignore\n  if (eventTarget.PointerEvent) {\n    eventTarget.addEventListener('pointerdown', setInput);\n    // @ts-ignore\n  } else if (window.MSPointerEvent) {\n    eventTarget.addEventListener('MSPointerDown', setInput);\n  } else {\n    // mouse events\n    eventTarget.addEventListener('mousedown', setInput, true);\n\n    // touch events\n    if ('ontouchstart' in eventTarget) {\n      eventTarget.addEventListener('touchstart', eventBuffer, options);\n      eventTarget.addEventListener('touchend', setInput, true);\n    }\n  }\n\n  // keyboard events\n  eventTarget.addEventListener('keydown', eventBuffer, true);\n  eventTarget.addEventListener('keyup', eventBuffer, true);\n};\n\n// checks conditions before updating new input\nconst setInput = event => {\n  // only execute if the event buffer timer isn't running\n  if (!isBuffering) {\n    const eventKey = event.which;\n    let value = inputMap[event.type];\n\n    if (value === 'pointer') {\n      value = pointerType(event);\n    }\n\n    const ignoreMatch = ignoreMap.indexOf(eventKey) === -1;\n    const shouldUpdate = (value === 'keyboard' && eventKey && ignoreMatch) || value === 'mouse' || value === 'touch';\n\n    if (currentInput !== value && shouldUpdate) {\n      currentInput = value;\n      doUpdate(event.view.document);\n    }\n  }\n};\n\n// updates the doc and `inputTypes` array with new input\nconst doUpdate = (target: Document) => {\n  target.documentElement.setAttribute(`data-whatinput`, currentInput);\n};\n\n// buffers events that frequently also fire mouse events\nconst eventBuffer = event => {\n  // set the current input\n  setInput(event);\n\n  // clear the timer if it happens to be running\n  window.clearTimeout(eventTimer);\n\n  // set the isBuffering to `true`\n  isBuffering = true;\n\n  // run the timer\n  eventTimer = window.setTimeout(() => {\n    // if the timer runs out, set isBuffering back to `false`\n    isBuffering = false;\n  }, 100);\n};\n\n/*\n * utilities\n */\n\nconst pointerType = event => {\n  if (typeof event.pointerType === 'number') {\n    return pointerMap[event.pointerType];\n  }\n\n  // treat pen like touch\n  return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n};\n\n// detect version of mouse wheel event to use\n// via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\nconst detectWheel = () => {\n  let wheelType;\n\n  // Modern browsers support \"wheel\"\n  if ('onwheel' in document.createElement('div')) {\n    wheelType = 'wheel';\n  } else {\n    // Webkit and IE support at least \"mousewheel\"\n    // or assume that remaining browsers are older Firefox\n    wheelType =\n      // @ts-ignore\n      document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n  }\n\n  return wheelType;\n};\n\n// don't start script unless browser cuts the mustard\n// (also passes if polyfills are used)\nif (isBrowser() && 'addEventListener' in window && Array.prototype.indexOf) {\n  setUp();\n}\n\n/*\n * set up for document\n */\n\nexport const setUpWhatInput = (target: Document) => {\n  const targetWindow = target.defaultView;\n  if (isBrowser() && targetWindow && 'addEventListener' in targetWindow && Array.prototype.indexOf) {\n    const initializedTimes = target[whatInputInitialized];\n    if (typeof initializedTimes === 'number' && initializedTimes > 0) {\n      target[whatInputInitialized] = initializedTimes + 1;\n      return;\n    }\n    target[whatInputInitialized] = 1;\n\n    addListeners(targetWindow);\n    doUpdate(target);\n  }\n};\n\nfunction cleanupWhatInput(eventTarget: Window) {\n  const options = supportsPassive ? { capture: true } : true;\n\n  // @ts-ignore\n  if (eventTarget.PointerEvent) {\n    eventTarget.removeEventListener('pointerdown', setInput);\n    // @ts-ignore\n  } else if (window.MSPointerEvent) {\n    eventTarget.removeEventListener('MSPointerDown', setInput);\n  } else {\n    // mouse events\n    eventTarget.removeEventListener('mousedown', setInput, true);\n\n    // touch events\n    if ('ontouchstart' in eventTarget) {\n      eventTarget.removeEventListener('touchstart', eventBuffer, options);\n      eventTarget.removeEventListener('touchend', setInput, true);\n    }\n  }\n\n  // keyboard events\n  eventTarget.removeEventListener('keydown', eventBuffer, true);\n  eventTarget.removeEventListener('keyup', eventBuffer, true);\n}\n\nexport const tryCleanupWhatInput = (target: Document) => {\n  const targetWindow = target.defaultView;\n  if (isBrowser() && targetWindow && 'removeEventListener' in targetWindow) {\n    if (target[whatInputInitialized] === 1) {\n      delete target[whatInputInitialized];\n      cleanupWhatInput(targetWindow);\n    } else {\n      target[whatInputInitialized] = target[whatInputInitialized] - 1;\n    }\n  }\n};\n\nexport const setWhatInputSource = (target: Document, newInput: 'mouse' | 'keyboard' | 'initial') => {\n  currentInput = newInput;\n  doUpdate(target);\n};\n\n// returns string: the current input type\n// returns the same value as the `data-whatinput` attribute\nexport const ask = (): string => currentInput;\n\nexport const isFromKeyboard = (): boolean => ask() === 'keyboard';\n"]},"metadata":{},"sourceType":"module"}