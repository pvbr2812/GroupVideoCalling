{"ast":null,"code":"import { getElementType, mergeVariablesOverrides, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry, compose } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport { commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\nexport var toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\n\nexport var ToolbarMenuDivider = /*#__PURE__*/function () {\n  var ToolbarMenuDivider = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergeVariablesOverrides(parentVariables, variables)\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n      className: classes.root,\n      ref: ref\n    })));\n    setEnd();\n    return element;\n  }, {\n    className: toolbarMenuDividerClassName,\n    displayName: 'ToolbarMenuDivider',\n    shorthandConfig: {\n      mappedProp: 'content'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables']\n  });\n  ToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\n  ToolbarMenuDivider.defaultProps = {\n    as: 'li'\n  };\n  return ToolbarMenuDivider;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarMenuDivider.tsx"],"names":["toolbarMenuDividerClassName","ToolbarMenuDivider","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","className","design","styles","variables","props","parentVariables","React","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","mergeVariablesOverrides","unstable_props","ElementType","getElementType","unhandledProps","useUnhandledProps","element","ref","displayName","shorthandConfig","mappedProp","handledProps","commonPropTypes","as"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { ChildrenComponentProps, ContentComponentProps, UIComponentProps, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarMenuDividerStylesProps = never;\nexport const toolbarMenuDividerClassName = 'ui-toolbar__menudivider';\n\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\nexport const ToolbarMenuDivider = compose<'li', ToolbarMenuDividerProps, ToolbarMenuDividerStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root, ref })} />;\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarMenuDividerClassName,\n    displayName: 'ToolbarMenuDivider',\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'li', ToolbarMenuDividerProps>;\n\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li',\n};\n"]},"metadata":{},"sourceType":"module"}