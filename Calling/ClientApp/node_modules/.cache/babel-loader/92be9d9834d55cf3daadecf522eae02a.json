{"ast":null,"code":"import _includes from \"lodash/includes\";\nimport _merge from \"lodash/merge\";\nimport { keyboardKey } from '@fluentui/keyboard-key';\nimport { popupBehavior } from '../Popup/popupBehavior';\n/**\n * @description\n * Implements ARIA [MenuButton](https://www.w3.org/TR/wai-aria-practices/#menubutton) design pattern.\n * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.\n *\n * @specification\n * Adds attribute 'aria-haspopup=true' to 'trigger' slot if 'contextMenu' property is not set.\n * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.\n * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.\n * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.\n */\n\nexport var menuButtonBehavior = function menuButtonBehavior(props) {\n  var behavior = popupBehavior(props);\n  return _merge(behavior, {\n    attributes: {\n      trigger: Object.assign({\n        'aria-controls': props.open ? props.menuId : undefined,\n        'aria-expanded': props.open || undefined,\n        'aria-haspopup': props.contextMenu ? undefined : 'true',\n        id: props.triggerId\n      }, !props.contextMenu && props.open && {\n        tabIndex: -1\n      }),\n      menu: {\n        'aria-labelledby': props.triggerId,\n        id: props.menuId\n      }\n    },\n    keyActions: {\n      root: Object.assign({}, props.open ? {\n        closeMenu: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Tab,\n            shiftKey: false\n          }, {\n            keyCode: keyboardKey.Tab,\n            shiftKey: true\n          }]\n        }\n      } : _includes(props.on, 'click') && {\n        openAndFocusFirst: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowDown\n          }]\n        },\n        openAndFocusLast: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowUp\n          }]\n        }\n      })\n    }\n  });\n};","map":{"version":3,"sources":["behaviors/MenuButton/menuButtonBehavior.ts"],"names":["menuButtonBehavior","behavior","popupBehavior","attributes","trigger","props","id","triggerId","tabIndex","menu","menuId","keyActions","root","closeMenu","keyCombinations","keyCode","keyboardKey","shiftKey","openAndFocusFirst","ArrowDown","openAndFocusLast","ArrowUp"],"mappings":";;AAAA,SAAA,WAAA,QAAA,wBAAA;AAIA,SAAA,aAAA,QAAA,wBAAA;AAEA;;;;;;;;;;;;;;AAaA,OAAO,IAAMA,kBAA0D,GAAG,SAA7DA,kBAA6D,CAAA,KAAA,EAAS;AACjF,MAAMC,QAAQ,GAAGC,aAAa,CAA9B,KAA8B,CAA9B;AAEA,SAAO,MAAA,CAAA,QAAA,EAAkB;AACvBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA;AACL,yBAAiBC,KAAK,CAALA,IAAAA,GAAaA,KAAK,CAAlBA,MAAAA,GADZ,SAAA;AAEL,yBAAiBA,KAAK,CAALA,IAAAA,IAFZ,SAAA;AAGL,yBAAiBA,KAAK,CAALA,WAAAA,GAAAA,SAAAA,GAHZ,MAAA;AAILC,QAAAA,EAAE,EAAED,KAAK,CAACE;AAJL,OAAA,EAKD,CAACF,KAAK,CAAN,WAAA,IAAsBA,KAAK,CAA3B,IAAA,IAAoC;AAAEG,QAAAA,QAAQ,EAAE,CAAC;AAAb,OALnC,CADG;AASVC,MAAAA,IAAI,EAAE;AACJ,2BAAmBJ,KAAK,CADpB,SAAA;AAEJC,QAAAA,EAAE,EAAED,KAAK,CAACK;AAFN;AATI,KADW;AAevBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACE,KAAK,CAAL,IAAA,GACA;AACEC,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE,CACf;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAAtB,GAAA;AAA4BC,YAAAA,QAAQ,EAAE;AAAtC,WADe,EAEf;AAAEF,YAAAA,OAAO,EAAEC,WAAW,CAAtB,GAAA;AAA4BC,YAAAA,QAAQ,EAAE;AAAtC,WAFe;AADR;AADb,OADA,GASA,SAAA,CAAWZ,KAAK,CAAhB,EAAA,EAAA,OAAA,CAAA,IAAiC;AAC/Ba,QAAAA,iBAAiB,EAAE;AACjBJ,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACG;AAAvB,WAAD;AADA,SADY;AAI/BC,QAAAA,gBAAgB,EAAE;AAChBN,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD;AADD;AAJa,OAVnC;AADM;AAfW,GAAlB,CAAP;AAHK,CAAA","sourcesContent":["import { keyboardKey } from '@fluentui/keyboard-key';\nimport * as _ from 'lodash';\n\nimport { Accessibility } from '../../types';\nimport { popupBehavior, PopupBehaviorProps } from '../Popup/popupBehavior';\n\n/**\n * @description\n * Implements ARIA [MenuButton](https://www.w3.org/TR/wai-aria-practices/#menubutton) design pattern.\n * Adds attribute 'aria-controls=menu-id' based on the property 'open' to 'trigger' slot.\n *\n * @specification\n * Adds attribute 'aria-haspopup=true' to 'trigger' slot if 'contextMenu' property is not set.\n * Adds attribute 'tabIndex=-1' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'aria-expanded=true' based on the property 'open' to 'trigger' slot.\n * Adds attribute 'id=trigger-id' based on the property 'triggerId' to 'trigger' slot.\n * Adds attribute 'id=menu-id' based on the property 'menuId' to 'menu' slot.\n * Adds attribute 'aria-labelledby=trigger-id' based on the property 'triggerId' to 'menu' slot.\n */\nexport const menuButtonBehavior: Accessibility<MenuButtonBehaviorProps> = props => {\n  const behavior = popupBehavior(props);\n\n  return _.merge(behavior, {\n    attributes: {\n      trigger: {\n        'aria-controls': props.open ? props.menuId : undefined,\n        'aria-expanded': props.open || undefined,\n        'aria-haspopup': props.contextMenu ? undefined : 'true',\n        id: props.triggerId,\n        ...(!props.contextMenu && props.open && { tabIndex: -1 }),\n      },\n\n      menu: {\n        'aria-labelledby': props.triggerId,\n        id: props.menuId,\n      },\n    },\n    keyActions: {\n      root: {\n        ...(props.open\n          ? {\n              closeMenu: {\n                keyCombinations: [\n                  { keyCode: keyboardKey.Tab, shiftKey: false },\n                  { keyCode: keyboardKey.Tab, shiftKey: true },\n                ],\n              },\n            }\n          : _.includes(props.on, 'click') && {\n              openAndFocusFirst: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowDown }],\n              },\n              openAndFocusLast: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowUp }],\n              },\n            }),\n      },\n    },\n  });\n};\n\nexport interface MenuButtonBehaviorProps extends PopupBehaviorProps {\n  /** Defines ID of the menu element. */\n  menuId?: string;\n  /** Defines ID of the trigger element. */\n  triggerId?: string;\n  /** Defines whether popup is displayed. */\n  open?: boolean;\n  /** Determines if the MenuButton behaves as context menu */\n  contextMenu?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}