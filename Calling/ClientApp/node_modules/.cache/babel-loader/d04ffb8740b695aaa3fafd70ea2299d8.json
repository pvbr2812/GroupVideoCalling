{"ast":null,"code":"import { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { setMicrophone, setShareUnshareScreen, endCall } from '../core/sideEffects';\nimport { utils } from '../Utils/Utils';\nimport { Constants } from '../core/constants';\n\nconst mapStateToProps = (state, props) => ({\n  actionable: state.calls.callState === Constants.INCOMING || state.calls.callState === Constants.RINGING || state.calls.callState === Constants.CONNECTING || state.calls.callState === Constants.CONNECTED,\n  mic: state.controls.mic,\n  call: state.calls.call,\n  shareScreen: state.controls.shareScreen,\n  endCall: () => {\n    state.calls.call && endCall(state.calls.call, {\n      forEveryone: false\n    });\n    props.endCallHandler();\n  },\n  videoDeviceInfo: state.devices.videoDeviceInfo,\n  screenWidth: props.screenWidth,\n  screenShareStreams: state.streams.screenShareStreams,\n  localVideoRendererIsBusy: state.streams.localVideoRendererIsBusy,\n  cameraPermission: state.devices.cameraPermission,\n  microphonePermission: state.devices.microphonePermission\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setMic: mic => dispatch(setMicrophone(mic)),\n  setScreenShare: screenShare => dispatch(setShareUnshareScreen(screenShare)),\n  // Only support Desktop -- Chrome | Edge (Chromium) | Safari\n  isLocalScreenShareSupportedInBrowser: () => {\n    return !utils.isMobileSession() && (/chrome/i.test(navigator.userAgent.toLowerCase()) || /safari/i.test(navigator.userAgent.toLowerCase()));\n  }\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(Header);","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/VSCODE2/communication-services-web-calling-hero/Calling/ClientApp/src/containers/Header.ts"],"names":["connect","Header","setMicrophone","setShareUnshareScreen","endCall","utils","Constants","mapStateToProps","state","props","actionable","calls","callState","INCOMING","RINGING","CONNECTING","CONNECTED","mic","controls","call","shareScreen","forEveryone","endCallHandler","videoDeviceInfo","devices","screenWidth","screenShareStreams","streams","localVideoRendererIsBusy","cameraPermission","microphonePermission","mapDispatchToProps","dispatch","setMic","setScreenShare","screenShare","isLocalScreenShareSupportedInBrowser","isMobileSession","test","navigator","userAgent","toLowerCase","connector"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAoC,sBAApC;AACA,SAASC,aAAT,EAAwBC,qBAAxB,EAA+CC,OAA/C,QAA8D,qBAA9D;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,SAAT,QAA0B,mBAA1B;;AAGA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAeC,KAAf,MAAuC;AAC7DC,EAAAA,UAAU,EACRF,KAAK,CAACG,KAAN,CAAYC,SAAZ,KAA0BN,SAAS,CAACO,QAApC,IACAL,KAAK,CAACG,KAAN,CAAYC,SAAZ,KAA0BN,SAAS,CAACQ,OADpC,IAEAN,KAAK,CAACG,KAAN,CAAYC,SAAZ,KAA0BN,SAAS,CAACS,UAFpC,IAGAP,KAAK,CAACG,KAAN,CAAYC,SAAZ,KAA0BN,SAAS,CAACU,SALuB;AAM7DC,EAAAA,GAAG,EAAET,KAAK,CAACU,QAAN,CAAeD,GANyC;AAO7DE,EAAAA,IAAI,EAAEX,KAAK,CAACG,KAAN,CAAYQ,IAP2C;AAQ7DC,EAAAA,WAAW,EAAEZ,KAAK,CAACU,QAAN,CAAeE,WARiC;AAS7DhB,EAAAA,OAAO,EAAE,MAAY;AACnBI,IAAAA,KAAK,CAACG,KAAN,CAAYQ,IAAZ,IAAoBf,OAAO,CAACI,KAAK,CAACG,KAAN,CAAYQ,IAAb,EAAmB;AAAEE,MAAAA,WAAW,EAAE;AAAf,KAAnB,CAA3B;AACAZ,IAAAA,KAAK,CAACa,cAAN;AACD,GAZ4D;AAa7DC,EAAAA,eAAe,EAAEf,KAAK,CAACgB,OAAN,CAAcD,eAb8B;AAc7DE,EAAAA,WAAW,EAAEhB,KAAK,CAACgB,WAd0C;AAe7DC,EAAAA,kBAAkB,EAAElB,KAAK,CAACmB,OAAN,CAAcD,kBAf2B;AAgB7DE,EAAAA,wBAAwB,EAAEpB,KAAK,CAACmB,OAAN,CAAcC,wBAhBqB;AAiB7DC,EAAAA,gBAAgB,EAAErB,KAAK,CAACgB,OAAN,CAAcK,gBAjB6B;AAkB7DC,EAAAA,oBAAoB,EAAEtB,KAAK,CAACgB,OAAN,CAAcM;AAlByB,CAAvC,CAAxB;;AAqBA,MAAMC,kBAAkB,GAAIC,QAAD,KAAoB;AAC7CC,EAAAA,MAAM,EAAGhB,GAAD,IAAwBe,QAAQ,CAAC9B,aAAa,CAACe,GAAD,CAAd,CADK;AAE7CiB,EAAAA,cAAc,EAAGC,WAAD,IAAgCH,QAAQ,CAAC7B,qBAAqB,CAACgC,WAAD,CAAtB,CAFX;AAG7C;AACAC,EAAAA,oCAAoC,EAAE,MAAe;AACnD,WACE,CAAC/B,KAAK,CAACgC,eAAN,EAAD,KACC,UAAUC,IAAV,CAAeC,SAAS,CAACC,SAAV,CAAoBC,WAApB,EAAf,KAAqD,UAAUH,IAAV,CAAeC,SAAS,CAACC,SAAV,CAAoBC,WAApB,EAAf,CADtD,CADF;AAID;AAT4C,CAApB,CAA3B;;AAYA,MAAMC,SAAc,GAAG1C,OAAO,CAACO,eAAD,EAAkBwB,kBAAlB,CAA9B;AACA,eAAeW,SAAS,CAACzC,MAAD,CAAxB","sourcesContent":["import { connect } from 'react-redux';\r\nimport Header, { HeaderProps } from '../components/Header';\r\nimport { setMicrophone, setShareUnshareScreen, endCall } from '../core/sideEffects';\r\nimport { utils } from '../Utils/Utils';\r\nimport { Constants } from '../core/constants';\r\nimport { State } from '../core/reducers';\r\n\r\nconst mapStateToProps = (state: State, props: HeaderProps) => ({\r\n  actionable:\r\n    state.calls.callState === Constants.INCOMING ||\r\n    state.calls.callState === Constants.RINGING ||\r\n    state.calls.callState === Constants.CONNECTING ||\r\n    state.calls.callState === Constants.CONNECTED,\r\n  mic: state.controls.mic,\r\n  call: state.calls.call,\r\n  shareScreen: state.controls.shareScreen,\r\n  endCall: (): void => {\r\n    state.calls.call && endCall(state.calls.call, { forEveryone: false });\r\n    props.endCallHandler();\r\n  },\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  screenWidth: props.screenWidth,\r\n  screenShareStreams: state.streams.screenShareStreams,\r\n  localVideoRendererIsBusy: state.streams.localVideoRendererIsBusy,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setMic: (mic: boolean): void => dispatch(setMicrophone(mic)),\r\n  setScreenShare: (screenShare: boolean): void => dispatch(setShareUnshareScreen(screenShare)),\r\n  // Only support Desktop -- Chrome | Edge (Chromium) | Safari\r\n  isLocalScreenShareSupportedInBrowser: (): boolean => {\r\n    return (\r\n      !utils.isMobileSession() &&\r\n      (/chrome/i.test(navigator.userAgent.toLowerCase()) || /safari/i.test(navigator.userAgent.toLowerCase()))\r\n    );\r\n  }\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(Header);\r\n"]},"metadata":{},"sourceType":"module"}