{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { getElementType, useUnhandledProps, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Image } from '../Image/Image';\nimport { Box } from '../Box/Box';\nexport var dropdownItemClassName = 'ui-dropdown__item';\nexport var dropdownItemSlotClassNames = {\n  main: dropdownItemClassName + \"__main\",\n  content: dropdownItemClassName + \"__content\",\n  header: dropdownItemClassName + \"__header\",\n  image: dropdownItemClassName + \"__image\",\n  checkableIndicator: dropdownItemClassName + \"__checkable-indicator\"\n};\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\n\nexport var DropdownItem = /*#__PURE__*/function () {\n  var DropdownItem = function DropdownItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(DropdownItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var active = props.active,\n        accessibilityItemProps = props.accessibilityItemProps,\n        className = props.className,\n        content = props.content,\n        design = props.design,\n        header = props.header,\n        image = props.image,\n        isFromKeyboard = props.isFromKeyboard,\n        styles = props.styles,\n        checkable = props.checkable,\n        checkableIndicator = props.checkableIndicator,\n        selected = props.selected,\n        variables = props.variables;\n\n    var _useStyles = useStyles(DropdownItem.displayName, {\n      className: dropdownItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          active: active,\n          isFromKeyboard: isFromKeyboard,\n          selected: selected,\n          hasContent: !!content,\n          hasHeader: !!header\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var contentElement = Box.create(content, {\n      defaultProps: function defaultProps() {\n        return {\n          className: dropdownItemSlotClassNames.content,\n          styles: resolvedStyles.content\n        };\n      }\n    });\n    var headerElement = Box.create(header, {\n      defaultProps: function defaultProps() {\n        return {\n          className: dropdownItemSlotClassNames.header,\n          styles: resolvedStyles.header\n        };\n      }\n    });\n    var endMediaElement = selected && checkable ? Box.create(checkableIndicator, {\n      defaultProps: function defaultProps() {\n        return {\n          className: dropdownItemSlotClassNames.checkableIndicator,\n          styles: resolvedStyles.checkableIndicator,\n          accessibility: indicatorBehavior\n        };\n      }\n    }) : null;\n    var imageElement = Box.create(Image.create(image, {\n      defaultProps: function defaultProps() {\n        return {\n          avatar: true,\n          className: dropdownItemSlotClassNames.image,\n          styles: resolvedStyles.image\n        };\n      }\n    }), {\n      defaultProps: function defaultProps() {\n        return {\n          className: dropdownItemSlotClassNames.image,\n          styles: resolvedStyles.media\n        };\n      }\n    });\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({\n      className: classes.root,\n      onClick: handleClick\n    }, accessibilityItemProps, unhandledProps), imageElement, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(dropdownItemSlotClassNames.main, classes.main)\n    }, headerElement, contentElement), endMediaElement);\n    setEnd();\n    return element;\n  };\n\n  DropdownItem.displayName = 'DropdownItem';\n  DropdownItem.defaultProps = {\n    as: 'li',\n    checkableIndicator: {}\n  };\n  DropdownItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false\n  }), {\n    accessibilityItemProps: PropTypes.object,\n    active: PropTypes.bool,\n    content: customPropTypes.itemShorthand,\n    checkable: PropTypes.bool,\n    checkableIndicator: customPropTypes.shorthandAllowingChildren,\n    disabled: PropTypes.bool,\n    header: customPropTypes.itemShorthand,\n    image: customPropTypes.itemShorthandWithoutJSX,\n    onClick: PropTypes.func,\n    isFromKeyboard: PropTypes.bool,\n    selected: PropTypes.bool\n  });\n  DropdownItem.handledProps = Object.keys(DropdownItem.propTypes);\n  DropdownItem.create = createShorthandFactory({\n    Component: DropdownItem,\n    mappedProp: 'header'\n  });\n  return DropdownItem;\n}();","map":{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["dropdownItemClassName","dropdownItemSlotClassNames","main","content","header","image","checkableIndicator","DropdownItem","context","useFluentContext","setStart","setEnd","useTelemetry","active","accessibilityItemProps","className","design","isFromKeyboard","styles","checkable","selected","variables","props","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","useUnhandledProps","handleClick","contentElement","defaultProps","headerElement","endMediaElement","accessibility","indicatorBehavior","imageElement","avatar","media","element","cx","as","children","PropTypes","customPropTypes","disabled","onClick","bool","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ShorthandValue, ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nexport const dropdownItemClassName = 'ui-dropdown__item';\nexport const dropdownItemSlotClassNames: DropdownItemSlotClassNames = {\n  main: `${dropdownItemClassName}__main`,\n  content: `${dropdownItemClassName}__content`,\n  header: `${dropdownItemClassName}__header`,\n  image: `${dropdownItemClassName}__image`,\n  checkableIndicator: `${dropdownItemClassName}__checkable-indicator`,\n};\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport const DropdownItem: ComponentWithAs<'li', DropdownItemProps> &\n  FluentComponentStaticProps<DropdownItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: dropdownItemClassName,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: dropdownItemSlotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: dropdownItemSlotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: dropdownItemSlotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType className={classes.root} onClick={handleClick} {...accessibilityItemProps} {...unhandledProps}>\n      {imageElement}\n\n      <div className={cx(dropdownItemSlotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n"]},"metadata":{},"sourceType":"module"}