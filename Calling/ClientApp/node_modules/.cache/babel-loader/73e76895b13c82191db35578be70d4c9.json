{"ast":null,"code":"import _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarMenuRadioGroupBehavior, toolbarMenuItemRadioBehavior } from '@fluentui/accessibility';\nimport { compose, mergeVariablesOverrides, getElementType, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthand, commonPropTypes } from '../../utils';\nimport { ToolbarMenuItem } from './ToolbarMenuItem';\nimport { ToolbarMenuRadioGroupWrapper } from './ToolbarMenuRadioGroupWrapper';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\n/**\n * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.\n */\n\nexport var ToolbarMenuRadioGroup = /*#__PURE__*/function () {\n  var ToolbarMenuRadioGroup = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        activeIndex = props.activeIndex,\n        className = props.className,\n        design = props.design,\n        items = props.items,\n        styles = props.styles,\n        variables = props.variables,\n        wrapper = props.wrapper;\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergedVariables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var handleItemOverrides = function handleItemOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, itemProps) {\n          _invoke(predefinedProps, 'onClick', e, itemProps);\n\n          _invoke(props, 'onItemClick', e, itemProps);\n        },\n        wrapper: null\n      };\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var content = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n      className: classes.root,\n      ref: ref\n    })), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {\n      value: mergedVariables\n    }, _map(items, function (item, index) {\n      return createShorthand(ToolbarMenuItem, item, {\n        defaultProps: function defaultProps() {\n          return {\n            accessibility: toolbarMenuItemRadioBehavior,\n            as: 'li',\n            active: activeIndex === index,\n            index: index\n          };\n        },\n        overrideProps: handleItemOverrides\n      });\n    })));\n    var element = createShorthand(composeOptions.slots.wrapper, wrapper, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('wrapper', slotProps.wrapper || {});\n      },\n      overrideProps: {\n        children: content\n      }\n    });\n    setEnd();\n    return element;\n  }, {\n    className: toolbarMenuRadioGroupClassName,\n    displayName: 'ToolbarMenuRadioGroup',\n    slots: {\n      wrapper: ToolbarMenuRadioGroupWrapper\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'activeIndex', 'items', 'onItemClick', 'wrapper']\n  });\n  ToolbarMenuRadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    activeIndex: PropTypes.number,\n    items: customPropTypes.collectionShorthand,\n    onItemClick: PropTypes.func,\n    wrapper: customPropTypes.itemShorthand\n  });\n  ToolbarMenuRadioGroup.defaultProps = {\n    as: 'ul',\n    accessibility: toolbarMenuRadioGroupBehavior,\n    wrapper: {}\n  };\n  return ToolbarMenuRadioGroup;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarMenuRadioGroup.tsx"],"names":["toolbarMenuRadioGroupClassName","ToolbarMenuRadioGroup","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","activeIndex","className","design","items","styles","variables","wrapper","props","slotProps","parentVariables","React","mergedVariables","mergeVariablesOverrides","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","unstable_props","handleItemOverrides","onClick","ElementType","getElementType","unhandledProps","useUnhandledProps","content","ref","createShorthand","defaultProps","as","active","index","overrideProps","element","children","displayName","slots","ToolbarMenuRadioGroupWrapper","handledProps","commonPropTypes","PropTypes","customPropTypes","onItemClick","itemShorthand"],"mappings":";;AAAA,SAAA,6BAAA,EAAA,4BAAA,QAAA,yBAAA;AAMA,SAAA,OAAA,EAAA,uBAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,YAAA,QAAA,0BAAA;AAUA,OAAO,KAAP,eAAA,MAAA,2BAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,eAAA,EAAA,eAAA,QAAA,aAAA;AAQA,SAAA,eAAA,QAAA,mBAAA;AACA,SAAA,4BAAA,QAAA,gCAAA;AACA,SAAA,uBAAA,EAAA,wBAAA,QAAA,2BAAA;AA4BA,OAAO,IAAMA,8BAA8B,GAApC,aAAA,C,CAAsD;;AAE7D;;;;AAGA,OAAO,IAAMC,qBAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,qBAAqB,GAAGC,OAAO,CAO1C,UAAA,KAAA,EAAA,GAAA,EAAA,cAAA,EAAgC;AAC9B,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AAD8B,QAAA,aAAA,GAEDG,YAAY,CAACC,cAAc,CAAf,WAAA,EAA6BL,OAAO,CAF/C,SAEW,CAFX;AAAA,QAEtBE,QAFsB,GAAA,aAAA,CAAA,QAAA;AAAA,QAEZC,MAFY,GAAA,aAAA,CAAA,MAAA;;AAG9BD,IAAAA,QAAQ;AAHsB,QAKtBI,aALsB,GAK+DQ,KAL/D,CAAA,aAAA;AAAA,QAKPP,WALO,GAK+DO,KAL/D,CAAA,WAAA;AAAA,QAKMN,SALN,GAK+DM,KAL/D,CAAA,SAAA;AAAA,QAKiBL,MALjB,GAK+DK,KAL/D,CAAA,MAAA;AAAA,QAKyBJ,KALzB,GAK+DI,KAL/D,CAAA,KAAA;AAAA,QAKgCH,MALhC,GAK+DG,KAL/D,CAAA,MAAA;AAAA,QAKwCF,SALxC,GAK+DE,KAL/D,CAAA,SAAA;AAAA,QAKmDD,OALnD,GAK+DC,KAL/D,CAAA,OAAA;AAO9B,QAAMC,SAAS,GAAGV,cAAc,CAAdA,gBAAAA,CAAlB,KAAkBA,CAAlB;AACA,QAAMW,eAAe,GAAGC,KAAK,CAALA,UAAAA,CAAxB,uBAAwBA,CAAxB;AACA,QAAMC,eAAe,GAAGC,uBAAuB,CAAA,eAAA,EAA/C,SAA+C,CAA/C;AAEA,QAAMC,YAAY,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AACnDC,MAAAA,SAAS,EAAEjB,cAAc,CAD0B,WAAA;AAEnDkB,MAAAA,GAAG,EAAEvB,OAAO,CAACuB;AAFsC,KAAhB,CAArC;;AAX8B,QAAA,UAAA,GAeVE,SAAS,CAAmCpB,cAAc,CAAjD,WAAA,EAA+D;AAC1FG,MAAAA,SAAS,EAAEH,cAAc,CADiE,SAAA;AAE1FA,MAAAA,cAAc,EAF4E,cAAA;AAG1FqB,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7BlB,UAAAA,SAAS,EADoB,SAAA;AAE7BC,UAAAA,MAAM,EAFuB,MAAA;AAG7BE,UAAAA,MAAM,EAHuB,MAAA;AAI7BC,UAAAA,SAAS,EAAEM;AAJkB,SAAP;AAHkE,OAAA;AAS1FK,MAAAA,GAAG,EAAEvB,OAAO,CAT8E,GAAA;AAU1F2B,MAAAA,cAAc,EAAEb;AAV0E,KAA/D,CAfC;AAAA,QAetBU,OAfsB,GAAA,UAAA,CAAA,OAAA;;AA4B9B,QAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,eAAA,EAAA;AAAA,aAAkE;AAC5FC,QAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,SAAA,EAAkB;AACzB,UAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,SAAA,CAAA;;AACA,UAAA,OAAA,CAAA,KAAA,EAAA,aAAA,EAAA,CAAA,EAAA,SAAA,CAAA;AAH0F,SAAA;AAK5FhB,QAAAA,OAAO,EAAE;AALmF,OAAlE;AAA5B,KAAA;;AAQA,QAAMiB,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAAC5B,cAAc,CAAf,YAAA,EAAxC,KAAwC,CAAxC;AAEA,QAAM6B,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,WAAA,EAAiBd,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,cAAA,EAAA;AAA8BZ,MAAAA,SAAS,EAAEgB,OAAO,CAAhD,IAAA;AAAuDW,MAAAA,GAAG,EAAHA;AAAvD,KAAA,CAAA,CAA7B,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,MAAA,KAAK,EAAEjB;AAAjC,KAAA,EACG,IAAA,CAAA,KAAA,EAAa,UAAA,IAAA,EAAA,KAAA,EAAA;AAAA,aACZkB,eAAe,CAAA,eAAA,EAAA,IAAA,EAAwB;AACrCC,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAO;AACnB/B,YAAAA,aAAa,EADM,4BAAA;AAEnBgC,YAAAA,EAAE,EAFiB,IAAA;AAGnBC,YAAAA,MAAM,EAAEhC,WAAW,KAHA,KAAA;AAInBiC,YAAAA,KAAK,EAALA;AAJmB,WAAP;AADuB,SAAA;AAOrCC,QAAAA,aAAa,EAAEb;AAPsB,OAAxB,CADH;AAHpB,KAGO,CADH,CADF,CADF;AAiBA,QAAMc,OAAO,GAAGN,eAAe,CAAC/B,cAAc,CAAdA,KAAAA,CAAD,OAAA,EAAA,OAAA,EAAwC;AACrEgC,MAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,eAAMjB,YAAY,CAAA,SAAA,EAAYL,SAAS,CAATA,OAAAA,IAA9B,EAAkB,CAAlB;AADuD,OAAA;AAErE0B,MAAAA,aAAa,EAAE;AACbE,QAAAA,QAAQ,EAAET;AADG;AAFsD,KAAxC,CAA/B;AAMA/B,IAAAA,MAAM;AAEN,WAAA,OAAA;AAvEwC,GAAA,EAyE1C;AACEK,IAAAA,SAAS,EADX,8BAAA;AAEEoC,IAAAA,WAAW,EAFb,uBAAA;AAIEC,IAAAA,KAAK,EAAE;AACLhC,MAAAA,OAAO,EAAEiC;AADJ,KAJT;AAQEC,IAAAA,YAAY,EAAE,CAAA,eAAA,EAAA,IAAA,EAAA,UAAA,EAAA,WAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,aAAA,EAAA,OAAA,EAAA,aAAA,EAAA,SAAA;AARhB,GAzE0C,CAArC;AAmGPjD,EAAAA,qBAAqB,CAArBA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKkD,eAAe,CADpBlD,YACKkD,EADLlD,EAAAA;AAEES,IAAAA,WAAW,EAAE0C,SAAS,CAFxBnD,MAAAA;AAGEY,IAAAA,KAAK,EAAEwC,eAAe,CAHxBpD,mBAAAA;AAIEqD,IAAAA,WAAW,EAAEF,SAAS,CAJxBnD,IAAAA;AAKEe,IAAAA,OAAO,EAAEqC,eAAe,CAACE;AAL3BtD,GAAAA,CAAAA;AAOAA,EAAAA,qBAAqB,CAArBA,YAAAA,GAAqC;AACnCwC,IAAAA,EAAE,EADiC,IAAA;AAEnChC,IAAAA,aAAa,EAFsB,6BAAA;AAGnCO,IAAAA,OAAO,EAAE;AAH0B,GAArCf;AA1GO,SAAA,qBAAA;AAAA,CAAA,EAAA","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuRadioGroupBehavior,\n  toolbarMenuItemRadioBehavior,\n  ToolbarMenuRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  mergeVariablesOverrides,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  createShorthand,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandCollection, ShorthandValue } from '../../types';\nimport { ToolbarMenuItem, ToolbarMenuItemProps } from './ToolbarMenuItem';\nimport { ToolbarMenuRadioGroupWrapper, ToolbarMenuRadioGroupWrapperProps } from './ToolbarMenuRadioGroupWrapper';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarMenuRadioGroup. */\n  items?: ShorthandCollection<ToolbarMenuItemProps>;\n\n  /**\n   * Called on item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<ToolbarMenuRadioGroupWrapperProps>;\n}\n\nexport type ToolbarMenuRadioGroupStylesProps = never;\n\nexport const toolbarMenuRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\n/**\n * A ToolbarMenuRadioGroup renders ToolbarMenuItem as a group of mutually exclusive options.\n */\nexport const ToolbarMenuRadioGroup = compose<\n  'ul',\n  ToolbarMenuRadioGroupProps,\n  ToolbarMenuRadioGroupStylesProps,\n  {},\n  {}\n>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, activeIndex, className, design, items, styles, variables, wrapper } = props;\n\n    const slotProps = composeOptions.resolveSlotProps<ToolbarMenuRadioGroupProps>(props);\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarMenuRadioGroupStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergedVariables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const handleItemOverrides = (predefinedProps: ToolbarMenuItemProps): ToolbarMenuItemProps => ({\n      onClick: (e, itemProps) => {\n        _.invoke(predefinedProps, 'onClick', e, itemProps);\n        _.invoke(props, 'onItemClick', e, itemProps);\n      },\n      wrapper: null,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const content = (\n      <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root, ref })}>\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {_.map(items, (item, index) =>\n            createShorthand(ToolbarMenuItem, item, {\n              defaultProps: () => ({\n                accessibility: toolbarMenuItemRadioBehavior,\n                as: 'li',\n                active: activeIndex === index,\n                index,\n              }),\n              overrideProps: handleItemOverrides,\n            }),\n          )}\n        </ToolbarVariablesProvider>\n      </ElementType>\n    );\n    const element = createShorthand(composeOptions.slots.wrapper, wrapper, {\n      defaultProps: () => getA11yProps('wrapper', slotProps.wrapper || {}),\n      overrideProps: {\n        children: content,\n      },\n    });\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarMenuRadioGroupClassName,\n    displayName: 'ToolbarMenuRadioGroup',\n\n    slots: {\n      wrapper: ToolbarMenuRadioGroupWrapper,\n    },\n\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n\n      'activeIndex',\n      'items',\n      'onItemClick',\n      'wrapper',\n    ],\n  },\n);\n\nToolbarMenuRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthand,\n  onItemClick: PropTypes.func,\n  wrapper: customPropTypes.itemShorthand,\n};\nToolbarMenuRadioGroup.defaultProps = {\n  as: 'ul',\n  accessibility: toolbarMenuRadioGroupBehavior,\n  wrapper: {},\n};\n"]},"metadata":{},"sourceType":"module"}