{"ast":null,"code":"import { useFluentContext } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n/**\n * A ProviderConsumer is used to consume Fluent UI context from Provider.\n */\n\nexport var ProviderConsumer = /*#__PURE__*/function () {\n  var ProviderConsumer = function ProviderConsumer(props) {\n    var render = props.render;\n    var context = useFluentContext();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, render(context.theme));\n  };\n\n  ProviderConsumer.displayName = 'ProviderConsumer';\n  ProviderConsumer.propTypes = {\n    render: PropTypes.func.isRequired\n  };\n  return ProviderConsumer;\n}();","map":{"version":3,"sources":["components/Provider/ProviderConsumer.tsx"],"names":["ProviderConsumer","render","props","context","useFluentContext","PropTypes","isRequired"],"mappings":"AAAA,SAAA,gBAAA,QAAA,0BAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAUA;;;;AAGA,OAAO,IAAMA,gBAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,gBAAgE,GAAG,SAAnEA,gBAAmE,CAAA,KAAA,EAAS;AAAA,QAC/EC,MAD+E,GACpEC,KADoE,CAAA,MAAA;AAEvF,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;AAEA,WAAA,aAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAGH,MAAM,CAACE,OAAO,CAAxB,KAAgB,CAAT,CAAP;AAJK,GAAA;;AAOPH,EAAAA,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA;AACAA,EAAAA,gBAAgB,CAAhBA,SAAAA,GAA6B;AAC3BC,IAAAA,MAAM,EAAEI,SAAS,CAATA,IAAAA,CAAeC;AADI,GAA7BN;AARO,SAAA,gBAAA;AAAA,CAAA,EAAA","sourcesContent":["import { useFluentContext } from '@fluentui/react-bindings';\nimport { ThemePrepared } from '@fluentui/styles';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nexport interface ProviderConsumerProps {\n  /**\n   * Uses the function children pattern to access theme.\n   * `theme.siteVariables` contains the siteVariables passed from the nearest Provider.\n   */\n  render: (theme: ThemePrepared) => React.ReactNode;\n}\n\n/**\n * A ProviderConsumer is used to consume Fluent UI context from Provider.\n */\nexport const ProviderConsumer: React.FunctionComponent<ProviderConsumerProps> = props => {\n  const { render } = props;\n  const context = useFluentContext();\n\n  return <>{render(context.theme)}</>;\n};\n\nProviderConsumer.displayName = 'ProviderConsumer';\nProviderConsumer.propTypes = {\n  render: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}