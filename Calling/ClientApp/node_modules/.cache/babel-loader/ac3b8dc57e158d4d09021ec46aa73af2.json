{"ast":null,"code":"import { getElementType, useAccessibility, useStyles, useFluentContext, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer } from '../../utils';\nexport var gridClassName = 'ui-grid';\n/**\n * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.\n */\n\nexport var Grid = /*#__PURE__*/function () {\n  var Grid = function Grid(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Grid.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        columns = props.columns,\n        content = props.content,\n        design = props.design,\n        rows = props.rows,\n        styles = props.styles,\n        variables = props.variables;\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Grid.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Grid.displayName, {\n      className: gridClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          columns: columns,\n          rows: rows\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Grid.handledProps, props);\n    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), unhandledProps)), childrenExist(children) ? children : content));\n    setEnd();\n    return element;\n  };\n\n  Grid.displayName = 'Grid';\n  Grid.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    content: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent])]),\n    rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  });\n  Grid.handledProps = Object.keys(Grid.propTypes);\n  return Grid;\n}();","map":{"version":3,"sources":["components/Grid/Grid.tsx"],"names":["gridClassName","Grid","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","children","className","columns","content","design","rows","styles","variables","props","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","PropTypes","customPropTypes","Object"],"mappings":"AACA,SAAA,cAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,iBAAA,QAAA,0BAAA;AASA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,aAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AAwBA,OAAO,IAAMA,aAAa,GAAnB,SAAA;AAIP;;;;AAGA,OAAO,IAAMC,IAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,IAA+E,GAAG,SAAlFA,IAAkF,CAAA,KAAA,EAAS;AACtG,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AADsG,QAAA,aAAA,GAEzEG,YAAY,CAACL,IAAI,CAAL,WAAA,EAAmBC,OAAO,CAFmC,SAE7D,CAF6D;AAAA,QAE9FE,QAF8F,GAAA,aAAA,CAAA,QAAA;AAAA,QAEpFC,MAFoF,GAAA,aAAA,CAAA,MAAA;;AAGtGD,IAAAA,QAAQ;AAH8F,QAK9FG,aAL8F,GAKJS,KALI,CAAA,aAAA;AAAA,QAK/ER,QAL+E,GAKJQ,KALI,CAAA,QAAA;AAAA,QAKrEP,SALqE,GAKJO,KALI,CAAA,SAAA;AAAA,QAK1DN,OAL0D,GAKJM,KALI,CAAA,OAAA;AAAA,QAKjDL,OALiD,GAKJK,KALI,CAAA,OAAA;AAAA,QAKxCJ,MALwC,GAKJI,KALI,CAAA,MAAA;AAAA,QAKhCH,IALgC,GAKJG,KALI,CAAA,IAAA;AAAA,QAK1BF,MAL0B,GAKJE,KALI,CAAA,MAAA;AAAA,QAKlBD,SALkB,GAKJC,KALI,CAAA,SAAA;AAOtG,QAAMC,YAAY,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AACnDC,MAAAA,SAAS,EAAElB,IAAI,CADoC,WAAA;AAGnDmB,MAAAA,GAAG,EAAElB,OAAO,CAACkB;AAHsC,KAAhB,CAArC;;AAPsG,QAAA,UAAA,GAYlFE,SAAS,CAAkBrB,IAAI,CAAtB,WAAA,EAAoC;AAC/DQ,MAAAA,SAAS,EADsD,aAAA;AAE/Dc,MAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,eAAO;AAAEb,UAAAA,OAAO,EAAT,OAAA;AAAWG,UAAAA,IAAI,EAAJA;AAAX,SAAP;AAF6C,OAAA;AAG/DW,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7Bf,UAAAA,SAAS,EADoB,SAAA;AAE7BG,UAAAA,MAAM,EAFuB,MAAA;AAG7BE,UAAAA,MAAM,EAHuB,MAAA;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAHuC,OAAA;AAS/DK,MAAAA,GAAG,EAAElB,OAAO,CAACkB;AATkD,KAApC,CAZyE;AAAA,QAY9FC,OAZ8F,GAAA,UAAA,CAAA,OAAA;;AAwBtG,QAAMI,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAAC3B,IAAI,CAAL,YAAA,EAAxC,KAAwC,CAAxC;AAEA,QAAM4B,OAAO,GAAGZ,YAAY,CAAZA,0BAAAA,EAAAA,aACd,KAAA,CAAA,aAAA,CAAA,WAAA,EACMA,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdR,MAAAA,SAAS,EAAEY,OAAO,CAACS;AADL,KAAA,EAEX,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAAA,QAAA,EAAA,OAAA;AAAf,KAA/B,CAFW,EADlB,cACkB,CAAA,CADlB,EAOGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GARL,OACE,CADcf,CAAhB;AAWAZ,IAAAA,MAAM;AAEN,WAAA,OAAA;AAxCK,GAAA;;AA2CPJ,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AAEAA,EAAAA,IAAI,CAAJA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BU,IAAAA,OAAO,EAAE;AADqB,GAA7B,CADLV,EAAAA;AAIES,IAAAA,OAAO,EAAEuB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAJ3DhC,MAI+B,CAApBgC,CAJXhC;AAKEU,IAAAA,OAAO,EAAEuB,eAAe,CAAfA,KAAAA,CAAsB,CAC7BA,eAAe,CAAfA,QAAAA,CAAyB,CADI,UACJ,CAAzBA,CAD6B,EAE7BD,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAATA,OAAAA,CAAkBC,eAAe,CAAlC,WAACD,CAAD,EAAiDC,eAAe,CAPxFjC,WAOwB,CAApBgC,CAF6B,CAAtBC,CALXjC;AASEY,IAAAA,IAAI,EAAEoB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,MAAoB,CAApBA;AATRhC,GAAAA,CAAAA;AAWAA,EAAAA,IAAI,CAAJA,YAAAA,GAAoBkC,MAAM,CAANA,IAAAA,CAAYlC,IAAI,CAApCA,SAAoBkC,CAApBlC;AAxDO,SAAA,IAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Accessibility, GridBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface GridProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available gridBehavior, gridHorizontalBehavior\n   * */\n  accessibility?: Accessibility<GridBehaviorProps>;\n\n  /** The columns of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  columns?: string | number;\n\n  /** The rows of the grid with a space-separated list of values. The values represent the track size, and the space between them represents the grid line. */\n  rows?: string | number;\n}\n\nexport const gridClassName = 'ui-grid';\n\nexport type GridStylesProps = Pick<GridProps, 'columns' | 'rows'>;\n\n/**\n * A Grid is a layout component that harmonizes negative space, by controlling both the row and column alignment.\n */\nexport const Grid: ComponentWithAs<'div', GridProps> & FluentComponentStaticProps<GridProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Grid.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, columns, content, design, rows, styles, variables } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: Grid.displayName,\n\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<GridStylesProps>(Grid.displayName, {\n    className: gridClassName,\n    mapPropsToStyles: () => ({ columns, rows }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Grid.handledProps, props);\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nGrid.displayName = 'Grid';\n\nGrid.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nGrid.handledProps = Object.keys(Grid.propTypes) as any;\n"]},"metadata":{},"sourceType":"module"}