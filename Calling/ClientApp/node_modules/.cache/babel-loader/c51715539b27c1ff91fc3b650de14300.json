{"ast":null,"code":"import * as React from 'react';\nexport var rtlTextContainer = {\n  getAttributes: function getAttributes(_ref) {\n    var _ref$condition = _ref.condition,\n        condition = _ref$condition === void 0 ? true : _ref$condition,\n        _ref$forElements = _ref.forElements,\n        forElements = _ref$forElements === void 0 ? [] : _ref$forElements;\n    return condition && forElements.some(function (child) {\n      return child && typeof child === 'string';\n    }) ? {\n      dir: 'auto'\n    } : {};\n  },\n  createFor: function createFor(_ref2) {\n    var element = _ref2.element,\n        _ref2$condition = _ref2.condition,\n        condition = _ref2$condition === void 0 ? true : _ref2$condition;\n\n    if (condition && element && typeof element === 'string') {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        dir: \"auto\"\n      }, element);\n    }\n\n    return element;\n  }\n};","map":{"version":3,"sources":["utils/rtlTextContainer.tsx"],"names":["rtlTextContainer","getAttributes","condition","forElements","child","dir","createFor","element"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAO,IAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,IAAA,EAAyF;AAAA,QAAA,cAAA,GAAA,IAAA,CAAtFC,SAAsF;AAAA,QAAtFA,SAAsF,GAAA,cAAA,KAAA,KAAA,CAAA,GAA1E,IAA0E,GAAA,cAAA;AAAA,QAAA,gBAAA,GAAA,IAAA,CAApEC,WAAoE;AAAA,QAApEA,WAAoE,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAtD,EAAsD,GAAA,gBAAA;AACtG,WAAO,SAAS,IAAI,WAAW,CAAX,IAAA,CAAiB,UAAA,KAAA,EAAK;AAAA,aAAIC,KAAK,IAAI,OAAA,KAAA,KAAb,QAAA;AAAnC,KAAa,CAAb,GAA6E;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAA7E,GAAP,EAAA;AAF4B,GAAA;AAI9BC,EAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAA0E;AAAA,QAAvEC,OAAuE,GAAA,KAAA,CAAvEA,OAAuE;AAAA,QAAA,eAAA,GAAA,KAAA,CAA9DL,SAA8D;AAAA,QAA9DA,SAA8D,GAAA,eAAA,KAAA,KAAA,CAAA,GAAlD,IAAkD,GAAA,eAAA;;AACnF,QAAIA,SAAS,IAATA,OAAAA,IAAwB,OAAA,OAAA,KAA5B,QAAA,EAAyD;AACvD,aAAA,aAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAC;AAAV,OAAA,EAAP,OAAO,CAAP;AACD;;AACD,WAAA,OAAA;AACD;AAT6B,CAAzB","sourcesContent":["import * as React from 'react';\n\nexport const rtlTextContainer = {\n  getAttributes: ({ condition = true, forElements = [] }: { condition?: boolean; forElements: any[] }) => {\n    return condition && forElements.some(child => child && typeof child === 'string') ? { dir: 'auto' } : {};\n  },\n  createFor: ({ element, condition = true }: { element: any; condition?: boolean }) => {\n    if (condition && element && typeof element === 'string') {\n      return <span dir=\"auto\">{element}</span>;\n    }\n    return element;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}