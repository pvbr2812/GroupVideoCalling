{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { radioGroupItemBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { useAutoControlled, getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nexport var radioGroupItemClassName = 'ui-radiogroup__item';\nexport var radioGroupItemSlotClassNames = {\n  indicator: radioGroupItemClassName + \"__indicator\"\n};\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\n\nexport var RadioGroupItem = /*#__PURE__*/function () {\n  var RadioGroupItem = function RadioGroupItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(RadioGroupItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var label = props.label,\n        indicator = props.indicator,\n        disabled = props.disabled,\n        vertical = props.vertical,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        shouldFocus = props.shouldFocus;\n    var elementRef = React.useRef();\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(RadioGroupItem.handledProps, props);\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultChecked,\n      value: props.checked,\n      initialValue: false\n    }),\n        checked = _useAutoControlled[0],\n        setChecked = _useAutoControlled[1];\n\n    var prevChecked = React.useRef(checked);\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n\n      setChecked(function (prevChecked) {\n        return !prevChecked;\n      });\n    }; // This behavior is not conformant with native input radio, it was added to avoid breaking change\n    // and it should be fixed to be conformant with native, only calling onChange when item is clicked (checked will always be true)\n\n\n    React.useEffect(function () {\n      if (prevChecked.current !== checked) {\n        _invoke(props, 'onChange', undefined, Object.assign({}, props, {\n          checked: checked\n        }));\n\n        prevChecked.current = checked;\n      }\n    });\n    React.useEffect(function () {\n      if (checked && shouldFocus) elementRef.current.focus();\n    }, [checked, shouldFocus]);\n\n    var _useStyles = useStyles(RadioGroupItem.displayName, {\n      className: radioGroupItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          vertical: vertical,\n          disabled: disabled,\n          checked: checked\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: RadioGroupItem.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          e.preventDefault();\n          handleClick(e);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          checked: checked,\n          disabled: disabled\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var handleChange = function handleChange(e) {\n      // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      _invoke(props, 'onChange', e, Object.assign({}, props, {\n        checked: checked\n      }));\n    };\n\n    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(Ref, {\n      innerRef: elementRef\n    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick,\n      onChange: handleChange\n    }, unhandledProps)), Box.create(indicator, {\n      defaultProps: function defaultProps() {\n        return {\n          className: radioGroupItemSlotClassNames.indicator,\n          styles: resolvedStyles.indicator\n        };\n      }\n    }), Box.create(label, {\n      defaultProps: function defaultProps() {\n        return {\n          as: 'span'\n        };\n      }\n    }))));\n    setEnd();\n    return element;\n  };\n\n  RadioGroupItem.displayName = 'RadioGroupItem';\n  RadioGroupItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    checked: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    label: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n    shouldFocus: PropTypes.bool,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    vertical: PropTypes.bool\n  });\n  RadioGroupItem.defaultProps = {\n    accessibility: radioGroupItemBehavior,\n    indicator: {}\n  };\n  RadioGroupItem.handledProps = Object.keys(RadioGroupItem.propTypes);\n  RadioGroupItem.create = createShorthandFactory({\n    Component: RadioGroupItem,\n    mappedProp: 'label'\n  });\n  return RadioGroupItem;\n}();","map":{"version":3,"sources":["components/RadioGroup/RadioGroupItem.tsx"],"names":["radioGroupItemClassName","radioGroupItemSlotClassNames","indicator","RadioGroupItem","context","useFluentContext","setStart","setEnd","useTelemetry","label","disabled","vertical","className","design","styles","variables","shouldFocus","props","elementRef","React","ElementType","getElementType","unhandledProps","useUnhandledProps","checked","setChecked","useAutoControlled","defaultValue","value","initialValue","prevChecked","handleClick","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","e","mapPropsToBehavior","handleChange","element","onClick","onChange","defaultProps","as","content","PropTypes","defaultChecked","customPropTypes","name","bool","accessibility","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, radioGroupItemBehavior, RadioGroupItemBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport { createShorthandFactory, UIComponentProps, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\n\nexport interface RadioGroupItemSlotClassNames {\n  indicator: string;\n}\n\nexport interface RadioGroupItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<RadioGroupItemBehaviorProps>;\n\n  /** Whether or not radio item is checked. */\n  checked?: boolean;\n\n  /**\n   * Called after radio item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** The label of the radio item. */\n  label?: ShorthandValue<BoxProps>;\n\n  /** Initial checked value. */\n  defaultChecked?: boolean;\n\n  /** A radio item can appear disabled and be unable to change states. */\n  disabled?: boolean;\n\n  /** The radio item indicator can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /**\n   * Called after radio item is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Whether should focus when checked */\n  shouldFocus?: boolean; // TODO: RFC #306\n\n  /** The HTML input value. */\n  value?: string | number;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport const radioGroupItemClassName = 'ui-radiogroup__item';\nexport const radioGroupItemSlotClassNames: RadioGroupItemSlotClassNames = {\n  indicator: `${radioGroupItemClassName}__indicator`,\n};\n\nexport type RadioGroupItemStylesProps = Required<Pick<RadioGroupItemProps, 'disabled' | 'vertical' | 'checked'>>;\n\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\nexport const RadioGroupItem: ComponentWithAs<'div', RadioGroupItemProps> &\n  FluentComponentStaticProps<RadioGroupItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(RadioGroupItem.displayName, context.telemetry);\n  setStart();\n  const { label, indicator, disabled, vertical, className, design, styles, variables, shouldFocus } = props;\n  const elementRef = React.useRef<HTMLElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(RadioGroupItem.handledProps, props);\n\n  const [checked, setChecked] = useAutoControlled({\n    defaultValue: props.defaultChecked,\n    value: props.checked,\n    initialValue: false,\n  });\n\n  const prevChecked = React.useRef<boolean>(checked);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n    setChecked(prevChecked => {\n      return !prevChecked;\n    });\n  };\n\n  // This behavior is not conformant with native input radio, it was added to avoid breaking change\n  // and it should be fixed to be conformant with native, only calling onChange when item is clicked (checked will always be true)\n  React.useEffect(() => {\n    if (prevChecked.current !== checked) {\n      _.invoke(props, 'onChange', undefined, { ...props, checked });\n      prevChecked.current = checked;\n    }\n  });\n\n  React.useEffect(() => {\n    if (checked && shouldFocus) elementRef.current.focus();\n  }, [checked, shouldFocus]);\n\n  const { classes, styles: resolvedStyles } = useStyles<RadioGroupItemStylesProps>(RadioGroupItem.displayName, {\n    className: radioGroupItemClassName,\n    mapPropsToStyles: () => ({\n      vertical,\n      disabled,\n      checked,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const getA11yProps = useAccessibility<RadioGroupItemBehaviorProps>(props.accessibility, {\n    debugName: RadioGroupItem.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      checked,\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleChange = (e: React.ChangeEvent) => {\n    // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, checked });\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <Ref innerRef={elementRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          onChange: handleChange,\n          ...unhandledProps,\n        })}\n      >\n        {Box.create(indicator, {\n          defaultProps: () => ({\n            className: radioGroupItemSlotClassNames.indicator,\n            styles: resolvedStyles.indicator,\n          }),\n        })}\n        {Box.create(label, {\n          defaultProps: () => ({\n            as: 'span',\n          }),\n        })}\n      </ElementType>\n    </Ref>,\n  );\n  setEnd();\n  return element;\n};\n\nRadioGroupItem.displayName = 'RadioGroupItem';\n\nRadioGroupItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  name: PropTypes.string,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func,\n  shouldFocus: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool,\n};\n\nRadioGroupItem.defaultProps = {\n  accessibility: radioGroupItemBehavior,\n  indicator: {},\n};\n\nRadioGroupItem.handledProps = Object.keys(RadioGroupItem.propTypes) as any;\n\nRadioGroupItem.create = createShorthandFactory({ Component: RadioGroupItem, mappedProp: 'label' });\n"]},"metadata":{},"sourceType":"module"}