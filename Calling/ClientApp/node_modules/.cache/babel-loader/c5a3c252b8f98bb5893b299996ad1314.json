{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nexport var cardPreviewClassName = 'ui-card__preview';\n/**\n * A CardPreview is used to display data Card preview.\n */\n\nexport var CardPreview = /*#__PURE__*/function () {\n  var CardPreview = function CardPreview(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(CardPreview.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        children = props.children,\n        horizontal = props.horizontal,\n        fitted = props.fitted;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(CardPreview.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: CardPreview.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(CardPreview.displayName, {\n      className: cardPreviewClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          horizontal: horizontal,\n          fitted: fitted\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), children);\n    setEnd();\n    return element;\n  };\n\n  CardPreview.displayName = 'CardPreview';\n  CardPreview.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    horizontal: PropTypes.bool,\n    fitted: PropTypes.bool\n  });\n  CardPreview.handledProps = Object.keys(CardPreview.propTypes);\n  CardPreview.create = createShorthandFactory({\n    Component: CardPreview\n  });\n  return CardPreview;\n}();","map":{"version":3,"sources":["components/Card/CardPreview.tsx"],"names":["cardPreviewClassName","CardPreview","context","useFluentContext","setStart","setEnd","useTelemetry","className","design","styles","variables","children","horizontal","fitted","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","commonPropTypes","PropTypes","bool","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardPreviewProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** If preview is in horizontal card. */\n  horizontal?: boolean;\n\n  /** A preview can be fitted, without any space above or below it. */\n  fitted?: boolean;\n}\n\nexport type CardPreviewStylesProps = Pick<CardPreviewProps, 'horizontal' | 'fitted'>;\nexport const cardPreviewClassName = 'ui-card__preview';\n\n/**\n * A CardPreview is used to display data Card preview.\n */\nexport const CardPreview: ComponentWithAs<'div', CardPreviewProps> &\n  FluentComponentStaticProps<CardPreviewProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CardPreview.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, horizontal, fitted } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardPreview.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardPreview.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardPreviewStylesProps>(CardPreview.displayName, {\n    className: cardPreviewClassName,\n    mapPropsToStyles: () => ({ horizontal, fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardPreview.displayName = 'CardPreview';\n\nCardPreview.propTypes = {\n  ...commonPropTypes.createCommon(),\n  horizontal: PropTypes.bool,\n  fitted: PropTypes.bool,\n};\n\nCardPreview.handledProps = Object.keys(CardPreview.propTypes) as any;\n\nCardPreview.create = createShorthandFactory({ Component: CardPreview });\n"]},"metadata":{},"sourceType":"module"}