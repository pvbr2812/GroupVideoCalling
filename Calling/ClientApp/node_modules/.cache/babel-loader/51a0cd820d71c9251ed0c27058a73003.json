{"ast":null,"code":"import { compose, getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry, useFluentContext } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nexport var boxClassName = 'ui-box';\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\n\nexport var Box = /*#__PURE__*/function () {\n  var Box = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        children = props.children,\n        content = props.content;\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var ElementType = getElementType(props);\n    var result = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), {\n      className: classes.root,\n      ref: ref\n    }, unhandledProps)), childrenExist(children) ? children : content));\n    setEnd();\n    return result;\n  }, {\n    className: boxClassName,\n    displayName: 'Box',\n    handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables']\n  });\n  Box.propTypes = commonPropTypes.createCommon();\n  Box.create = createShorthandFactory({\n    Component: Box\n  });\n  return Box;\n}();","map":{"version":3,"sources":["components/Box/Box.tsx"],"names":["boxClassName","Box","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","className","design","styles","variables","children","content","props","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","unstable_props","unhandledProps","useUnhandledProps","ElementType","getElementType","result","forElements","ref","childrenExist","displayName","handledProps","commonPropTypes","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import {\n  compose,\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  UIComponentProps,\n  ShorthandFactory,\n} from '../../utils';\n\nexport interface BoxProps extends UIComponentProps<BoxProps>, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\nexport type BoxStylesProps = {};\n\nexport const boxClassName = 'ui-box';\n\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\nexport const Box = compose<'div', BoxProps, BoxStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, className, design, styles, variables, children, content } = props;\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<BoxStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const result = getA11yProps.unstable_wrapWithFocusZone(\n      <ElementType\n        {...getA11yProps('root', {\n          ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n          className: classes.root,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>,\n    );\n\n    setEnd();\n\n    return result;\n  },\n  {\n    className: boxClassName,\n    displayName: 'Box',\n    handledProps: ['accessibility', 'as', 'className', 'children', 'content', 'design', 'styles', 'variables'],\n  },\n) as ComponentWithAs<'div', BoxProps> & { create: ShorthandFactory<BoxProps> };\n\nBox.propTypes = commonPropTypes.createCommon();\nBox.create = createShorthandFactory({ Component: Box });\n"]},"metadata":{},"sourceType":"module"}