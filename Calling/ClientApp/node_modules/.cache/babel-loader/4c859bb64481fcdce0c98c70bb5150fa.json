{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { isBrowser } from '../../utils';\nimport { FiberNavigator } from './FiberNavigator';\nimport { DebugRect } from './DebugRect';\nvar INITIAL_STATE = {\n  fiberNav: null\n}; // TODO: This is a copy and trim-down of Debug.tsx\n//       Cleanup and use in Debug.tsx before merge:\n//         - Make hotkey invocation generic, or take prop for active state\n//           since Debug uses ctrl + 'd' and DebugSelector uses ctrl + 'c' in react-builder\n//\n\nexport var DebugSelector = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(DebugSelector, _React$Component);\n\n  function DebugSelector() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = INITIAL_STATE;\n\n    _this.debugDOMNode = function (domNode) {\n      var fiberNav = FiberNavigator.fromDOMNode(domNode);\n\n      if (!fiberNav) {\n        // eslint-disable-next-line no-console\n        console.error('No fiber for dom node', domNode);\n        return;\n      }\n\n      fiberNav = _this.props.filter(fiberNav);\n\n      _this.setCurrentFiberNav(fiberNav);\n    };\n\n    _this.setCurrentFiberNav = function (fiberNav) {\n      _this.setState(function (prevState) {\n        var _prevState$fiberNav;\n\n        if ((fiberNav == null ? void 0 : fiberNav.__fiber) !== ((_prevState$fiberNav = prevState.fiberNav) == null ? void 0 : _prevState$fiberNav.__fiber)) {\n          _this.props.onHover == null ? void 0 : _this.props.onHover(fiberNav);\n          return {\n            fiberNav: fiberNav\n          };\n        }\n\n        return null;\n      });\n    };\n\n    _this.handleMouseMove = function (e) {\n      _this.debugDOMNode(e.target);\n    };\n\n    _this.handleMouseLeave = function (e) {\n      _this.setCurrentFiberNav(null);\n    };\n\n    _this.handleDOMNodeClick = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      _this.props.onSelect == null ? void 0 : _this.props.onSelect(_this.state.fiberNav);\n    };\n\n    return _this;\n  }\n\n  var _proto = DebugSelector.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        mountDocument = _this$props.mountDocument,\n        renderLabel = _this$props.renderLabel,\n        showBackground = _this$props.showBackground,\n        showClassName = _this$props.showClassName,\n        showCropMarks = _this$props.showCropMarks,\n        showElement = _this$props.showElement;\n    var fiberNav = this.state.fiberNav;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, active && /*#__PURE__*/React.createElement(EventListener, {\n      listener: this.handleMouseMove,\n      target: mountDocument.body,\n      type: \"mousemove\"\n    }), active && /*#__PURE__*/React.createElement(EventListener, {\n      listener: this.handleMouseLeave,\n      target: mountDocument.body,\n      type: \"mouseleave\"\n    }), active && fiberNav && fiberNav.domNode && /*#__PURE__*/React.createElement(EventListener, {\n      listener: this.handleDOMNodeClick,\n      target: fiberNav.domNode,\n      type: \"click\"\n    }), active && fiberNav && /*#__PURE__*/React.createElement(DebugRect, {\n      showBackground: showBackground,\n      showClassName: showClassName,\n      showElement: showElement,\n      showCropMarks: showCropMarks,\n      fiberNav: fiberNav,\n      renderLabel: renderLabel\n    }));\n  };\n\n  return DebugSelector;\n}(React.Component);\nDebugSelector.defaultProps = {\n  active: false,\n  filter: function filter(fiberNav) {\n    return fiberNav;\n  },\n  // eslint-disable-next-line no-undef\n  mountDocument: isBrowser() ? window.document : null\n};\nDebugSelector.propTypes = {\n  mountDocument: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["components/Debug/DebugSelector.tsx"],"names":["INITIAL_STATE","fiberNav","DebugSelector","React","defaultProps","active","filter","mountDocument","isBrowser","window","propTypes","PropTypes","isRequired","FiberNavigator","console","prevState","e","render","renderLabel","showBackground","showClassName","showCropMarks","showElement"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { EventListener } from '@fluentui/react-component-event-listener';\n\nimport { isBrowser } from '../../utils';\n\nimport { FiberNavigator } from './FiberNavigator';\nimport { DebugRect } from './DebugRect';\n\nexport type DebugSelectorProps = {\n  /** Existing document the popup should add listeners. */\n  mountDocument?: Document;\n  onSelect?: (fiberNav: FiberNavigator) => void;\n  onHover?: (fiberNav: FiberNavigator) => void;\n  renderLabel?: (fiberNav: FiberNavigator) => string;\n  showBackground?: boolean;\n  showClassName?: boolean;\n  showCropMarks?: boolean;\n  showElement?: boolean;\n  filter?: (fiberNav: FiberNavigator) => FiberNavigator | null;\n  active?: boolean;\n};\n\nexport type DebugSelectorState = {\n  fiberNav: FiberNavigator;\n};\n\nconst INITIAL_STATE: DebugSelectorState = {\n  fiberNav: null,\n};\n\n// TODO: This is a copy and trim-down of Debug.tsx\n//       Cleanup and use in Debug.tsx before merge:\n//         - Make hotkey invocation generic, or take prop for active state\n//           since Debug uses ctrl + 'd' and DebugSelector uses ctrl + 'c' in react-builder\n//\nexport class DebugSelector extends React.Component<DebugSelectorProps, DebugSelectorState> {\n  state = INITIAL_STATE;\n\n  static defaultProps = {\n    active: false,\n    filter: fiberNav => fiberNav,\n    // eslint-disable-next-line no-undef\n    mountDocument: isBrowser() ? window.document : null,\n  };\n\n  static propTypes = {\n    mountDocument: PropTypes.object.isRequired,\n  };\n\n  debugDOMNode = domNode => {\n    let fiberNav = FiberNavigator.fromDOMNode(domNode);\n\n    if (!fiberNav) {\n      // eslint-disable-next-line no-console\n      console.error('No fiber for dom node', domNode);\n      return;\n    }\n\n    fiberNav = this.props.filter(fiberNav);\n\n    this.setCurrentFiberNav(fiberNav);\n  };\n\n  setCurrentFiberNav = (fiberNav: FiberNavigator | null) => {\n    this.setState(prevState => {\n      if (fiberNav?.__fiber !== prevState.fiberNav?.__fiber) {\n        this.props.onHover?.(fiberNav);\n        return { fiberNav };\n      }\n      return null;\n    });\n  };\n\n  handleMouseMove = e => {\n    this.debugDOMNode(e.target);\n  };\n\n  handleMouseLeave = e => {\n    this.setCurrentFiberNav(null);\n  };\n\n  handleDOMNodeClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.props.onSelect?.(this.state.fiberNav);\n  };\n\n  render() {\n    const {\n      active,\n      mountDocument,\n      renderLabel,\n      showBackground,\n      showClassName,\n      showCropMarks,\n      showElement,\n    } = this.props;\n    const { fiberNav } = this.state;\n\n    return (\n      <>\n        {active && <EventListener listener={this.handleMouseMove} target={mountDocument.body} type=\"mousemove\" />}\n        {active && <EventListener listener={this.handleMouseLeave} target={mountDocument.body} type=\"mouseleave\" />}\n        {active && fiberNav && fiberNav.domNode && (\n          <EventListener listener={this.handleDOMNodeClick} target={fiberNav.domNode} type=\"click\" />\n        )}\n        {active && fiberNav && (\n          <DebugRect\n            showBackground={showBackground}\n            showClassName={showClassName}\n            showElement={showElement}\n            showCropMarks={showCropMarks}\n            fiberNav={fiberNav}\n            renderLabel={renderLabel}\n          />\n        )}\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}