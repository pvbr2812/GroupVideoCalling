{"ast":null,"code":"import { compareDatePart } from '../dateMath/dateMath';\n/**\n * Checks if `date` happens earlier than min date\n * @param date - date to check\n * @param options - object with min date to check against\n */\n\nexport var isBeforeMinDate = function isBeforeMinDate(date, options) {\n  var minDate = options.minDate;\n  return minDate ? compareDatePart(minDate, date) >= 1 : false;\n};","map":{"version":3,"sources":["utils/date-time-utilities/dateGrid/isBeforeMinDate.ts"],"names":["isBeforeMinDate","minDate","options","compareDatePart"],"mappings":"AACA,SAAA,eAAA,QAAA,sBAAA;AAEA;;;;;;AAKA,OAAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAAA,OAAA,EAA2D;AAAA,MAChFC,OADgF,GACpEC,OADoE,CAAA,OAAA;AAExF,SAAOD,OAAO,GAAGE,eAAe,CAAA,OAAA,EAAfA,IAAe,CAAfA,IAAH,CAAA,GAAd,KAAA;AAFK,CAAA","sourcesContent":["import { IRestrictedDatesOptions } from './dateGrid.types';\nimport { compareDatePart } from '../dateMath/dateMath';\n\n/**\n * Checks if `date` happens earlier than min date\n * @param date - date to check\n * @param options - object with min date to check against\n */\nexport const isBeforeMinDate = (date: Date, options: IRestrictedDatesOptions): boolean => {\n  const { minDate } = options;\n  return minDate ? compareDatePart(minDate, date) >= 1 : false;\n};\n"]},"metadata":{},"sourceType":"module"}