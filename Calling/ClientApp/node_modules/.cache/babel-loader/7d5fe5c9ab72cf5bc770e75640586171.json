{"ast":null,"code":"import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\n\nexport var getDayGrid = function getDayGrid(options) {\n  var selectedDate = options.selectedDate,\n      dateRangeType = options.dateRangeType,\n      firstDayOfWeek = options.firstDayOfWeek,\n      today = options.today,\n      minDate = options.minDate,\n      maxDate = options.maxDate,\n      weeksToShow = options.weeksToShow,\n      workWeekDays = options.workWeekDays,\n      daysToSelectInDayView = options.daysToSelectInDayView,\n      restrictedDates = options.restrictedDates,\n      markedDays = options.markedDays;\n  var restrictedDateOptions = {\n    minDate: minDate,\n    maxDate: maxDate,\n    restrictedDates: restrictedDates\n  };\n  var todaysDate = today || new Date();\n  var navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n  var date;\n\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n\n  var weeks = []; // Cycle the date backwards to get to the first day of the week.\n\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  } // add the transition week as last week of previous range\n\n\n  date = addDays(date, -DAYS_IN_WEEK); // a flag to indicate whether all days of the week are outside the month\n\n  var isAllDaysOfWeekOutOfMonth = false; // in work week view if the days aren't contiguous we use week view instead\n\n  var selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n  var selectedDates = [];\n\n  if (!!selectedDate) {\n    selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  var shouldGetWeeks = true;\n\n  for (var weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    var week = [];\n    isAllDaysOfWeekOutOfMonth = true;\n\n    var _loop = function _loop(dayIndex) {\n      var originalDate = new Date(date.getTime());\n      var dayInfo = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate: originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: (markedDays == null ? void 0 : markedDays.some(function (markedDay) {\n          return compareDates(originalDate, markedDay);\n        })) || false\n      };\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    };\n\n    for (var dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      _loop(dayIndex);\n    } // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n\n\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0; // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n\n    weeks.push(week);\n  }\n\n  return weeks;\n};","map":{"version":3,"sources":["utils/date-time-utilities/dateGrid/getDayGrid.ts"],"names":["getDayGrid","selectedDate","dateRangeType","firstDayOfWeek","today","minDate","maxDate","weeksToShow","workWeekDays","daysToSelectInDayView","restrictedDates","markedDays","options","restrictedDateOptions","todaysDate","navigatedDate","date","weeks","addDays","isAllDaysOfWeekOutOfMonth","selectedDateRangeType","getDateRangeTypeToUse","selectedDates","getDateRangeArray","getBoundedDateRange","shouldGetWeeks","weekIndex","week","dayIndex","originalDate","dayInfo","key","isInMonth","isToday","compareDates","isSelected","isInDateRangeArray","isInBounds","isRestrictedDate","isMarked"],"mappings":"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","sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../dateValues/dateValues';\nimport { IDay, IDayGridOptions } from './dateGrid.types';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */\nexport const getDayGrid = (options: IDayGridOptions): IDay[][] => {\n  const {\n    selectedDate,\n    dateRangeType,\n    firstDayOfWeek,\n    today,\n    minDate,\n    maxDate,\n    weeksToShow,\n    workWeekDays,\n    daysToSelectInDayView,\n    restrictedDates,\n    markedDays,\n  } = options;\n  const restrictedDateOptions = { minDate, maxDate, restrictedDates };\n\n  const todaysDate = today || new Date();\n\n  const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n\n  let date;\n  if (weeksToShow && weeksToShow <= 4) {\n    // if showing less than a full month, just use date == navigatedDate\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n  } else {\n    date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n  }\n  const weeks: IDay[][] = [];\n\n  // Cycle the date backwards to get to the first day of the week.\n  while (date.getDay() !== firstDayOfWeek) {\n    date.setDate(date.getDate() - 1);\n  }\n\n  // add the transition week as last week of previous range\n  date = addDays(date, -DAYS_IN_WEEK);\n\n  // a flag to indicate whether all days of the week are outside the month\n  let isAllDaysOfWeekOutOfMonth = false;\n\n  // in work week view if the days aren't contiguous we use week view instead\n  const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n\n  let selectedDates: Date[] = [];\n\n  if (!!selectedDate) {\n    selectedDates = getDateRangeArray(\n      selectedDate,\n      selectedDateRangeType,\n      firstDayOfWeek,\n      workWeekDays,\n      daysToSelectInDayView,\n    );\n    selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n  }\n\n  let shouldGetWeeks = true;\n\n  for (let weekIndex = 0; shouldGetWeeks; weekIndex++) {\n    const week: IDay[] = [];\n\n    isAllDaysOfWeekOutOfMonth = true;\n\n    for (let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++) {\n      const originalDate = new Date(date.getTime());\n      const dayInfo: IDay = {\n        key: date.toString(),\n        date: date.getDate().toString(),\n        originalDate,\n        isInMonth: date.getMonth() === navigatedDate.getMonth(),\n        isToday: compareDates(todaysDate, date),\n        isSelected: isInDateRangeArray(date, selectedDates),\n        isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n        isMarked: markedDays?.some(markedDay => compareDates(originalDate, markedDay)) || false,\n      };\n\n      week.push(dayInfo);\n\n      if (dayInfo.isInMonth) {\n        isAllDaysOfWeekOutOfMonth = false;\n      }\n\n      date.setDate(date.getDate() + 1);\n    }\n\n    // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n    shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n\n    // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n    weeks.push(week);\n  }\n\n  return weeks;\n};\n"]},"metadata":{},"sourceType":"module"}