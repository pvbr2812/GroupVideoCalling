{"ast":null,"code":"import _keys from \"lodash/keys\";\nimport _invoke from \"lodash/invoke\";\nimport { AutoFocusZone, FocusTrapZone, getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getBasePlacement } from '../../utils/positioner';\nexport var popupContentClassName = 'ui-popup__content';\nexport var popupContentSlotClassNames = {\n  content: popupContentClassName + \"__content\"\n};\n/**\n * A PopupContent displays the content of a Popup component.\n */\n\nexport var PopupContent = /*#__PURE__*/function () {\n  var PopupContent = function PopupContent(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(PopupContent.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        autoFocus = props.autoFocus,\n        children = props.children,\n        className = props.className,\n        content = props.content,\n        design = props.design,\n        placement = props.placement,\n        pointing = props.pointing,\n        pointerRef = props.pointerRef,\n        styles = props.styles,\n        trapFocus = props.trapFocus,\n        variables = props.variables;\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: PopupContent.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(PopupContent.displayName, {\n      className: popupContentClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          basePlacement: getBasePlacement(placement, context.rtl),\n          pointing: pointing\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(PopupContent.handledProps, props);\n\n    var handleMouseEnter = function handleMouseEnter(e) {\n      _invoke(props, 'onMouseEnter', e, props);\n    };\n\n    var handleMouseLeave = function handleMouseLeave(e) {\n      _invoke(props, 'onMouseLeave', e, props);\n    };\n\n    var popupContentProps = getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), unhandledProps, {\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave\n    }));\n    var popupContent = /*#__PURE__*/React.createElement(React.Fragment, null, pointing && /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.pointer,\n      ref: pointerRef\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: cx(popupContentSlotClassNames.content, classes.content)\n    }, childrenExist(children) ? children : content));\n    var element;\n\n    if (trapFocus) {\n      var focusTrapZoneProps = Object.assign({}, popupContentProps, _keys(trapFocus).length && trapFocus, {\n        as: ElementType\n      });\n      element = /*#__PURE__*/React.createElement(FocusTrapZone, focusTrapZoneProps, popupContent);\n    } else if (autoFocus) {\n      var autoFocusZoneProps = Object.assign({}, popupContentProps, _keys(autoFocus).length && autoFocus, {\n        as: ElementType\n      });\n      element = /*#__PURE__*/React.createElement(AutoFocusZone, autoFocusZoneProps, popupContent);\n    } else {\n      element = /*#__PURE__*/React.createElement(ElementType, popupContentProps, popupContent);\n    }\n\n    setEnd();\n    return element;\n  };\n\n  PopupContent.displayName = 'PopupContent';\n  PopupContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),\n    pointing: PropTypes.bool,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    pointerRef: customPropTypes.ref,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\n  });\n  PopupContent.handledProps = Object.keys(PopupContent.propTypes);\n  PopupContent.create = createShorthandFactory({\n    Component: PopupContent,\n    mappedProp: 'content'\n  });\n  return PopupContent;\n}();","map":{"version":3,"sources":["components/Popup/PopupContent.tsx"],"names":["popupContentClassName","popupContentSlotClassNames","content","PopupContent","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","autoFocus","children","className","design","placement","pointing","pointerRef","styles","trapFocus","variables","props","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","basePlacement","getBasePlacement","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","handleMouseEnter","handleMouseLeave","popupContentProps","root","forElements","onMouseEnter","onMouseLeave","popupContent","cx","childrenExist","focusTrapZoneProps","as","element","autoFocusZoneProps","commonPropTypes","PropTypes","customPropTypes","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  AutoFocusZone,\n  AutoFocusZoneProps,\n  FocusTrapZone,\n  FocusTrapZoneProps,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\n\nexport interface PopupContentSlotClassNames {\n  content: string;\n}\n\nexport interface PopupContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /**\n   * Called after user's mouse enter.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<PopupContentProps>;\n\n  /**\n   * Called after user's mouse leave.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseLeave?: ComponentEventHandler<PopupContentProps>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** A popup can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value. */\n  trapFocus?: boolean | FocusTrapZoneProps;\n\n  /** Controls whether or not auto focus should be applied, using boolean or AutoFocusZoneProps type value. */\n  autoFocus?: boolean | AutoFocusZoneProps;\n}\n\nexport type PopupContentStylesProps = Required<Pick<PopupContentProps, 'pointing'>> & {\n  basePlacement: PopperJs.BasePlacement;\n};\n\nexport const popupContentClassName = 'ui-popup__content';\nexport const popupContentSlotClassNames: PopupContentSlotClassNames = {\n  content: `${popupContentClassName}__content`,\n};\n\n/**\n * A PopupContent displays the content of a Popup component.\n */\nexport const PopupContent: ComponentWithAs<'div', PopupContentProps> &\n  FluentComponentStaticProps<PopupContentProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(PopupContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    autoFocus,\n    children,\n    className,\n    content,\n    design,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    trapFocus,\n    variables,\n  } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: PopupContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<PopupContentStylesProps>(PopupContent.displayName, {\n    className: popupContentClassName,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      pointing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(PopupContent.handledProps, props);\n\n  const handleMouseEnter = e => {\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const handleMouseLeave = e => {\n    _.invoke(props, 'onMouseLeave', e, props);\n  };\n\n  const popupContentProps: PopupContentProps = getA11yProps('root', {\n    className: classes.root,\n    ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n    ...unhandledProps,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n  });\n  const popupContent = (\n    <>\n      {pointing && <div className={classes.pointer} ref={pointerRef} />}\n      <div className={cx(popupContentSlotClassNames.content, classes.content)}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </>\n  );\n\n  let element: React.ReactElement;\n\n  if (trapFocus) {\n    const focusTrapZoneProps = {\n      ...popupContentProps,\n      ...((_.keys(trapFocus).length && trapFocus) as FocusTrapZoneProps),\n      as: ElementType,\n    };\n    element = <FocusTrapZone {...focusTrapZoneProps}>{popupContent}</FocusTrapZone>;\n  } else if (autoFocus) {\n    const autoFocusZoneProps = {\n      ...popupContentProps,\n      ...((_.keys(autoFocus).length && autoFocus) as AutoFocusZoneProps),\n      as: ElementType,\n    };\n    element = <AutoFocusZone {...autoFocusZoneProps}>{popupContent}</AutoFocusZone>;\n  } else {\n    element = <ElementType {...popupContentProps}>{popupContent}</ElementType>;\n  }\n\n  setEnd();\n\n  return element;\n};\n\nPopupContent.displayName = 'PopupContent';\n\nPopupContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<PopperJs.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pointerRef: customPropTypes.ref,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n};\nPopupContent.handledProps = Object.keys(PopupContent.propTypes) as any;\n\nPopupContent.create = createShorthandFactory({ Component: PopupContent, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}