{"ast":null,"code":"import _noop from \"lodash/noop\";\nimport _isNil from \"lodash/isNil\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport * as React from 'react';\nexport var hasSubtree = function hasSubtree(item) {\n  return !_isNil(item['items']) && item['items'].length > 0;\n};\nexport var removeItemAtIndex = function removeItemAtIndex(items, itemIndex) {\n  return [].concat(items.slice(0, itemIndex), items.slice(itemIndex + 1));\n};\nexport var getAllSelectableChildrenId = function getAllSelectableChildrenId(items) {\n  return items.reduce(function (acc, item) {\n    if (item.items) {\n      return [].concat(acc, getAllSelectableChildrenId(item.items));\n    }\n\n    return item.hasOwnProperty('selectable') && !item.selectable ? acc : [].concat(acc, [item.id]);\n  }, []);\n};\nexport var isAllGroupChecked = function isAllGroupChecked(items, selectedItemIds) {\n  var selectableItemIds = getAllSelectableChildrenId(items);\n  return selectableItemIds.every(function (id) {\n    return selectedItemIds.indexOf(id) > -1;\n  });\n};\n/**\n * Looks for the item inside the nested items array and returns its siblings.\n * @param {any[]} items The nested items array.\n * @param {string} itemId The id of the item to return the children of.\n * @returns {any[]} The item siblings\n */\n\nexport var getSiblings = function getSiblings(items, itemId) {\n  function getSiblingsFn(items) {\n    var itemIndex = items.findIndex(function (item) {\n      return item.id === itemId;\n    });\n\n    if (itemIndex > -1) {\n      return removeItemAtIndex(items, itemIndex);\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(items), _step; !(_step = _iterator()).done;) {\n      var item = _step.value;\n\n      if (item.items) {\n        var result = getSiblingsFn(item.items);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  return getSiblingsFn(items);\n};\nexport var processItemsForSelection = function processItemsForSelection(treeItemProps, selectedItemIds) {\n  var treeItemHasSubtree = hasSubtree(treeItemProps);\n  var isExpandedSelectableParent = treeItemHasSubtree && treeItemProps.selectableParent && treeItemProps.expanded;\n  var nextSelectedItemIds = selectedItemIds; // push all tree items under particular parent into selection array\n  // not parent itself, therefore not procced with selection\n\n  if (isExpandedSelectableParent) {\n    if (isAllGroupChecked(treeItemProps.items, selectedItemIds)) {\n      var selectedItems = getAllSelectableChildrenId(treeItemProps.items);\n      nextSelectedItemIds = selectedItemIds.filter(function (id) {\n        return selectedItems.indexOf(id) === -1;\n      });\n    } else {\n      var selectItems = function selectItems(items) {\n        items.forEach(function (item) {\n          var selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;\n\n          if (selectedItemIds.indexOf(item.id) === -1) {\n            if (item.items) {\n              selectItems(item.items);\n            } else if (selectble) {\n              nextSelectedItemIds.push(item.id);\n            }\n          }\n        });\n      };\n\n      selectItems(treeItemProps.items);\n    }\n\n    return [].concat(nextSelectedItemIds);\n  } // push/remove single tree item into selection array\n\n\n  if (selectedItemIds.indexOf(treeItemProps.id) === -1) {\n    nextSelectedItemIds = [].concat(selectedItemIds, [treeItemProps.id]);\n  } else {\n    nextSelectedItemIds = nextSelectedItemIds.filter(function (itemID) {\n      return itemID !== treeItemProps.id;\n    });\n  }\n\n  return nextSelectedItemIds;\n};\nexport var TreeContext = /*#__PURE__*/React.createContext({\n  onFocusFirstChild: _noop,\n  onFocusParent: _noop,\n  onSiblingsExpand: _noop,\n  onTitleClick: _noop\n});","map":{"version":3,"sources":["components/Tree/utils/index.ts"],"names":["hasSubtree","item","removeItemAtIndex","items","itemIndex","getAllSelectableChildrenId","isAllGroupChecked","selectableItemIds","selectedItemIds","getSiblings","result","getSiblingsFn","processItemsForSelection","treeItemHasSubtree","isExpandedSelectableParent","treeItemProps","nextSelectedItemIds","selectedItems","selectItems","selectble","itemID","TreeContext","onFocusFirstChild","onFocusParent","onSiblingsExpand","onTitleClick"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { TreeItemProps } from '../TreeItem';\nimport { ShorthandValue } from '../../../types';\n\nexport const hasSubtree = (item: TreeItemProps | ShorthandValue<TreeItemProps>): boolean => {\n  return !_.isNil(item['items']) && item['items'].length > 0;\n};\n\nexport const removeItemAtIndex = (items: any[], itemIndex: number): any[] => {\n  return [...items.slice(0, itemIndex), ...items.slice(itemIndex + 1)];\n};\n\nexport const getAllSelectableChildrenId = (items: TreeItemProps[]): string[] => {\n  return items.reduce<string[]>((acc, item) => {\n    if (item.items) {\n      return [...acc, ...getAllSelectableChildrenId(item.items as TreeItemProps[])];\n    }\n\n    return item.hasOwnProperty('selectable') && !item.selectable ? acc : [...acc, item.id];\n  }, []);\n};\n\nexport const isAllGroupChecked = (items: TreeItemProps[], selectedItemIds: string[]) => {\n  const selectableItemIds = getAllSelectableChildrenId(items);\n\n  return selectableItemIds.every(id => selectedItemIds.indexOf(id) > -1);\n};\n\n/**\n * Looks for the item inside the nested items array and returns its siblings.\n * @param {any[]} items The nested items array.\n * @param {string} itemId The id of the item to return the children of.\n * @returns {any[]} The item siblings\n */\nexport const getSiblings = (items: any[], itemId: string): any[] => {\n  function getSiblingsFn(items: any[]) {\n    const itemIndex = items.findIndex(item => item.id === itemId);\n\n    if (itemIndex > -1) {\n      return removeItemAtIndex(items, itemIndex);\n    }\n\n    for (const item of items) {\n      if (item.items) {\n        const result = getSiblingsFn(item.items);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  return getSiblingsFn(items);\n};\n\nexport const processItemsForSelection = (treeItemProps: TreeItemProps, selectedItemIds: string[]) => {\n  const treeItemHasSubtree = hasSubtree(treeItemProps);\n  const isExpandedSelectableParent = treeItemHasSubtree && treeItemProps.selectableParent && treeItemProps.expanded;\n\n  let nextSelectedItemIds = selectedItemIds;\n\n  // push all tree items under particular parent into selection array\n  // not parent itself, therefore not procced with selection\n\n  if (isExpandedSelectableParent) {\n    if (isAllGroupChecked(treeItemProps.items as TreeItemProps[], selectedItemIds)) {\n      const selectedItems = getAllSelectableChildrenId(treeItemProps.items as TreeItemProps[]);\n      nextSelectedItemIds = selectedItemIds.filter(id => selectedItems.indexOf(id) === -1);\n    } else {\n      const selectItems = items => {\n        items.forEach(item => {\n          const selectble = item.hasOwnProperty('selectable') ? item.selectable : treeItemProps.selectable;\n          if (selectedItemIds.indexOf(item.id) === -1) {\n            if (item.items) {\n              selectItems(item.items);\n            } else if (selectble) {\n              nextSelectedItemIds.push(item.id);\n            }\n          }\n        });\n      };\n      selectItems(treeItemProps.items);\n    }\n\n    return [...nextSelectedItemIds];\n  }\n\n  // push/remove single tree item into selection array\n  if (selectedItemIds.indexOf(treeItemProps.id) === -1) {\n    nextSelectedItemIds = [...selectedItemIds, treeItemProps.id];\n  } else {\n    nextSelectedItemIds = nextSelectedItemIds.filter(itemID => itemID !== treeItemProps.id);\n  }\n\n  return nextSelectedItemIds;\n};\n\nexport interface TreeRenderContextValue {\n  onFocusFirstChild: (itemId: string) => void;\n  onFocusParent: (itemId: string) => void;\n  onSiblingsExpand: (e: React.SyntheticEvent, itemProps: TreeItemProps) => void;\n  onTitleClick: (e: React.SyntheticEvent, itemProps: TreeItemProps, executeSelection?: boolean) => void;\n}\n\nexport const TreeContext = React.createContext<TreeRenderContextValue>({\n  onFocusFirstChild: _.noop,\n  onFocusParent: _.noop,\n  onSiblingsExpand: _.noop,\n  onTitleClick: _.noop,\n});\n"]},"metadata":{},"sourceType":"module"}