{"ast":null,"code":"import _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { tableRowBehavior } from '@fluentui/accessibility';\nimport { getElementType, mergeVariablesOverrides, useAccessibility, useStyles, useTelemetry, useUnhandledProps, useFluentContext } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, createShorthandFactory } from '../../utils';\nimport { TableCell } from './TableCell';\nexport var tableRowClassName = 'ui-table__row';\n/**\n * Component represents a single row in a tabular structure\n */\n\nexport var TableRow = /*#__PURE__*/function () {\n  var TableRow = function TableRow(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(TableRow.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var rowRef = React.useRef();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        items = props.items,\n        header = props.header,\n        compact = props.compact,\n        children = props.children,\n        accessibility = props.accessibility,\n        variables = props.variables,\n        selected = props.selected;\n    var hasChildren = childrenExist(children);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(TableRow.handledProps, props);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: TableRow.displayName,\n      actionHandlers: {\n        // https://github.com/microsoft/fluent-ui-react/issues/2150\n        unsetRowTabbable: function unsetRowTabbable(e) {\n          rowRef.current.setAttribute('tabindex', '-1');\n        },\n        performClick: function performClick(e) {\n          if (e.currentTarget === e.target) {\n            _invoke(props, 'onClick', e, props);\n\n            e.preventDefault();\n          }\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          selected: selected,\n          header: header\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(TableRow.displayName, {\n      className: tableRowClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          header: header,\n          compact: compact\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var renderCells = function renderCells() {\n      return _map(items, function (item) {\n        return TableCell.create(item, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('cell', {});\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              variables: mergeVariablesOverrides(variables, predefinedProps.variables)\n            };\n          }\n        });\n      });\n    };\n\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: rowRef\n    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), hasChildren && children, !hasChildren && renderCells())));\n    setEnd();\n    return element;\n  };\n\n  TableRow.displayName = 'TableRow';\n  TableRow.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    items: customPropTypes.collectionShorthand,\n    header: PropTypes.bool,\n    compact: PropTypes.bool,\n    selected: PropTypes.bool\n  });\n  TableRow.handledProps = Object.keys(TableRow.propTypes);\n  TableRow.defaultProps = {\n    accessibility: tableRowBehavior\n  };\n  TableRow.create = createShorthandFactory({\n    Component: TableRow,\n    mappedArrayProp: 'items'\n  });\n  return TableRow;\n}();","map":{"version":3,"sources":["components/Table/TableRow.tsx"],"names":["tableRowClassName","TableRow","context","useFluentContext","setStart","setEnd","useTelemetry","rowRef","React","className","design","styles","items","header","compact","children","accessibility","variables","selected","props","hasChildren","childrenExist","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","unsetRowTabbable","performClick","e","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","renderCells","defaultProps","overrideProps","mergeVariablesOverrides","predefinedProps","element","root","content","customPropTypes","PropTypes","bool","Object","tableRowBehavior","createShorthandFactory","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, tableRowBehavior, GridRowBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  mergeVariablesOverrides,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\n\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { FluentComponentStaticProps, ShorthandCollection } from '../../types';\nimport { childrenExist, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\nimport { TableCell, TableCellProps } from './TableCell';\n\nexport interface TableRowProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<GridRowBehaviorProps>;\n\n  /**\n   * Row cells\n   */\n  items?: ShorthandCollection<TableCellProps>;\n\n  /**\n   * Is the row a table header\n   */\n  header?: boolean;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n\n  /**\n   * Whether a row is currently selected or not.\n   */\n  selected?: boolean;\n}\n\nexport const tableRowClassName = 'ui-table__row';\n\nexport type TableRowStylesProps = Pick<TableRowProps, 'header' | 'compact'>;\n\n/**\n * Component represents a single row in a tabular structure\n */\nexport const TableRow: ComponentWithAs<'div', TableRowProps> & FluentComponentStaticProps<TableRowProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TableRow.displayName, context.telemetry);\n  setStart();\n  const rowRef = React.useRef<HTMLElement>();\n  const { className, design, styles, items, header, compact, children, accessibility, variables, selected } = props;\n\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableRow.handledProps, props);\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: TableRow.displayName,\n    actionHandlers: {\n      // https://github.com/microsoft/fluent-ui-react/issues/2150\n      unsetRowTabbable: e => {\n        rowRef.current.setAttribute('tabindex', '-1');\n      },\n      performClick: e => {\n        if (e.currentTarget === e.target) {\n          _.invoke(props, 'onClick', e, props);\n          e.preventDefault();\n        }\n      },\n    },\n    mapPropsToBehavior: () => ({\n      selected,\n      header,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableRowStylesProps>(TableRow.displayName, {\n    className: tableRowClassName,\n    mapPropsToStyles: () => ({\n      header,\n      compact,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderCells = () => {\n    return _.map(items, (item: TableCellProps) => {\n      return TableCell.create(item, {\n        defaultProps: () => getA11yProps('cell', {}),\n        overrideProps: predefinedProps => ({\n          variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n        }),\n      });\n    });\n  };\n\n  const element = (\n    <Ref innerRef={rowRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren && children}\n          {!hasChildren && renderCells()}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableRow.displayName = 'TableRow';\n\nTableRow.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: customPropTypes.collectionShorthand,\n  header: PropTypes.bool,\n  compact: PropTypes.bool,\n  selected: PropTypes.bool,\n};\n\nTableRow.handledProps = Object.keys(TableRow.propTypes) as any;\n\nTableRow.defaultProps = {\n  accessibility: tableRowBehavior,\n};\n\nTableRow.create = createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });\n"]},"metadata":{},"sourceType":"module"}