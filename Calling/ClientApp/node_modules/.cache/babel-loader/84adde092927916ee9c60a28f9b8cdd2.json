{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nvar BasicAuthenticationCredentials =\n/** @class */\nfunction () {\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  function BasicAuthenticationCredentials(userName, password, authorizationScheme) {\n    if (authorizationScheme === void 0) {\n      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    }\n\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n\n\n  BasicAuthenticationCredentials.prototype.signRequest = function (webResource) {\n    var credentials = this.userName + \":\" + this.password;\n    var encodedCredentials = this.authorizationScheme + \" \" + base64.encodeString(credentials);\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  };\n\n  return BasicAuthenticationCredentials;\n}();\n\nexport { BasicAuthenticationCredentials };","map":{"version":3,"sources":["../../../src/credentials/basicAuthenticationCredentials.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAK,MAAZ,MAAwB,gBAAxB;AACA,SAAS,SAAT,QAA0B,mBAA1B;AAGA,IAAM,eAAe,GAAG,SAAS,CAAC,eAAlC;AACA,IAAM,4BAA4B,GAAG,OAArC;;AAEA,IAAA,8BAAA;AAAA;AAAA,YAAA;AAKE;;;;;;AAMG;AACH,WAAA,8BAAA,CACE,QADF,EAEE,QAFF,EAGE,mBAHF,EAG4D;AAA1D,QAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,mBAAA,GAAA,4BAAA;AAA0D;;AAZ5D,SAAA,mBAAA,GAA8B,4BAA9B;;AAcE,QAAI,QAAQ,KAAK,IAAb,IAAqB,QAAQ,KAAK,SAAlC,IAA+C,OAAO,QAAQ,CAAC,OAAT,EAAP,KAA8B,QAAjF,EAA2F;AACzF,YAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACD;;AACD,QAAI,QAAQ,KAAK,IAAb,IAAqB,QAAQ,KAAK,SAAlC,IAA+C,OAAO,QAAQ,CAAC,OAAT,EAAP,KAA8B,QAAjF,EAA2F;AACzF,YAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACD;;AACD,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,mBAAL,GAA2B,mBAA3B;AACD;AAED;;;;;AAKG;;;AACH,EAAA,8BAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,WAAZ,EAAwC;AACtC,QAAM,WAAW,GAAM,KAAK,QAAL,GAAa,GAAb,GAAiB,KAAK,QAA7C;AACA,QAAM,kBAAkB,GAAM,KAAK,mBAAL,GAAwB,GAAxB,GAA4B,MAAM,CAAC,YAAP,CAAoB,WAApB,CAA1D;AACA,QAAI,CAAC,WAAW,CAAC,OAAjB,EAA0B,WAAW,CAAC,OAAZ,GAAsB,IAAI,WAAJ,EAAtB;AAC1B,IAAA,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAwB,eAAe,CAAC,aAAxC,EAAuD,kBAAvD;AACA,WAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD,GAND;;AAOF,SAAA,8BAAA;AAAC,CAzCD,EAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  userName: string;\n  password: string;\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @param userName - User name.\n   * @param password - Password.\n   * @param authorizationScheme - The authorization scheme.\n   */\n  constructor(\n    userName: string,\n    password: string,\n    authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME\n  ) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}