{"ast":null,"code":"import _get from \"lodash/get\";\nimport _map from \"lodash/map\";\nimport _findIndex from \"lodash/findIndex\";\nimport _filter from \"lodash/filter\";\nimport { toolbarRadioGroupBehavior, toolbarRadioGroupItemBehavior } from '@fluentui/accessibility';\nimport { compose, getElementType, mergeVariablesOverrides, useUnhandledProps, useAccessibility, useStyles, useFluentContext, useTelemetry } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthand, childrenExist, commonPropTypes } from '../../utils';\nimport { ToolbarDivider } from './ToolbarDivider';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\nexport var toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\n\nexport var ToolbarRadioGroup = /*#__PURE__*/function () {\n  var ToolbarRadioGroup = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        activeIndex = props.activeIndex,\n        children = props.children,\n        className = props.className,\n        design = props.design,\n        items = props.items,\n        variables = props.variables,\n        styles = props.styles;\n    var itemRefs = [];\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        nextItem: function nextItem(event) {\n          return setFocusedItem(event, 1);\n        },\n        prevItem: function prevItem(event) {\n          return setFocusedItem(event, -1);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergedVariables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var setFocusedItem = function setFocusedItem(event, direction) {\n      // filter items which are not disabled\n      var filteredRadioItems = _filter(itemRefs, function (item, index) {\n        var currentItem = items[index];\n        return currentItem && !currentItem.disabled;\n      }); // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n\n\n      var currentFocusedIndex = _findIndex(filteredRadioItems, function (item) {\n        return item.current.tabIndex === 0;\n      }) || 0;\n      var itemsLength = filteredRadioItems.length;\n      var nextIndex = currentFocusedIndex + direction;\n\n      if (nextIndex >= itemsLength) {\n        nextIndex = 0;\n      }\n\n      if (nextIndex < 0) {\n        nextIndex = itemsLength - 1;\n      }\n\n      var nextItemToFocus = filteredRadioItems[nextIndex].current;\n\n      if (nextItemToFocus) {\n        nextItemToFocus.focus();\n      }\n\n      if (context.target.activeElement === nextItemToFocus) {\n        event.stopPropagation();\n      }\n\n      event.preventDefault();\n    };\n\n    var renderItems = function renderItems() {\n      return _map(items, function (item, index) {\n        var kind = _get(item, 'kind', 'item');\n\n        var ref = /*#__PURE__*/React.createRef();\n        itemRefs[index] = ref;\n\n        if (kind === 'divider') {\n          return createShorthand(composeOptions.slots.divider, item, {\n            defaultProps: function defaultProps() {\n              return slotProps.divider;\n            }\n          });\n        }\n\n        var toolbarItem = createShorthand(composeOptions.slots.item, item, {\n          defaultProps: function defaultProps() {\n            return Object.assign({}, slotProps.item, {\n              active: activeIndex === index\n            });\n          }\n        });\n        return /*#__PURE__*/React.createElement(Ref, {\n          innerRef: ref,\n          key: toolbarItem.key\n        }, toolbarItem);\n      });\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n      className: classes.root,\n      ref: ref\n    })), /*#__PURE__*/React.createElement(ToolbarVariablesProvider, {\n      value: mergedVariables\n    }, childrenExist(children) ? children : renderItems()));\n    setEnd();\n    return element;\n  }, {\n    className: toolbarRadioGroupClassName,\n    displayName: 'ToolbarRadioGroup',\n    slots: {\n      item: ToolbarItem,\n      divider: ToolbarDivider\n    },\n    slotProps: function slotProps() {\n      return {\n        item: {\n          accessibility: toolbarRadioGroupItemBehavior\n        }\n      };\n    },\n    shorthandConfig: {\n      mappedProp: 'content'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'activeIndex', 'items']\n  });\n  ToolbarRadioGroup.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    activeIndex: PropTypes.number,\n    items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item'])\n  });\n  ToolbarRadioGroup.defaultProps = {\n    accessibility: toolbarRadioGroupBehavior\n  };\n  return ToolbarRadioGroup;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarRadioGroup.tsx"],"names":["toolbarRadioGroupClassName","ToolbarRadioGroup","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","activeIndex","children","className","design","items","variables","styles","props","itemRefs","slotProps","parentVariables","React","mergedVariables","mergeVariablesOverrides","getA11yProps","useAccessibility","debugName","actionHandlers","nextItem","setFocusedItem","prevItem","rtl","classes","useStyles","mapPropsToInlineStyles","unstable_props","filteredRadioItems","currentItem","currentFocusedIndex","item","itemsLength","nextIndex","nextItemToFocus","event","renderItems","kind","ref","createShorthand","defaultProps","toolbarItem","active","index","key","ElementType","getElementType","unhandledProps","useUnhandledProps","element","childrenExist","displayName","slots","divider","ToolbarDivider","toolbarRadioGroupItemBehavior","shorthandConfig","mappedProp","handledProps","commonPropTypes","PropTypes","customPropTypes","toolbarRadioGroupBehavior"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  toolbarRadioGroupBehavior,\n  toolbarRadioGroupItemBehavior,\n  ToolbarRadioGroupBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthand,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ShorthandCollection } from '../../types';\nimport { ToolbarDivider, ToolbarDividerProps } from './ToolbarDivider';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport type ToolbarRadioGroupItemShorthandKinds = {\n  divider: ToolbarDividerProps;\n  item: ToolbarItemProps;\n};\n\nexport interface ToolbarRadioGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarRadioGroupBehaviorProps>;\n\n  /** Index of the currently active item. */\n  activeIndex?: number;\n\n  /** Shorthand array of props for ToolbarRadioGroup. */\n  items?: ShorthandCollection<ToolbarItemProps, ToolbarRadioGroupItemShorthandKinds>;\n}\n\nexport type ToolbarRadioGroupStylesProps = never;\nexport const toolbarRadioGroupClassName = 'ui-toolbars'; // FIXME: required by getComponentInfo/isConformant. But this is group inside a toolbar not a group of toolbars\n\n/**\n * A ToolbarRadioGroup renders Toolbar item as a group of mutually exclusive options.\n * Component doesn't implement mutual exclusiveness, it just serves accessibility purposes.\n *\n * @accessibility\n * Implements [ARIA RadioGroup](https://www.w3.org/TR/wai-aria-practices/#radiobutton) design pattern.\n */\nexport const ToolbarRadioGroup = compose<'div', ToolbarRadioGroupProps, ToolbarRadioGroupStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, activeIndex, children, className, design, items, variables, styles } = props;\n    const itemRefs: React.RefObject<HTMLElement>[] = [];\n\n    const slotProps = composeOptions.resolveSlotProps(props);\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n    const mergedVariables = mergeVariablesOverrides(parentVariables, variables);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        nextItem: event => setFocusedItem(event, 1),\n        prevItem: event => setFocusedItem(event, -1),\n      },\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarRadioGroupStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({ className, design, styles, variables: mergedVariables }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const setFocusedItem = (event: React.KeyboardEvent, direction) => {\n      // filter items which are not disabled\n      const filteredRadioItems: React.RefObject<HTMLElement>[] = _.filter(itemRefs, (item, index) => {\n        const currentItem = items[index] as ToolbarItemProps;\n        return currentItem && !currentItem.disabled;\n      });\n\n      // get the index of currently focused element (w/ tabindex = 0) or the first one as default\n      const currentFocusedIndex =\n        _.findIndex(filteredRadioItems, (item: React.RefObject<HTMLElement>) => {\n          return item.current.tabIndex === 0;\n        }) || 0;\n\n      const itemsLength = filteredRadioItems.length;\n      let nextIndex = currentFocusedIndex + direction;\n\n      if (nextIndex >= itemsLength) {\n        nextIndex = 0;\n      }\n\n      if (nextIndex < 0) {\n        nextIndex = itemsLength - 1;\n      }\n\n      const nextItemToFocus = filteredRadioItems[nextIndex].current;\n      if (nextItemToFocus) {\n        nextItemToFocus.focus();\n      }\n\n      if (context.target.activeElement === nextItemToFocus) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n    };\n\n    const renderItems = () => {\n      return _.map(items, (item, index) => {\n        const kind = _.get(item, 'kind', 'item');\n\n        const ref = React.createRef<HTMLElement>();\n        itemRefs[index] = ref;\n\n        if (kind === 'divider') {\n          return createShorthand(composeOptions.slots.divider, item, {\n            defaultProps: () => slotProps.divider,\n          });\n        }\n\n        const toolbarItem = createShorthand(composeOptions.slots.item, item, {\n          defaultProps: () => ({\n            ...slotProps.item,\n            active: activeIndex === index,\n          }),\n        });\n\n        return (\n          <Ref innerRef={ref} key={toolbarItem.key}>\n            {toolbarItem}\n          </Ref>\n        );\n      });\n    };\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          ...unhandledProps,\n          className: classes.root,\n          ref,\n        })}\n      >\n        <ToolbarVariablesProvider value={mergedVariables}>\n          {childrenExist(children) ? children : renderItems()}\n        </ToolbarVariablesProvider>\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarRadioGroupClassName,\n    displayName: 'ToolbarRadioGroup',\n\n    slots: {\n      item: ToolbarItem,\n      divider: ToolbarDivider,\n    },\n    slotProps: () => ({\n      item: {\n        accessibility: toolbarRadioGroupItemBehavior,\n      },\n    }),\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n\n      'activeIndex',\n      'items',\n    ],\n  },\n);\n\nToolbarRadioGroup.propTypes = {\n  ...commonPropTypes.createCommon(),\n  activeIndex: PropTypes.number,\n  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item']),\n};\nToolbarRadioGroup.defaultProps = {\n  accessibility: toolbarRadioGroupBehavior,\n};\n"]},"metadata":{},"sourceType":"module"}