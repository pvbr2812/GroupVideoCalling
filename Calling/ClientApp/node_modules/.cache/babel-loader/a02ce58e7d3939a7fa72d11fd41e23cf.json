{"ast":null,"code":"import { compose } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes } from '../../utils';\nimport { Box } from '../Box/Box';\nexport var menuItemWrapperClassName = 'ui-menu__itemwrapper';\n/**\n * A MenuItemWrapper allows a user to have a dedicated component that can be targeted from the theme.\n */\n\nexport var MenuItemWrapper = /*#__PURE__*/function () {\n  var MenuItemWrapper = compose(Box, {\n    className: menuItemWrapperClassName,\n    displayName: 'MenuItemWrapper',\n    mapPropsToStylesProps: function mapPropsToStylesProps(props) {\n      return {\n        active: props.active,\n        disabled: props.disabled,\n        iconOnly: props.iconOnly,\n        isFromKeyboard: props.isFromKeyboard,\n        pills: props.pills,\n        pointing: props.pointing,\n        secondary: props.secondary,\n        underlined: props.underlined,\n        vertical: props.vertical,\n        primary: props.primary\n      };\n    },\n    handledProps: ['active', 'disabled', 'iconOnly', 'isFromKeyboard', 'pills', 'pointing', 'secondary', 'underlined', 'vertical', 'primary'],\n    overrideStyles: true,\n    shorthandConfig: {\n      mappedProp: 'content'\n    }\n  });\n  MenuItemWrapper.defaultProps = {\n    as: 'li'\n  };\n  MenuItemWrapper.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    active: PropTypes.bool,\n    disabled: PropTypes.bool,\n    iconOnly: PropTypes.bool,\n    isFromKeyboard: PropTypes.bool,\n    pills: PropTypes.bool,\n    pointing: PropTypes.oneOf(['start', 'end', true, false]),\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    underlined: PropTypes.bool,\n    vertical: PropTypes.bool\n  });\n  return MenuItemWrapper;\n}();","map":{"version":3,"sources":["components/Menu/MenuItemWrapper.tsx"],"names":["menuItemWrapperClassName","MenuItemWrapper","compose","className","displayName","mapPropsToStylesProps","active","props","disabled","iconOnly","isFromKeyboard","pills","pointing","secondary","underlined","vertical","primary","handledProps","overrideStyles","shorthandConfig","mappedProp","as","commonPropTypes","PropTypes","customPropTypes","bool"],"mappings":"AAAA,SAAA,OAAA,QAAA,0BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,SAAA,eAAA,QAAA,aAAA;AACA,SAAA,GAAA,QAAA,YAAA;AAsDA,OAAO,IAAMA,wBAAwB,GAA9B,sBAAA;AAEP;;;;AAGA,OAAO,IAAMC,eAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAA,GAAA,EAA4E;AAChHC,IAAAA,SAAS,EADuG,wBAAA;AAEhHC,IAAAA,WAAW,EAFqG,iBAAA;AAGhHC,IAAAA,qBAAqB,EAAE,SAAA,qBAAA,CAAA,KAAA,EAAK;AAAA,aAAK;AAC/BC,QAAAA,MAAM,EAAEC,KAAK,CADkB,MAAA;AAE/BC,QAAAA,QAAQ,EAAED,KAAK,CAFgB,QAAA;AAG/BE,QAAAA,QAAQ,EAAEF,KAAK,CAHgB,QAAA;AAI/BG,QAAAA,cAAc,EAAEH,KAAK,CAJU,cAAA;AAK/BI,QAAAA,KAAK,EAAEJ,KAAK,CALmB,KAAA;AAM/BK,QAAAA,QAAQ,EAAEL,KAAK,CANgB,QAAA;AAO/BM,QAAAA,SAAS,EAAEN,KAAK,CAPe,SAAA;AAQ/BO,QAAAA,UAAU,EAAEP,KAAK,CARc,UAAA;AAS/BQ,QAAAA,QAAQ,EAAER,KAAK,CATgB,QAAA;AAU/BS,QAAAA,OAAO,EAAET,KAAK,CAACS;AAVgB,OAAL;AAHoF,KAAA;AAehHC,IAAAA,YAAY,EAAE,CAAA,QAAA,EAAA,UAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAfkG,SAelG,CAfkG;AA4BhHC,IAAAA,cAAc,EA5BkG,IAAA;AA6BhHC,IAAAA,eAAe,EAAE;AACfC,MAAAA,UAAU,EAAE;AADG;AA7B+F,GAA5E,CAA/B;AAkCPnB,EAAAA,eAAe,CAAfA,YAAAA,GAA+B;AAC7BoB,IAAAA,EAAE,EAAE;AADyB,GAA/BpB;AAGAA,EAAAA,eAAe,CAAfA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACKqB,eAAe,CADpBrB,YACKqB,EADLrB,EAAAA;AAEEK,IAAAA,MAAM,EAAEiB,SAAS,CAFnBtB,IAAAA;AAGEO,IAAAA,QAAQ,EAAEe,SAAS,CAHrBtB,IAAAA;AAIEQ,IAAAA,QAAQ,EAAEc,SAAS,CAJrBtB,IAAAA;AAKES,IAAAA,cAAc,EAAEa,SAAS,CAL3BtB,IAAAA;AAMEU,IAAAA,KAAK,EAAEY,SAAS,CANlBtB,IAAAA;AAOEW,IAAAA,QAAQ,EAAEW,SAAS,CAATA,KAAAA,CAAgB,CAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAP5BtB,KAO4B,CAAhBsB,CAPZtB;AAQEe,IAAAA,OAAO,EAAEQ,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,WAA0B,CAAzBA,CAAD,EAA0CD,SAAS,CARpFtB,IAQiC,CAAtBuB,CARXvB;AASEY,IAAAA,SAAS,EAAEW,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,SAA0B,CAAzBA,CAAD,EAAwCD,SAAS,CATpFtB,IASmC,CAAtBuB,CATbvB;AAUEa,IAAAA,UAAU,EAAES,SAAS,CAVvBtB,IAAAA;AAWEc,IAAAA,QAAQ,EAAEQ,SAAS,CAACE;AAXtBxB,GAAAA,CAAAA;AArCO,SAAA,eAAA;AAAA,CAAA,EAAA","sourcesContent":["import { compose } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes } from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\n\ninterface MenuItemWrapperOwnProps {\n  /** A menu item wrapper can be active. */\n  active?: boolean;\n\n  /** A menu item wrapper can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** A menu item wrapper may have just icons. */\n  iconOnly?: boolean;\n\n  /** Indicates whether the last event was from keyboard. */\n  isFromKeyboard?: boolean;\n\n  /** A menu item wrapper can adjust its appearance to de-emphasize its contents. */\n  pills?: boolean;\n\n  /**\n   * A menu can point to show its relationship to nearby content.\n   * For vertical menu, it can point to the start of the item or to the end.\n   */\n  pointing?: boolean | 'start' | 'end';\n\n  /** The menu item wrapper can have primary type. */\n  primary?: boolean;\n\n  /** The menu item wrapper can have secondary type. */\n  secondary?: boolean;\n\n  /** Menu items wrapper can by highlighted using underline. */\n  underlined?: boolean;\n\n  /** A vertical menu displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport interface MenuItemWrapperProps extends BoxProps, MenuItemWrapperOwnProps {}\nexport type MenuItemWrapperStylesProps = Required<\n  Pick<\n    MenuItemWrapperProps,\n    | 'active'\n    | 'disabled'\n    | 'iconOnly'\n    | 'isFromKeyboard'\n    | 'pills'\n    | 'pointing'\n    | 'primary'\n    | 'secondary'\n    | 'underlined'\n    | 'vertical'\n  >\n>;\n\nexport const menuItemWrapperClassName = 'ui-menu__itemwrapper';\n\n/**\n * A MenuItemWrapper allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport const MenuItemWrapper = compose<'li', MenuItemWrapperProps, MenuItemWrapperStylesProps, BoxProps, {}>(Box, {\n  className: menuItemWrapperClassName,\n  displayName: 'MenuItemWrapper',\n  mapPropsToStylesProps: props => ({\n    active: props.active,\n    disabled: props.disabled,\n    iconOnly: props.iconOnly,\n    isFromKeyboard: props.isFromKeyboard,\n    pills: props.pills,\n    pointing: props.pointing,\n    secondary: props.secondary,\n    underlined: props.underlined,\n    vertical: props.vertical,\n    primary: props.primary,\n  }),\n  handledProps: [\n    'active',\n    'disabled',\n    'iconOnly',\n    'isFromKeyboard',\n    'pills',\n    'pointing',\n    'secondary',\n    'underlined',\n    'vertical',\n    'primary',\n  ],\n\n  overrideStyles: true,\n  shorthandConfig: {\n    mappedProp: 'content',\n  },\n});\n\nMenuItemWrapper.defaultProps = {\n  as: 'li',\n};\nMenuItemWrapper.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  iconOnly: PropTypes.bool,\n  isFromKeyboard: PropTypes.bool,\n  pills: PropTypes.bool,\n  pointing: PropTypes.oneOf(['start', 'end', true, false]),\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  underlined: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}