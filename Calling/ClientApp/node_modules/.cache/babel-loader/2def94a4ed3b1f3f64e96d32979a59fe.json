{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Adds attribute 'aria-disabled=true' based on the property 'loading'.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\n\nexport var buttonBehavior = function buttonBehavior(props) {\n  var definition = {\n    attributes: {\n      root: {\n        role: props.as === 'button' ? undefined : 'button',\n        tabIndex: props.as === 'button' ? undefined : 0,\n        disabled: props.disabled && !props.loading ? props.as === 'button' ? true : undefined : undefined,\n        'aria-disabled': props.disabled || props.loading\n      }\n    },\n    keyActions: {\n      root: Object.assign({}, props.as !== 'button' && props.as !== 'a' && {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      })\n    }\n  };\n\n  if (process.env.NODE_ENV !== 'production' && props.loading) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'LoadingButton';\n  }\n\n  return definition;\n};","map":{"version":3,"sources":["behaviors/Button/buttonBehavior.ts"],"names":["buttonBehavior","definition","attributes","root","role","props","tabIndex","disabled","loading","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey","process"],"mappings":"AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAGA;;;;;;;;;AAQA,OAAO,IAAMA,cAAkD,GAAG,SAArDA,cAAqD,CAAA,KAAA,EAAS;AACzE,MAAMC,UAAmC,GAAG;AAC1CC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEC,KAAK,CAALA,EAAAA,KAAAA,QAAAA,GAAAA,SAAAA,GADF,QAAA;AAEJC,QAAAA,QAAQ,EAAED,KAAK,CAALA,EAAAA,KAAAA,QAAAA,GAAAA,SAAAA,GAFN,CAAA;AAGJE,QAAAA,QAAQ,EAAEF,KAAK,CAALA,QAAAA,IAAkB,CAACA,KAAK,CAAxBA,OAAAA,GAAoCA,KAAK,CAALA,EAAAA,KAAAA,QAAAA,GAAAA,IAAAA,GAApCA,SAAAA,GAHN,SAAA;AAIJ,yBAAiBA,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAACG;AAJrC;AADI,KAD8B;AAU1CC,IAAAA,UAAU,EAAE;AACVN,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACEE,KAAK,CAALA,EAAAA,KAAAA,QAAAA,IACFA,KAAK,CAALA,EAAAA,KADEA,GAAAA,IACkB;AAClBK,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADI,OAFpB;AADM;AAV8B,GAA5C;;AAsBA,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IAAyCX,KAAK,CAAlD,OAAA,EAA4D;AAC1D;AACAJ,IAAAA,UAAU,CAAVA,UAAAA,CAAAA,IAAAA,CAAAA,eAAAA,IAAAA,eAAAA;AACD;;AAED,SAAA,UAAA;AA5BK,CAAA","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { Accessibility, AccessibilityDefinition } from '../../types';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Adds attribute 'aria-disabled=true' based on the property 'loading'.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\nexport const buttonBehavior: Accessibility<ButtonBehaviorProps> = props => {\n  const definition: AccessibilityDefinition = {\n    attributes: {\n      root: {\n        role: props.as === 'button' ? undefined : 'button',\n        tabIndex: props.as === 'button' ? undefined : 0,\n        disabled: props.disabled && !props.loading ? (props.as === 'button' ? true : undefined) : undefined,\n        'aria-disabled': props.disabled || props.loading,\n      },\n    },\n\n    keyActions: {\n      root: {\n        ...(props.as !== 'button' &&\n          props.as !== 'a' && {\n            performClick: {\n              keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n            },\n          }),\n      },\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && props.loading) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'LoadingButton';\n  }\n\n  return definition;\n};\n\nexport type ButtonBehaviorProps = {\n  /** Element type. */\n  as: string;\n  /** A button can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n  loading?: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}