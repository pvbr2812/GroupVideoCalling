{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { dropdownSelectedItemBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { CloseIcon } from '@fluentui/react-icons-northstar';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Image } from '../Image/Image';\nimport { Box } from '../Box/Box';\nimport { useUnhandledProps, useStyles, useFluentContext, useTelemetry, getElementType, useAccessibility } from '@fluentui/react-bindings';\nexport var dropdownSelectedItemClassName = 'ui-dropdown__selecteditem';\nexport var dropdownSelectedItemSlotClassNames = {\n  header: dropdownSelectedItemClassName + \"__header\",\n  icon: dropdownSelectedItemClassName + \"__icon\",\n  image: dropdownSelectedItemClassName + \"__image\"\n};\n/**\n * A DropdownSelectedItem represents a selected item of 'multiple-selection' Dropdown.\n */\n\nexport var DropdownSelectedItem = /*#__PURE__*/function () {\n  var DropdownSelectedItem = function DropdownSelectedItem(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(DropdownSelectedItem.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var active = props.active,\n        header = props.header,\n        icon = props.icon,\n        image = props.image,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var itemRef = React.useRef();\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(DropdownSelectedItem.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: DropdownSelectedItem.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          header: header,\n          active: active\n        };\n      },\n      rtl: context.rtl\n    });\n    React.useEffect(function () {\n      if (active) {\n        itemRef.current.focus();\n      }\n    }, [active]);\n\n    var _useStyles = useStyles(DropdownSelectedItem.displayName, {\n      className: dropdownSelectedItemClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          hasImage: !!image\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var handleKeyDown = function handleKeyDown(e) {\n      _invoke(props, 'onKeyDown', e, props);\n    };\n\n    var handleIconOverrides = function handleIconOverrides(iconProps) {\n      return Object.assign({}, iconProps, {\n        onClick: function onClick(e, iconProps) {\n          e.stopPropagation();\n\n          _invoke(props, 'onRemove', e, iconProps);\n\n          _invoke(props, 'onClick', e, iconProps);\n        },\n        onKeyDown: function onKeyDown(e, iconProps) {\n          e.stopPropagation();\n\n          if (getCode(e) === keyboardKey.Enter) {\n            _invoke(props, 'onRemove', e, iconProps);\n          }\n\n          _invoke(props, 'onKeyDown', e, iconProps);\n        }\n      });\n    };\n\n    var headerElement = Box.create(header, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('header', {\n          as: 'span',\n          className: dropdownSelectedItemSlotClassNames.header,\n          styles: resolvedStyles.header\n        });\n      }\n    });\n    var iconElement = Box.create(icon, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('icon', {\n          className: dropdownSelectedItemSlotClassNames.icon,\n          styles: resolvedStyles.icon\n        });\n      },\n      overrideProps: handleIconOverrides\n    });\n    var imageElement = Image.create(image, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('image', {\n          avatar: true,\n          className: dropdownSelectedItemSlotClassNames.image,\n          styles: resolvedStyles.image\n        });\n      }\n    });\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: itemRef\n    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick,\n      onKeyDown: handleKeyDown\n    }, unhandledProps)), imageElement, headerElement, iconElement));\n    setEnd();\n    return element;\n  };\n\n  DropdownSelectedItem.displayName = 'DropdownSelectedItem';\n  DropdownSelectedItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false\n  }), {\n    active: PropTypes.bool,\n    header: customPropTypes.itemShorthand,\n    icon: customPropTypes.shorthandAllowingChildren,\n    image: customPropTypes.itemShorthandWithoutJSX,\n    onClick: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onRemove: PropTypes.func\n  });\n  DropdownSelectedItem.handledProps = Object.keys(DropdownSelectedItem.propTypes);\n  DropdownSelectedItem.defaultProps = {\n    accessibility: dropdownSelectedItemBehavior,\n    as: 'span',\n    icon: /*#__PURE__*/React.createElement(CloseIcon, null)\n  };\n  DropdownSelectedItem.create = createShorthandFactory({\n    Component: DropdownSelectedItem,\n    mappedProp: 'header'\n  });\n  return DropdownSelectedItem;\n}();","map":{"version":3,"sources":["components/Dropdown/DropdownSelectedItem.tsx"],"names":["dropdownSelectedItemClassName","dropdownSelectedItemSlotClassNames","header","icon","image","DropdownSelectedItem","context","useFluentContext","setStart","setEnd","useTelemetry","active","className","design","styles","variables","props","itemRef","React","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasImage","mapPropsToInlineStyles","handleClick","handleKeyDown","handleIconOverrides","onClick","e","onKeyDown","getCode","keyboardKey","headerElement","defaultProps","as","iconElement","overrideProps","imageElement","avatar","element","children","PropTypes","customPropTypes","onRemove","func","Object","accessibility","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  dropdownSelectedItemBehavior,\n  DropdownSelectedItemBehaviorProps,\n} from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport { CloseIcon } from '@fluentui/react-icons-northstar';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  ComponentKeyboardEventHandler,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  useUnhandledProps,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  getElementType,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface DropdownSelectedItemSlotClassNames {\n  header: string;\n  icon: string;\n  image: string;\n}\n\nexport interface DropdownSelectedItemProps extends UIComponentProps<DropdownSelectedItemProps> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DropdownSelectedItemBehaviorProps>;\n\n  /** A selected item can be active. */\n  active?: boolean;\n\n  /** Header of the selected item. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Icon of the selected item. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Image of the selected item. */\n  image?: ShorthandValue<ImageProps>;\n\n  /**\n   * Called on selected item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownSelectedItemProps>;\n\n  /**\n   * Called on selected item key down.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<DropdownSelectedItemProps>;\n\n  /**\n   * Called when item is removed from the selection list.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onRemove?: ComponentEventHandler<DropdownSelectedItemProps>;\n}\n\nexport const dropdownSelectedItemClassName = 'ui-dropdown__selecteditem';\nexport const dropdownSelectedItemSlotClassNames: DropdownSelectedItemSlotClassNames = {\n  header: `${dropdownSelectedItemClassName}__header`,\n  icon: `${dropdownSelectedItemClassName}__icon`,\n  image: `${dropdownSelectedItemClassName}__image`,\n};\n\nexport type DropdownSelectedItemStylesProps = { hasImage: boolean };\n\n/**\n * A DropdownSelectedItem represents a selected item of 'multiple-selection' Dropdown.\n */\nexport const DropdownSelectedItem: ComponentWithAs<'span', DropdownSelectedItemProps> &\n  FluentComponentStaticProps<DropdownSelectedItemProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DropdownSelectedItem.displayName, context.telemetry);\n  setStart();\n\n  const { active, header, icon, image, className, design, styles, variables } = props;\n\n  const itemRef = React.useRef<HTMLElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownSelectedItem.handledProps, props);\n\n  const getA11yProps = useAccessibility<DropdownSelectedItemBehaviorProps>(props.accessibility, {\n    debugName: DropdownSelectedItem.displayName,\n    mapPropsToBehavior: () => ({\n      header: header as string,\n      active,\n    }),\n    rtl: context.rtl,\n  });\n\n  React.useEffect(() => {\n    if (active) {\n      itemRef.current.focus();\n    }\n  }, [active]);\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownSelectedItemStylesProps>(\n    DropdownSelectedItem.displayName,\n    {\n      className: dropdownSelectedItemClassName,\n      mapPropsToStyles: () => ({\n        hasImage: !!image,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n    },\n  );\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const handleKeyDown = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onKeyDown', e, props);\n  };\n\n  const handleIconOverrides = iconProps => ({\n    ...iconProps,\n    onClick: (e: React.SyntheticEvent, iconProps: BoxProps) => {\n      e.stopPropagation();\n      _.invoke(props, 'onRemove', e, iconProps);\n      _.invoke(props, 'onClick', e, iconProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, iconProps: BoxProps) => {\n      e.stopPropagation();\n      if (getCode(e) === keyboardKey.Enter) {\n        _.invoke(props, 'onRemove', e, iconProps);\n      }\n      _.invoke(props, 'onKeyDown', e, iconProps);\n    },\n  });\n\n  const headerElement = Box.create(header, {\n    defaultProps: () =>\n      getA11yProps('header', {\n        as: 'span',\n        className: dropdownSelectedItemSlotClassNames.header,\n        styles: resolvedStyles.header,\n      }),\n  });\n\n  const iconElement = Box.create(icon, {\n    defaultProps: () =>\n      getA11yProps('icon', {\n        className: dropdownSelectedItemSlotClassNames.icon,\n        styles: resolvedStyles.icon,\n      }),\n    overrideProps: handleIconOverrides,\n  });\n\n  const imageElement = Image.create(image, {\n    defaultProps: () =>\n      getA11yProps('image', {\n        avatar: true,\n        className: dropdownSelectedItemSlotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n  });\n\n  const element = (\n    <Ref innerRef={itemRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          onKeyDown: handleKeyDown,\n          ...unhandledProps,\n        })}\n      >\n        {imageElement}\n        {headerElement}\n        {iconElement}\n      </ElementType>\n    </Ref>\n  );\n\n  setEnd();\n  return element;\n};\n\nDropdownSelectedItem.displayName = 'DropdownSelectedItem';\n\nDropdownSelectedItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n  }),\n  active: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onRemove: PropTypes.func,\n};\n\nDropdownSelectedItem.handledProps = Object.keys(DropdownSelectedItem.propTypes) as any;\n\nDropdownSelectedItem.defaultProps = {\n  accessibility: dropdownSelectedItemBehavior,\n  as: 'span',\n  icon: <CloseIcon />,\n};\n\nDropdownSelectedItem.create = createShorthandFactory({\n  Component: DropdownSelectedItem,\n  mappedProp: 'header',\n});\n"]},"metadata":{},"sourceType":"module"}