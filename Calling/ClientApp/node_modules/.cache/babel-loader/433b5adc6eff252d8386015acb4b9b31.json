{"ast":null,"code":"import _times from \"lodash/times\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport _find from \"lodash/find\";\nimport { datepickerCalendarBehavior } from '@fluentui/accessibility';\nimport { DateRangeType, DayOfWeek, DAYS_IN_WEEK, FirstWeekOfYear, getDayGrid, DEFAULT_CALENDAR_STRINGS, compareDates, compareDatePart, getMonthStart, getMonthEnd, getStartDateOfWeek, getEndDateOfWeek } from '../../utils/date-time-utilities';\nimport { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, createShorthand } from '../../utils';\nimport { DatepickerCalendarGrid } from './DatepickerCalendarGrid';\nimport { DatepickerCalendarGridRow } from './DatepickerCalendarGridRow';\nimport { DatepickerCalendarHeader } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarCellButton } from './DatepickerCalendarCellButton';\nimport { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\nimport { navigateToNewDate, contstraintNavigatedDate } from './navigateToNewDate';\nexport var datepickerCalendarClassName = 'ui-datepicker__calendar';\n\nvar normalizeDateInGrid = function normalizeDateInGrid(date) {\n  var result = new Date(date.getTime());\n  result.setDate(1);\n  return result;\n};\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\n\n\nexport var DatepickerCalendar = /*#__PURE__*/function () {\n  var DatepickerCalendar = function DatepickerCalendar(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(DatepickerCalendar.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        calendarHeaderCell = props.calendarHeaderCell,\n        calendarCell = props.calendarCell,\n        calendarCellButton = props.calendarCellButton,\n        calendarGrid = props.calendarGrid,\n        calendarGridRow = props.calendarGridRow,\n        header = props.header,\n        selectedDate = props.selectedDate,\n        navigatedDate = props.navigatedDate,\n        firstDayOfWeek = props.firstDayOfWeek,\n        today = props.today,\n        formatMonthDayYear = props.formatMonthDayYear,\n        formatMonthYear = props.formatMonthYear,\n        shortDays = props.shortDays,\n        days = props.days,\n        minDate = props.minDate,\n        maxDate = props.maxDate,\n        restrictedDates = props.restrictedDates;\n    var restrictedDatesOptions = {\n      minDate: minDate,\n      maxDate: maxDate,\n      restrictedDates: restrictedDates\n    };\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n\n    var updateNavigatedDate = function updateNavigatedDate(date) {\n      if (!!date) {\n        if (!shouldFocusInDayGrid) {\n          setShouldFocusInDayGrid(true);\n        }\n\n        setGridNavigatedDate(date);\n      }\n    };\n\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: DatepickerCalendar.displayName,\n      actionHandlers: {\n        addWeek: function addWeek(e) {\n          e.preventDefault();\n          var newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Week', 1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        subtractWeek: function subtractWeek(e) {\n          e.preventDefault();\n          var newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Week', -1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        addDay: function addDay(e) {\n          e.preventDefault();\n          var newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Day', 1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        subtractDay: function subtractDay(e) {\n          e.preventDefault();\n          var newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Day', -1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        moveToStartOfWeek: function moveToStartOfWeek(e) {\n          e.preventDefault();\n          var targetDate = getStartDateOfWeek(gridNavigatedDate, firstDayOfWeek);\n          var newNavigatedDate = contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        moveToEndOfWeek: function moveToEndOfWeek(e) {\n          e.preventDefault();\n          var targetDate = getEndDateOfWeek(gridNavigatedDate, firstDayOfWeek);\n          var newNavigatedDate = contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        moveToStartOfColumn: function moveToStartOfColumn(e) {\n          var _find2;\n\n          e.preventDefault();\n          var targetDayOfWeek = gridNavigatedDate.getDay();\n          var targetDate = (_find2 = _find(visibleGrid[0], function (day) {\n            return day.originalDate.getDay() === targetDayOfWeek;\n          })) == null ? void 0 : _find2.originalDate;\n          var newNavigatedDate = contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        },\n        moveToEndOfColumn: function moveToEndOfColumn(e) {\n          var _find3;\n\n          e.preventDefault();\n          var targetDayOfWeek = gridNavigatedDate.getDay();\n          var targetDate = (_find3 = _find(visibleGrid[visibleGrid.length - 1], function (day) {\n            return day.originalDate.getDay() === targetDayOfWeek;\n          })) == null ? void 0 : _find3.originalDate;\n          var newNavigatedDate = contstraintNavigatedDate(gridNavigatedDate, targetDate, -1, restrictedDatesOptions, true);\n          updateNavigatedDate(newNavigatedDate);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _React$useState = React.useState(function () {\n      return new Date((navigatedDate || today || new Date()).getTime());\n    }),\n        gridNavigatedDate = _React$useState[0],\n        setGridNavigatedDate = _React$useState[1];\n\n    var _React$useState2 = React.useState(function () {\n      return normalizeDateInGrid(gridNavigatedDate);\n    }),\n        normalizedGridDate = _React$useState2[0],\n        setNormalizedGridDate = _React$useState2[1];\n\n    var _React$useState3 = React.useState(true),\n        shouldFocusInDayGrid = _React$useState3[0],\n        setShouldFocusInDayGrid = _React$useState3[1];\n\n    var _useStyles = useStyles(DatepickerCalendar.displayName, {\n      className: datepickerCalendarClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var visibleGrid = React.useMemo(function () {\n      var dayGridOptions = {\n        selectedDate: selectedDate,\n        navigatedDate: normalizedGridDate,\n        weeksToShow: props.weeksToShow,\n        firstDayOfWeek: props.firstDayOfWeek,\n        firstWeekOfYear: props.firstWeekOfYear,\n        dateRangeType: props.dateRangeType,\n        daysToSelectInDayView: props.daysToSelectInDayView,\n        today: props.today,\n        showWeekNumbers: props.showWeekNumbers,\n        workWeekDays: props.workWeekDays,\n        minDate: props.minDate,\n        maxDate: props.maxDate,\n        restrictedDates: props.restrictedDates\n      };\n      var grid = getDayGrid(dayGridOptions);\n      return grid.slice(1, grid.length - 1); // slicing off first and last weeks, cause we don't use them for transitions\n    }, [selectedDate, normalizedGridDate, props]);\n    React.useEffect(function () {\n      var newNormalizedDate = normalizeDateInGrid(gridNavigatedDate);\n\n      if (compareDatePart(newNormalizedDate, normalizedGridDate)) {\n        // Do not change the grid immediately the month changes but only once the date stops being visible.\n        var gridContainsNavigatedDate = visibleGrid.find(function (week) {\n          return week.find(function (day) {\n            return compareDatePart(day.originalDate, gridNavigatedDate) === 0;\n          });\n        });\n\n        if (!gridContainsNavigatedDate) {\n          setNormalizedGridDate(newNormalizedDate);\n        }\n      }\n    }, [gridNavigatedDate, visibleGrid, normalizedGridDate]);\n    var dateFormatting = {\n      months: props.months,\n      shortMonths: props.shortMonths,\n      days: props.days,\n      shortDays: props.shortDays\n    };\n    var focusDateRef = React.useRef(null);\n\n    var changeMonth = function changeMonth(nextMonth) {\n      var newNavigatedDate = navigateToNewDate(normalizedGridDate, 'Month', nextMonth ? 1 : -1, restrictedDatesOptions, true);\n\n      if (!!newNavigatedDate) {\n        setGridNavigatedDate(newNavigatedDate);\n        setShouldFocusInDayGrid(false);\n        setNormalizedGridDate(normalizeDateInGrid(newNavigatedDate));\n      }\n    };\n\n    var prevMonthOutOfBounds = minDate ? compareDatePart(minDate, getMonthStart(normalizedGridDate)) >= 0 : false;\n    var nextMonthOutOfBounds = maxDate ? compareDatePart(getMonthEnd(normalizedGridDate), maxDate) >= 0 : false;\n    React.useEffect(function () {\n      if (shouldFocusInDayGrid) {\n        var _focusDateRef$current;\n\n        (_focusDateRef$current = focusDateRef.current) == null ? void 0 : _focusDateRef$current.focus();\n      }\n    }, [gridNavigatedDate, normalizedGridDate, shouldFocusInDayGrid]);\n\n    var renderCell = function renderCell(day, content) {\n      return createShorthand(DatepickerCalendarCell, calendarCell, {\n        defaultProps: function defaultProps() {\n          var _props$today;\n\n          return getA11yProps('calendarCell', {\n            content: content,\n            key: day.key,\n            selected: day.isSelected,\n            disabled: !day.isInBounds,\n            quiet: !day.isInMonth,\n            today: compareDates(day.originalDate, (_props$today = props.today) != null ? _props$today : new Date())\n          });\n        }\n      });\n    };\n\n    var renderCellButton = function renderCellButton(day) {\n      return createShorthand(DatepickerCalendarCellButton, calendarCellButton, {\n        defaultProps: function defaultProps() {\n          var _props$today2;\n\n          return getA11yProps('calendarCell', {\n            content: day.date,\n            'aria-label': formatMonthDayYear(day.originalDate, dateFormatting),\n            selected: day.isSelected,\n            disabled: !day.isInBounds,\n            quiet: !day.isInMonth,\n            today: compareDates(day.originalDate, (_props$today2 = props.today) != null ? _props$today2 : new Date())\n          });\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onFocus: function onFocus(e) {\n              setGridNavigatedDate(day.originalDate);\n\n              _invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onClick: function onClick(e) {\n              _invoke(props, 'onDateChange', e, Object.assign({}, props, {\n                value: day\n              }));\n\n              _invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            ref: compareDates(gridNavigatedDate, day.originalDate) ? focusDateRef : null\n          };\n        }\n      });\n    };\n\n    var renderWeekRow = function renderWeekRow(week) {\n      return _map(week, function (day) {\n        return renderCell(day, renderCellButton(day));\n      });\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), createShorthand(DatepickerCalendarHeader, header, {\n      defaultProps: function defaultProps() {\n        return {\n          label: formatMonthYear(normalizedGridDate, dateFormatting),\n          'aria-label': formatMonthYear(normalizedGridDate, dateFormatting),\n          disabledNextButton: nextMonthOutOfBounds,\n          disabledPreviousButton: prevMonthOutOfBounds,\n          prevMonthAriaLabel: props.prevMonthAriaLabel,\n          nextMonthAriaLabel: props.nextMonthAriaLabel\n        };\n      },\n      overrideProps: function overrideProps(predefinedProps) {\n        return {\n          onPreviousClick: function onPreviousClick(e, data) {\n            changeMonth(false);\n\n            _invoke(predefinedProps, 'onPreviousClick', e, data);\n          },\n          onNextClick: function onNextClick(e, data) {\n            changeMonth(true);\n\n            _invoke(predefinedProps, 'onNextClick', e, data);\n          }\n        };\n      }\n    }), createShorthand(DatepickerCalendarGrid, calendarGrid, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('calendarGrid', {\n          content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"thead\", null, createShorthand(DatepickerCalendarGridRow, calendarGridRow, {\n            defaultProps: function defaultProps() {\n              return getA11yProps('calendarGridRow', {\n                children: _times(DAYS_IN_WEEK, function (dayNumber) {\n                  return createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n                    defaultProps: function defaultProps() {\n                      return getA11yProps('calendarHeaderCell', {\n                        'aria-label': days[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                        content: shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                        key: dayNumber\n                      });\n                    }\n                  });\n                })\n              });\n            }\n          })), /*#__PURE__*/React.createElement(\"tbody\", null, _map(visibleGrid, function (week) {\n            return createShorthand(DatepickerCalendarGridRow, calendarGridRow, {\n              defaultProps: function defaultProps() {\n                return getA11yProps('calendarGridRow', {\n                  children: renderWeekRow(week),\n                  key: week[0].key\n                });\n              }\n            });\n          })))\n        });\n      }\n    }));\n    setEnd();\n    return element;\n  };\n\n  DatepickerCalendar.displayName = 'DatepickerCalendar';\n  DatepickerCalendar.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    calendarCell: customPropTypes.itemShorthand,\n    calendarCellButton: customPropTypes.itemShorthand,\n    calendarHeaderCell: customPropTypes.itemShorthand,\n    header: customPropTypes.itemShorthand,\n    calendarGrid: customPropTypes.itemShorthand,\n    calendarGridRow: customPropTypes.itemShorthand,\n    onDateChange: PropTypes.func,\n    selectedDate: PropTypes.instanceOf(Date),\n    navigatedDate: PropTypes.instanceOf(Date),\n    minDate: PropTypes.instanceOf(Date),\n    maxDate: PropTypes.instanceOf(Date),\n    restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n    firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {\n      return DayOfWeek[name];\n    })),\n    firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(function (name) {\n      return FirstWeekOfYear[name];\n    })),\n    dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(function (name) {\n      return DateRangeType[name];\n    })),\n    daysToSelectInDayView: PropTypes.number,\n    today: PropTypes.instanceOf(Date),\n    showWeekNumbers: PropTypes.bool,\n    workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {\n      return DayOfWeek[name];\n    }))),\n    weeksToShow: PropTypes.number,\n    formatDay: PropTypes.func,\n    formatYear: PropTypes.func,\n    formatMonthDayYear: PropTypes.func,\n    formatMonthYear: PropTypes.func,\n    parseDate: PropTypes.func,\n    months: PropTypes.arrayOf(PropTypes.string),\n    shortMonths: PropTypes.arrayOf(PropTypes.string),\n    days: PropTypes.arrayOf(PropTypes.string),\n    shortDays: PropTypes.arrayOf(PropTypes.string),\n    isRequiredErrorMessage: PropTypes.string,\n    invalidInputErrorMessage: PropTypes.string,\n    isOutOfBoundsErrorMessage: PropTypes.string,\n    goToToday: PropTypes.string,\n    openCalendarTitle: PropTypes.string,\n    inputPlaceholder: PropTypes.string,\n    prevMonthAriaLabel: PropTypes.string,\n    nextMonthAriaLabel: PropTypes.string,\n    prevYearAriaLabel: PropTypes.string,\n    nextYearAriaLabel: PropTypes.string,\n    prevYearRangeAriaLabel: PropTypes.string,\n    nextYearRangeAriaLabel: PropTypes.string,\n    monthPickerHeaderAriaLabel: PropTypes.string,\n    yearPickerHeaderAriaLabel: PropTypes.string,\n    closeButtonAriaLabel: PropTypes.string,\n    weekNumberFormatString: PropTypes.string,\n    selectedDateFormatString: PropTypes.string,\n    todayDateFormatString: PropTypes.string,\n    inputAriaLabel: PropTypes.string,\n    inputBoundedFormatString: PropTypes.string,\n    inputMinBoundedFormatString: PropTypes.string,\n    inputMaxBoundedFormatString: PropTypes.string\n  });\n  DatepickerCalendar.defaultProps = Object.assign({\n    accessibility: datepickerCalendarBehavior,\n    firstDayOfWeek: DayOfWeek.Monday,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateRangeType: DateRangeType.Day,\n    header: {},\n    calendarCell: {},\n    calendarCellButton: {},\n    calendarHeaderCell: {},\n    calendarGrid: {},\n    calendarGridRow: {}\n  }, DEFAULT_CALENDAR_STRINGS);\n  DatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes);\n  return DatepickerCalendar;\n}();","map":{"version":3,"sources":["components/Datepicker/DatepickerCalendar.tsx"],"names":["datepickerCalendarClassName","normalizeDateInGrid","result","date","DatepickerCalendar","context","useFluentContext","setStart","setEnd","useTelemetry","className","design","styles","variables","calendarHeaderCell","calendarCell","calendarCellButton","calendarGrid","calendarGridRow","header","selectedDate","navigatedDate","firstDayOfWeek","today","formatMonthDayYear","formatMonthYear","shortDays","days","minDate","maxDate","restrictedDates","props","restrictedDatesOptions","ElementType","getElementType","unhandledProps","useUnhandledProps","updateNavigatedDate","setShouldFocusInDayGrid","setGridNavigatedDate","getA11yProps","useAccessibility","debugName","actionHandlers","addWeek","e","newNavigatedDate","navigateToNewDate","subtractWeek","addDay","subtractDay","moveToStartOfWeek","targetDate","getStartDateOfWeek","contstraintNavigatedDate","moveToEndOfWeek","getEndDateOfWeek","moveToStartOfColumn","targetDayOfWeek","gridNavigatedDate","visibleGrid","day","moveToEndOfColumn","rtl","normalizedGridDate","setNormalizedGridDate","shouldFocusInDayGrid","React","classes","useStyles","mapPropsToInlineStyles","dayGridOptions","weeksToShow","firstWeekOfYear","dateRangeType","daysToSelectInDayView","showWeekNumbers","workWeekDays","grid","getDayGrid","newNormalizedDate","compareDatePart","gridContainsNavigatedDate","dateFormatting","months","shortMonths","focusDateRef","changeMonth","nextMonth","prevMonthOutOfBounds","getMonthStart","nextMonthOutOfBounds","getMonthEnd","renderCell","createShorthand","defaultProps","content","key","selected","disabled","quiet","compareDates","renderCellButton","overrideProps","onFocus","onClick","value","ref","renderWeekRow","element","root","label","disabledNextButton","disabledPreviousButton","prevMonthAriaLabel","nextMonthAriaLabel","onPreviousClick","onNextClick","children","dayNumber","week","commonPropTypes","customPropTypes","onDateChange","PropTypes","DayOfWeek","FirstWeekOfYear","DateRangeType","formatDay","formatYear","parseDate","isRequiredErrorMessage","invalidInputErrorMessage","isOutOfBoundsErrorMessage","goToToday","openCalendarTitle","inputPlaceholder","prevYearAriaLabel","nextYearAriaLabel","prevYearRangeAriaLabel","nextYearRangeAriaLabel","monthPickerHeaderAriaLabel","yearPickerHeaderAriaLabel","closeButtonAriaLabel","weekNumberFormatString","selectedDateFormatString","todayDateFormatString","inputAriaLabel","inputBoundedFormatString","inputMinBoundedFormatString","inputMaxBoundedFormatString","string","accessibility","Object"],"mappings":"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","sourcesContent":["import { Accessibility, datepickerCalendarBehavior, DatepickerCalendarBehaviorProps } from '@fluentui/accessibility';\nimport {\n  DateRangeType,\n  DayOfWeek,\n  DAYS_IN_WEEK,\n  FirstWeekOfYear,\n  getDayGrid,\n  IDay,\n  DEFAULT_CALENDAR_STRINGS,\n  ICalendarStrings,\n  IDayGridOptions,\n  IDateGridStrings,\n  IRestrictedDatesOptions,\n  compareDates,\n  compareDatePart,\n  getMonthStart,\n  getMonthEnd,\n  getStartDateOfWeek,\n  getEndDateOfWeek,\n} from '../../utils/date-time-utilities';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, UIComponentProps } from '../../utils';\nimport { DatepickerCalendarGrid, DatepickerCalendarGridProps } from './DatepickerCalendarGrid';\nimport { DatepickerCalendarGridRow, DatepickerCalendarGridRowProps } from './DatepickerCalendarGridRow';\nimport { DatepickerCalendarHeader, DatepickerCalendarHeaderProps } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCellProps, DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarCellButtonProps, DatepickerCalendarCellButton } from './DatepickerCalendarCellButton';\nimport { DatepickerCalendarHeaderCellProps, DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\nimport { navigateToNewDate, contstraintNavigatedDate } from './navigateToNewDate';\n\nexport interface DatepickerCalendarProps extends UIComponentProps, Partial<ICalendarStrings>, Partial<IDayGridOptions> {\n  /** Calendar can have header. */\n  header?: ShorthandValue<DatepickerCalendarHeaderProps>;\n\n  /** A render function to customize how cells are rendered in the Calendar. */\n  calendarCell?: ShorthandValue<DatepickerCalendarCellProps>;\n\n  /** A render function to customize how cell's buttons are rendered in the Calendar. */\n  calendarCellButton?: ShorthandValue<DatepickerCalendarCellButtonProps>;\n\n  /** A render function to customize how header cells are rendered in the Calendar. */\n  calendarHeaderCell?: ShorthandValue<DatepickerCalendarHeaderCellProps>;\n\n  /** A render function to customize how the calendar grid is rendered. */\n  calendarGrid?: ShorthandValue<DatepickerCalendarGridProps>;\n\n  /** A render function to customize how the calendar grid row is rendered. */\n  calendarGridRow?: ShorthandValue<DatepickerCalendarGridRowProps>;\n\n  /**\n   * The currently selected date.\n   */\n  selectedDate?: Date;\n  /**\n   * The currently navigated date.\n   */\n  navigatedDate?: Date;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerCalendarBehaviorProps>;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerCalendarProps & { value: IDay }>;\n}\n\nexport type DatepickerCalendarStylesProps = never;\n\nexport const datepickerCalendarClassName = 'ui-datepicker__calendar';\n\nconst normalizeDateInGrid = (date: Date): Date => {\n  const result = new Date(date.getTime());\n  result.setDate(1);\n  return result;\n};\n\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\nexport const DatepickerCalendar: ComponentWithAs<'div', DatepickerCalendarProps> &\n  FluentComponentStaticProps<DatepickerCalendarProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DatepickerCalendar.displayName, context.telemetry);\n  setStart();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    calendarHeaderCell,\n    calendarCell,\n    calendarCellButton,\n    calendarGrid,\n    calendarGridRow,\n    header,\n    selectedDate,\n    navigatedDate,\n    firstDayOfWeek,\n    today,\n    formatMonthDayYear,\n    formatMonthYear,\n    shortDays,\n    days,\n    minDate,\n    maxDate,\n    restrictedDates,\n  } = props;\n\n  const restrictedDatesOptions: IRestrictedDatesOptions = {\n    minDate,\n    maxDate,\n    restrictedDates,\n  };\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n\n  const updateNavigatedDate = (date: Date) => {\n    if (!!date) {\n      if (!shouldFocusInDayGrid) {\n        setShouldFocusInDayGrid(true);\n      }\n      setGridNavigatedDate(date);\n    }\n  };\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: DatepickerCalendar.displayName,\n    actionHandlers: {\n      addWeek: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Week', 1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      subtractWeek: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Week', -1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      addDay: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Day', 1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      subtractDay: e => {\n        e.preventDefault();\n        const newNavigatedDate = navigateToNewDate(gridNavigatedDate, 'Day', -1, restrictedDatesOptions, true);\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToStartOfWeek: e => {\n        e.preventDefault();\n        const targetDate = getStartDateOfWeek(gridNavigatedDate, firstDayOfWeek);\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToEndOfWeek: e => {\n        e.preventDefault();\n        const targetDate = getEndDateOfWeek(gridNavigatedDate, firstDayOfWeek);\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToStartOfColumn: e => {\n        e.preventDefault();\n        const targetDayOfWeek = gridNavigatedDate.getDay();\n        const targetDate = _.find(visibleGrid[0], day => day.originalDate.getDay() === targetDayOfWeek)?.originalDate;\n\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n      moveToEndOfColumn: e => {\n        e.preventDefault();\n        const targetDayOfWeek = gridNavigatedDate.getDay();\n        const targetDate = _.find(\n          visibleGrid[visibleGrid.length - 1],\n          day => day.originalDate.getDay() === targetDayOfWeek,\n        )?.originalDate;\n\n        const newNavigatedDate = contstraintNavigatedDate(\n          gridNavigatedDate,\n          targetDate,\n          -1,\n          restrictedDatesOptions,\n          true,\n        );\n\n        updateNavigatedDate(newNavigatedDate);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const [gridNavigatedDate, setGridNavigatedDate] = React.useState<Date>(\n    () => new Date((navigatedDate || today || new Date()).getTime()),\n  );\n  const [normalizedGridDate, setNormalizedGridDate] = React.useState<Date>(() =>\n    normalizeDateInGrid(gridNavigatedDate),\n  );\n\n  const [shouldFocusInDayGrid, setShouldFocusInDayGrid] = React.useState<boolean>(true);\n\n  const { classes } = useStyles<DatepickerCalendarStylesProps>(DatepickerCalendar.displayName, {\n    className: datepickerCalendarClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const visibleGrid = React.useMemo<IDay[][]>(() => {\n    const dayGridOptions: IDayGridOptions = {\n      selectedDate,\n      navigatedDate: normalizedGridDate,\n      weeksToShow: props.weeksToShow,\n      firstDayOfWeek: props.firstDayOfWeek,\n      firstWeekOfYear: props.firstWeekOfYear,\n      dateRangeType: props.dateRangeType,\n      daysToSelectInDayView: props.daysToSelectInDayView,\n      today: props.today,\n      showWeekNumbers: props.showWeekNumbers,\n      workWeekDays: props.workWeekDays,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n      restrictedDates: props.restrictedDates,\n    };\n    const grid = getDayGrid(dayGridOptions);\n    return grid.slice(1, grid.length - 1); // slicing off first and last weeks, cause we don't use them for transitions\n  }, [selectedDate, normalizedGridDate, props]);\n\n  React.useEffect(() => {\n    const newNormalizedDate = normalizeDateInGrid(gridNavigatedDate);\n\n    if (compareDatePart(newNormalizedDate, normalizedGridDate)) {\n      // Do not change the grid immediately the month changes but only once the date stops being visible.\n      const gridContainsNavigatedDate = visibleGrid.find(week =>\n        week.find(day => compareDatePart(day.originalDate, gridNavigatedDate) === 0),\n      );\n      if (!gridContainsNavigatedDate) {\n        setNormalizedGridDate(newNormalizedDate);\n      }\n    }\n  }, [gridNavigatedDate, visibleGrid, normalizedGridDate]);\n\n  const dateFormatting: IDateGridStrings = {\n    months: props.months,\n    shortMonths: props.shortMonths,\n    days: props.days,\n    shortDays: props.shortDays,\n  };\n\n  const focusDateRef = React.useRef(null);\n\n  const changeMonth = (nextMonth: boolean) => {\n    const newNavigatedDate = navigateToNewDate(\n      normalizedGridDate,\n      'Month',\n      nextMonth ? 1 : -1,\n      restrictedDatesOptions,\n      true,\n    );\n    if (!!newNavigatedDate) {\n      setGridNavigatedDate(newNavigatedDate);\n      setShouldFocusInDayGrid(false);\n      setNormalizedGridDate(normalizeDateInGrid(newNavigatedDate));\n    }\n  };\n\n  const prevMonthOutOfBounds = minDate ? compareDatePart(minDate, getMonthStart(normalizedGridDate)) >= 0 : false;\n  const nextMonthOutOfBounds = maxDate ? compareDatePart(getMonthEnd(normalizedGridDate), maxDate) >= 0 : false;\n  React.useEffect(() => {\n    if (shouldFocusInDayGrid) {\n      focusDateRef.current?.focus();\n    }\n  }, [gridNavigatedDate, normalizedGridDate, shouldFocusInDayGrid]);\n\n  const renderCell = (day: IDay, content) =>\n    createShorthand(DatepickerCalendarCell, calendarCell, {\n      defaultProps: () =>\n        getA11yProps('calendarCell', {\n          content,\n          key: day.key,\n          selected: day.isSelected,\n          disabled: !day.isInBounds,\n          quiet: !day.isInMonth,\n          today: compareDates(day.originalDate, props.today ?? new Date()),\n        }),\n    });\n\n  const renderCellButton = (day: IDay) =>\n    createShorthand(DatepickerCalendarCellButton, calendarCellButton, {\n      defaultProps: () =>\n        getA11yProps('calendarCell', {\n          content: day.date,\n          'aria-label': formatMonthDayYear(day.originalDate, dateFormatting),\n          selected: day.isSelected,\n          disabled: !day.isInBounds,\n          quiet: !day.isInMonth,\n          today: compareDates(day.originalDate, props.today ?? new Date()),\n        }),\n      overrideProps: (\n        predefinedProps: DatepickerCalendarCellButtonProps & { ref: React.Ref<HTMLButtonElement> },\n      ): DatepickerCalendarCellButtonProps & { ref: React.Ref<HTMLButtonElement> } => ({\n        onFocus: e => {\n          setGridNavigatedDate(day.originalDate);\n          _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n        },\n        onClick: e => {\n          _.invoke(props, 'onDateChange', e, { ...props, value: day });\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n        ref: compareDates(gridNavigatedDate, day.originalDate) ? focusDateRef : null,\n      }),\n    });\n  const renderWeekRow = (week: IDay[]) => _.map(week, (day: IDay) => renderCell(day, renderCellButton(day)));\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {createShorthand(DatepickerCalendarHeader, header, {\n        defaultProps: () => ({\n          label: formatMonthYear(normalizedGridDate, dateFormatting),\n          'aria-label': formatMonthYear(normalizedGridDate, dateFormatting),\n          disabledNextButton: nextMonthOutOfBounds,\n          disabledPreviousButton: prevMonthOutOfBounds,\n          prevMonthAriaLabel: props.prevMonthAriaLabel,\n          nextMonthAriaLabel: props.nextMonthAriaLabel,\n        }),\n        overrideProps: (predefinedProps: DatepickerCalendarHeaderProps): DatepickerCalendarHeaderProps => ({\n          onPreviousClick: (e, data) => {\n            changeMonth(false);\n            _.invoke(predefinedProps, 'onPreviousClick', e, data);\n          },\n          onNextClick: (e, data) => {\n            changeMonth(true);\n            _.invoke(predefinedProps, 'onNextClick', e, data);\n          },\n        }),\n      })}\n      {createShorthand(DatepickerCalendarGrid, calendarGrid, {\n        defaultProps: () =>\n          getA11yProps('calendarGrid', {\n            content: (\n              <>\n                <thead>\n                  {createShorthand(DatepickerCalendarGridRow, calendarGridRow, {\n                    defaultProps: () =>\n                      getA11yProps('calendarGridRow', {\n                        children: _.times(DAYS_IN_WEEK, dayNumber =>\n                          createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n                            defaultProps: () =>\n                              getA11yProps('calendarHeaderCell', {\n                                'aria-label': days[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                                content: shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                                key: dayNumber,\n                              }),\n                          }),\n                        ),\n                      }),\n                  })}\n                </thead>\n                <tbody>\n                  {_.map(visibleGrid, week =>\n                    createShorthand(DatepickerCalendarGridRow, calendarGridRow, {\n                      defaultProps: () =>\n                        getA11yProps('calendarGridRow', {\n                          children: renderWeekRow(week),\n                          key: week[0].key,\n                        }),\n                    }),\n                  )}\n                </tbody>\n              </>\n            ),\n          }),\n      })}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nDatepickerCalendar.displayName = 'DatepickerCalendar';\n\nDatepickerCalendar.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendarCell: customPropTypes.itemShorthand,\n  calendarCellButton: customPropTypes.itemShorthand,\n  calendarHeaderCell: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  calendarGrid: customPropTypes.itemShorthand,\n  calendarGridRow: customPropTypes.itemShorthand,\n  onDateChange: PropTypes.func,\n  selectedDate: PropTypes.instanceOf(Date),\n  navigatedDate: PropTypes.instanceOf(Date),\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n  weeksToShow: PropTypes.number,\n\n  formatDay: PropTypes.func,\n  formatYear: PropTypes.func,\n  formatMonthDayYear: PropTypes.func,\n  formatMonthYear: PropTypes.func,\n\n  parseDate: PropTypes.func,\n\n  months: PropTypes.arrayOf(PropTypes.string),\n  shortMonths: PropTypes.arrayOf(PropTypes.string),\n  days: PropTypes.arrayOf(PropTypes.string),\n  shortDays: PropTypes.arrayOf(PropTypes.string),\n\n  isRequiredErrorMessage: PropTypes.string,\n  invalidInputErrorMessage: PropTypes.string,\n  isOutOfBoundsErrorMessage: PropTypes.string,\n  goToToday: PropTypes.string,\n  openCalendarTitle: PropTypes.string,\n  inputPlaceholder: PropTypes.string,\n  prevMonthAriaLabel: PropTypes.string,\n  nextMonthAriaLabel: PropTypes.string,\n  prevYearAriaLabel: PropTypes.string,\n  nextYearAriaLabel: PropTypes.string,\n  prevYearRangeAriaLabel: PropTypes.string,\n  nextYearRangeAriaLabel: PropTypes.string,\n  monthPickerHeaderAriaLabel: PropTypes.string,\n  yearPickerHeaderAriaLabel: PropTypes.string,\n  closeButtonAriaLabel: PropTypes.string,\n  weekNumberFormatString: PropTypes.string,\n  selectedDateFormatString: PropTypes.string,\n  todayDateFormatString: PropTypes.string,\n\n  inputAriaLabel: PropTypes.string,\n  inputBoundedFormatString: PropTypes.string,\n  inputMinBoundedFormatString: PropTypes.string,\n  inputMaxBoundedFormatString: PropTypes.string,\n};\n\nDatepickerCalendar.defaultProps = {\n  accessibility: datepickerCalendarBehavior,\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n  header: {},\n  calendarCell: {},\n  calendarCellButton: {},\n  calendarHeaderCell: {},\n  calendarGrid: {},\n  calendarGridRow: {},\n  ...DEFAULT_CALENDAR_STRINGS,\n};\n\nDatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes) as any;\n"]},"metadata":{},"sourceType":"module"}