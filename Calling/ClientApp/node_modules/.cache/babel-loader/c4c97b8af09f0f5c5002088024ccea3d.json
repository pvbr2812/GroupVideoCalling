{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _each from \"lodash/each\";\nimport _invoke from \"lodash/invoke\";\nimport _without from \"lodash/without\";\nimport _includes from \"lodash/includes\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { accordionBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthand, createShorthandFactory } from '../../utils';\nimport { AccordionTitle } from './AccordionTitle';\nimport { AccordionContent } from './AccordionContent';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\nimport { useAutoControlled, useAccessibility, useTelemetry, useFluentContext, useUnhandledProps, getElementType, useStyles } from '@fluentui/react-bindings';\nexport var accordionClassName = 'ui-accordion';\nexport var accordionSlotClassNames = {\n  content: accordionClassName + \"__content\",\n  title: accordionClassName + \"__title\"\n};\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\n\nexport var Accordion = /*#__PURE__*/function () {\n  var Accordion = function Accordion(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Accordion.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var expanded = props.expanded,\n        exclusive = props.exclusive,\n        accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        panels = props.panels,\n        renderPanelContent = props.renderPanelContent,\n        renderPanelTitle = props.renderPanelTitle;\n    var alwaysActiveIndex = expanded ? 0 : -1;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultActiveIndex,\n      value: props.activeIndex,\n      initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex]\n    }),\n        activeIndex = _useAutoControlled[0],\n        setActiveIndex = _useAutoControlled[1];\n\n    var actionHandlers = {\n      moveNext: function moveNext(e) {\n        e.preventDefault();\n        focusHandler.moveNext();\n      },\n      movePrevious: function movePrevious(e) {\n        e.preventDefault();\n        focusHandler.movePrevious();\n      },\n      moveFirst: function moveFirst(e) {\n        e.preventDefault();\n        focusHandler.moveFirst();\n      },\n      moveLast: function moveLast(e) {\n        e.preventDefault();\n        focusHandler.moveLast();\n      }\n    };\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Accordion.displayName,\n      actionHandlers: actionHandlers,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Accordion.displayName, {\n      className: accordionClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var _React$useState = React.useState(),\n        focusedIndex = _React$useState[0],\n        setfocusedIndex = _React$useState[1];\n\n    var handleNavigationFocus = function handleNavigationFocus(index) {\n      setfocusedIndex(index);\n    };\n\n    var getNavigationItemsSize = function getNavigationItemsSize() {\n      return props.panels.length;\n    };\n\n    var unhandledProps = useUnhandledProps(Accordion.handledProps, props);\n    var ElementType = getElementType(props);\n    var focusHandler = new ContainerFocusHandler(getNavigationItemsSize, handleNavigationFocus, true);\n    var itemRefs = React.useMemo(function () {\n      return Array.from({\n        length: panels == null ? void 0 : panels.length\n      }, function () {\n        return /*#__PURE__*/React.createRef();\n      });\n    }, // As we are using \"panels.length\" it's fine to have dependency on them\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panels == null ? void 0 : panels.length]);\n    React.useEffect(function () {\n      var targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n      targetComponent && targetComponent.focus();\n    }, [itemRefs, focusedIndex]);\n    var defaultAccordionTitleId = React.useMemo(function () {\n      return _uniqueId('accordion-title-');\n    }, []);\n    var defaultAccordionContentId = React.useMemo(function () {\n      return _uniqueId('accordion-content-');\n    }, []);\n\n    var computeNewIndex = function computeNewIndex(index) {\n      if (!isIndexActionable(index)) {\n        return activeIndex;\n      }\n\n      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it\n\n      return _includes(activeIndex, index) ? _without(activeIndex, index) : [].concat(activeIndex, [index]);\n    };\n\n    var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, titleProps) {\n          var index = titleProps.index;\n          var activeIndex = computeNewIndex(index);\n          setActiveIndex(activeIndex);\n          setfocusedIndex(index);\n\n          _invoke(props, 'onActiveIndexChange', e, Object.assign({}, props, {\n            activeIndex: activeIndex\n          }));\n\n          _invoke(predefinedProps, 'onClick', e, titleProps);\n\n          _invoke(props, 'onTitleClick', e, titleProps);\n        },\n        onFocus: function onFocus(e, titleProps) {\n          _invoke(predefinedProps, 'onFocus', e, titleProps);\n\n          setfocusedIndex(predefinedProps.index);\n        }\n      };\n    };\n\n    var isIndexActive = function isIndexActive(index) {\n      return exclusive ? activeIndex === index : _includes(activeIndex, index);\n    };\n    /**\n     * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n     * when at least a panel needs to stay active. Will return false if expanded prop is true,\n     * index is active and either it's an exclusive accordion or if there are no other active\n     * panels open besides this one.\n     *\n     * @param index - The index of the panel.\n     * @returns If the panel can be set active/inactive.\n     */\n\n\n    var isIndexActionable = function isIndexActionable(index) {\n      if (!isIndexActive(index)) {\n        return true;\n      }\n\n      return !expanded || !exclusive && activeIndex.length > 1;\n    };\n\n    var renderPanels = function renderPanels() {\n      var children = [];\n      focusHandler.syncFocusedIndex(focusedIndex);\n\n      _each(panels, function (panel, index) {\n        var content = panel.content,\n            title = panel.title;\n        var active = isIndexActive(+index);\n        var canBeCollapsed = isIndexActionable(+index);\n        var titleId = title['id'] || \"\" + defaultAccordionTitleId + index;\n        var contentId = content['id'] || \"\" + defaultAccordionContentId + index;\n        var contentRef = itemRefs[index];\n        children.push(createShorthand(AccordionTitle, title, {\n          defaultProps: function defaultProps() {\n            return {\n              className: accordionSlotClassNames.title,\n              active: active,\n              index: +index,\n              contentRef: contentRef,\n              canBeCollapsed: canBeCollapsed,\n              id: titleId,\n              accordionContentId: contentId\n            };\n          },\n          overrideProps: handleTitleOverrides,\n          render: renderPanelTitle\n        }));\n        children.push(createShorthand(AccordionContent, content, {\n          defaultProps: function defaultProps() {\n            return {\n              className: accordionSlotClassNames.content,\n              active: active,\n              id: contentId,\n              accordionTitleId: titleId\n            };\n          },\n          render: renderPanelContent\n        }));\n      });\n\n      return children;\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), rtlTextContainer.getAttributes({\n      forElements: [children]\n    })), childrenExist(children) ? children : renderPanels());\n    setEnd();\n    return element;\n  };\n\n  Accordion.displayName = 'Accordion';\n  Accordion.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n    defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n    exclusive: PropTypes.bool,\n    expanded: PropTypes.bool,\n    onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n    onActiveIndexChange: PropTypes.func,\n    panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({\n      content: customPropTypes.itemShorthand,\n      title: customPropTypes.itemShorthand\n    }))]),\n    renderPanelTitle: PropTypes.func,\n    renderPanelContent: PropTypes.func\n  });\n  Accordion.defaultProps = {\n    accessibility: accordionBehavior,\n    as: 'dl'\n  };\n  Accordion.handledProps = Object.keys(Accordion.propTypes);\n  Accordion.Title = AccordionTitle;\n  Accordion.Content = AccordionContent;\n  Accordion.create = createShorthandFactory({\n    Component: Accordion\n  });\n  return Accordion;\n}();","map":{"version":3,"sources":["components/Accordion/Accordion.tsx"],"names":["accordionClassName","accordionSlotClassNames","content","title","Accordion","context","useFluentContext","setStart","setEnd","useTelemetry","expanded","exclusive","accessibility","children","className","design","styles","variables","panels","renderPanelContent","renderPanelTitle","props","alwaysActiveIndex","activeIndex","setActiveIndex","useAutoControlled","defaultValue","value","initialValue","actionHandlers","moveNext","e","focusHandler","movePrevious","moveFirst","moveLast","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","focusedIndex","setfocusedIndex","React","handleNavigationFocus","getNavigationItemsSize","unhandledProps","useUnhandledProps","ElementType","getElementType","itemRefs","length","targetComponent","defaultAccordionTitleId","defaultAccordionContentId","computeNewIndex","isIndexActionable","index","handleTitleOverrides","onClick","titleProps","onFocus","predefinedProps","isIndexActive","renderPanels","panel","active","canBeCollapsed","titleId","contentId","contentRef","createShorthand","defaultProps","id","accordionContentId","overrideProps","render","accordionTitleId","element","root","forElements","childrenExist","customPropTypes","PropTypes","defaultActiveIndex","onTitleClick","onActiveIndexChange","itemShorthand","func","as","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, accordionBehavior, AccordionBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { AccordionTitle, AccordionTitleProps } from './AccordionTitle';\nimport { AccordionContent, AccordionContentProps } from './AccordionContent';\n\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  ShorthandRenderFunction,\n  FluentComponentStaticProps,\n} from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  useAccessibility,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  getElementType,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionSlotClassNames {\n  content: string;\n  title: string;\n}\n\nexport interface AccordionProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active panel. */\n  activeIndex?: number[] | number;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one panel to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** At least one panel should be expanded at any time. */\n  expanded?: boolean;\n\n  /**\n   * Called when the active index of the Accordion changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeIndex` reflecting the new state.\n   */\n  onActiveIndexChange?: ComponentEventHandler<AccordionProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onTitleClick?: ComponentEventHandler<AccordionProps>;\n\n  /** Shorthand array of props for Accordion. */\n  panels?: {\n    content: ShorthandValue<AccordionContentProps>;\n    title: ShorthandValue<AccordionTitleProps>;\n  }[];\n\n  /**\n   * A custom renderer for each Accordion's panel title.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelTitle?: ShorthandRenderFunction<AccordionTitleProps>;\n\n  /**\n   * A custom renderer for each Accordion's panel content.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelContent?: ShorthandRenderFunction<AccordionContentProps>;\n\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionBehaviorProps>;\n}\n\nexport type AccordionStylesProps = never;\nexport const accordionClassName = 'ui-accordion';\nexport const accordionSlotClassNames: AccordionSlotClassNames = {\n  content: `${accordionClassName}__content`,\n  title: `${accordionClassName}__title`,\n};\n\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\nexport const Accordion: ComponentWithAs<'dl', AccordionProps> &\n  FluentComponentStaticProps<AccordionProps> & {\n    Title: typeof AccordionTitle;\n    Content: typeof AccordionContent;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Accordion.displayName, context.telemetry);\n  setStart();\n  const {\n    expanded,\n    exclusive,\n    accessibility,\n    children,\n    className,\n    design,\n    styles,\n    variables,\n    panels,\n    renderPanelContent,\n    renderPanelTitle,\n  } = props;\n  const alwaysActiveIndex = expanded ? 0 : -1;\n\n  const [activeIndex, setActiveIndex] = useAutoControlled({\n    defaultValue: props.defaultActiveIndex,\n    value: props.activeIndex,\n    initialValue: exclusive ? alwaysActiveIndex : [alwaysActiveIndex],\n  });\n\n  const actionHandlers = {\n    moveNext: e => {\n      e.preventDefault();\n      focusHandler.moveNext();\n    },\n    movePrevious: e => {\n      e.preventDefault();\n      focusHandler.movePrevious();\n    },\n    moveFirst: e => {\n      e.preventDefault();\n      focusHandler.moveFirst();\n    },\n    moveLast: e => {\n      e.preventDefault();\n      focusHandler.moveLast();\n    },\n  };\n\n  const getA11yProps = useAccessibility<AccordionBehaviorProps>(accessibility, {\n    debugName: Accordion.displayName,\n    actionHandlers,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<AccordionStylesProps>(Accordion.displayName, {\n    className: accordionClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [focusedIndex, setfocusedIndex] = React.useState<number>();\n\n  const handleNavigationFocus = (index: number) => {\n    setfocusedIndex(index);\n  };\n\n  const getNavigationItemsSize = () => props.panels.length;\n  const unhandledProps = useUnhandledProps(Accordion.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const focusHandler: ContainerFocusHandler = new ContainerFocusHandler(\n    getNavigationItemsSize,\n    handleNavigationFocus,\n    true,\n  );\n\n  const itemRefs = React.useMemo<React.RefObject<HTMLElement>[]>(\n    () => Array.from({ length: panels?.length }, () => React.createRef()),\n    // As we are using \"panels.length\" it's fine to have dependency on them\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panels?.length],\n  );\n\n  React.useEffect(() => {\n    const targetComponent = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;\n    targetComponent && targetComponent.focus();\n  }, [itemRefs, focusedIndex]);\n\n  const defaultAccordionTitleId = React.useMemo(() => _.uniqueId('accordion-title-'), []);\n  const defaultAccordionContentId = React.useMemo(() => _.uniqueId('accordion-content-'), []);\n\n  const computeNewIndex = (index: number): number | number[] => {\n    if (!isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index;\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndex as number[], index)\n      ? _.without(activeIndex as number[], index)\n      : [...(activeIndex as number[]), index];\n  };\n\n  const handleTitleOverrides = (predefinedProps: AccordionTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      const { index } = titleProps;\n      const activeIndex = computeNewIndex(index);\n      setActiveIndex(activeIndex);\n      setfocusedIndex(index);\n\n      _.invoke(props, 'onActiveIndexChange', e, { ...props, activeIndex });\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n      _.invoke(props, 'onTitleClick', e, titleProps);\n    },\n    onFocus: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, titleProps);\n      setfocusedIndex(predefinedProps.index);\n    },\n  });\n\n  const isIndexActive = (index: number): boolean => {\n    return exclusive ? activeIndex === index : _.includes(activeIndex as number[], index);\n  };\n\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n  const isIndexActionable = (index: number): boolean => {\n    if (!isIndexActive(index)) {\n      return true;\n    }\n\n    return !expanded || (!exclusive && (activeIndex as number[]).length > 1);\n  };\n\n  const renderPanels = () => {\n    const children: any[] = [];\n    focusHandler.syncFocusedIndex(focusedIndex);\n    _.each(panels, (panel, index) => {\n      const { content, title } = panel;\n      const active = isIndexActive(+index);\n      const canBeCollapsed = isIndexActionable(+index);\n      const titleId = title['id'] || `${defaultAccordionTitleId}${index}`;\n      const contentId = content['id'] || `${defaultAccordionContentId}${index}`;\n      const contentRef = itemRefs[index];\n\n      children.push(\n        createShorthand(AccordionTitle, title, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.title,\n            active,\n            index: +index,\n            contentRef,\n            canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId,\n          }),\n          overrideProps: handleTitleOverrides,\n          render: renderPanelTitle,\n        }),\n      );\n      children.push(\n        createShorthand(AccordionContent, content, {\n          defaultProps: () => ({\n            className: accordionSlotClassNames.content,\n            active,\n            id: contentId,\n            accordionTitleId: titleId,\n          }),\n          render: renderPanelContent,\n        }),\n      );\n    });\n    return children;\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? children : renderPanels()}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nAccordion.displayName = 'Accordion';\n\nAccordion.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  defaultActiveIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  exclusive: PropTypes.bool,\n  expanded: PropTypes.bool,\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n  onActiveIndexChange: PropTypes.func,\n  panels: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        content: customPropTypes.itemShorthand,\n        title: customPropTypes.itemShorthand,\n      }),\n    ),\n  ]),\n\n  renderPanelTitle: PropTypes.func,\n  renderPanelContent: PropTypes.func,\n};\n\nAccordion.defaultProps = {\n  accessibility: accordionBehavior,\n  as: 'dl',\n};\nAccordion.handledProps = Object.keys(Accordion.propTypes) as any;\nAccordion.Title = AccordionTitle;\nAccordion.Content = AccordionContent;\nAccordion.create = createShorthandFactory({\n  Component: Accordion,\n});\n"]},"metadata":{},"sourceType":"module"}