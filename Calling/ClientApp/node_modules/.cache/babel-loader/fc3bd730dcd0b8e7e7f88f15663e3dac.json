{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __rest } from \"tslib\";\nimport { getIdentifierKind } from \"./identifierModels\";\n\nconst addRawIdIfExisting = (identifier, rawId) => {\n  return rawId === undefined ? identifier : Object.assign(Object.assign({}, identifier), {\n    rawId: rawId\n  });\n};\n\nconst assertNotNullOrUndefined = (obj, prop) => {\n  const subObjName = Object.keys(obj)[0];\n  const subObj = obj[subObjName];\n\n  if (prop in subObj) {\n    return subObj[prop];\n  }\n\n  throw new Error(`Property ${prop} is required for identifier of type ${subObjName}.`);\n};\n\nconst assertMaximumOneNestedModel = identifier => {\n  const {\n    rawId: _rawId\n  } = identifier,\n        props = __rest(identifier, [\"rawId\"]);\n\n  const keys = Object.keys(props);\n\n  if (keys.length > 1) {\n    throw new Error(`Only one of the properties in ${JSON.stringify(keys)} should be present.`);\n  }\n};\n/**\n * @hidden\n * Translates a CommunicationIdentifier to its serialized format for sending a request.\n * @param identifier - The CommunicationIdentifier to be serialized.\n */\n\n\nexport const serializeCommunicationIdentifier = identifier => {\n  var _a, _b;\n\n  const identifierKind = getIdentifierKind(identifier);\n\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return {\n        communicationUser: {\n          id: identifierKind.communicationUserId\n        }\n      };\n\n    case \"phoneNumber\":\n      return addRawIdIfExisting({\n        phoneNumber: {\n          value: identifierKind.phoneNumber\n        }\n      }, identifierKind.rawId);\n\n    case \"microsoftTeamsUser\":\n      return addRawIdIfExisting({\n        microsoftTeamsUser: {\n          userId: identifierKind.microsoftTeamsUserId,\n          isAnonymous: (_a = identifierKind.isAnonymous) !== null && _a !== void 0 ? _a : false,\n          cloud: (_b = identifierKind.cloud) !== null && _b !== void 0 ? _b : \"public\"\n        }\n      }, identifierKind.rawId);\n\n    case \"unknown\":\n      return {\n        rawId: identifierKind.id\n      };\n\n    default:\n      throw new Error(`Can't serialize an identifier with kind ${identifierKind.kind}`);\n  }\n};\n/**\n * @hidden\n * Translates the serialized format of a communication identifier to CommunicationIdentifier.\n * @param serializedIdentifier - The SerializedCommunicationIdentifier to be deserialized.\n */\n\nexport const deserializeCommunicationIdentifier = serializedIdentifier => {\n  assertMaximumOneNestedModel(serializedIdentifier);\n  const {\n    communicationUser,\n    microsoftTeamsUser,\n    phoneNumber\n  } = serializedIdentifier;\n\n  if (communicationUser) {\n    return {\n      kind: \"communicationUser\",\n      communicationUserId: assertNotNullOrUndefined({\n        communicationUser\n      }, \"id\")\n    };\n  }\n\n  if (phoneNumber) {\n    return {\n      kind: \"phoneNumber\",\n      phoneNumber: assertNotNullOrUndefined({\n        phoneNumber\n      }, \"value\"),\n      rawId: assertNotNullOrUndefined({\n        phoneNumber: serializedIdentifier\n      }, \"rawId\")\n    };\n  }\n\n  if (microsoftTeamsUser) {\n    return {\n      kind: \"microsoftTeamsUser\",\n      microsoftTeamsUserId: assertNotNullOrUndefined({\n        microsoftTeamsUser\n      }, \"userId\"),\n      isAnonymous: assertNotNullOrUndefined({\n        microsoftTeamsUser\n      }, \"isAnonymous\"),\n      cloud: assertNotNullOrUndefined({\n        microsoftTeamsUser\n      }, \"cloud\"),\n      rawId: assertNotNullOrUndefined({\n        microsoftTeamsUser: serializedIdentifier\n      }, \"rawId\")\n    };\n  }\n\n  return {\n    kind: \"unknown\",\n    id: assertNotNullOrUndefined({\n      unknown: serializedIdentifier\n    }, \"rawId\")\n  };\n};","map":{"version":3,"sources":["../../src/identifierModelSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CommunicationIdentifier,\n  CommunicationIdentifierKind,\n  getIdentifierKind\n} from \"./identifierModels\";\n\n/**\n * @hidden\n * Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.\n */\nexport interface SerializedCommunicationIdentifier {\n  /**\n   * Raw Id of the identifier. Optional in requests, required in responses.\n   */\n  rawId?: string;\n  /**\n   * The communication user.\n   */\n  communicationUser?: SerializedCommunicationUserIdentifier;\n  /**\n   * The phone number.\n   */\n  phoneNumber?: SerializedPhoneNumberIdentifier;\n  /**\n   * The Microsoft Teams user.\n   */\n  microsoftTeamsUser?: SerializedMicrosoftTeamsUserIdentifier;\n}\n\n/**\n * @hidden\n * A user that got created with an Azure Communication Services resource.\n */\nexport interface SerializedCommunicationUserIdentifier {\n  /**\n   * The Id of the communication user.\n   */\n  id: string;\n}\n\n/**\n * @hidden\n * A phone number.\n */\nexport interface SerializedPhoneNumberIdentifier {\n  /**\n   * The phone number in E.164 format.\n   */\n  value: string;\n}\n\n/**\n * @hidden\n * A Microsoft Teams user.\n */\nexport interface SerializedMicrosoftTeamsUserIdentifier {\n  /**\n   * The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user.\n   */\n  userId: string;\n  /**\n   * True if the Microsoft Teams user is anonymous. By default false if missing.\n   */\n  isAnonymous?: boolean;\n  /**\n   * The cloud that the Microsoft Teams user belongs to. By default 'public' if missing.\n   */\n  cloud?: SerializedCommunicationCloudEnvironment;\n}\n\n/**\n * @hidden\n * Defines values for CommunicationCloudEnvironmentModel.\n */\nexport type SerializedCommunicationCloudEnvironment = \"public\" | \"dod\" | \"gcch\";\n\nconst addRawIdIfExisting = <T>(\n  identifier: T,\n  rawId: string | undefined\n): T & { rawId?: string } => {\n  return rawId === undefined ? identifier : { ...identifier, rawId: rawId };\n};\n\nconst assertNotNullOrUndefined = <\n  T extends Record<string, unknown>,\n  P extends keyof T,\n  Q extends keyof T[P]\n>(\n  obj: T,\n  prop: Q\n): Required<Required<T>[P]>[Q] => {\n  const subObjName = Object.keys(obj)[0];\n  const subObj = (obj as any)[subObjName];\n  if (prop in subObj) {\n    return subObj[prop];\n  }\n  throw new Error(`Property ${prop} is required for identifier of type ${subObjName}.`);\n};\n\nconst assertMaximumOneNestedModel = (identifier: SerializedCommunicationIdentifier): void => {\n  const { rawId: _rawId, ...props } = identifier;\n  const keys = Object.keys(props);\n  if (keys.length > 1) {\n    throw new Error(`Only one of the properties in ${JSON.stringify(keys)} should be present.`);\n  }\n};\n\n/**\n * @hidden\n * Translates a CommunicationIdentifier to its serialized format for sending a request.\n * @param identifier - The CommunicationIdentifier to be serialized.\n */\nexport const serializeCommunicationIdentifier = (\n  identifier: CommunicationIdentifier\n): SerializedCommunicationIdentifier => {\n  const identifierKind = getIdentifierKind(identifier);\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return { communicationUser: { id: identifierKind.communicationUserId } };\n    case \"phoneNumber\":\n      return addRawIdIfExisting(\n        { phoneNumber: { value: identifierKind.phoneNumber } },\n        identifierKind.rawId\n      );\n    case \"microsoftTeamsUser\":\n      return addRawIdIfExisting(\n        {\n          microsoftTeamsUser: {\n            userId: identifierKind.microsoftTeamsUserId,\n            isAnonymous: identifierKind.isAnonymous ?? false,\n            cloud: identifierKind.cloud ?? \"public\"\n          }\n        },\n        identifierKind.rawId\n      );\n    case \"unknown\":\n      return { rawId: identifierKind.id };\n    default:\n      throw new Error(`Can't serialize an identifier with kind ${(identifierKind as any).kind}`);\n  }\n};\n\n/**\n * @hidden\n * Translates the serialized format of a communication identifier to CommunicationIdentifier.\n * @param serializedIdentifier - The SerializedCommunicationIdentifier to be deserialized.\n */\nexport const deserializeCommunicationIdentifier = (\n  serializedIdentifier: SerializedCommunicationIdentifier\n): CommunicationIdentifierKind => {\n  assertMaximumOneNestedModel(serializedIdentifier);\n\n  const { communicationUser, microsoftTeamsUser, phoneNumber } = serializedIdentifier;\n  if (communicationUser) {\n    return {\n      kind: \"communicationUser\",\n      communicationUserId: assertNotNullOrUndefined({ communicationUser }, \"id\")\n    };\n  }\n  if (phoneNumber) {\n    return {\n      kind: \"phoneNumber\",\n      phoneNumber: assertNotNullOrUndefined({ phoneNumber }, \"value\"),\n      rawId: assertNotNullOrUndefined({ phoneNumber: serializedIdentifier }, \"rawId\")\n    };\n  }\n  if (microsoftTeamsUser) {\n    return {\n      kind: \"microsoftTeamsUser\",\n      microsoftTeamsUserId: assertNotNullOrUndefined({ microsoftTeamsUser }, \"userId\"),\n      isAnonymous: assertNotNullOrUndefined({ microsoftTeamsUser }, \"isAnonymous\"),\n      cloud: assertNotNullOrUndefined({ microsoftTeamsUser }, \"cloud\"),\n      rawId: assertNotNullOrUndefined({ microsoftTeamsUser: serializedIdentifier }, \"rawId\")\n    };\n  }\n  return {\n    kind: \"unknown\",\n    id: assertNotNullOrUndefined({ unknown: serializedIdentifier }, \"rawId\")\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}