{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport _map from \"lodash/map\";\nimport { tableBehavior } from '@fluentui/accessibility';\nimport { getElementType, useTelemetry, mergeVariablesOverrides, useUnhandledProps, useAccessibility, useStyles, useFluentContext } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, childrenExist, createShorthandFactory } from '../../utils';\nimport { TableRow } from './TableRow';\nimport { TableCell } from './TableCell';\nexport var tableClassName = 'ui-table';\nexport var tableSlotClassNames = {\n  header: tableClassName + \"__header\"\n};\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\n\nexport var Table = /*#__PURE__*/function () {\n  var Table = function Table(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Table.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        rows = props.rows,\n        header = props.header,\n        compact = props.compact,\n        accessibility = props.accessibility,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var hasChildren = childrenExist(children);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Table.handledProps, props);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Table.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Table.displayName, {\n      className: tableClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var renderRows = function renderRows() {\n      return _map(rows, function (row) {\n        return TableRow.create(row, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('row', {\n              compact: compact,\n              onClick: function onClick(e, props) {\n                _invoke(row, 'onClick', e, props);\n              }\n            });\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              variables: mergeVariablesOverrides(variables, predefinedProps.variables)\n            };\n          }\n        });\n      });\n    };\n\n    var renderHeader = function renderHeader() {\n      return TableRow.create(header, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('row', {\n            header: true,\n            compact: compact,\n            className: tableSlotClassNames.header\n          });\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            variables: mergeVariablesOverrides(variables, predefinedProps.variables)\n          };\n        }\n      });\n    };\n\n    var element = getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), hasChildren && children, !hasChildren && renderHeader(), !hasChildren && renderRows()));\n    setEnd();\n    return element;\n  };\n\n  Table.displayName = 'Table';\n  Table.Cell = TableCell;\n  Table.Row = TableRow;\n  Table.create = createShorthandFactory({\n    Component: Table\n  });\n  Table.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    header: customPropTypes.itemShorthand,\n    rows: customPropTypes.collectionShorthand,\n    compact: PropTypes.bool\n  });\n  Table.handledProps = Object.keys(Table.propTypes);\n  Table.defaultProps = {\n    accessibility: tableBehavior\n  };\n  return Table;\n}();","map":{"version":3,"sources":["components/Table/Table.tsx"],"names":["tableClassName","tableSlotClassNames","header","Table","context","useFluentContext","setStart","setEnd","useTelemetry","children","rows","compact","accessibility","className","design","styles","variables","props","hasChildren","childrenExist","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","renderRows","defaultProps","onClick","overrideProps","mergeVariablesOverrides","predefinedProps","renderHeader","element","root","createShorthandFactory","Component","content","customPropTypes","PropTypes","bool","Object","tableBehavior"],"mappings":"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","sourcesContent":["import { Accessibility, tableBehavior, TableBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useTelemetry,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  childrenExist,\n  createShorthandFactory,\n} from '../../utils';\nimport { TableRow, TableRowProps } from './TableRow';\nimport { TableCell } from './TableCell';\n\nimport { ShorthandCollection, ShorthandValue, FluentComponentStaticProps } from '../../types';\n\nexport interface TableSlotClassNames {\n  header: string;\n}\n\nexport interface TableProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility<TableBehaviorProps>;\n\n  /** The columns of the Table with a space-separated list of values.\n   */\n  header?: ShorthandValue<TableRowProps>;\n\n  /** The rows of the Table with a space-separated list of values.\n   */\n  rows?: ShorthandCollection<TableRowProps>;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n}\n\nexport const tableClassName = 'ui-table';\nexport const tableSlotClassNames: TableSlotClassNames = {\n  header: `${tableClassName}__header`,\n};\n\nexport type TableStylesProps = never;\n\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\nexport const Table: ComponentWithAs<'div', TableProps> &\n  FluentComponentStaticProps<TableProps> & {\n    Cell: typeof TableCell;\n    Row: typeof TableRow;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Table.displayName, context.telemetry);\n  setStart();\n  const { children, rows, header, compact, accessibility, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Table.handledProps, props);\n\n  const getA11yProps = useAccessibility<TableBehaviorProps>(accessibility, {\n    debugName: Table.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TableStylesProps>(Table.displayName, {\n    className: tableClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderRows = () => {\n    return _.map(rows, (row: TableRowProps) => {\n      return TableRow.create(row, {\n        defaultProps: () =>\n          getA11yProps('row', {\n            compact,\n            onClick: (e, props) => {\n              _.invoke(row, 'onClick', e, props);\n            },\n          }),\n        overrideProps: predefinedProps => ({\n          variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n        }),\n      });\n    });\n  };\n\n  const renderHeader = () => {\n    return TableRow.create(header, {\n      defaultProps: () =>\n        getA11yProps('row', {\n          header: true,\n          compact,\n          className: tableSlotClassNames.header,\n        }),\n      overrideProps: predefinedProps => ({\n        variables: mergeVariablesOverrides(variables, predefinedProps.variables),\n      }),\n    });\n  };\n\n  const element = getA11yProps.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren && children}\n      {/* <thead> */}\n      {!hasChildren && renderHeader()}\n      {/* </thead> */}\n      {/* <tbody> */}\n      {!hasChildren && renderRows()}\n      {/* </tbody> */}\n    </ElementType>,\n  );\n  setEnd();\n  return element;\n};\n\nTable.displayName = 'Table';\n\nTable.Cell = TableCell;\n\nTable.Row = TableRow;\n\nTable.create = createShorthandFactory({\n  Component: Table,\n});\n\nTable.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  header: customPropTypes.itemShorthand,\n  rows: customPropTypes.collectionShorthand,\n  compact: PropTypes.bool,\n};\n\nTable.handledProps = Object.keys(Table.propTypes) as any;\n\nTable.defaultProps = {\n  accessibility: tableBehavior,\n};\n"]},"metadata":{},"sourceType":"module"}