{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { datepickerCalendarCellButtonBehavior } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useFluentContext, useTelemetry, useUnhandledProps, compose } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes } from '../../utils';\nexport var datepickerCalendarCellButtonClassName = 'ui-datepicker__calendarcellbutton';\n/**\n * A Datepicker cell is used to display calendar grid cell button.\n */\n\nexport var DatepickerCalendarCellButton = /*#__PURE__*/function () {\n  var DatepickerCalendarCellButton = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        disabled = props.disabled,\n        selected = props.selected,\n        quiet = props.quiet,\n        today = props.today,\n        content = props.content;\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var ElementType = getElementType(props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          // prevent Spacebar from scrolling\n          e.preventDefault();\n          handleClick(e);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          selected: selected,\n          disabled: disabled,\n          quiet: quiet,\n          today: today\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(DatepickerCalendarCellButton.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          disabled: disabled,\n          selected: selected,\n          quiet: quiet,\n          today: today\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl,\n      composeOptions: composeOptions,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick,\n      ref: ref\n    }, unhandledProps)), content);\n    setEnd();\n    return element;\n  }, {\n    className: datepickerCalendarCellButtonClassName,\n    displayName: 'DatepickerCalendarCellButton',\n    handledProps: ['accessibility', 'as', 'className', 'content', 'design', 'disabled', 'onClick', 'selected', 'styles', 'variables', 'quiet', 'today']\n  });\n  DatepickerCalendarCellButton.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false\n  }), {\n    onClick: PropTypes.func,\n    disabled: PropTypes.bool,\n    selected: PropTypes.bool,\n    quiet: PropTypes.bool,\n    today: PropTypes.bool\n  });\n  DatepickerCalendarCellButton.defaultProps = {\n    accessibility: datepickerCalendarCellButtonBehavior,\n    as: 'button'\n  };\n  return DatepickerCalendarCellButton;\n}();","map":{"version":3,"sources":["components/Datepicker/DatepickerCalendarCellButton.tsx"],"names":["datepickerCalendarCellButtonClassName","DatepickerCalendarCellButton","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","className","design","styles","variables","disabled","selected","quiet","today","content","props","unhandledProps","useUnhandledProps","ElementType","getElementType","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unstable_props","element","onClick","ref","displayName","handledProps","children","PropTypes","bool","accessibility","as"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  datepickerCalendarCellButtonBehavior,\n  DatepickerCalendarCellButtonBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useTelemetry,\n  useUnhandledProps,\n  compose,\n} from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, ComponentKeyboardEventHandler } from '../../types';\nimport { commonPropTypes, ContentComponentProps, UIComponentProps } from '../../utils';\n\nexport interface DatepickerCalendarCellButtonProps extends UIComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<DatepickerCalendarCellButtonBehaviorProps>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<DatepickerCalendarCellButtonProps>;\n\n  /**\n   * Called on focus.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<DatepickerCalendarCellButtonProps>;\n\n  /** A cell can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A cell can show that it is currently selected or not. */\n  selected?: boolean;\n\n  /** Denotes that the cell marks today's date. */\n  today?: boolean;\n\n  /** A cell can show that it currently has dimmed styles. */\n  quiet?: boolean;\n\n  /**\n   * Called on selected item key down.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onKeyDown?: ComponentKeyboardEventHandler<DatepickerCalendarCellButtonProps>;\n}\n\nexport type DatepickerCalendarCellButtonStylesProps = Pick<\n  DatepickerCalendarCellButtonProps,\n  'disabled' | 'selected' | 'quiet' | 'today'\n>;\n\nexport const datepickerCalendarCellButtonClassName = 'ui-datepicker__calendarcellbutton';\n/**\n * A Datepicker cell is used to display calendar grid cell button.\n */\nexport const DatepickerCalendarCellButton = compose<\n  'button',\n  DatepickerCalendarCellButtonProps,\n  DatepickerCalendarCellButtonStylesProps,\n  {},\n  {}\n>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { className, design, styles, variables, disabled, selected, quiet, today, content } = props;\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n    const getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        performClick: e => {\n          // prevent Spacebar from scrolling\n          e.preventDefault();\n          handleClick(e);\n        },\n      },\n      mapPropsToBehavior: () => ({\n        selected,\n        disabled,\n        quiet,\n        today,\n      }),\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<DatepickerCalendarCellButtonStylesProps>(DatepickerCalendarCellButton.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: () => ({\n        disabled,\n        selected,\n        quiet,\n        today,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n    const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          onClick: handleClick,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {content}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: datepickerCalendarCellButtonClassName,\n    displayName: 'DatepickerCalendarCellButton',\n\n    handledProps: [\n      'accessibility',\n      'as',\n      'className',\n      'content',\n      'design',\n      'disabled',\n      'onClick',\n      'selected',\n      'styles',\n      'variables',\n      'quiet',\n      'today',\n    ],\n  },\n);\n\nDatepickerCalendarCellButton.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  selected: PropTypes.bool,\n  quiet: PropTypes.bool,\n  today: PropTypes.bool,\n};\n\nDatepickerCalendarCellButton.defaultProps = {\n  accessibility: datepickerCalendarCellButtonBehavior,\n  as: 'button',\n};\n"]},"metadata":{},"sourceType":"module"}