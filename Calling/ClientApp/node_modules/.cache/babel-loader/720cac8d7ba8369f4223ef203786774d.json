{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport _keys from \"lodash/keys\";\nimport { FocusTrapZone, useFluentContext, useTelemetry, useAutoControlled } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, doesNodeContainClick, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { PortalInner } from './PortalInner';\n/**\n * A Portal allows to render children outside of their parent.\n */\n\nexport var Portal = /*#__PURE__*/function () {\n  var Portal = function Portal(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Portal.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        content = props.content,\n        trapFocus = props.trapFocus,\n        trigger = props.trigger,\n        triggerAccessibility = props.triggerAccessibility;\n    var portalRef = React.useRef();\n    var triggerRef = React.useRef();\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultOpen,\n      value: props.open,\n      initialValue: false\n    }),\n        open = _useAutoControlled[0],\n        setOpen = _useAutoControlled[1];\n\n    var renderPortal = function renderPortal() {\n      var contentToRender = childrenExist(children) ? children : content;\n      var focusTrapZoneProps = _keys(trapFocus).length && trapFocus || {};\n      return open && /*#__PURE__*/React.createElement(Ref, {\n        innerRef: portalRef\n      }, /*#__PURE__*/React.createElement(PortalInner, _extends({\n        onMount: handleMount,\n        onUnmount: handleUnmount\n      }, rtlTextContainer.getAttributes({\n        forElements: [contentToRender]\n      })), trapFocus ? /*#__PURE__*/React.createElement(FocusTrapZone, focusTrapZoneProps, contentToRender) : contentToRender, /*#__PURE__*/React.createElement(EventListener, {\n        listener: handleDocumentClick,\n        target: context.target,\n        type: \"click\"\n      })));\n    };\n\n    var renderTrigger = function renderTrigger() {\n      return trigger && /*#__PURE__*/React.createElement(Ref, {\n        innerRef: handleTriggerRef\n      }, /*#__PURE__*/React.cloneElement(trigger, Object.assign({\n        onClick: handleTriggerClick\n      }, triggerAccessibility.attributes, triggerAccessibility.keyHandlers)));\n    };\n\n    var handleMount = function handleMount() {\n      _invoke(props, 'onMount', props);\n    };\n\n    var handleUnmount = function handleUnmount() {\n      _invoke(props, 'onUnmount', props);\n    };\n\n    var handleTriggerRef = function handleTriggerRef(node) {\n      triggerRef.current = node;\n      handleRef(props.triggerRef, node);\n    };\n\n    var handleTriggerClick = function handleTriggerClick(e) {\n      _invoke(props, 'onTriggerClick', e); // Call handler from parent component\n\n\n      for (var _len = arguments.length, unhandledProps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        unhandledProps[_key - 1] = arguments[_key];\n      }\n\n      _invoke.apply(void 0, [trigger, 'props.onClick', e].concat(unhandledProps)); // Call original event handler\n\n\n      setOpen(function (isOpen) {\n        return !isOpen;\n      });\n    };\n\n    var handleDocumentClick = function handleDocumentClick(e) {\n      if (!portalRef || // no portal\n      doesNodeContainClick(triggerRef.current, e, context.target) || // event happened in trigger (delegate to trigger handlers)\n      doesNodeContainClick(portalRef.current, e, context.target) // event happened in the portal\n      ) {\n          return; // ignore the click\n        }\n\n      _invoke(props, 'onOutsideClick', e);\n\n      setOpen(false);\n    };\n\n    var element = /*#__PURE__*/React.createElement(React.Fragment, null, renderPortal(), renderTrigger());\n    setEnd();\n    return element;\n  };\n\n  Portal.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    className: false,\n    styled: false\n  }), {\n    defaultOpen: PropTypes.bool,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    open: PropTypes.bool,\n    trigger: PropTypes.element,\n    triggerRef: customPropTypes.ref,\n    triggerAccessibility: PropTypes.object,\n    onTriggerClick: PropTypes.func,\n    onOutsideClick: PropTypes.func,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\n  });\n  Portal.handledProps = Object.keys(Portal.propTypes);\n  Portal.create = createShorthandFactory({\n    Component: Portal\n  });\n  Portal.defaultProps = {\n    triggerAccessibility: {}\n  };\n  return Portal;\n}();","map":{"version":3,"sources":["components/Portal/Portal.tsx"],"names":["Portal","context","useFluentContext","setStart","setEnd","useTelemetry","children","content","trapFocus","trigger","triggerAccessibility","props","portalRef","React","triggerRef","open","setOpen","useAutoControlled","defaultValue","value","initialValue","renderPortal","contentToRender","childrenExist","focusTrapZoneProps","handleUnmount","forElements","renderTrigger","handleTriggerRef","onClick","handleTriggerClick","handleMount","handleRef","unhandledProps","handleDocumentClick","doesNodeContainClick","element","accessibility","as","className","styled","defaultOpen","PropTypes","onMount","onUnmount","customPropTypes","onTriggerClick","onOutsideClick","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { AccessibilityAttributes } from '@fluentui/accessibility';\nimport {\n  AccessibilityHandlerProps,\n  FocusTrapZone,\n  FocusTrapZoneProps,\n  useFluentContext,\n  useTelemetry,\n  useAutoControlled,\n} from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  doesNodeContainClick,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { PortalInner } from './PortalInner';\n\nexport type TriggerAccessibility = {\n  attributes?: AccessibilityAttributes;\n  keyHandlers?: AccessibilityHandlerProps;\n};\n\nexport interface PortalProps extends ChildrenComponentProps, ContentComponentProps {\n  /** Initial value of open. */\n  defaultOpen?: boolean;\n\n  /**\n   * Called when the portal is mounted on the DOM.\n   *\n   * @param data - All props.\n   */\n  onMount?: (props: PortalProps) => void;\n\n  /**\n   * Called when the portal is unmounted from the DOM.\n   *\n   * @param data - All props.\n   */\n  onUnmount?: (props: PortalProps) => void;\n\n  /** Controls whether or not the portal is displayed. */\n  open?: boolean;\n\n  /** Element to be rendered in-place where the portal is defined. */\n  trigger?: JSX.Element;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value */\n  trapFocus?: FocusTrapZoneProps | boolean;\n\n  /** Accessibility behavior object to apply on trigger node. */\n  triggerAccessibility?: TriggerAccessibility;\n\n  /** Sets trigger node to passed ref. */\n  triggerRef?: React.Ref<any>;\n\n  /**\n   * Called when trigger node was clicked.\n   *\n   * @param data - All props.\n   */\n  onTriggerClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Called when `click` event was invoked outside portal or trigger nodes.\n   *\n   * @param data - All props.\n   */\n  onOutsideClick?: (e: React.MouseEvent) => void;\n}\n\n/**\n * A Portal allows to render children outside of their parent.\n */\nexport const Portal: React.FC<PortalProps> & FluentComponentStaticProps<PortalProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Portal.displayName, context.telemetry);\n  setStart();\n  const { children, content, trapFocus, trigger, triggerAccessibility } = props;\n  const portalRef = React.useRef<HTMLElement>();\n  const triggerRef = React.useRef<HTMLElement>();\n\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false,\n  });\n\n  const renderPortal = (): JSX.Element | undefined => {\n    const contentToRender = childrenExist(children) ? children : content;\n    const focusTrapZoneProps = (_.keys(trapFocus).length && trapFocus) || {};\n    return (\n      open && (\n        <Ref innerRef={portalRef}>\n          <PortalInner\n            onMount={handleMount}\n            onUnmount={handleUnmount}\n            {...rtlTextContainer.getAttributes({ forElements: [contentToRender] })}\n          >\n            {trapFocus ? <FocusTrapZone {...focusTrapZoneProps}>{contentToRender}</FocusTrapZone> : contentToRender}\n            <EventListener listener={handleDocumentClick} target={context.target} type=\"click\" />\n          </PortalInner>\n        </Ref>\n      )\n    );\n  };\n\n  const renderTrigger = (): JSX.Element | undefined => {\n    return (\n      trigger && (\n        <Ref innerRef={handleTriggerRef}>\n          {React.cloneElement(trigger, {\n            onClick: handleTriggerClick,\n            ...triggerAccessibility.attributes,\n            ...triggerAccessibility.keyHandlers,\n          })}\n        </Ref>\n      )\n    );\n  };\n\n  const handleMount = () => {\n    _.invoke(props, 'onMount', props);\n  };\n\n  const handleUnmount = () => {\n    _.invoke(props, 'onUnmount', props);\n  };\n\n  const handleTriggerRef = (node: HTMLElement) => {\n    triggerRef.current = node;\n    handleRef(props.triggerRef, node);\n  };\n\n  const handleTriggerClick = (e: React.MouseEvent, ...unhandledProps) => {\n    _.invoke(props, 'onTriggerClick', e); // Call handler from parent component\n    _.invoke(trigger, 'props.onClick', e, ...unhandledProps); // Call original event handler\n    setOpen(isOpen => !isOpen);\n  };\n\n  const handleDocumentClick = (e: MouseEvent) => {\n    if (\n      !portalRef || // no portal\n      doesNodeContainClick(triggerRef.current, e, context.target) || // event happened in trigger (delegate to trigger handlers)\n      doesNodeContainClick(portalRef.current, e, context.target) // event happened in the portal\n    ) {\n      return; // ignore the click\n    }\n    _.invoke(props, 'onOutsideClick', e);\n    setOpen(false);\n  };\n\n  const element = (\n    <>\n      {renderPortal()}\n      {renderTrigger()}\n    </>\n  );\n  setEnd();\n  return element;\n};\n\nPortal.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    as: false,\n    className: false,\n    styled: false,\n  }),\n  defaultOpen: PropTypes.bool,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func,\n  open: PropTypes.bool,\n  trigger: PropTypes.element,\n  triggerRef: customPropTypes.ref,\n  triggerAccessibility: PropTypes.object,\n  onTriggerClick: PropTypes.func,\n  onOutsideClick: PropTypes.func,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n};\n\nPortal.handledProps = Object.keys(Portal.propTypes) as any;\n\nPortal.create = createShorthandFactory({\n  Component: Portal,\n});\n\nPortal.defaultProps = {\n  triggerAccessibility: {},\n};\n"]},"metadata":{},"sourceType":"module"}