{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createRenderer } from 'fela';\nimport felaPluginEmbedded from 'fela-plugin-embedded';\nimport felaPluginFallbackValue from 'fela-plugin-fallback-value';\nimport felaPluginPlaceholderPrefixer from 'fela-plugin-placeholder-prefixer';\nimport felaPluginRtl from 'fela-plugin-rtl';\nimport * as React from 'react';\nimport { RendererProvider } from 'react-fela';\nimport { felaDisableAnimationsPlugin } from './felaDisableAnimationsPlugin';\nimport { felaExpandCssShorthandsPlugin } from './felaExpandCssShorthandsPlugin';\nimport { felaFocusVisibleEnhancer } from './felaFocusVisibleEnhancer';\nimport { felaInvokeKeyframesPlugin } from './felaInvokeKeyframesPlugin';\nimport { felaPerformanceEnhancer } from './felaPerformanceEnhancer';\nimport { felaSanitizeCssPlugin } from './felaSanitizeCssPlugin';\nimport { felaStylisEnhancer } from './felaStylisEnhancer';\nvar felaDevMode = false;\n\ntry {\n  // eslint-disable-next-line no-undef\n  felaDevMode = !!window.localStorage.felaDevMode;\n} catch (_unused) {}\n\nif (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n  if (felaDevMode) {\n    /* eslint-disable-next-line no-console */\n    console.warn(['@fluentui/react-northstar:', 'You are running Fela in development mode and this can cause performance degrades.', 'To disable it please paste `delete window.localStorage.felaDevMode` to your browsers console and reload current page.'].join(' '));\n  } else {\n    /* eslint-disable-next-line no-console */\n    console.warn(['@fluentui/react-northstar:', 'You are running Fela in production mode.', 'This limits your ability to edit styles in browsers development tools.', 'To enable development mode please paste `window.localStorage.felaDevMode = true` to your browsers console and reload the page.'].join(' '));\n  }\n} // Blacklist contains a list of classNames that are used by FontAwesome\n// https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use\n\n\nvar blacklistedClassNames = ['fa', 'fas', 'far', 'fal', 'fab'];\n\nvar filterClassName = function filterClassName(className) {\n  return className.indexOf('ad') === -1 && blacklistedClassNames.indexOf(className) === -1;\n};\n\nvar rendererConfig = {\n  devMode: felaDevMode,\n  filterClassName: filterClassName,\n  enhancers: [felaPerformanceEnhancer, felaFocusVisibleEnhancer, felaStylisEnhancer],\n  plugins: [felaDisableAnimationsPlugin, // is necessary to prevent accidental style typos\n  // from breaking ALL the styles on the page\n  felaSanitizeCssPlugin, felaPluginPlaceholderPrefixer(), felaInvokeKeyframesPlugin, felaPluginEmbedded(), felaExpandCssShorthandsPlugin, // Heads up!\n  // This is required after fela-plugin-prefixer to resolve the array of fallback values prefixer produces.\n  felaPluginFallbackValue(), felaPluginRtl()]\n};\nexport var createFelaRenderer = function createFelaRenderer(target) {\n  var felaRenderer = createRenderer(rendererConfig);\n  var usedRenderers = 0; // rehydration disabled to avoid leaking styles between renderers\n  // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md\n\n  var Provider = function Provider(props) {\n    return /*#__PURE__*/React.createElement(RendererProvider, _extends({\n      renderer: felaRenderer\n    }, {\n      rehydrate: false,\n      targetDocument: target\n    }), props.children);\n  };\n\n  return {\n    registerUsage: function registerUsage() {\n      usedRenderers += 1;\n    },\n    unregisterUsage: function unregisterUsage() {\n      usedRenderers -= 1;\n\n      if (usedRenderers === 0) {\n        felaRenderer.listeners = [];\n        felaRenderer.nodes = {};\n        felaRenderer.updateSubscription = undefined;\n      }\n    },\n    renderFont: function renderFont(font) {\n      felaRenderer.renderFont(font.name, font.paths, font.props);\n    },\n    renderGlobal: felaRenderer.renderStatic,\n    renderRule: function renderRule(styles, param) {\n      var felaParam = Object.assign({}, param, {\n        theme: {\n          direction: param.direction\n        }\n      });\n      return felaRenderer.renderRule(function () {\n        return styles;\n      }, felaParam);\n    },\n    // getOriginalRenderer() is implemented only for tests to be compatible with jest-react-fela expectations.\n    getOriginalRenderer: function getOriginalRenderer() {\n      if (process.env.NODE_ENV !== 'test') {\n        throw new Error('This method implements private API and can be used only in tests');\n      }\n\n      return felaRenderer;\n    },\n    Provider: Provider\n  };\n};","map":{"version":3,"sources":["createFelaRenderer.tsx"],"names":["felaDevMode","window","process","console","blacklistedClassNames","filterClassName","className","rendererConfig","devMode","enhancers","plugins","felaPluginPlaceholderPrefixer","felaPluginEmbedded","felaPluginFallbackValue","felaPluginRtl","createFelaRenderer","felaRenderer","createRenderer","usedRenderers","Provider","rehydrate","targetDocument","target","props","registerUsage","unregisterUsage","renderFont","font","renderGlobal","renderRule","felaParam","theme","direction","param","getOriginalRenderer"],"mappings":"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","sourcesContent":["import { CreateRenderer } from '@fluentui/react-northstar-styles-renderer';\nimport { createRenderer, IRenderer, IStyle, TPlugin } from 'fela';\nimport felaPluginEmbedded from 'fela-plugin-embedded';\nimport felaPluginFallbackValue from 'fela-plugin-fallback-value';\nimport felaPluginPlaceholderPrefixer from 'fela-plugin-placeholder-prefixer';\nimport felaPluginRtl from 'fela-plugin-rtl';\nimport * as React from 'react';\nimport { RendererProvider } from 'react-fela';\n\nimport { felaDisableAnimationsPlugin } from './felaDisableAnimationsPlugin';\nimport { felaExpandCssShorthandsPlugin } from './felaExpandCssShorthandsPlugin';\nimport { felaFocusVisibleEnhancer } from './felaFocusVisibleEnhancer';\nimport { felaInvokeKeyframesPlugin } from './felaInvokeKeyframesPlugin';\nimport { felaPerformanceEnhancer } from './felaPerformanceEnhancer';\nimport { felaSanitizeCssPlugin } from './felaSanitizeCssPlugin';\nimport { felaStylisEnhancer } from './felaStylisEnhancer';\nimport { FelaRendererParam } from './types';\n\nlet felaDevMode = false;\n\ntry {\n  // eslint-disable-next-line no-undef\n  felaDevMode = !!window.localStorage.felaDevMode;\n} catch {}\n\nif (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n  if (felaDevMode) {\n    /* eslint-disable-next-line no-console */\n    console.warn(\n      [\n        '@fluentui/react-northstar:',\n        'You are running Fela in development mode and this can cause performance degrades.',\n        'To disable it please paste `delete window.localStorage.felaDevMode` to your browsers console and reload current page.',\n      ].join(' '),\n    );\n  } else {\n    /* eslint-disable-next-line no-console */\n    console.warn(\n      [\n        '@fluentui/react-northstar:',\n        'You are running Fela in production mode.',\n        'This limits your ability to edit styles in browsers development tools.',\n        'To enable development mode please paste `window.localStorage.felaDevMode = true` to your browsers console and reload the page.',\n      ].join(' '),\n    );\n  }\n}\n\n// Blacklist contains a list of classNames that are used by FontAwesome\n// https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use\nconst blacklistedClassNames = ['fa', 'fas', 'far', 'fal', 'fab'];\n\nconst filterClassName = (className: string): boolean =>\n  className.indexOf('ad') === -1 && blacklistedClassNames.indexOf(className) === -1;\n\nconst rendererConfig = {\n  devMode: felaDevMode,\n  filterClassName,\n  enhancers: [felaPerformanceEnhancer, felaFocusVisibleEnhancer, felaStylisEnhancer],\n  plugins: [\n    felaDisableAnimationsPlugin as TPlugin,\n\n    // is necessary to prevent accidental style typos\n    // from breaking ALL the styles on the page\n    felaSanitizeCssPlugin as TPlugin,\n\n    felaPluginPlaceholderPrefixer(),\n    felaInvokeKeyframesPlugin as TPlugin,\n    felaPluginEmbedded(),\n\n    felaExpandCssShorthandsPlugin as TPlugin,\n\n    // Heads up!\n    // This is required after fela-plugin-prefixer to resolve the array of fallback values prefixer produces.\n    felaPluginFallbackValue(),\n\n    felaPluginRtl(),\n  ],\n};\n\nexport const createFelaRenderer: CreateRenderer = target => {\n  const felaRenderer = createRenderer(rendererConfig) as IRenderer & {\n    listeners: [];\n    nodes: Record<string, HTMLStyleElement>;\n    updateSubscription: Function | undefined;\n  };\n  let usedRenderers: number = 0;\n\n  // rehydration disabled to avoid leaking styles between renderers\n  // https://github.com/rofrischmann/fela/blob/master/docs/api/fela-dom/rehydrate.md\n  const Provider: React.FC = props => (\n    <RendererProvider renderer={felaRenderer} {...{ rehydrate: false, targetDocument: target }}>\n      {props.children}\n    </RendererProvider>\n  );\n\n  return {\n    registerUsage: () => {\n      usedRenderers += 1;\n    },\n    unregisterUsage: () => {\n      usedRenderers -= 1;\n\n      if (usedRenderers === 0) {\n        felaRenderer.listeners = [];\n        felaRenderer.nodes = {};\n        felaRenderer.updateSubscription = undefined;\n      }\n    },\n\n    renderFont: font => {\n      felaRenderer.renderFont(font.name, font.paths, font.props);\n    },\n    renderGlobal: felaRenderer.renderStatic,\n    renderRule: (styles, param) => {\n      const felaParam: FelaRendererParam = {\n        ...param,\n        theme: { direction: param.direction },\n      };\n\n      return felaRenderer.renderRule(() => (styles as unknown) as IStyle, felaParam);\n    },\n\n    // getOriginalRenderer() is implemented only for tests to be compatible with jest-react-fela expectations.\n    getOriginalRenderer: (): IRenderer => {\n      if (process.env.NODE_ENV !== 'test') {\n        throw new Error('This method implements private API and can be used only in tests');\n      }\n\n      return felaRenderer;\n    },\n\n    Provider,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}