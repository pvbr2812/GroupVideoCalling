{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nexport var convertCssTimeToNumber = function convertCssTimeToNumber(time) {\n  if (_isNil(time) || time === 'initial' || time === 'inherit') {\n    return 0;\n  }\n\n  var lastTwoCharacters = time.slice(-2);\n\n  if (lastTwoCharacters !== 'ms' && lastTwoCharacters[1] !== 's') {\n    return 0;\n  }\n\n  var isMs = lastTwoCharacters === 'ms';\n  var multiplier = isMs ? 1 : 1000;\n  var stringNumber = isMs ? time.slice(0, -2) : time.slice(0, -1);\n  var number = parseFloat(stringNumber);\n  return isNaN(number) ? 0 : multiplier * number;\n};","map":{"version":3,"sources":["styles/convertCssTimeToNumber.ts"],"names":["convertCssTimeToNumber","time","lastTwoCharacters","isMs","multiplier","stringNumber","number","parseFloat","isNaN"],"mappings":";AAEA,OAAO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAAsC;AAC1E,MAAI,MAAA,CAAA,IAAA,CAAA,IAAiBC,IAAI,KAArB,SAAA,IAAuCA,IAAI,KAA/C,SAAA,EAA+D;AAC7D,WAAA,CAAA;AACD;;AACD,MAAMC,iBAAiB,GAAGD,IAAI,CAAJA,KAAAA,CAAW,CAArC,CAA0BA,CAA1B;;AACA,MAAIC,iBAAiB,KAAjBA,IAAAA,IAA8BA,iBAAiB,CAAjBA,CAAiB,CAAjBA,KAAlC,GAAA,EAAgE;AAC9D,WAAA,CAAA;AACD;;AAED,MAAMC,IAAI,GAAGD,iBAAiB,KAA9B,IAAA;AACA,MAAME,UAAU,GAAGD,IAAI,GAAA,CAAA,GAAvB,IAAA;AAEA,MAAME,YAAY,GAAGF,IAAI,GAAGF,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAc,CAAjB,CAAGA,CAAH,GAAuBA,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAc,CAA9D,CAAgDA,CAAhD;AACA,MAAMK,MAAM,GAAGC,UAAU,CAAzB,YAAyB,CAAzB;AAEA,SAAOC,KAAK,CAALA,MAAK,CAALA,GAAAA,CAAAA,GAAoBJ,UAAU,GAArC,MAAA;AAfK,CAAA","sourcesContent":["import * as _ from 'lodash';\n\nexport const convertCssTimeToNumber = (time: string | undefined): number => {\n  if (_.isNil(time) || time === 'initial' || time === 'inherit') {\n    return 0;\n  }\n  const lastTwoCharacters = time.slice(-2);\n  if (lastTwoCharacters !== 'ms' && lastTwoCharacters[1] !== 's') {\n    return 0;\n  }\n\n  const isMs = lastTwoCharacters === 'ms';\n  const multiplier = isMs ? 1 : 1000;\n\n  const stringNumber = isMs ? time.slice(0, -2) : time.slice(0, -1);\n  const number = parseFloat(stringNumber);\n\n  return isNaN(number) ? 0 : multiplier * number;\n};\n"]},"metadata":{},"sourceType":"module"}