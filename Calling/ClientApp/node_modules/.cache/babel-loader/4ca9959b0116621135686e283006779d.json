{"ast":null,"code":"import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './utils';\n/**\n * This hook returns context selected value by selectors.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\n\nexport var useContextSelectors = function useContextSelectors(context, selectors) {\n  var _React$useContext = React.useContext(context),\n      subscribe = _React$useContext.subscribe,\n      value = _React$useContext.value;\n\n  var _ref = React.useReducer(function (c) {\n    return c + 1;\n  }, 0),\n      forceUpdate = _ref[1];\n\n  var ref = React.useRef();\n  var selected = {};\n  Object.keys(selectors).forEach(function (key) {\n    selected[key] = selectors[key](value);\n  });\n  useIsomorphicLayoutEffect(function () {\n    ref.current = {\n      selectors: selectors,\n      value: value,\n      selected: selected\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    var callback = function callback(nextState) {\n      try {\n        var reference = ref.current;\n\n        if (reference.value === nextState || Object.keys(reference.selected).every(function (key) {\n          return Object.is(reference.selected[key], reference.selectors[key](nextState));\n        })) {\n          // not changed\n          return;\n        }\n      } catch (e) {// ignored (stale props or some other reason)\n      }\n\n      forceUpdate();\n    };\n\n    return subscribe(callback);\n  }, [subscribe]);\n  return selected;\n};","map":{"version":3,"sources":["useContextSelectors.ts"],"names":["useContextSelectors","subscribe","value","React","forceUpdate","c","ref","selected","Object","selectors","useIsomorphicLayoutEffect","callback","reference"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,SAAA,yBAAA,QAAA,SAAA;AAaA;;;;;;AAKA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,OAAA,EAAA,SAAA,EAQK;AAAA,MAAA,iBAAA,GACTG,KAAK,CAALA,UAAAA,CADS,OACTA,CADS;AAAA,MAC9BF,SAD8B,GAAA,iBAAA,CAAA,SAAA;AAAA,MACnBC,KADmB,GAAA,iBAAA,CAAA,KAAA;;AAAA,MAAA,IAAA,GAEd,KAAK,CAAL,UAAA,CAAiB,UAAA,CAAA,EAAA;AAAA,WAAeG,CAAC,GAAhB,CAAA;AAAjB,GAAA,EAFc,CAEd,CAFc;AAAA,MAE7BD,WAF6B,GAAA,IAAA,CAAA,CAAA,CAAA;;AAItC,MAAME,GAAG,GAAGH,KAAK,CAAjB,MAAYA,EAAZ;AACA,MAAMI,QAAQ,GAAd,EAAA;AAEAC,EAAAA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAA+B,UAAA,GAAA,EAAqB;AAClDD,IAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAgBE,SAAS,CAATA,GAAS,CAATA,CAAhBF,KAAgBE,CAAhBF;AADFC,GAAAA;AAIAE,EAAAA,yBAAyB,CAAC,YAAM;AAC9BJ,IAAAA,GAAG,CAAHA,OAAAA,GAAc;AACZG,MAAAA,SAAS,EADG,SAAA;AAEZP,MAAAA,KAAK,EAFO,KAAA;AAGZK,MAAAA,QAAQ,EAARA;AAHY,KAAdD;AADFI,GAAyB,CAAzBA;AAOAA,EAAAA,yBAAyB,CAAC,YAAM;AAC9B,QAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,SAAA,EAAsB;AACrC,UAAI;AACF,YAAMC,SAAuE,GAAGN,GAAG,CAAnF,OAAA;;AAIA,YACEM,SAAS,CAATA,KAAAA,KAAAA,SAAAA,IACA,MAAM,CAAN,IAAA,CAAYA,SAAS,CAArB,QAAA,EAAA,KAAA,CAAsC,UAAA,GAAA,EAAA;AAAA,iBACpCJ,MAAM,CAANA,EAAAA,CAAUI,SAAS,CAATA,QAAAA,CAAVJ,GAAUI,CAAVJ,EAAmCI,SAAS,CAATA,SAAAA,CAAAA,GAAAA,EADC,SACDA,CAAnCJ,CADoC;AAFxC,SAEE,CAFF,EAKE;AACA;AACA;AACD;AAbH,OAAA,CAcE,OAAA,CAAA,EAAU,CACV;AACD;;AAEDJ,MAAAA,WAAW;AAnBb,KAAA;;AAsBA,WAAOH,SAAS,CAAhB,QAAgB,CAAhB;AAvBuB,GAAA,EAwBtB,CAxBHS,SAwBG,CAxBsB,CAAzBA;AA0BA,SAAA,QAAA;AApDK,CAAA","sourcesContent":["import * as React from 'react';\n\nimport { Context, ContextSelector, ContextValue } from './types';\nimport { useIsomorphicLayoutEffect } from './utils';\n\ntype UseSelectorsRef<\n  Value,\n  Properties extends string,\n  Selectors extends Record<Properties, ContextSelector<Value, SelectedValue>>,\n  SelectedValue extends any\n> = {\n  selectors: Selectors;\n  value: Value;\n  selected: Record<Properties, SelectedValue>;\n};\n\n/**\n * This hook returns context selected value by selectors.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referencially changed.\n */\nexport const useContextSelectors = <\n  Value,\n  Properties extends string,\n  Selectors extends Record<Properties, ContextSelector<Value, SelectedValue>>,\n  SelectedValue extends any\n>(\n  context: Context<Value>,\n  selectors: Selectors,\n): Record<Properties, SelectedValue> => {\n  const { subscribe, value } = React.useContext((context as unknown) as Context<ContextValue<Value>>);\n  const [, forceUpdate] = React.useReducer((c: number) => c + 1, 0) as [never, () => void];\n\n  const ref = React.useRef<UseSelectorsRef<Value, Properties, Selectors, SelectedValue>>();\n  const selected = {} as Record<Properties, SelectedValue>;\n\n  Object.keys(selectors).forEach((key: Properties) => {\n    selected[key] = selectors[key](value);\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    ref.current = {\n      selectors,\n      value,\n      selected,\n    };\n  });\n  useIsomorphicLayoutEffect(() => {\n    const callback = (nextState: Value) => {\n      try {\n        const reference: UseSelectorsRef<Value, Properties, Selectors, SelectedValue> = ref.current as NonNullable<\n          UseSelectorsRef<Value, Properties, Selectors, SelectedValue>\n        >;\n\n        if (\n          reference.value === nextState ||\n          Object.keys(reference.selected).every((key: Properties) =>\n            Object.is(reference.selected[key], reference.selectors[key](nextState)),\n          )\n        ) {\n          // not changed\n          return;\n        }\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n\n      forceUpdate();\n    };\n\n    return subscribe(callback);\n  }, [subscribe]);\n\n  return selected;\n};\n"]},"metadata":{},"sourceType":"module"}