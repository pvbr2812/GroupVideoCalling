{"ast":null,"code":"/**\n * Checks whether provided CSS property value is safe for being rendered by Fela engine.\n */\nvar isValidCssValue = function isValidCssValue(value) {\n  if (typeof value !== 'string') {\n    return true;\n  }\n\n  var openingBrackets = '({[';\n  var closingBrackets = ')}]';\n  var openingBracketsStack = [];\n  /**\n   * This loop logic checks whether braces sequence of input argument is valid.\n   * Essentially, it ensures that each of the '(', '{', '[' braces\n   * - is properly matched by its complementary closing character\n   * - closing brace properly corresponds to the last opened one\n   */\n\n  for (var i = 0; i < value.length; ++i) {\n    var currentCharacter = value[i];\n\n    if (openingBrackets.includes(currentCharacter)) {\n      openingBracketsStack.push(currentCharacter);\n    } else if (closingBrackets.includes(currentCharacter)) {\n      var lastOpeningBracket = openingBracketsStack.pop();\n\n      if (lastOpeningBracket && openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)) {\n        return false;\n      }\n    }\n  }\n\n  return openingBracketsStack.length === 0;\n};\n\nvar cssPropertiesToSkip = ['content', 'keyframe'];\nexport var felaSanitizeCssPlugin = function felaSanitizeCssPlugin(styles, type, renderer, props) {\n  if (!props.sanitizeCss) {\n    return styles;\n  }\n\n  var processedStyles = Array.isArray(styles) ? [] : {};\n  Object.keys(styles).forEach(function (cssPropertyNameOrIndex) {\n    var cssPropertyValue = styles[cssPropertyNameOrIndex];\n\n    if (typeof cssPropertyValue === 'object') {\n      processedStyles[cssPropertyNameOrIndex] = felaSanitizeCssPlugin(cssPropertyValue, type, renderer, props);\n      return;\n    }\n\n    var isPropertyToSkip = cssPropertiesToSkip.some(function (propToExclude) {\n      return propToExclude === cssPropertyNameOrIndex;\n    });\n\n    if (isPropertyToSkip) {\n      processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n      return;\n    }\n\n    if (isValidCssValue(cssPropertyValue)) {\n      processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\"fela-sanitize-css: An invalid value \\\"\" + cssPropertyValue + \"\\\" was passed to property \\\"\" + cssPropertyNameOrIndex + \"\\\"\");\n    }\n  });\n  return processedStyles;\n};","map":{"version":3,"sources":["felaSanitizeCssPlugin.ts"],"names":["isValidCssValue","openingBrackets","closingBrackets","openingBracketsStack","i","value","currentCharacter","lastOpeningBracket","cssPropertiesToSkip","felaSanitizeCssPlugin","props","processedStyles","Array","Object","cssPropertyValue","styles","isPropertyToSkip","propToExclude","process","console"],"mappings":"AAKA;;;AAGA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,KAAA,EAAgB;AACtC,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,WAAA,IAAA;AACD;;AAED,MAAMC,eAAe,GAArB,KAAA;AACA,MAAMC,eAAe,GAArB,KAAA;AAEA,MAAMC,oBAA8B,GAApC,EAAA;AAEA;;;;;;;AAMA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,KAAK,CAAzB,MAAA,EAAkC,EAAlC,CAAA,EAAuC;AACrC,QAAMC,gBAAgB,GAAGD,KAAK,CAA9B,CAA8B,CAA9B;;AACA,QAAIJ,eAAe,CAAfA,QAAAA,CAAJ,gBAAIA,CAAJ,EAAgD;AAC9CE,MAAAA,oBAAoB,CAApBA,IAAAA,CAAAA,gBAAAA;AADF,KAAA,MAEO,IAAID,eAAe,CAAfA,QAAAA,CAAJ,gBAAIA,CAAJ,EAAgD;AACrD,UAAMK,kBAAkB,GAAGJ,oBAAoB,CAA/C,GAA2BA,EAA3B;;AACA,UACEI,kBAAkB,IAClBN,eAAe,CAAfA,OAAAA,CAAAA,kBAAAA,MAAgDC,eAAe,CAAfA,OAAAA,CAFlD,gBAEkDA,CAFlD,EAGE;AACA,eAAA,KAAA;AACD;AACF;AACF;;AAED,SAAOC,oBAAoB,CAApBA,MAAAA,KAAP,CAAA;AA/BF,CAAA;;AAkCA,IAAMK,mBAAmB,GAAG,CAAA,SAAA,EAA5B,UAA4B,CAA5B;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA,KAAA,EAKjB;AAClB,MAAI,CAACC,KAAK,CAAV,WAAA,EAAwB;AACtB,WAAA,MAAA;AACD;;AAED,MAAMC,eAAoB,GAAGC,KAAK,CAALA,OAAAA,CAAAA,MAAAA,IAAAA,EAAAA,GAA7B,EAAA;AAEAC,EAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAA4B,UAAA,sBAAA,EAA0D;AACpF,QAAMC,gBAAgB,GAAGC,MAAM,CAA/B,sBAA+B,CAA/B;;AAEA,QAAI,OAAA,gBAAA,KAAJ,QAAA,EAA0C;AACxCJ,MAAAA,eAAe,CAAfA,sBAAe,CAAfA,GAA0CF,qBAAqB,CAAA,gBAAA,EAAA,IAAA,EAAA,QAAA,EAA/DE,KAA+D,CAA/DA;AACA;AACD;;AAED,QAAMK,gBAAgB,GAAG,mBAAmB,CAAnB,IAAA,CAAyB,UAAA,aAAA,EAAa;AAAA,aAAIC,aAAa,KAAjB,sBAAA;AAA/D,KAAyB,CAAzB;;AAEA,QAAA,gBAAA,EAAsB;AACpBN,MAAAA,eAAe,CAAfA,sBAAe,CAAfA,GAAAA,gBAAAA;AACA;AACD;;AAED,QAAIX,eAAe,CAAnB,gBAAmB,CAAnB,EAAuC;AACrCW,MAAAA,eAAe,CAAfA,sBAAe,CAAfA,GAAAA,gBAAAA;AADF,KAAA,MAEO,IAAIO,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AAChD;AACAC,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,2CAAAA,gBAAAA,GAAAA,8BAAAA,GAAAA,sBAAAA,GAAAA,IAAAA;AAGD;AAtBHN,GAAAA;AAyBA,SAAA,eAAA;AArCK,CAAA","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport { TRuleType } from 'fela-utils';\n\nimport { FelaRenderer, FelaRendererParam } from './types';\n\n/**\n * Checks whether provided CSS property value is safe for being rendered by Fela engine.\n */\nconst isValidCssValue = (value: any) => {\n  if (typeof value !== 'string') {\n    return true;\n  }\n\n  const openingBrackets = '({[';\n  const closingBrackets = ')}]';\n\n  const openingBracketsStack: string[] = [];\n\n  /**\n   * This loop logic checks whether braces sequence of input argument is valid.\n   * Essentially, it ensures that each of the '(', '{', '[' braces\n   * - is properly matched by its complementary closing character\n   * - closing brace properly corresponds to the last opened one\n   */\n  for (let i = 0; i < value.length; ++i) {\n    const currentCharacter = value[i];\n    if (openingBrackets.includes(currentCharacter)) {\n      openingBracketsStack.push(currentCharacter);\n    } else if (closingBrackets.includes(currentCharacter)) {\n      const lastOpeningBracket = openingBracketsStack.pop();\n      if (\n        lastOpeningBracket &&\n        openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return openingBracketsStack.length === 0;\n};\n\nconst cssPropertiesToSkip = ['content', 'keyframe'];\n\nexport const felaSanitizeCssPlugin = (\n  styles: ICSSInJSStyle,\n  type: TRuleType,\n  renderer: FelaRenderer,\n  props: FelaRendererParam,\n): ICSSInJSStyle => {\n  if (!props.sanitizeCss) {\n    return styles;\n  }\n\n  const processedStyles: any = Array.isArray(styles) ? [] : {};\n\n  Object.keys(styles).forEach((cssPropertyNameOrIndex: keyof ICSSInJSStyle | number) => {\n    const cssPropertyValue = styles[cssPropertyNameOrIndex];\n\n    if (typeof cssPropertyValue === 'object') {\n      processedStyles[cssPropertyNameOrIndex] = felaSanitizeCssPlugin(cssPropertyValue, type, renderer, props);\n      return;\n    }\n\n    const isPropertyToSkip = cssPropertiesToSkip.some(propToExclude => propToExclude === cssPropertyNameOrIndex);\n\n    if (isPropertyToSkip) {\n      processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n      return;\n    }\n\n    if (isValidCssValue(cssPropertyValue)) {\n      processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `fela-sanitize-css: An invalid value \"${cssPropertyValue}\" was passed to property \"${cssPropertyNameOrIndex}\"`,\n      );\n    }\n  });\n\n  return processedStyles;\n};\n"]},"metadata":{},"sourceType":"module"}