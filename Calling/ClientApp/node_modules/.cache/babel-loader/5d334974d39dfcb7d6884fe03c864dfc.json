{"ast":null,"code":"import { menuDividerBehavior } from '@fluentui/accessibility';\nimport { compose, getElementType, mergeVariablesOverrides, useFluentContext, useAccessibility, useTelemetry, useStyles, useUnhandledProps } from '@fluentui/react-bindings';\nimport { useContextSelectors } from '@fluentui/react-context-selector';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthandFactory, commonPropTypes, childrenExist, rtlTextContainer } from '../../utils';\nimport { MenuContext } from './menuContext';\nexport var menuDividerClassName = 'ui-menu__divider';\n/**\n * A MenuDivider is non-actionable element that visually segments items of Menu.\n */\n\nexport var MenuDivider = /*#__PURE__*/function () {\n  var MenuDivider = compose(function (inputProps, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var parentProps = useContextSelectors(MenuContext, {\n      variables: function variables(v) {\n        return v.variables;\n      },\n      slotProps: function slotProps(v) {\n        return v.slotProps.divider;\n      },\n      accessibility: function accessibility(v) {\n        return v.behaviors.divider;\n      }\n    }); // TODO: we should improve typings for the useContextSelectors\n\n    var props = Object.assign({}, parentProps.slotProps, {\n      accessibility: parentProps.accessibility,\n      variables: parentProps.variables\n    }, inputProps);\n    var _props$accessibility = props.accessibility,\n        accessibility = _props$accessibility === void 0 ? menuDividerBehavior : _props$accessibility,\n        children = props.children,\n        content = props.content,\n        vertical = props.vertical,\n        inSubmenu = props.inSubmenu,\n        pills = props.pills,\n        pointing = props.pointing,\n        primary = props.primary,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        secondary = props.secondary,\n        variables = props.variables;\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          hasContent: !!content || !!children,\n          pills: pills,\n          pointing: pointing,\n          vertical: vertical,\n          inSubmenu: inSubmenu,\n          primary: primary,\n          secondary: secondary\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergeVariablesOverrides(variables, parentProps.variables)\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }), unhandledProps, {\n      ref: ref\n    })), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  }, {\n    className: menuDividerClassName,\n    displayName: 'MenuDivider',\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'styles', 'variables', 'pointing', 'inSubmenu', 'primary', 'secondary', 'vertical'],\n    shorthandConfig: {\n      mappedProp: 'content'\n    }\n  });\n  MenuDivider.defaultProps = {\n    as: 'li'\n  };\n  MenuDivider.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    primary: PropTypes.bool,\n    secondary: PropTypes.bool,\n    vertical: PropTypes.bool,\n    inSubmenu: PropTypes.bool,\n    pointing: PropTypes.oneOf(['start', 'end', true, false])\n  });\n  MenuDivider.create = createShorthandFactory({\n    Component: MenuDivider,\n    mappedProp: 'content'\n  });\n  return MenuDivider;\n}();","map":{"version":3,"sources":["components/Menu/MenuDivider.tsx"],"names":["menuDividerClassName","MenuDivider","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","parentProps","useContextSelectors","variables","v","slotProps","accessibility","props","children","content","vertical","inSubmenu","pills","pointing","primary","className","design","styles","secondary","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","hasContent","mapPropsToInlineStyles","mergeVariablesOverrides","unstable_props","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","ref","childrenExist","displayName","handledProps","shorthandConfig","mappedProp","as","commonPropTypes","PropTypes","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, MenuDividerBehaviorProps, menuDividerBehavior } from '@fluentui/accessibility';\nimport {\n  compose,\n  ComponentWithAs,\n  getElementType,\n  mergeVariablesOverrides,\n  useFluentContext,\n  useAccessibility,\n  useTelemetry,\n  useStyles,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { useContextSelectors } from '@fluentui/react-context-selector';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n  childrenExist,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\nimport { MenuContext, MenuDividerSubscribedValue } from './menuContext';\n\nexport interface MenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<MenuDividerBehaviorProps>;\n\n  inSubmenu?: boolean;\n  secondary?: boolean;\n  pills?: boolean;\n  pointing?: boolean | 'start' | 'end';\n  primary?: boolean;\n  vertical?: boolean;\n}\n\nexport type MenuDividerStylesProps = Required<\n  Pick<MenuDividerProps, 'vertical' | 'inSubmenu' | 'pills' | 'primary' | 'pointing' | 'secondary'>\n> & {\n  hasContent: boolean;\n};\n\nexport const menuDividerClassName = 'ui-menu__divider';\n\n/**\n * A MenuDivider is non-actionable element that visually segments items of Menu.\n */\nexport const MenuDivider = compose<'li', MenuDividerProps, MenuDividerStylesProps, {}, {}>(\n  (inputProps, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const parentProps = (useContextSelectors(MenuContext, {\n      variables: v => v.variables,\n      slotProps: v => v.slotProps.divider,\n      accessibility: v => v.behaviors.divider,\n    }) as unknown) as MenuDividerSubscribedValue; // TODO: we should improve typings for the useContextSelectors\n\n    const props = {\n      ...parentProps.slotProps,\n      accessibility: parentProps.accessibility,\n      variables: parentProps.variables,\n      ...inputProps,\n    };\n\n    const {\n      accessibility = menuDividerBehavior,\n      children,\n      content,\n      vertical,\n      inSubmenu,\n      pills,\n      pointing,\n      primary,\n      className,\n      design,\n      styles,\n      secondary,\n      variables,\n    } = props;\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n\n    const { classes } = useStyles<MenuDividerStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToStyles: () => ({\n        hasContent: !!content || !!children,\n        pills,\n        pointing,\n        vertical,\n        inSubmenu,\n        primary,\n        secondary,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(variables, parentProps.variables),\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n          ...unhandledProps,\n          ref,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: menuDividerClassName,\n    displayName: 'MenuDivider',\n\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'styles',\n      'variables',\n\n      'pointing',\n      'inSubmenu',\n      'primary',\n      'secondary',\n      'vertical',\n    ],\n    shorthandConfig: { mappedProp: 'content' },\n  },\n) as ComponentWithAs<'li', MenuDividerProps> & {\n  create: ShorthandFactory<MenuDividerProps>;\n};\n\nMenuDivider.defaultProps = {\n  as: 'li',\n};\n\nMenuDivider.propTypes = {\n  ...commonPropTypes.createCommon(),\n  primary: PropTypes.bool,\n  secondary: PropTypes.bool,\n  vertical: PropTypes.bool,\n  inSubmenu: PropTypes.bool,\n  pointing: PropTypes.oneOf(['start', 'end', true, false]),\n};\n\nMenuDivider.create = createShorthandFactory({ Component: MenuDivider, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}