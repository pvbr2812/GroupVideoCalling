{"ast":null,"code":"import { useTelemetry, useAccessibility, getElementType, useFluentContext, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, createShorthand } from '../../utils';\nimport { DividerContent } from './DividerContent';\nexport var dividerClassName = 'ui-divider';\n/**\n * A Divider visually segments content.\n */\n\nexport var Divider = /*#__PURE__*/function () {\n  var Divider = function Divider(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Divider.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        color = props.color,\n        fitted = props.fitted,\n        size = props.size,\n        important = props.important,\n        vertical = props.vertical,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        accessibility = props.accessibility;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Divider.handledProps, props);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Divider.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Divider.displayName, {\n      className: dividerClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          hasContent: childrenExist(children) || !!props.content,\n          color: color,\n          fitted: fitted,\n          size: size,\n          important: important,\n          vertical: vertical\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var content = createShorthand(DividerContent, props.content, {});\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  };\n\n  Divider.displayName = 'Divider';\n  Divider.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    color: true\n  }), {\n    fitted: PropTypes.bool,\n    size: PropTypes.number,\n    important: PropTypes.bool,\n    vertical: PropTypes.bool\n  });\n  Divider.defaultProps = {\n    size: 0\n  };\n  Divider.Content = DividerContent;\n  Divider.handledProps = Object.keys(Divider.propTypes);\n  Divider.create = createShorthandFactory({\n    Component: Divider,\n    mappedProp: 'content'\n  });\n  return Divider;\n}();","map":{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["dividerClassName","Divider","context","useFluentContext","setStart","setEnd","useTelemetry","children","color","fitted","size","important","vertical","className","design","styles","variables","accessibility","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","hasContent","childrenExist","mapPropsToInlineStyles","content","createShorthand","element","root","forElements","PropTypes","bool","Object","createShorthandFactory","Component","mappedProp"],"mappings":"AACA,SAAA,YAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,SAAA,QAAA,0BAAA;AASA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,SAAA,aAAA,EAAA,sBAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,eAAA,QAAA,aAAA;AAaA,SAAA,cAAA,QAAA,kBAAA;AA+BA,OAAO,IAAMA,gBAAgB,GAAtB,YAAA;AAEP;;;;AAGA,OAAO,IAAMC,OAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,OAGV,GAAG,SAHOA,OAGP,CAAA,KAAA,EAAS;AACb,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AADa,QAAA,aAAA,GAEgBG,YAAY,CAACL,OAAO,CAAR,WAAA,EAAsBC,OAAO,CAFzD,SAE4B,CAF5B;AAAA,QAELE,QAFK,GAAA,aAAA,CAAA,QAAA;AAAA,QAEKC,MAFL,GAAA,aAAA,CAAA,MAAA;;AAGbD,IAAAA,QAAQ;AAHK,QAKXG,QALW,GAgBTW,KAhBS,CAAA,QAAA;AAAA,QAMXV,KANW,GAgBTU,KAhBS,CAAA,KAAA;AAAA,QAOXT,MAPW,GAgBTS,KAhBS,CAAA,MAAA;AAAA,QAQXR,IARW,GAgBTQ,KAhBS,CAAA,IAAA;AAAA,QASXP,SATW,GAgBTO,KAhBS,CAAA,SAAA;AAAA,QAUXN,QAVW,GAgBTM,KAhBS,CAAA,QAAA;AAAA,QAWXL,SAXW,GAgBTK,KAhBS,CAAA,SAAA;AAAA,QAYXJ,MAZW,GAgBTI,KAhBS,CAAA,MAAA;AAAA,QAaXH,MAbW,GAgBTG,KAhBS,CAAA,MAAA;AAAA,QAcXF,SAdW,GAgBTE,KAhBS,CAAA,SAAA;AAAA,QAeXD,aAfW,GAgBTC,KAhBS,CAAA,aAAA;AAiBb,QAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAACrB,OAAO,CAAR,YAAA,EAAxC,KAAwC,CAAxC;AACA,QAAMsB,YAAY,GAAGC,gBAAgB,CAAA,aAAA,EAAuB;AAC1DC,MAAAA,SAAS,EAAExB,OAAO,CADwC,WAAA;AAE1DyB,MAAAA,GAAG,EAAExB,OAAO,CAACwB;AAF6C,KAAvB,CAArC;;AAnBa,QAAA,UAAA,GAuBOE,SAAS,CAAqB3B,OAAO,CAA5B,WAAA,EAA0C;AACrEY,MAAAA,SAAS,EAD4D,gBAAA;AAErEgB,MAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,eAAO;AACvBC,UAAAA,UAAU,EAAEC,aAAa,CAAbA,QAAa,CAAbA,IAA2B,CAAC,CAACb,KAAK,CADvB,OAAA;AAEvBV,UAAAA,KAAK,EAFkB,KAAA;AAGvBC,UAAAA,MAAM,EAHiB,MAAA;AAIvBC,UAAAA,IAAI,EAJmB,IAAA;AAKvBC,UAAAA,SAAS,EALc,SAAA;AAMvBC,UAAAA,QAAQ,EAARA;AANuB,SAAP;AAFmD,OAAA;AAUrEoB,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7BnB,UAAAA,SAAS,EADoB,SAAA;AAE7BC,UAAAA,MAAM,EAFuB,MAAA;AAG7BC,UAAAA,MAAM,EAHuB,MAAA;AAI7BC,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAV6C,OAAA;AAgBrEU,MAAAA,GAAG,EAAExB,OAAO,CAACwB;AAhBwD,KAA1C,CAvBhB;AAAA,QAuBLC,OAvBK,GAAA,UAAA,CAAA,OAAA;;AA0Cb,QAAMM,OAAO,GAAGC,eAAe,CAAA,cAAA,EAAiBhB,KAAK,CAAtB,OAAA,EAA/B,EAA+B,CAA/B;AAEA,QAAMiB,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,WAAA,EACMZ,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdV,MAAAA,SAAS,EAAEc,OAAO,CAACS;AADL,KAAA,EAEX,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,MAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,KAA/B,CAFW,EADlB,cACkB,CAAA,CADlB,EAOGN,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GARL,OACE,CADF;AAWA1B,IAAAA,MAAM;AACN,WAAA,OAAA;AA3DK,GAAA;;AA8DPJ,EAAAA,OAAO,CAAPA,WAAAA,GAAAA,SAAAA;AAEAA,EAAAA,OAAO,CAAPA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAAEO,IAAAA,KAAK,EAAE;AAAT,GAA7B,CADLP,EAAAA;AAEEQ,IAAAA,MAAM,EAAE6B,SAAS,CAFnBrC,IAAAA;AAGES,IAAAA,IAAI,EAAE4B,SAAS,CAHjBrC,MAAAA;AAIEU,IAAAA,SAAS,EAAE2B,SAAS,CAJtBrC,IAAAA;AAKEW,IAAAA,QAAQ,EAAE0B,SAAS,CAACC;AALtBtC,GAAAA,CAAAA;AAQAA,EAAAA,OAAO,CAAPA,YAAAA,GAAuB;AACrBS,IAAAA,IAAI,EAAE;AADe,GAAvBT;AAIAA,EAAAA,OAAO,CAAPA,OAAAA,GAAAA,cAAAA;AAEAA,EAAAA,OAAO,CAAPA,YAAAA,GAAuBuC,MAAM,CAANA,IAAAA,CAAYvC,OAAO,CAA1CA,SAAuBuC,CAAvBvC;AAEAA,EAAAA,OAAO,CAAPA,MAAAA,GAAiBwC,sBAAsB,CAAC;AAAEC,IAAAA,SAAS,EAAX,OAAA;AAAsBC,IAAAA,UAAU,EAAE;AAAlC,GAAD,CAAvC1C;AAhFO,SAAA,OAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  useTelemetry,\n  useAccessibility,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n} from '../../utils';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { DividerContent } from './DividerContent';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nexport type DividerStylesProps = Required<\n  Pick<DividerProps, 'color' | 'fitted' | 'size' | 'important' | 'vertical'> & {\n    hasContent: boolean;\n  }\n>;\n\nexport const dividerClassName = 'ui-divider';\n\n/**\n * A Divider visually segments content.\n */\nexport const Divider: ComponentWithAs<'div', DividerProps> &\n  FluentComponentStaticProps<DividerProps> & {\n    Content: typeof DividerContent;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Divider.displayName, context.telemetry);\n  setStart();\n  const {\n    children,\n    color,\n    fitted,\n    size,\n    important,\n    vertical,\n    className,\n    design,\n    styles,\n    variables,\n    accessibility,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Divider.handledProps, props);\n  const getA11yProps = useAccessibility<never>(accessibility, {\n    debugName: Divider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<DividerStylesProps>(Divider.displayName, {\n    className: dividerClassName,\n    mapPropsToStyles: () => ({\n      hasContent: childrenExist(children) || !!props.content,\n      color,\n      fitted,\n      size,\n      important,\n      vertical,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const content = createShorthand(DividerContent, props.content, {});\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nDivider.displayName = 'Divider';\n\nDivider.propTypes = {\n  ...commonPropTypes.createCommon({ color: true }),\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool,\n};\n\nDivider.defaultProps = {\n  size: 0,\n};\n\nDivider.Content = DividerContent;\n\nDivider.handledProps = Object.keys(Divider.propTypes) as any;\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}