{"ast":null,"code":"import { keyboardKey } from '@fluentui/keyboard-key';\n/**\n * @description\n * Implements ARIA Tooltip design pattern.\n *\n * @specification\n * Adds attribute 'role=tooltip' to 'tooltip' slot.\n * Adds attribute 'aria-hidden=false' to 'tooltip' slot if 'open' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-describedby' based on the property 'contentId' to 'trigger' slot. This can be overriden by providing 'aria-describedby' property directly to the component.\n * Triggers 'close' action with 'Escape' on 'trigger'.\n */\n\nexport var tooltipAsDescriptionBehavior = function tooltipAsDescriptionBehavior(props) {\n  var defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n  return {\n    attributes: {\n      trigger: {\n        'aria-describedby': defaultAriaDescribedBy || props['aria-describedby']\n      },\n      tooltip: {\n        role: 'tooltip',\n        id: defaultAriaDescribedBy,\n        'aria-hidden': !props.open\n      }\n    },\n    keyActions: {\n      trigger: {\n        close: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Escape\n          }]\n        }\n      }\n    }\n  };\n};\n/**\n * Returns the element id of the tooltip, it is used when user does not provide aria-describedby as props.\n */\n\nvar getDefaultAriaDescribedBy = function getDefaultAriaDescribedBy(props) {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n\n  return props.contentId;\n};","map":{"version":3,"sources":["behaviors/Tooltip/tooltipAsDescriptionBehavior.ts"],"names":["tooltipAsDescriptionBehavior","defaultAriaDescribedBy","getDefaultAriaDescribedBy","attributes","trigger","props","tooltip","role","id","open","keyActions","close","keyCombinations","keyCode","keyboardKey","Escape"],"mappings":"AAAA,SAAA,WAAA,QAAA,wBAAA;AAGA;;;;;;;;;;;AAUA,OAAO,IAAMA,4BAAiE,GAAG,SAApEA,4BAAoE,CAAA,KAAA,EAAS;AACxF,MAAMC,sBAAsB,GAAGC,yBAAyB,CAAxD,KAAwD,CAAxD;AAEA,SAAO;AACLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACP,4BAAoBH,sBAAsB,IAAII,KAAK,CAAA,kBAAA;AAD5C,OADC;AAIVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EADG,SAAA;AAEPC,QAAAA,EAAE,EAFK,sBAAA;AAGP,uBAAe,CAACH,KAAK,CAACI;AAHf;AAJC,KADP;AAWLC,IAAAA,UAAU,EAAE;AACVN,MAAAA,OAAO,EAAE;AACPO,QAAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD;AADZ;AADA;AADC;AAXP,GAAP;AAHK,CAAA;AAwBP;;;;AAGA,IAAMb,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,KAAA,EAAiC;AACjE,MAAIG,KAAK,CAAT,kBAAS,CAAT,EAA+B;AAC7B,WAAA,SAAA;AACD;;AACD,SAAOA,KAAK,CAAZ,SAAA;AAJF,CAAA","sourcesContent":["import { keyboardKey } from '@fluentui/keyboard-key';\nimport { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @description\n * Implements ARIA Tooltip design pattern.\n *\n * @specification\n * Adds attribute 'role=tooltip' to 'tooltip' slot.\n * Adds attribute 'aria-hidden=false' to 'tooltip' slot if 'open' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-describedby' based on the property 'contentId' to 'trigger' slot. This can be overriden by providing 'aria-describedby' property directly to the component.\n * Triggers 'close' action with 'Escape' on 'trigger'.\n */\nexport const tooltipAsDescriptionBehavior: Accessibility<TooltipBehaviorProps> = props => {\n  const defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n\n  return {\n    attributes: {\n      trigger: {\n        'aria-describedby': defaultAriaDescribedBy || props['aria-describedby'],\n      },\n      tooltip: {\n        role: 'tooltip',\n        id: defaultAriaDescribedBy,\n        'aria-hidden': !props.open,\n      },\n    },\n    keyActions: {\n      trigger: {\n        close: {\n          keyCombinations: [{ keyCode: keyboardKey.Escape }],\n        },\n      },\n    },\n  };\n};\n\n/**\n * Returns the element id of the tooltip, it is used when user does not provide aria-describedby as props.\n */\nconst getDefaultAriaDescribedBy = (props: TooltipBehaviorProps) => {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n  return props.contentId;\n};\n\nexport type TooltipBehaviorProps = {\n  /** If tooltip is visible. */\n  open: boolean;\n  /** Tooltip's container id. */\n  contentId: string;\n  /** aria-label from trigger shorthand. */\n  triggerAriaLabel: string;\n} & Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"]},"metadata":{},"sourceType":"module"}