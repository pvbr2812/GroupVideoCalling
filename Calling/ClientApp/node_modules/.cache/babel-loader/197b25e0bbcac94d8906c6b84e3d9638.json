{"ast":null,"code":"import { imageBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nexport var imageClassName = 'ui-image';\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\n\nexport var Image = /*#__PURE__*/function () {\n  var Image = function Image(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Image.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        alt = props.alt,\n        ariaLabel = props['aria-label'],\n        avatar = props.avatar,\n        circular = props.circular,\n        className = props.className,\n        design = props.design,\n        fluid = props.fluid,\n        styles = props.styles,\n        variables = props.variables;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: Image.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          alt: alt,\n          'aria-label': ariaLabel\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Image.displayName, {\n      className: imageClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          avatar: avatar,\n          circular: circular,\n          fluid: fluid\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Image.handledProps, props);\n    var result = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)));\n    setEnd();\n    return result;\n  };\n\n  Image.displayName = 'Image';\n  Image.defaultProps = {\n    as: 'img',\n    accessibility: imageBehavior\n  };\n  Image.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: false\n  }), {\n    avatar: PropTypes.bool,\n    circular: PropTypes.bool,\n    fluid: PropTypes.bool\n  });\n  Image.handledProps = Object.keys(Image.propTypes);\n  Image.create = createShorthandFactory({\n    Component: Image,\n    mappedProp: 'src',\n    allowsJSX: false\n  });\n  return Image;\n}();","map":{"version":3,"sources":["components/Image/Image.tsx"],"names":["imageClassName","Image","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","alt","ariaLabel","avatar","circular","className","design","fluid","styles","variables","props","getA11Props","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","result","root","as","imageBehavior","children","content","PropTypes","bool","Object","createShorthandFactory","Component","mappedProp","allowsJSX"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributes, imageBehavior, ImageBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\n\nexport interface ImageProps extends UIComponentProps, ImageBehaviorProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ImageBehaviorProps>;\n\n  /** An image may be formatted to appear inline with text as an avatar. */\n  avatar?: boolean;\n\n  /** An image can appear circular. */\n  circular?: boolean;\n\n  /** An image can take up the width of its container. */\n  fluid?: boolean;\n\n  /** Image source URL. */\n  src?: string;\n}\n\nexport type ImageStylesProps = Pick<ImageProps, 'avatar' | 'circular' | 'fluid'>;\nexport const imageClassName = 'ui-image';\n\n/**\n * An Image is a graphic representation of something.\n *\n * @accessibility\n * If image should be visible to screen readers, textual representation needs to be provided in 'alt' property.\n *\n * Other considerations:\n *  - when alt property is empty, then Narrator in scan mode navigates to image and narrates it as empty paragraph.\n *  - when image has role='presentation' then screen readers navigate to the element in scan/virtual mode. To avoid this, the attribute \"aria-hidden='true'\" is applied by the default image behavior.\n *  - when alt property is used in combination with aria-label, arialabbeledby or title, additional screen readers verification is needed as each screen reader handles this combination differently.\n */\nexport const Image: ComponentWithAs<'img', ImageProps> & FluentComponentStaticProps<ImageProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Image.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    alt,\n    'aria-label': ariaLabel,\n    avatar,\n    circular,\n    className,\n    design,\n    fluid,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Image.displayName,\n    mapPropsToBehavior: () => ({\n      alt,\n      'aria-label': ariaLabel,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ImageStylesProps>(Image.displayName, {\n    className: imageClassName,\n    mapPropsToStyles: () => ({\n      avatar,\n      circular,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Image.handledProps, props);\n\n  const result = <ElementType {...getA11Props('root', { className: classes.root, ...unhandledProps })} />;\n\n  setEnd();\n\n  return result;\n};\n\nImage.displayName = 'Image';\nImage.defaultProps = {\n  as: 'img',\n  accessibility: imageBehavior,\n};\n\nImage.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  avatar: PropTypes.bool,\n  circular: PropTypes.bool,\n  fluid: PropTypes.bool,\n};\n\nImage.handledProps = Object.keys(Image.propTypes) as any;\n\nImage.create = createShorthandFactory({ Component: Image, mappedProp: 'src', allowsJSX: false });\n"]},"metadata":{},"sourceType":"module"}