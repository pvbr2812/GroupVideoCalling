{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _keys from \"lodash/keys\";\nimport { Ref } from '@fluentui/react-component-ref';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { getElementType } from '../utils/getElementType';\nimport { getUnhandledProps } from '../utils/getUnhandledProps';\nimport { getNextElement, focusAsync } from './focusUtilities';\n/** AutoFocusZone is used to focus inner element on mount. */\n\nexport var AutoFocusZone = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(AutoFocusZone, _React$Component);\n\n  function AutoFocusZone() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.root = /*#__PURE__*/React.createRef();\n\n    _this.findElementAndFocusAsync = function () {\n      if (!_this.root.current) return;\n      var firstFocusableSelector = _this.props.firstFocusableSelector;\n      var focusSelector = callable(firstFocusableSelector)();\n      var firstFocusableChild = focusSelector ? _this.root.current.querySelector(focusSelector) : getNextElement(_this.root.current, _this.root.current.firstChild, true, false, false, true);\n      firstFocusableChild && focusAsync(firstFocusableChild);\n    };\n\n    return _this;\n  }\n\n  var _proto = AutoFocusZone.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.findElementAndFocusAsync();\n  };\n\n  _proto.render = function render() {\n    var unhandledProps = getUnhandledProps(AutoFocusZone.handledProps, this.props);\n    var ElementType = getElementType(this.props);\n    return /*#__PURE__*/React.createElement(Ref, {\n      innerRef: this.root\n    }, /*#__PURE__*/React.createElement(ElementType, unhandledProps, this.props.children));\n  };\n\n  return AutoFocusZone;\n}(React.Component);\nAutoFocusZone.propTypes = {\n  as: PropTypes.elementType,\n  firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n};\nAutoFocusZone.handledProps = _keys(AutoFocusZone.propTypes);","map":{"version":3,"sources":["FocusZone/AutoFocusZone.tsx"],"names":["AutoFocusZone","React","propTypes","as","PropTypes","firstFocusableSelector","handledProps","componentDidMount","render","unhandledProps","getUnhandledProps","ElementType","getElementType","root","focusSelector","callable","firstFocusableChild","getNextElement","focusAsync"],"mappings":";;AAAA,SAAA,GAAA,QAAA,+BAAA;AACA,SAAA,QAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAGA,SAAA,cAAA,QAAA,yBAAA;AACA,SAAA,iBAAA,QAAA,4BAAA;AAEA,SAAA,cAAA,EAAA,UAAA,QAAA,kBAAA;AAEA;;AACA,OAAA,IAAaA,aAAb,GAAA,aAAA,UAAA,gBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,aAAA,EAAA,gBAAA,CAAA;;AAAA,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA;;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAA,IAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAA,MAAA,IAAA,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;AAAA;;AAAA,IAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAA,CAAA,KAAA,IAAA;AAAA,IAAA,KAAA,CAAA,IAAA,GAAA,aACSC,KAAK,CADd,SACSA,EADT;;AAAA,IAAA,KAAA,CAAA,wBAAA,GAyB6B,YAAM;AAC/B,UAAI,CAAC,KAAA,CAAA,IAAA,CAAL,OAAA,EAAwB;AADO,UAEvBI,sBAFuB,GAEI,KAAA,CAFJ,KAEI,CAFJ,sBAAA;AAI/B,UAAMS,aAAa,GAAGC,QAAQ,CAA9B,sBAA8B,CAARA,EAAtB;AAEA,UAAMC,mBAAmB,GAAGF,aAAa,GACpC,KAAA,CAAA,IAAA,CAAA,OAAA,CAAA,aAAA,CADoC,aACpC,CADoC,GAErCG,cAAc,CAAC,KAAA,CAAA,IAAA,CAAD,OAAA,EAAoB,KAAA,CAAA,IAAA,CAAA,OAAA,CAApB,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAFlB,IAEkB,CAFlB;AAIAD,MAAAA,mBAAmB,IAAIE,UAAU,CAAjCF,mBAAiC,CAAjCA;AAnCJ,KAAA;;AAAA,WAAA,KAAA;AAAA;;AAAA,MAAA,MAAA,GAAA,aAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,iBAAA,GAUET,SAAAA,iBAAAA,GAA0B;AACxB,SAAA,wBAAA;AAXJ,GAAA;;AAAA,EAAA,MAAA,CAAA,MAAA,GAcEC,SAAAA,MAAAA,GAAsB;AACpB,QAAMC,cAAc,GAAGC,iBAAiB,CAACV,aAAa,CAAd,YAAA,EAA6B,KAArE,KAAwC,CAAxC;AACA,QAAMW,WAAW,GAAGC,cAAc,CAAC,KAAnC,KAAkC,CAAlC;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,MAAA,QAAQ,EAAE,KAAKC;AAApB,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,cAAA,EAAkC,KAAA,KAAA,CAFtC,QAEI,CADF,CADF;AAlBJ,GAAA;;AAAA,SAAA,aAAA;AAAA,CAAA,CAAmCZ,KAAK,CAAxC,SAAA,CAAA;AAAaD,a,CAGJE,SAHIF,GAGQ;AACjBG,EAAAA,EAAE,EAAEC,SAAS,CADI,WAAA;AAEjBC,EAAAA,sBAAsB,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAA9CA,MAAoB,CAApBA;AAFP,CAHRJ;AAAAA,a,CAQJM,YARIN,GAQW,KAAA,CAAOA,aAAa,CAApB,SAAA,CARXA","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport { callable } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport { getElementType } from '../utils/getElementType';\nimport { getUnhandledProps } from '../utils/getUnhandledProps';\nimport { AutoFocusZoneProps } from './AutoFocusZone.types';\nimport { getNextElement, focusAsync } from './focusUtilities';\n\n/** AutoFocusZone is used to focus inner element on mount. */\nexport class AutoFocusZone extends React.Component<AutoFocusZoneProps> {\n  root = React.createRef<HTMLElement>();\n\n  static propTypes = {\n    as: PropTypes.elementType,\n    firstFocusableSelector: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  };\n\n  static handledProps = _.keys(AutoFocusZone.propTypes) as any;\n\n  componentDidMount(): void {\n    this.findElementAndFocusAsync();\n  }\n\n  render(): JSX.Element {\n    const unhandledProps = getUnhandledProps(AutoFocusZone.handledProps, this.props);\n    const ElementType = getElementType(this.props);\n\n    return (\n      <Ref innerRef={this.root}>\n        <ElementType {...unhandledProps}>{this.props.children}</ElementType>\n      </Ref>\n    );\n  }\n\n  findElementAndFocusAsync = () => {\n    if (!this.root.current) return;\n    const { firstFocusableSelector } = this.props;\n\n    const focusSelector = callable(firstFocusableSelector)();\n\n    const firstFocusableChild = focusSelector\n      ? (this.root.current.querySelector(focusSelector) as HTMLElement)\n      : getNextElement(this.root.current, this.root.current.firstChild as HTMLElement, true, false, false, true);\n\n    firstFocusableChild && focusAsync(firstFocusableChild);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}