{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { isBrowser } from '../../utils';\nimport { isDebugEnabled } from '@fluentui/styles';\nimport { DebugPanel } from './DebugPanel';\nimport { FiberNavigator } from './FiberNavigator';\nimport { DebugRect } from './DebugRect';\n/* eslint-disable no-console */\n\nvar INITIAL_STATE = {\n  fiberNav: null,\n  selectedFiberNav: null,\n  isSelecting: false\n};\nexport var Debug = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Debug, _React$Component);\n\n  function Debug(p, s) {\n    var _this;\n\n    _this = _React$Component.call(this, p, s) || this;\n    _this.state = INITIAL_STATE;\n\n    _this.debugReactComponent = function (r) {\n      if (!r) {\n        console.error(\"No React component selected. Please select a Fluent UI component from the React's Component panel.\");\n        return;\n      }\n\n      if (!r._reactInternalFiber) {\n        console.error('React does not provide data for debugging for this component. Try selecting some Fluent UI component.');\n        return;\n      }\n\n      if (!r.fluentUIDebug) {\n        console.error('Not a debuggable component. Try selecting some Fluent UI component.');\n        return;\n      }\n\n      var fiberNav = FiberNavigator.fromFiber(r._reactInternalFiber);\n\n      _this.setState({\n        fiberNav: fiberNav,\n        isSelecting: false,\n        selectedFiberNav: null\n      });\n    };\n\n    _this.debugDOMNode = function (domNode) {\n      var fiberNav = FiberNavigator.fromDOMNode(domNode);\n\n      if (!fiberNav) {\n        console.error('No fiber for dom node', domNode);\n        return;\n      }\n\n      fiberNav = fiberNav.findOwner(function (fiber) {\n        return fiber.fluentUIDebug;\n      });\n\n      if (fiberNav !== _this.state.fiberNav) {\n        _this.setState({\n          fiberNav: fiberNav\n        });\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var code = getCode(e);\n\n      switch (code) {\n        case keyboardKey.Escape:\n          _this.stopSelecting();\n\n          break;\n\n        case keyboardKey.d:\n          if (e.altKey && e.shiftKey) {\n            _this.startSelecting();\n          }\n\n          break;\n      }\n    };\n\n    _this.handleMouseMove = function (e) {\n      _this.debugDOMNode(e.target);\n    };\n\n    _this.handleDOMNodeClick = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.setState({\n        isSelecting: false\n      });\n    };\n\n    _this.startSelecting = function () {\n      var isSelecting = !_this.state.isSelecting;\n\n      _this.setState(Object.assign({}, !isSelecting && INITIAL_STATE, {\n        isSelecting: isSelecting\n      }));\n    };\n\n    _this.stopSelecting = function () {\n      _this.setState(INITIAL_STATE);\n    };\n\n    _this.selectFiber = function (selectedFiberNav) {\n      return _this.setState({\n        selectedFiberNav: selectedFiberNav\n      });\n    };\n\n    _this.changeFiber = function (fiberNav) {\n      return _this.setState({\n        fiberNav: fiberNav\n      });\n    };\n\n    _this.positionRight = function () {\n      return _this.setState({\n        debugPanelPosition: 'right'\n      });\n    };\n\n    _this.positionLeft = function () {\n      return _this.setState({\n        debugPanelPosition: 'left'\n      });\n    };\n\n    _this.close = function () {\n      return _this.setState(INITIAL_STATE);\n    };\n\n    if (process.env.NODE_ENV !== 'production' && isDebugEnabled && isBrowser()) {\n      // eslint-disable-next-line no-undef\n      window.openDebugPanel = function () {\n        // eslint-disable-next-line no-undef\n        _this.debugReactComponent(window.$r);\n      };\n    }\n\n    return _this;\n  }\n\n  var _proto = Debug.prototype;\n\n  _proto.render = function render() {\n    var mountDocument = this.props.mountDocument;\n    var _this$state = this.state,\n        fiberNav = _this$state.fiberNav,\n        selectedFiberNav = _this$state.selectedFiberNav,\n        isSelecting = _this$state.isSelecting,\n        debugPanelPosition = _this$state.debugPanelPosition;\n\n    if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EventListener, {\n        listener: this.handleKeyDown,\n        target: mountDocument.body,\n        type: \"keydown\"\n      }), isSelecting && /*#__PURE__*/React.createElement(EventListener, {\n        listener: this.handleMouseMove,\n        target: mountDocument.body,\n        type: \"mousemove\"\n      }), isSelecting && fiberNav && fiberNav.domNode && /*#__PURE__*/React.createElement(EventListener, {\n        listener: this.handleDOMNodeClick,\n        target: fiberNav.domNode,\n        type: \"click\"\n      }), isSelecting && fiberNav && /*#__PURE__*/React.createElement(DebugRect, {\n        fiberNav: fiberNav\n      }), selectedFiberNav && /*#__PURE__*/React.createElement(DebugRect, {\n        fiberNav: selectedFiberNav\n      }), !isSelecting && fiberNav && fiberNav.instance && /*#__PURE__*/React.createElement(DebugPanel, {\n        fiberNav: fiberNav,\n        onActivateDebugSelectorClick: this.startSelecting,\n        onClose: this.close // TODO: Integrate CSS in JS Styles for Host Components (DOM nodes)\n        // cssStyles={stylesForNode(domNode)}\n        ,\n        debugData: fiberNav.fluentUIDebug,\n        position: debugPanelPosition || 'right',\n        onPositionLeft: this.positionLeft,\n        onPositionRight: this.positionRight,\n        onFiberChanged: this.changeFiber,\n        onFiberSelected: this.selectFiber\n      }));\n    }\n\n    return null;\n  };\n\n  return Debug;\n}(React.Component);\nDebug.defaultProps = {\n  // eslint-disable-next-line no-undef\n  mountDocument: isBrowser() ? window.document : null\n};\nDebug.propTypes = {\n  mountDocument: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["components/Debug/Debug.tsx"],"names":["INITIAL_STATE","fiberNav","selectedFiberNav","isSelecting","Debug","React","state","defaultProps","mountDocument","isBrowser","window","propTypes","PropTypes","isRequired","process","console","r","FiberNavigator","fiber","code","getCode","keyboardKey","e","debugPanelPosition","render","selectFiber"],"mappings":"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","sourcesContent":["import { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { EventListener } from '@fluentui/react-component-event-listener';\n\nimport { isBrowser } from '../../utils';\nimport { isDebugEnabled } from '@fluentui/styles';\n\nimport { DebugPanel } from './DebugPanel';\nimport { FiberNavigator } from './FiberNavigator';\nimport { DebugRect } from './DebugRect';\n\n/* eslint-disable no-console */\n\nexport type DebugProps = {\n  /** Existing document the popup should add listeners. */\n  mountDocument?: Document;\n};\n\nexport type DebugState = {\n  debugPanelPosition?: 'left' | 'right';\n  fiberNav: FiberNavigator;\n  selectedFiberNav: FiberNavigator;\n  isSelecting: boolean;\n};\n\nconst INITIAL_STATE: DebugState = {\n  fiberNav: null,\n  selectedFiberNav: null,\n  isSelecting: false,\n};\n\nexport class Debug extends React.Component<DebugProps, DebugState> {\n  state = INITIAL_STATE;\n\n  static defaultProps = {\n    // eslint-disable-next-line no-undef\n    mountDocument: isBrowser() ? window.document : null,\n  };\n\n  static propTypes = {\n    mountDocument: PropTypes.object.isRequired,\n  };\n\n  constructor(p, s) {\n    super(p, s);\n    if (process.env.NODE_ENV !== 'production' && isDebugEnabled && isBrowser()) {\n      // eslint-disable-next-line no-undef\n      (window as any).openDebugPanel = () => {\n        // eslint-disable-next-line no-undef\n        this.debugReactComponent((window as any).$r);\n      };\n    }\n  }\n\n  debugReactComponent = r => {\n    if (!r) {\n      console.error(\n        \"No React component selected. Please select a Fluent UI component from the React's Component panel.\",\n      );\n      return;\n    }\n    if (!r._reactInternalFiber) {\n      console.error(\n        'React does not provide data for debugging for this component. Try selecting some Fluent UI component.',\n      );\n      return;\n    }\n    if (!r.fluentUIDebug) {\n      console.error('Not a debuggable component. Try selecting some Fluent UI component.');\n      return;\n    }\n\n    const fiberNav = FiberNavigator.fromFiber(r._reactInternalFiber);\n    this.setState({ fiberNav, isSelecting: false, selectedFiberNav: null });\n  };\n\n  debugDOMNode = domNode => {\n    let fiberNav = FiberNavigator.fromDOMNode(domNode);\n\n    if (!fiberNav) {\n      console.error('No fiber for dom node', domNode);\n      return;\n    }\n\n    fiberNav = fiberNav.findOwner(fiber => fiber.fluentUIDebug);\n\n    if (fiberNav !== this.state.fiberNav) {\n      this.setState({ fiberNav });\n    }\n  };\n\n  handleKeyDown = e => {\n    const code = getCode(e);\n\n    switch (code) {\n      case keyboardKey.Escape:\n        this.stopSelecting();\n        break;\n\n      case keyboardKey.d:\n        if (e.altKey && e.shiftKey) {\n          this.startSelecting();\n        }\n        break;\n    }\n  };\n\n  handleMouseMove = e => {\n    this.debugDOMNode(e.target);\n  };\n\n  handleDOMNodeClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.setState({ isSelecting: false });\n  };\n\n  startSelecting = () => {\n    const isSelecting = !this.state.isSelecting;\n\n    this.setState({\n      ...(!isSelecting && INITIAL_STATE),\n      isSelecting,\n    });\n  };\n\n  stopSelecting = () => {\n    this.setState(INITIAL_STATE);\n  };\n\n  selectFiber = selectedFiberNav => this.setState({ selectedFiberNav });\n\n  changeFiber = fiberNav => this.setState({ fiberNav });\n\n  positionRight = () => this.setState({ debugPanelPosition: 'right' });\n\n  positionLeft = () => this.setState({ debugPanelPosition: 'left' });\n\n  close = () => this.setState(INITIAL_STATE);\n\n  render() {\n    const { mountDocument } = this.props;\n    const { fiberNav, selectedFiberNav, isSelecting, debugPanelPosition } = this.state;\n\n    if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n      return (\n        <>\n          <EventListener listener={this.handleKeyDown} target={mountDocument.body} type=\"keydown\" />\n          {isSelecting && (\n            <EventListener listener={this.handleMouseMove} target={mountDocument.body} type=\"mousemove\" />\n          )}\n          {isSelecting && fiberNav && fiberNav.domNode && (\n            <EventListener listener={this.handleDOMNodeClick} target={fiberNav.domNode} type=\"click\" />\n          )}\n          {isSelecting && fiberNav && <DebugRect fiberNav={fiberNav} />}\n          {selectedFiberNav && <DebugRect fiberNav={selectedFiberNav} />}\n          {!isSelecting && fiberNav && fiberNav.instance && (\n            <DebugPanel\n              fiberNav={fiberNav}\n              onActivateDebugSelectorClick={this.startSelecting}\n              onClose={this.close}\n              // TODO: Integrate CSS in JS Styles for Host Components (DOM nodes)\n              // cssStyles={stylesForNode(domNode)}\n              debugData={fiberNav.fluentUIDebug}\n              position={debugPanelPosition || 'right'}\n              onPositionLeft={this.positionLeft}\n              onPositionRight={this.positionRight}\n              onFiberChanged={this.changeFiber}\n              onFiberSelected={this.selectFiber}\n            />\n          )}\n        </>\n      );\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}