{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter) {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\nexport function getPathStringFromParameterPath(parameterPath, mapper) {\n  var result;\n\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/operationParameter.ts"],"names":[],"mappings":"AAAA;AACA;;AAkDA;;;;AAIG;AACH,OAAM,SAAU,0BAAV,CAAqC,SAArC,EAAkE;AACtE,SAAO,8BAA8B,CAAC,SAAS,CAAC,aAAX,EAA0B,SAAS,CAAC,MAApC,CAArC;AACD;AAED,OAAM,SAAU,8BAAV,CACJ,aADI,EAEJ,MAFI,EAEU;AAEd,MAAI,MAAJ;;AACA,MAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACrC,IAAA,MAAM,GAAG,aAAT;AACD,GAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,aAAd,CAAJ,EAAkC;AACvC,IAAA,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,GAAnB,CAAT;AACD,GAFM,MAEA;AACL,IAAA,MAAM,GAAG,MAAM,CAAC,cAAhB;AACD;;AACD,SAAO,MAAP;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(\n  parameterPath: ParameterPath,\n  mapper: Mapper\n): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}