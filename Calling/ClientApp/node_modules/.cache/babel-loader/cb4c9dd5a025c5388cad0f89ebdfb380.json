{"ast":null,"code":"import { createManager } from '../createManager';\nexport var createCarouselManager = function createCarouselManager(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  return createManager(Object.assign({}, config, {\n    state: Object.assign({\n      activeIndex: 0,\n      prevActiveIndex: -1,\n      ariaLiveOn: false,\n      shouldFocusContainer: false,\n      isFromKeyboard: false\n    }, config.state),\n    actions: Object.assign({\n      setIndexes: function setIndexes(activeIndex, prevActiveIndex) {\n        return function () {\n          return {\n            activeIndex: activeIndex,\n            prevActiveIndex: prevActiveIndex\n          };\n        };\n      },\n      setAriaLiveOn: function setAriaLiveOn(ariaLiveOn) {\n        return function () {\n          return {\n            ariaLiveOn: ariaLiveOn\n          };\n        };\n      },\n      setShouldFocusContainer: function setShouldFocusContainer(shouldFocusContainer) {\n        return function () {\n          return {\n            shouldFocusContainer: shouldFocusContainer\n          };\n        };\n      },\n      setIsFromKeyboard: function setIsFromKeyboard(isFromKeyboard) {\n        return function () {\n          return {\n            isFromKeyboard: isFromKeyboard\n          };\n        };\n      }\n    }, config.actions)\n  }));\n};","map":{"version":3,"sources":["managers/carouselManager.ts"],"names":["createCarouselManager","config","createManager","state","activeIndex","prevActiveIndex","ariaLiveOn","shouldFocusContainer","isFromKeyboard","actions","setIndexes","setAriaLiveOn","setShouldFocusContainer","setIsFromKeyboard"],"mappings":"AAAA,SAAA,aAAA,QAAA,kBAAA;AAoBA,OAAO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,MAAA,EAAA;AAAA,MACnCC,MADmC,KAAA,KAAA,CAAA,EAAA;AACnCA,IAAAA,MADmC,GAAA,EACnCA;AADmC;;AAAA,SAGnCC,aAAa,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,MAAA,EAAA;AAEXC,IAAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA;AACHC,MAAAA,WAAW,EADR,CAAA;AAEHC,MAAAA,eAAe,EAAE,CAFd,CAAA;AAGHC,MAAAA,UAAU,EAHP,KAAA;AAIHC,MAAAA,oBAAoB,EAJjB,KAAA;AAKHC,MAAAA,cAAc,EAAE;AALb,KAAA,EAMAP,MAAM,CARA,KAEN,CAFM;AAUXQ,IAAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA;AACLC,MAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,WAAA,EAAA,eAAA,EAAA;AAAA,eAAkC,YAAA;AAAA,iBAAO;AAAEN,YAAAA,WAAW,EAAb,WAAA;AAAeC,YAAAA,eAAe,EAAfA;AAAf,WAAP;AAAlC,SAAA;AADP,OAAA;AAELM,MAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,UAAA,EAAU;AAAA,eAAI,YAAA;AAAA,iBAAO;AAAEL,YAAAA,UAAU,EAAVA;AAAF,WAAP;AAAJ,SAAA;AAFpB,OAAA;AAGLM,MAAAA,uBAAuB,EAAE,SAAA,uBAAA,CAAA,oBAAA,EAAoB;AAAA,eAAI,YAAA;AAAA,iBAAO;AAAEL,YAAAA,oBAAoB,EAApBA;AAAF,WAAP;AAAJ,SAAA;AAHxC,OAAA;AAILM,MAAAA,iBAAiB,EAAE,SAAA,iBAAA,CAAA,cAAA,EAAc;AAAA,eAAI,YAAA;AAAA,iBAAO;AAAEL,YAAAA,cAAc,EAAdA;AAAF,WAAP;AAAJ,SAAA;AAAA;AAJ5B,KAAA,EAKFP,MAAM,CALJ,OAAA;AAVI,GAAA,CAAA,CAHsB;AAA9B,CAAA","sourcesContent":["import { createManager } from '../createManager';\nimport { Manager, ManagerConfig } from '../types';\n\nexport type CarouselActions = {\n  setIndexes: (activeIndex: number, prevActiveIndex: number) => void;\n  setAriaLiveOn: (ariaLiveOn: boolean) => void;\n  setShouldFocusContainer: (shouldFocusContainer: boolean) => void;\n  setIsFromKeyboard: (isFromKeyboard: boolean) => void;\n};\n\nexport type CarouselState = {\n  activeIndex: number;\n  prevActiveIndex: number;\n  ariaLiveOn: boolean;\n  shouldFocusContainer: boolean;\n  isFromKeyboard: boolean;\n};\n\nexport type CarouselManager = Manager<CarouselState, CarouselActions>;\n\nexport const createCarouselManager = (\n  config: Partial<ManagerConfig<CarouselState, CarouselActions>> = {},\n): CarouselManager =>\n  createManager<CarouselState, CarouselActions>({\n    ...config,\n    state: {\n      activeIndex: 0,\n      prevActiveIndex: -1,\n      ariaLiveOn: false,\n      shouldFocusContainer: false,\n      isFromKeyboard: false,\n      ...config.state,\n    },\n    actions: {\n      setIndexes: (activeIndex, prevActiveIndex) => () => ({ activeIndex, prevActiveIndex }),\n      setAriaLiveOn: ariaLiveOn => () => ({ ariaLiveOn }),\n      setShouldFocusContainer: shouldFocusContainer => () => ({ shouldFocusContainer }),\n      setIsFromKeyboard: isFromKeyboard => () => ({ isFromKeyboard }),\n      ...config.actions,\n    },\n  });\n"]},"metadata":{},"sourceType":"module"}