{"ast":null,"code":"import * as React from 'react';\nexport var getTelemetry = function getTelemetry(displayName, telemetry, isFirstRenderRef) {\n  var start = -1;\n  var end = -1;\n\n  var setStart = function setStart() {\n    if (telemetry == null ? void 0 : telemetry.enabled) {\n      start = performance.now();\n\n      if (!telemetry.performance[displayName]) {\n        telemetry.performance[displayName] = {\n          instances: 0,\n          renders: 0,\n          msTotal: 0,\n          msMin: Number.MAX_SAFE_INTEGER,\n          msMax: 0,\n          msResolveVariablesTotal: 0,\n          msResolveStylesTotal: 0,\n          msRenderStylesTotal: 0,\n          stylesRootCacheHits: 0,\n          stylesSlotsCacheHits: 0\n        };\n      }\n    }\n  };\n\n  var setEnd = function setEnd() {\n    if ((telemetry == null ? void 0 : telemetry.enabled) && start !== -1) {\n      end = performance.now();\n      var duration = end - start;\n      telemetry.performance[displayName].instances += Number(isFirstRenderRef.current);\n      telemetry.performance[displayName].renders++;\n      telemetry.performance[displayName].msTotal += duration;\n      telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);\n      telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);\n      isFirstRenderRef.current = false;\n    }\n  };\n\n  return {\n    setStart: setStart,\n    setEnd: setEnd\n  };\n};\nexport var useTelemetry = function useTelemetry(displayName, telemetry) {\n  var isFirstRenderRef = React.useRef(true);\n  return getTelemetry(displayName, telemetry, isFirstRenderRef);\n};","map":{"version":3,"sources":["telemetry/useTelemetry.ts"],"names":["getTelemetry","start","end","setStart","telemetry","performance","instances","renders","msTotal","msMin","Number","msMax","msResolveVariablesTotal","msResolveStylesTotal","msRenderStylesTotal","stylesRootCacheHits","stylesSlotsCacheHits","setEnd","duration","isFirstRenderRef","Math","useTelemetry","React"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,WAAA,EAAA,SAAA,EAAA,gBAAA,EAIH;AACvB,MAAIC,KAAa,GAAG,CAApB,CAAA;AACA,MAAIC,GAAW,GAAG,CAAlB,CAAA;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIC,SAAJ,IAAA,IAAIA,GAAJ,KAAA,CAAIA,GAAAA,SAAS,CAAb,OAAA,EAAwB;AACtBH,MAAAA,KAAK,GAAGI,WAAW,CAAnBJ,GAAQI,EAARJ;;AAEA,UAAI,CAACG,SAAS,CAATA,WAAAA,CAAL,WAAKA,CAAL,EAAyC;AACvCA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,IAAqC;AACnCE,UAAAA,SAAS,EAD0B,CAAA;AAEnCC,UAAAA,OAAO,EAF4B,CAAA;AAInCC,UAAAA,OAAO,EAJ4B,CAAA;AAKnCC,UAAAA,KAAK,EAAEC,MAAM,CALsB,gBAAA;AAMnCC,UAAAA,KAAK,EAN8B,CAAA;AAQnCC,UAAAA,uBAAuB,EARY,CAAA;AASnCC,UAAAA,oBAAoB,EATe,CAAA;AAUnCC,UAAAA,mBAAmB,EAVgB,CAAA;AAYnCC,UAAAA,mBAAmB,EAZgB,CAAA;AAanCC,UAAAA,oBAAoB,EAAE;AAba,SAArCZ;AAeD;AACF;AArBH,GAAA;;AAwBA,MAAMa,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAI,CAAA,SAAS,IAAT,IAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAT,OAAA,KAAsBhB,KAAK,KAAK,CAApC,CAAA,EAAwC;AACtCC,MAAAA,GAAG,GAAGG,WAAW,CAAjBH,GAAMG,EAANH;AAEA,UAAMgB,QAAQ,GAAGhB,GAAG,GAApB,KAAA;AAEAE,MAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,SAAAA,IAAgDM,MAAM,CAACS,gBAAgB,CAAvEf,OAAsD,CAAtDA;AACAA,MAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,OAAAA;AAEAA,MAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,OAAAA,IAAAA,QAAAA;AACAA,MAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,KAAAA,GAA2CgB,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAmBhB,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAA9DA,KAA2CgB,CAA3ChB;AACAA,MAAAA,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAAAA,KAAAA,GAA2CgB,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAmBhB,SAAS,CAATA,WAAAA,CAAAA,WAAAA,EAA9DA,KAA2CgB,CAA3ChB;AAEAe,MAAAA,gBAAgB,CAAhBA,OAAAA,GAAAA,KAAAA;AACD;AAdH,GAAA;;AAiBA,SAAO;AAAEhB,IAAAA,QAAQ,EAAV,QAAA;AAAYc,IAAAA,MAAM,EAANA;AAAZ,GAAP;AAjDK,CAAA;AAoDP,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAAA,WAAA,EAAA,SAAA,EAA+E;AACzG,MAAMF,gBAAgB,GAAGG,KAAK,CAALA,MAAAA,CAAzB,IAAyBA,CAAzB;AAEA,SAAOtB,YAAY,CAAA,WAAA,EAAA,SAAA,EAAnB,gBAAmB,CAAnB;AAHK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Telemetry, UseTelemetryResult } from './types';\n\nexport const getTelemetry = (\n  displayName: string,\n  telemetry: Telemetry | undefined,\n  isFirstRenderRef: React.MutableRefObject<boolean>,\n): UseTelemetryResult => {\n  let start: number = -1;\n  let end: number = -1;\n\n  const setStart = () => {\n    if (telemetry?.enabled) {\n      start = performance.now();\n\n      if (!telemetry.performance[displayName]) {\n        telemetry.performance[displayName] = {\n          instances: 0,\n          renders: 0,\n\n          msTotal: 0,\n          msMin: Number.MAX_SAFE_INTEGER,\n          msMax: 0,\n\n          msResolveVariablesTotal: 0,\n          msResolveStylesTotal: 0,\n          msRenderStylesTotal: 0,\n\n          stylesRootCacheHits: 0,\n          stylesSlotsCacheHits: 0,\n        };\n      }\n    }\n  };\n\n  const setEnd = () => {\n    if (telemetry?.enabled && start !== -1) {\n      end = performance.now();\n\n      const duration = end - start;\n\n      telemetry.performance[displayName].instances += Number(isFirstRenderRef.current);\n      telemetry.performance[displayName].renders++;\n\n      telemetry.performance[displayName].msTotal += duration;\n      telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);\n      telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);\n\n      isFirstRenderRef.current = false;\n    }\n  };\n\n  return { setStart, setEnd };\n};\n\nexport const useTelemetry = (displayName: string, telemetry: Telemetry | undefined): UseTelemetryResult => {\n  const isFirstRenderRef = React.useRef<boolean>(true);\n\n  return getTelemetry(displayName, telemetry, isFirstRenderRef);\n};\n"]},"metadata":{},"sourceType":"module"}