{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport { TimeConstants } from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\n\nexport function addDays(date, days) {\n  var result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\n\nexport function addWeeks(date, weeks) {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\n\nexport function addMonths(date, months) {\n  var result = new Date(date.getTime());\n  var newMonth = result.getMonth() + months;\n  result.setMonth(newMonth); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\n\nexport function addYears(date, years) {\n  var result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years); // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n\n  if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n    result = addDays(result, -result.getDate());\n  }\n\n  return result;\n}\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\n\nexport function getMonthStart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\n\nexport function getMonthEnd(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\n\nexport function getYearStart(date) {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\n\nexport function getYearEnd(date) {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\n\nexport function setMonth(date, month) {\n  return addMonths(date, month - date.getMonth());\n}\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\n\nexport function compareDates(date1, date2) {\n  if (!date1 && !date2) {\n    return true;\n  }\n\n  if (!date1 || !date2) {\n    return false;\n  }\n\n  return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n}\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\n\nexport function compareDatePart(date1, date2) {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\n\nexport function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView) {\n  if (daysToSelectInDayView === void 0) {\n    daysToSelectInDayView = 1;\n  }\n\n  var datesArray = [];\n  var startDate;\n  var endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error(\"Unexpected object: \" + dateRangeType);\n  } // Populate the dates array with the dates in range\n\n\n  var nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\n\nexport function isInDateRangeArray(date, dateRange) {\n  for (var _iterator = _createForOfIteratorHelperLoose(dateRange), _step; !(_step = _iterator()).done;) {\n    var dateInRange = _step.value;\n\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\n\nexport function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {\n  var selectedYear = navigatedDate.getFullYear();\n  var selectedMonth = navigatedDate.getMonth();\n  var dayOfMonth = 1;\n  var fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  var endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  var endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n  var weeksArray = [];\n\n  for (var i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n\n  return weeksArray;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\n\nexport function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {\n  // First four-day week of the year - minumum days count\n  var fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getStartDateOfWeek(date, firstDayOfWeek) {\n  var daysOffset = firstDayOfWeek - date.getDay();\n\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\n\nexport function getEndDateOfWeek(date, firstDayOfWeek) {\n  var lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  var daysOffset = lastDayOfWeek - date.getDay();\n\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n\n  return addDays(date, daysOffset);\n}\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\n\nfunction getDatePart(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Helper function to assist in date comparisons\n */\n\n\nexport function getDatePartHashValue(date) {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\n\nfunction getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {\n  var dayOfYear = getDayOfYear(date) - 1;\n  var num = date.getDay() - dayOfYear % TimeConstants.DaysInOneWeek;\n  var lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  var daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n  var num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  var num3 = dayOfYear - num2;\n\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\n\n\nfunction getFirstDayWeekOfYear(date, firstDayOfWeek) {\n  var num = getDayOfYear(date) - 1;\n  var num2 = date.getDay() - num % TimeConstants.DaysInOneWeek;\n  var num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\n\n\nfunction adjustWeekDay(firstDayOfWeek, dateWeekDay) {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\n}\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\n\n\nfunction getDayOfYear(date) {\n  var month = date.getMonth();\n  var year = date.getFullYear();\n  var daysUntilDate = 0;\n\n  for (var i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n  return daysUntilDate;\n}\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\n\n\nfunction daysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n}","map":{"version":3,"sources":["utils/date-time-utilities/dateMath/dateMath.ts"],"names":["result","date","addDays","weeks","TimeConstants","newMonth","addMonths","month","date1","date2","getDatePartHashValue","daysToSelectInDayView","datesArray","endDate","workWeekDays","DayOfWeek","Math","DateRangeType","startDate","getDatePart","getStartDateOfWeek","nextDate","dateRangeType","compareDates","dateInRange","selectedYear","navigatedDate","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","firstDayOfWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","getWeekNumber","fourDayWeek","FirstWeekOfYear","getWeekOfYearFullDays","getFirstDayWeekOfYear","daysOffset","lastDayOfWeek","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","MonthOfYear","daysInYear","num2","num3","dateWeekDay","year","daysUntilDate","daysInMonth"],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  }\n  if (!date1 || !date2) {\n    return false;\n  }\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error(`Unexpected object: ${dateRangeType}`);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"]},"metadata":{},"sourceType":"module"}