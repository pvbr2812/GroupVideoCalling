{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { tooltipAsLabelBehavior } from '@fluentui/accessibility';\nimport { useAccessibility, useAutoControlled, useTelemetry, useFluentContext, useTriggerElement } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, isFromKeyboard, setWhatInputSource, getOrGenerateIdFromShorthand, createShorthandFactory } from '../../utils';\nimport { ALIGNMENTS, POSITIONS, Popper } from '../../utils/positioner';\nimport { PortalInner } from '../Portal/PortalInner';\nimport { TooltipContent } from './TooltipContent';\nexport var tooltipClassName = 'ui-tooltip';\n/**\n * A Tooltip displays additional non-modal information on top of its target element.\n * Tooltip doesn't receive focus and cannot contain focusable elements.\n *\n * @accessibility\n * Implements [ARIA Tooltip](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) design pattern.\n */\n\nexport var Tooltip = /*#__PURE__*/function () {\n  var Tooltip = function Tooltip(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Tooltip.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        align = props.align,\n        content = props.content,\n        flipBoundary = props.flipBoundary,\n        mountNode = props.mountNode,\n        mouseLeaveDelay = props.mouseLeaveDelay,\n        offset = props.offset,\n        overflowBoundary = props.overflowBoundary,\n        pointing = props.pointing,\n        popperRef = props.popperRef,\n        position = props.position,\n        positionFixed = props.positionFixed,\n        target = props.target,\n        trigger = props.trigger,\n        unstable_disableTether = props.unstable_disableTether,\n        unstable_pinned = props.unstable_pinned;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultOpen,\n      value: props.open,\n      initialValue: false\n    }),\n        open = _useAutoControlled[0],\n        setOpen = _useAutoControlled[1];\n\n    var triggerElement = useTriggerElement(props);\n    var contentRef = React.useRef();\n    var pointerTargetRef = React.useRef();\n    var triggerRef = React.useRef();\n    var closeTimeoutId = React.useRef(); // TODO: Consider `getOrGenerateIdFromShorthand()` as hook and make it SSR safe\n\n    var contentId = React.useRef();\n    contentId.current = getOrGenerateIdFromShorthand('tooltip-content-', content, contentId.current);\n    var getA11Props = useAccessibility(accessibility, {\n      actionHandlers: {\n        close: function close(e) {\n          setTooltipOpen(false, e);\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          'aria-describedby': props['aria-describedby'],\n          'aria-label': props['aria-label'],\n          'aria-labelledby': props['aria-labelledby'],\n          contentId: contentId.current,\n          triggerAriaLabel: trigger && trigger.props['aria-label'],\n          open: open\n        };\n      }\n    });\n\n    var getContentOverrideProps = function getContentOverrideProps(predefinedProps) {\n      return {\n        onMouseEnter: function onMouseEnter(e) {\n          setTooltipOpen(true, e);\n\n          _invoke(predefinedProps, 'onMouseEnter', e);\n        },\n        onMouseLeave: function onMouseLeave(e) {\n          setTooltipOpen(false, e);\n\n          _invoke(predefinedProps, 'onMouseLeave', e);\n        }\n      };\n    };\n\n    var renderPopperChildren = function renderPopperChildren(popperProps) {\n      var tooltipContent = TooltipContent.create(content, {\n        defaultProps: function defaultProps() {\n          return getA11Props('tooltip', {\n            open: open,\n            placement: popperProps.placement,\n            pointing: pointing,\n            pointerRef: pointerTargetRef\n          });\n        },\n        generateKey: false,\n        overrideProps: getContentOverrideProps\n      });\n      return tooltipContent ? /*#__PURE__*/React.createElement(Ref, {\n        innerRef: contentRef\n      }, tooltipContent) : null;\n    };\n\n    var shouldStayOpen = function shouldStayOpen(e) {\n      return _invoke(e, 'currentTarget.contains', e.relatedTarget) || _invoke(contentRef.current, 'contains', e.relatedTarget);\n    };\n\n    var trySetOpen = function trySetOpen(newValue, e) {\n      setOpen(newValue);\n\n      _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n        open: newValue\n      }));\n    };\n\n    var setTooltipOpen = function setTooltipOpen(newOpen, e) {\n      clearTimeout(closeTimeoutId.current);\n\n      if (newOpen) {\n        trySetOpen(true, e);\n      } else {\n        closeTimeoutId.current = context.target.defaultView.setTimeout(function () {\n          trySetOpen(false, e);\n        }, mouseLeaveDelay);\n      }\n    };\n\n    var triggerProps = {\n      onFocus: function onFocus(e) {\n        if (isFromKeyboard()) {\n          trySetOpen(true, e);\n        }\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        _invoke.apply(void 0, [triggerElement, 'props.onFocus', e].concat(args));\n      },\n      onBlur: function onBlur(e) {\n        if (!shouldStayOpen(e)) {\n          trySetOpen(false, e);\n        }\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        _invoke.apply(void 0, [triggerElement, 'props.onBlur', e].concat(args));\n      },\n      onMouseEnter: function onMouseEnter(e) {\n        setTooltipOpen(true, e);\n        setWhatInputSource(context.target, 'mouse');\n\n        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n\n        _invoke.apply(void 0, [triggerElement, 'props.onMouseEnter', e].concat(args));\n      },\n      onMouseLeave: function onMouseLeave(e) {\n        setTooltipOpen(false, e);\n\n        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        _invoke.apply(void 0, [triggerElement, 'props.onMouseLeave', e].concat(args));\n      }\n    };\n    var element = /*#__PURE__*/React.createElement(React.Fragment, null, triggerElement && /*#__PURE__*/React.createElement(Ref, {\n      innerRef: triggerRef\n    }, /*#__PURE__*/React.cloneElement(triggerElement, getA11Props('trigger', triggerProps))), /*#__PURE__*/React.createElement(PortalInner, {\n      mountNode: mountNode\n    }, /*#__PURE__*/React.createElement(Popper, {\n      align: align,\n      flipBoundary: flipBoundary,\n      offset: offset,\n      overflowBoundary: overflowBoundary,\n      pointerTargetRef: pointerTargetRef,\n      popperRef: popperRef,\n      position: position,\n      positionFixed: positionFixed,\n      enabled: open,\n      rtl: context.rtl,\n      targetRef: target || triggerRef,\n      children: renderPopperChildren,\n      unstable_disableTether: unstable_disableTether,\n      unstable_pinned: unstable_pinned\n    })));\n    setEnd();\n    return element;\n  };\n\n  Tooltip.displayName = 'Tooltip';\n  Tooltip.defaultProps = {\n    align: 'center',\n    position: 'above',\n    mouseLeaveDelay: 10,\n    pointing: true,\n    accessibility: tooltipAsLabelBehavior\n  };\n  Tooltip.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    as: false,\n    content: false\n  }), {\n    align: PropTypes.oneOf(ALIGNMENTS),\n    children: PropTypes.element,\n    defaultOpen: PropTypes.bool,\n    mountNode: customPropTypes.domNode,\n    mouseLeaveDelay: PropTypes.number,\n    offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n    open: PropTypes.bool,\n    onOpenChange: PropTypes.func,\n    pointing: PropTypes.bool,\n    position: PropTypes.oneOf(POSITIONS),\n    positionFixed: PropTypes.bool,\n    target: customPropTypes.domNode,\n    trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.element]),\n    content: customPropTypes.shorthandAllowingChildren,\n    unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n    unstable_pinned: PropTypes.bool,\n    popperRef: customPropTypes.ref,\n    flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n    overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])])\n  });\n  Tooltip.handledProps = Object.keys(Tooltip.propTypes);\n  Tooltip.Content = TooltipContent;\n  Tooltip.create = createShorthandFactory({\n    Component: Tooltip,\n    mappedProp: 'content'\n  });\n  return Tooltip;\n}();","map":{"version":3,"sources":["components/Tooltip/Tooltip.tsx"],"names":["tooltipClassName","Tooltip","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","align","content","flipBoundary","mountNode","mouseLeaveDelay","offset","overflowBoundary","pointing","popperRef","position","positionFixed","target","trigger","unstable_disableTether","unstable_pinned","props","open","setOpen","useAutoControlled","defaultValue","value","initialValue","triggerElement","useTriggerElement","contentRef","React","pointerTargetRef","triggerRef","closeTimeoutId","contentId","getOrGenerateIdFromShorthand","getA11Props","useAccessibility","actionHandlers","close","setTooltipOpen","e","mapPropsToBehavior","triggerAriaLabel","getContentOverrideProps","onMouseEnter","onMouseLeave","renderPopperChildren","tooltipContent","defaultProps","placement","popperProps","pointerRef","generateKey","overrideProps","shouldStayOpen","trySetOpen","newValue","clearTimeout","triggerProps","onFocus","args","isFromKeyboard","onBlur","setWhatInputSource","element","tooltipAsLabelBehavior","as","PropTypes","children","defaultOpen","customPropTypes","onOpenChange","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, tooltipAsLabelBehavior, TooltipBehaviorProps } from '@fluentui/accessibility';\nimport {\n  useAccessibility,\n  useAutoControlled,\n  useTelemetry,\n  useFluentContext,\n  useTriggerElement,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  StyledComponentProps,\n  commonPropTypes,\n  isFromKeyboard,\n  setWhatInputSource,\n  getOrGenerateIdFromShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperChildrenProps,\n  Alignment,\n  Position,\n} from '../../utils/positioner';\nimport { PortalInner } from '../Portal/PortalInner';\nimport { TooltipContent, TooltipContentProps } from './TooltipContent';\n\nexport interface TooltipProps\n  extends StyledComponentProps<TooltipProps>,\n    ChildrenComponentProps<React.ReactElement>,\n    ContentComponentProps<ShorthandValue<TooltipContentProps>>,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @default tooltipBehavior\n   * @available tooltipAsLabelBehavior\n   * */\n  accessibility?: Accessibility<TooltipBehaviorProps>;\n\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** Existing element the tooltip should be bound to. */\n  mountNode?: HTMLElement;\n\n  /** Delay in ms for the mouse leave event, before the tooltip will be closed. */\n  mouseLeaveDelay?: number;\n\n  /** Defines whether tooltip is displayed. */\n  open?: boolean;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: (e: React.MouseEvent | React.FocusEvent | React.KeyboardEvent, data: TooltipProps) => void;\n\n  /** A tooltip can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /**\n   * DOM element that should be used as tooltip's target - instead of 'trigger' element that is used by default.\n   */\n  target?: HTMLElement;\n\n  /** Element to be rendered in-place where the tooltip is defined. */\n  trigger?: JSX.Element;\n}\n\nexport const tooltipClassName = 'ui-tooltip';\n\n/**\n * A Tooltip displays additional non-modal information on top of its target element.\n * Tooltip doesn't receive focus and cannot contain focusable elements.\n *\n * @accessibility\n * Implements [ARIA Tooltip](https://www.w3.org/TR/wai-aria-practices-1.1/#tooltip) design pattern.\n */\nexport const Tooltip: React.FC<TooltipProps> &\n  FluentComponentStaticProps<TooltipProps> & {\n    Content: typeof TooltipContent;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Tooltip.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    align,\n    content,\n    flipBoundary,\n    mountNode,\n    mouseLeaveDelay,\n    offset,\n    overflowBoundary,\n    pointing,\n    popperRef,\n    position,\n    positionFixed,\n    target,\n    trigger,\n    unstable_disableTether,\n    unstable_pinned,\n  } = props;\n\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n\n    initialValue: false,\n  });\n  const triggerElement = useTriggerElement(props);\n\n  const contentRef = React.useRef<HTMLElement>();\n  const pointerTargetRef = React.useRef<HTMLDivElement>();\n  const triggerRef = React.useRef<HTMLElement>();\n\n  const closeTimeoutId = React.useRef<number>();\n  // TODO: Consider `getOrGenerateIdFromShorthand()` as hook and make it SSR safe\n  const contentId = React.useRef<string>();\n  contentId.current = getOrGenerateIdFromShorthand('tooltip-content-', content, contentId.current);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      close: e => {\n        setTooltipOpen(false, e);\n        e.stopPropagation();\n        e.preventDefault();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      'aria-describedby': props['aria-describedby'],\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      contentId: contentId.current,\n      triggerAriaLabel: trigger && trigger.props['aria-label'],\n      open,\n    }),\n  });\n\n  const getContentOverrideProps = (\n    predefinedProps: TooltipContentProps,\n  ): TooltipContentProps & Pick<React.DOMAttributes<HTMLDivElement>, 'onMouseEnter' | 'onMouseLeave'> => ({\n    onMouseEnter: (e: React.MouseEvent) => {\n      setTooltipOpen(true, e);\n      _.invoke(predefinedProps, 'onMouseEnter', e);\n    },\n    onMouseLeave: (e: React.MouseEvent) => {\n      setTooltipOpen(false, e);\n      _.invoke(predefinedProps, 'onMouseLeave', e);\n    },\n  });\n\n  const renderPopperChildren = (popperProps: PopperChildrenProps) => {\n    const tooltipContent = TooltipContent.create(content, {\n      defaultProps: () =>\n        getA11Props('tooltip', {\n          open,\n          placement: popperProps.placement,\n          pointing,\n          pointerRef: pointerTargetRef,\n        }),\n      generateKey: false,\n      overrideProps: getContentOverrideProps,\n    });\n\n    return tooltipContent ? <Ref innerRef={contentRef}>{tooltipContent}</Ref> : null;\n  };\n\n  const shouldStayOpen = (e: React.FocusEvent) =>\n    _.invoke(e, 'currentTarget.contains', e.relatedTarget) || _.invoke(contentRef.current, 'contains', e.relatedTarget);\n\n  const trySetOpen = (newValue: boolean, e: React.MouseEvent | React.FocusEvent | React.KeyboardEvent) => {\n    setOpen(newValue);\n    _.invoke(props, 'onOpenChange', e, { ...props, ...{ open: newValue } });\n  };\n\n  const setTooltipOpen = (newOpen: boolean, e: React.MouseEvent | React.KeyboardEvent) => {\n    clearTimeout(closeTimeoutId.current);\n\n    if (newOpen) {\n      trySetOpen(true, e);\n    } else {\n      closeTimeoutId.current = context.target.defaultView.setTimeout(() => {\n        trySetOpen(false, e);\n      }, mouseLeaveDelay);\n    }\n  };\n\n  const triggerProps: React.HTMLAttributes<HTMLElement> = {\n    onFocus: (e, ...args) => {\n      if (isFromKeyboard()) {\n        trySetOpen(true, e);\n      }\n      _.invoke(triggerElement, 'props.onFocus', e, ...args);\n    },\n    onBlur: (e, ...args) => {\n      if (!shouldStayOpen(e)) {\n        trySetOpen(false, e);\n      }\n      _.invoke(triggerElement, 'props.onBlur', e, ...args);\n    },\n    onMouseEnter: (e, ...args) => {\n      setTooltipOpen(true, e);\n      setWhatInputSource(context.target, 'mouse');\n      _.invoke(triggerElement, 'props.onMouseEnter', e, ...args);\n    },\n    onMouseLeave: (e, ...args) => {\n      setTooltipOpen(false, e);\n      _.invoke(triggerElement, 'props.onMouseLeave', e, ...args);\n    },\n  };\n\n  const element = (\n    <>\n      {triggerElement && (\n        <Ref innerRef={triggerRef}>{React.cloneElement(triggerElement, getA11Props('trigger', triggerProps))}</Ref>\n      )}\n      <PortalInner mountNode={mountNode}>\n        <Popper\n          align={align}\n          flipBoundary={flipBoundary}\n          offset={offset}\n          overflowBoundary={overflowBoundary}\n          pointerTargetRef={pointerTargetRef}\n          popperRef={popperRef}\n          position={position}\n          positionFixed={positionFixed}\n          enabled={open}\n          rtl={context.rtl}\n          targetRef={target || triggerRef}\n          children={renderPopperChildren}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n        />\n      </PortalInner>\n    </>\n  );\n  setEnd();\n\n  return element;\n};\n\nTooltip.displayName = 'Tooltip';\n\nTooltip.defaultProps = {\n  align: 'center',\n  position: 'above',\n  mouseLeaveDelay: 10,\n  pointing: true,\n  accessibility: tooltipAsLabelBehavior,\n};\nTooltip.propTypes = {\n  ...commonPropTypes.createCommon({\n    as: false,\n    content: false,\n  }),\n  align: PropTypes.oneOf<Alignment>(ALIGNMENTS),\n  children: PropTypes.element,\n  defaultOpen: PropTypes.bool,\n  mountNode: customPropTypes.domNode,\n  mouseLeaveDelay: PropTypes.number,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  open: PropTypes.bool,\n  onOpenChange: PropTypes.func,\n  pointing: PropTypes.bool,\n  position: PropTypes.oneOf<Position>(POSITIONS),\n  positionFixed: PropTypes.bool,\n  target: customPropTypes.domNode,\n  trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.element]),\n  content: customPropTypes.shorthandAllowingChildren,\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  popperRef: customPropTypes.ref,\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n};\nTooltip.handledProps = Object.keys(Tooltip.propTypes) as any;\n\nTooltip.Content = TooltipContent;\n\nTooltip.create = createShorthandFactory({ Component: Tooltip, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}