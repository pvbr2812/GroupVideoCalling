{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport { IS_FOCUSABLE_ATTRIBUTE, chatMessageBehavior, menuAsToolbarBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getScrollParent, Popper, partitionPopperPropsFromShorthand } from '../../utils/positioner';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, createShorthand } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { Label } from '../Label/Label';\nimport { Menu } from '../Menu/Menu';\nimport { Text } from '../Text/Text';\nimport { Reaction } from '../Reaction/Reaction';\nimport { ChatItemContext } from './chatItemContext';\nimport { ChatMessageHeader } from './ChatMessageHeader';\nimport { ChatMessageDetails } from './ChatMessageDetails';\nexport var chatMessageClassName = 'ui-chat__message';\nexport var chatMessageSlotClassNames = {\n  actionMenu: chatMessageClassName + \"__actions\",\n  author: chatMessageClassName + \"__author\",\n  timestamp: chatMessageClassName + \"__timestamp\",\n  badge: chatMessageClassName + \"__badge\",\n  content: chatMessageClassName + \"__content\",\n  reactionGroup: chatMessageClassName + \"__reactions\"\n};\n/**\n * A ChatMessage represents a single message in chat.\n */\n\nexport var ChatMessage = /*#__PURE__*/function () {\n  var ChatMessage = function ChatMessage(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(ChatMessage.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var parentAttached = useContextSelector(ChatItemContext, function (v) {\n      return v.attached;\n    });\n    var accessibility = props.accessibility,\n        _props$attached = props.attached,\n        attached = _props$attached === void 0 ? parentAttached : _props$attached,\n        author = props.author,\n        badge = props.badge,\n        badgePosition = props.badgePosition,\n        children = props.children,\n        className = props.className,\n        content = props.content,\n        design = props.design,\n        mine = props.mine,\n        positionActionMenu = props.positionActionMenu,\n        reactionGroup = props.reactionGroup,\n        reactionGroupPosition = props.reactionGroupPosition,\n        timestamp = props.timestamp,\n        styles = props.styles,\n        variables = props.variables,\n        header = props.header,\n        details = props.details,\n        overflow = props.unstable_overflow;\n\n    var _partitionPopperProps = partitionPopperPropsFromShorthand(props.actionMenu),\n        actionMenu = _partitionPopperProps[0],\n        positioningProps = _partitionPopperProps[1];\n\n    var _React$useState = React.useState(false),\n        focused = _React$useState[0],\n        setFocused = _React$useState[1];\n\n    var _React$useState2 = React.useState(null),\n        messageNode = _React$useState2[0],\n        setMessageNode = _React$useState2[1];\n\n    var updateActionsMenuPosition = React.useRef(null);\n    var getA11Props = useAccessibility(accessibility, {\n      actionHandlers: {\n        // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n        // as navigation (only Tab key should work)\n        preventDefault: function preventDefault(event) {\n          // preventDefault only if event coming from inside the message\n          if (event.currentTarget !== event.target) {\n            event.preventDefault();\n          }\n        },\n        focus: function focus(event) {\n          if (messageNode) {\n            messageNode.focus();\n            event.stopPropagation();\n          }\n        }\n      }\n    });\n\n    var _useStyles = useStyles(ChatMessage.displayName, {\n      className: chatMessageClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          attached: attached,\n          badgePosition: badgePosition,\n          focused: focused,\n          mine: mine,\n          hasBadge: !!badge,\n          hasReactionGroup: !!reactionGroup\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var handleFocus = function handleFocus(e) {\n      _invoke(updateActionsMenuPosition, 'current');\n\n      setFocused(true);\n\n      _invoke(props, 'onFocus', e, props);\n    };\n\n    var handleBlur = function handleBlur(e) {\n      // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n      // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n      var shouldPreserveFocusState = _invoke(e, 'currentTarget.contains', e.relatedTarget);\n\n      setFocused(shouldPreserveFocusState);\n\n      _invoke(props, 'onBlur', e, props);\n    };\n\n    var handleMouseEnter = function handleMouseEnter(e) {\n      _invoke(updateActionsMenuPosition, 'current');\n\n      _invoke(props, 'onMouseEnter', e, props);\n    };\n\n    var renderActionMenu = function renderActionMenu() {\n      var actionMenuElement = Menu.create(actionMenu, {\n        defaultProps: function defaultProps() {\n          var _ref;\n\n          return _ref = {}, _ref[IS_FOCUSABLE_ATTRIBUTE] = true, _ref.accessibility = menuAsToolbarBehavior, _ref.className = chatMessageSlotClassNames.actionMenu, _ref.styles = resolvedStyles.actionMenu, _ref;\n        }\n      });\n\n      if (!actionMenuElement) {\n        return actionMenuElement;\n      }\n\n      var modifiers = positionActionMenu && [// https://popper.js.org/docs/v2/modifiers/flip/\n      // Forces to flip only in \"top-*\" positions\n      {\n        name: 'flip',\n        options: {\n          fallbackPlacements: ['top']\n        }\n      }, overflow && {\n        name: 'preventOverflow',\n        options: {\n          boundary: getScrollParent(messageNode)\n        }\n      }];\n      return /*#__PURE__*/React.createElement(Popper, _extends({\n        enabled: positionActionMenu,\n        align: \"end\",\n        modifiers: modifiers,\n        position: \"above\",\n        positionFixed: overflow,\n        targetRef: messageNode\n      }, positioningProps), function (_ref2) {\n        var scheduleUpdate = _ref2.scheduleUpdate;\n        updateActionsMenuPosition.current = scheduleUpdate;\n        return actionMenuElement;\n      });\n    };\n\n    var childrenPropExists = childrenExist(children);\n    var rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n    var badgeElement = Label.create(badge, {\n      defaultProps: function defaultProps() {\n        return {\n          className: chatMessageSlotClassNames.badge,\n          styles: resolvedStyles.badge\n        };\n      }\n    });\n    var reactionGroupElement = Reaction.Group.create(reactionGroup, {\n      defaultProps: function defaultProps() {\n        return {\n          className: chatMessageSlotClassNames.reactionGroup,\n          styles: resolvedStyles.reactionGroup\n        };\n      }\n    });\n    var actionMenuElement = renderActionMenu();\n    var authorElement = Text.create(author, {\n      defaultProps: function defaultProps() {\n        return {\n          size: 'small',\n          styles: resolvedStyles.author,\n          className: chatMessageSlotClassNames.author\n        };\n      }\n    });\n    var timestampElement = Text.create(timestamp, {\n      defaultProps: function defaultProps() {\n        return {\n          size: 'small',\n          styles: resolvedStyles.timestamp,\n          timestamp: true,\n          className: chatMessageSlotClassNames.timestamp\n        };\n      }\n    });\n    var messageContent = Box.create(content, {\n      defaultProps: function defaultProps() {\n        return {\n          className: chatMessageSlotClassNames.content,\n          styles: resolvedStyles.content\n        };\n      }\n    });\n    var detailsElement = createShorthand(ChatMessageDetails, details, {\n      defaultProps: function defaultProps() {\n        return {\n          mine: mine\n        };\n      }\n    });\n    var headerElement = createShorthand(ChatMessageHeader, header || {}, {\n      overrideProps: function overrideProps() {\n        return {\n          content: /*#__PURE__*/React.createElement(React.Fragment, null, authorElement, timestampElement, detailsElement, reactionGroupPosition === 'start' && reactionGroupElement)\n        };\n      }\n    });\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: setMessageNode\n    }, getA11Props.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: rootClasses,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onMouseEnter: handleMouseEnter\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenPropExists ? children : /*#__PURE__*/React.createElement(React.Fragment, null, actionMenuElement, badgePosition === 'start' && badgeElement, headerElement, messageContent, reactionGroupPosition === 'end' && reactionGroupElement, badgePosition === 'end' && badgeElement))));\n    setEnd();\n    return element;\n  };\n\n  ChatMessage.displayName = 'ChatMessage';\n  ChatMessage.defaultProps = {\n    accessibility: chatMessageBehavior,\n    badgePosition: 'end',\n    positionActionMenu: true,\n    reactionGroupPosition: 'start'\n  };\n  ChatMessage.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand'\n  }), {\n    actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n    author: customPropTypes.itemShorthand,\n    badge: customPropTypes.itemShorthand,\n    details: customPropTypes.itemShorthand,\n    badgePosition: PropTypes.oneOf(['start', 'end']),\n    header: customPropTypes.itemShorthand,\n    mine: PropTypes.bool,\n    timestamp: customPropTypes.itemShorthand,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    positionActionMenu: PropTypes.bool,\n    reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n    reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n    unstable_overflow: PropTypes.bool\n  });\n  ChatMessage.handledProps = Object.keys(ChatMessage.propTypes);\n  ChatMessage.create = createShorthandFactory({\n    Component: ChatMessage,\n    mappedProp: 'content'\n  });\n  return ChatMessage;\n}();","map":{"version":3,"sources":["components/Chat/ChatMessage.tsx"],"names":["chatMessageClassName","chatMessageSlotClassNames","actionMenu","author","timestamp","badge","content","reactionGroup","ChatMessage","context","useFluentContext","setStart","setEnd","useTelemetry","parentAttached","useContextSelector","v","accessibility","attached","badgePosition","children","className","design","mine","positionActionMenu","reactionGroupPosition","styles","variables","header","details","overflow","props","positioningProps","partitionPopperPropsFromShorthand","focused","setFocused","React","messageNode","setMessageNode","updateActionsMenuPosition","getA11Props","useAccessibility","actionHandlers","preventDefault","event","focus","classes","resolvedStyles","useStyles","mapPropsToStyles","hasBadge","hasReactionGroup","mapPropsToInlineStyles","rtl","handleFocus","handleBlur","shouldPreserveFocusState","e","handleMouseEnter","renderActionMenu","actionMenuElement","defaultProps","modifiers","name","options","fallbackPlacements","boundary","getScrollParent","scheduleUpdate","childrenPropExists","childrenExist","rootClasses","cx","ElementType","getElementType","unhandledProps","useUnhandledProps","badgeElement","reactionGroupElement","authorElement","size","timestampElement","messageContent","detailsElement","createShorthand","headerElement","overrideProps","element","onBlur","onFocus","onMouseEnter","forElements","PropTypes","customPropTypes","unstable_overflow","bool","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  IS_FOCUSABLE_ATTRIBUTE,\n  chatMessageBehavior,\n  menuAsToolbarBehavior,\n  ChatMessageBehaviorProps,\n} from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  getScrollParent,\n  Popper,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n  PopperModifiers,\n} from '../../utils/positioner';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthand,\n} from '../../utils';\nimport { ShorthandValue, ComponentEventHandler, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Label, LabelProps } from '../Label/Label';\nimport { Menu, MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { Text, TextProps } from '../Text/Text';\nimport { Reaction, ReactionProps } from '../Reaction/Reaction';\nimport { ReactionGroupProps } from '../Reaction/ReactionGroup';\nimport { ChatItemContext } from './chatItemContext';\nimport { ChatMessageHeader, ChatMessageHeaderProps } from './ChatMessageHeader';\nimport { ChatMessageDetails, ChatMessageDetailsProps } from './ChatMessageDetails';\n\nexport interface ChatMessageSlotClassNames {\n  actionMenu: string;\n  author: string;\n  timestamp: string;\n  badge: string;\n  content: string;\n  reactionGroup: string;\n}\n\nexport interface ChatMessageProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatMessageBehaviorProps>;\n\n  /** Menu with actions of the message. */\n  actionMenu?: ShorthandValue<MenuProps & { popper?: PopperShorthandProps }> | ShorthandCollection<MenuItemProps>;\n\n  /** Controls messages's relation to other chat messages. Is automatically set by the ChatItem. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Author of the message. */\n  author?: ShorthandValue<TextProps>;\n\n  /** Indicates whether message belongs to the current user. */\n  mine?: boolean;\n\n  /** A message cane have a custom header */\n  header?: ShorthandValue<ChatMessageHeaderProps>;\n\n  /** Timestamp of the message. */\n  timestamp?: ShorthandValue<TextProps>;\n\n  /** Message details info slot for the header. */\n  details?: ShorthandValue<ChatMessageDetailsProps>;\n\n  /** Badge attached to the message. */\n  badge?: ShorthandValue<LabelProps>;\n\n  /** A message can format the badge to appear at the start or the end of the message. */\n  badgePosition?: 'start' | 'end';\n\n  /**\n   * Called after user's blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user enters by mouse.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<ChatMessageProps>;\n\n  /** Allows suppression of action menu positioning for performance reasons */\n  positionActionMenu?: boolean;\n\n  /** Reaction group applied to the message. */\n  reactionGroup?: ShorthandValue<ReactionGroupProps> | ShorthandCollection<ReactionProps>;\n\n  /** A message can format the reactions group to appear at the start or the end of the message. */\n  reactionGroupPosition?: 'start' | 'end';\n\n  /** Positions an actionMenu slot in \"fixed\" mode. */\n  unstable_overflow?: boolean;\n}\n\nexport type ChatMessageStylesProps = Pick<ChatMessageProps, 'attached' | 'badgePosition' | 'mine'> & {\n  focused: boolean;\n  hasBadge: boolean;\n  hasReactionGroup: boolean;\n};\n\nexport const chatMessageClassName = 'ui-chat__message';\nexport const chatMessageSlotClassNames: ChatMessageSlotClassNames = {\n  actionMenu: `${chatMessageClassName}__actions`,\n  author: `${chatMessageClassName}__author`,\n  timestamp: `${chatMessageClassName}__timestamp`,\n  badge: `${chatMessageClassName}__badge`,\n  content: `${chatMessageClassName}__content`,\n  reactionGroup: `${chatMessageClassName}__reactions`,\n};\n\n/**\n * A ChatMessage represents a single message in chat.\n */\nexport const ChatMessage: ComponentWithAs<'div', ChatMessageProps> &\n  FluentComponentStaticProps<ChatMessageProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(ChatMessage.displayName, context.telemetry);\n  setStart();\n\n  const parentAttached = useContextSelector(ChatItemContext, v => v.attached);\n  const {\n    accessibility,\n    attached = parentAttached,\n    author,\n    badge,\n    badgePosition,\n    children,\n    className,\n    content,\n    design,\n    mine,\n    positionActionMenu,\n    reactionGroup,\n    reactionGroupPosition,\n    timestamp,\n    styles,\n    variables,\n    header,\n    details,\n    unstable_overflow: overflow,\n  } = props;\n  const [actionMenu, positioningProps] = partitionPopperPropsFromShorthand(props.actionMenu);\n\n  const [focused, setFocused] = React.useState<boolean>(false);\n  const [messageNode, setMessageNode] = React.useState<HTMLElement | null>(null);\n\n  const updateActionsMenuPosition = React.useRef<(() => void) | null>(null);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n      // as navigation (only Tab key should work)\n      preventDefault: event => {\n        // preventDefault only if event coming from inside the message\n        if (event.currentTarget !== event.target) {\n          event.preventDefault();\n        }\n      },\n\n      focus: event => {\n        if (messageNode) {\n          messageNode.focus();\n          event.stopPropagation();\n        }\n      },\n    },\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatMessageStylesProps>(ChatMessage.displayName, {\n    className: chatMessageClassName,\n    mapPropsToStyles: () => ({\n      attached,\n      badgePosition,\n      focused,\n      mine,\n      hasBadge: !!badge,\n      hasReactionGroup: !!reactionGroup,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n\n    setFocused(true);\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n    // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n    const shouldPreserveFocusState = _.invoke(e, 'currentTarget.contains', (e as any).relatedTarget);\n\n    setFocused(shouldPreserveFocusState);\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleMouseEnter = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const renderActionMenu = () => {\n    const actionMenuElement = Menu.create(actionMenu, {\n      defaultProps: () => ({\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        accessibility: menuAsToolbarBehavior,\n        className: chatMessageSlotClassNames.actionMenu,\n        styles: resolvedStyles.actionMenu,\n      }),\n    });\n\n    if (!actionMenuElement) {\n      return actionMenuElement;\n    }\n\n    const modifiers: PopperModifiers | undefined = positionActionMenu && [\n      // https://popper.js.org/docs/v2/modifiers/flip/\n      // Forces to flip only in \"top-*\" positions\n      { name: 'flip', options: { fallbackPlacements: ['top'] } },\n      overflow && {\n        name: 'preventOverflow',\n        options: { boundary: getScrollParent(messageNode) },\n      },\n    ];\n\n    return (\n      <Popper\n        enabled={positionActionMenu}\n        align=\"end\"\n        modifiers={modifiers}\n        position=\"above\"\n        positionFixed={overflow}\n        targetRef={messageNode}\n        {...positioningProps}\n      >\n        {({ scheduleUpdate }) => {\n          updateActionsMenuPosition.current = scheduleUpdate;\n\n          return actionMenuElement;\n        }}\n      </Popper>\n    );\n  };\n\n  const childrenPropExists = childrenExist(children);\n  const rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n\n  const badgeElement = Label.create(badge, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.badge,\n      styles: resolvedStyles.badge,\n    }),\n  });\n\n  const reactionGroupElement = Reaction.Group.create(reactionGroup, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.reactionGroup,\n      styles: resolvedStyles.reactionGroup,\n    }),\n  });\n\n  const actionMenuElement = renderActionMenu();\n\n  const authorElement = Text.create(author, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.author,\n      className: chatMessageSlotClassNames.author,\n    }),\n  });\n\n  const timestampElement = Text.create(timestamp, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.timestamp,\n      timestamp: true,\n      className: chatMessageSlotClassNames.timestamp,\n    }),\n  });\n\n  const messageContent = Box.create(content, {\n    defaultProps: () => ({\n      className: chatMessageSlotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const detailsElement = createShorthand(ChatMessageDetails, details, {\n    defaultProps: () => ({ mine }),\n  });\n\n  const headerElement = createShorthand(ChatMessageHeader, header || {}, {\n    overrideProps: () => ({\n      content: (\n        <>\n          {authorElement}\n          {timestampElement}\n          {detailsElement}\n          {reactionGroupPosition === 'start' && reactionGroupElement}\n        </>\n      ),\n    }),\n  });\n\n  const element = (\n    <Ref innerRef={setMessageNode}>\n      {getA11Props.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11Props('root', {\n            className: rootClasses,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onMouseEnter: handleMouseEnter,\n            ...rtlTextContainer.getAttributes({ forElements: [children] }),\n            ...unhandledProps,\n          })}\n        >\n          {childrenPropExists ? (\n            children\n          ) : (\n            <>\n              {actionMenuElement}\n              {badgePosition === 'start' && badgeElement}\n              {headerElement}\n              {messageContent}\n              {reactionGroupPosition === 'end' && reactionGroupElement}\n              {badgePosition === 'end' && badgeElement}\n            </>\n          )}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatMessage.displayName = 'ChatMessage';\n\nChatMessage.defaultProps = {\n  accessibility: chatMessageBehavior,\n  badgePosition: 'end',\n  positionActionMenu: true,\n  reactionGroupPosition: 'start',\n};\n\nChatMessage.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  author: customPropTypes.itemShorthand,\n  badge: customPropTypes.itemShorthand,\n  details: customPropTypes.itemShorthand,\n  badgePosition: PropTypes.oneOf(['start', 'end']),\n  header: customPropTypes.itemShorthand,\n  mine: PropTypes.bool,\n  timestamp: customPropTypes.itemShorthand,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  positionActionMenu: PropTypes.bool,\n  reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n  reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n  unstable_overflow: PropTypes.bool,\n};\n\nChatMessage.handledProps = Object.keys(ChatMessage.propTypes) as any;\n\nChatMessage.create = createShorthandFactory({ Component: ChatMessage, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}