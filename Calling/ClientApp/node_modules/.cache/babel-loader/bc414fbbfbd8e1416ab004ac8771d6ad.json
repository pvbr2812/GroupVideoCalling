{"ast":null,"code":"import { pxToRem } from '../../../../utils';\nexport var formFieldStyles = {\n  root: function root(_ref) {\n    var props = _ref.props,\n        variables = _ref.variables;\n    return {};\n  },\n  label: function label(_ref2) {\n    var props = _ref2.props;\n    var type = props.type,\n        inline = props.inline,\n        required = props.required;\n    return Object.assign({}, (!type || type !== 'radio' && type !== 'checkbox') && {\n      display: 'block',\n      marginBottom: pxToRem(4)\n    }, inline && {\n      marginRight: pxToRem(10),\n      display: 'inline'\n    }, required && {\n      '::after': {\n        content: '\"*\"'\n      }\n    });\n  },\n  control: function control(_ref3) {\n    var props = _ref3.props,\n        v = _ref3.variables;\n    var type = props.type;\n    return Object.assign({}, type && (type === 'radio' || type === 'checkbox') && {\n      marginRight: pxToRem(10)\n    });\n  },\n  message: function message(_ref4) {\n    var p = _ref4.props,\n        v = _ref4.variables;\n    return Object.assign({}, p.hasErrorMessage && {\n      color: v.colorScheme.red.foreground\n    }, {\n      display: 'block',\n      paddingLeft: v.messagePaddingLeft\n    });\n  },\n  icon: function icon(_ref5) {\n    var p = _ref5.props,\n        v = _ref5.variables;\n    return Object.assign({}, p.hasErrorMessage && {\n      color: v.colorScheme.red.foreground\n    });\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Form/formFieldStyles.ts"],"names":["formFieldStyles","root","props","variables","label","type","inline","required","display","marginBottom","pxToRem","marginRight","content","control","v","message","p","color","foreground","paddingLeft","messagePaddingLeft","icon"],"mappings":"AAEA,SAAA,OAAA,QAAA,mBAAA;AAGA,OAAO,IAAMA,eAAsF,GAAG;AACpGC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,IAAA,EAAA;AAAA,QAAGC,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,QAAUC,SAAV,GAAA,IAAA,CAAA,SAAA;AAAA,WAAA,EAAA;AAD8F,GAAA;AAEpGC,EAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,KAAA,EAA8B;AAAA,QAA3BF,KAA2B,GAAA,KAAA,CAA3BA,KAA2B;AAAA,QAC3BG,IAD2B,GACAH,KADA,CAAA,IAAA;AAAA,QACrBI,MADqB,GACAJ,KADA,CAAA,MAAA;AAAA,QACbK,QADa,GACAL,KADA,CAAA,QAAA;AAEnC,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,CAAC,CAAA,IAAA,IAAUG,IAAI,KAAJA,OAAAA,IAAoBA,IAAI,KAAnC,UAAA,KAAwD;AAC1DG,MAAAA,OAAO,EADmD,OAAA;AAE1DC,MAAAA,YAAY,EAAEC,OAAO,CAAA,CAAA;AAFqC,KAD9D,EAKMJ,MAAM,IAAI;AAAEK,MAAAA,WAAW,EAAED,OAAO,CAAtB,EAAsB,CAAtB;AAA4BF,MAAAA,OAAO,EAAE;AAArC,KALhB,EAMMD,QAAQ,IAAI;AACd,iBAAW;AACTK,QAAAA,OAAO,EAAE;AADA;AADG,KANlB,CAAA;AAJkG,GAAA;AAiBpGC,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAA4C;AAAA,QAAzCX,KAAyC,GAAA,KAAA,CAAzCA,KAAyC;AAAA,QAAvBY,CAAuB,GAAA,KAAA,CAAlCX,SAAkC;AAAA,QAC3CE,IAD2C,GAClCH,KADkC,CAAA,IAAA;AAEnD,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACMG,IAAI,KACLA,IAAI,KAAJA,OAAAA,IAAoBA,IAAI,KADvBA,UAAI,CAAJA,IAC2C;AAC3CM,MAAAA,WAAW,EAAED,OAAO,CAAA,EAAA;AADuB,KAFjD,CAAA;AAnBkG,GAAA;AA0BpGK,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,KAAA,EAAA;AAAA,QAAUC,CAAV,GAAA,KAAA,CAAA,KAAA;AAAA,QAAwBF,CAAxB,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACHE,CAAC,CAADA,eAAAA,IAAqB;AAAEC,MAAAA,KAAK,EAAEH,CAAC,CAADA,WAAAA,CAAAA,GAAAA,CAAkBI;AAA3B,KADlB,EAAA;AAEPV,MAAAA,OAAO,EAFA,OAAA;AAGPW,MAAAA,WAAW,EAAEL,CAAC,CAACM;AAHR,KAAA,CAAA;AA1B2F,GAAA;AA+BpGC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,KAAA,EAAA;AAAA,QAAUL,CAAV,GAAA,KAAA,CAAA,KAAA;AAAA,QAAwBF,CAAxB,GAAA,KAAA,CAAA,SAAA;AAAA,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACAE,CAAC,CAADA,eAAAA,IAAqB;AAAEC,MAAAA,KAAK,EAAEH,CAAC,CAADA,WAAAA,CAAAA,GAAAA,CAAkBI;AAA3B,KADrB,CAAA;AAAA;AA/B8F,CAA/F","sourcesContent":["import { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { FormFieldStylesProps } from '../../../../components/Form/FormField';\nimport { pxToRem } from '../../../../utils';\nimport { FormFieldVariables } from './formFieldVariables';\n\nexport const formFieldStyles: ComponentSlotStylesPrepared<FormFieldStylesProps, FormFieldVariables> = {\n  root: ({ props, variables }): ICSSInJSStyle => ({}),\n  label: ({ props }): ICSSInJSStyle => {\n    const { type, inline, required } = props;\n    return {\n      ...((!type || (type !== 'radio' && type !== 'checkbox')) && {\n        display: 'block',\n        marginBottom: pxToRem(4),\n      }),\n      ...(inline && { marginRight: pxToRem(10), display: 'inline' }),\n      ...(required && {\n        '::after': {\n          content: '\"*\"',\n        },\n      }),\n    };\n  },\n  control: ({ props, variables: v }): ICSSInJSStyle => {\n    const { type } = props;\n    return {\n      ...(type &&\n        (type === 'radio' || type === 'checkbox') && {\n          marginRight: pxToRem(10),\n        }),\n    };\n  },\n  message: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    ...(p.hasErrorMessage && { color: v.colorScheme.red.foreground }),\n    display: 'block',\n    paddingLeft: v.messagePaddingLeft,\n  }),\n  icon: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    ...(p.hasErrorMessage && { color: v.colorScheme.red.foreground }),\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}