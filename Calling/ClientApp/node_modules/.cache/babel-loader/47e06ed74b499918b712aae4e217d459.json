{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-http\";\nimport { createCommunicationAccessKeyCredentialPolicy } from \"./communicationAccessKeyCredentialPolicy\";\n/**\n * Creates a pipeline policy to authenticate request based\n * on the credential passed in.\n * @hidden\n *\n * @param credential - The KeyCredential or TokenCredential.\n */\n\nexport const createCommunicationAuthPolicy = credential => {\n  if (isTokenCredential(credential)) {\n    return bearerTokenAuthenticationPolicy(credential, \"https://communication.azure.com//.default\");\n  } else {\n    return createCommunicationAccessKeyCredentialPolicy(credential);\n  }\n};","map":{"version":3,"sources":["../../../src/credential/communicationAuthPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,iBAAT,QAAkE,kBAAlE;AACA,SAAS,+BAAT,QAAsE,kBAAtE;AACA,SAAS,4CAAT,QAA6D,0CAA7D;AACA;;;;;;AAMG;;AACH,OAAO,MAAM,6BAA6B,GACxC,UAD2C,IAEnB;AACxB,MAAI,iBAAiB,CAAC,UAAD,CAArB,EAAmC;AACjC,WAAO,+BAA+B,CAAC,UAAD,EAAa,2CAAb,CAAtC;AACD,GAFD,MAEO;AACL,WAAO,4CAA4C,CAAC,UAAD,CAAnD;AACD;AACF,CARM","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy, RequestPolicyFactory } from \"@azure/core-http\";\nimport { createCommunicationAccessKeyCredentialPolicy } from \"./communicationAccessKeyCredentialPolicy\";\n/**\n * Creates a pipeline policy to authenticate request based\n * on the credential passed in.\n * @hidden\n *\n * @param credential - The KeyCredential or TokenCredential.\n */\nexport const createCommunicationAuthPolicy = (\n  credential: KeyCredential | TokenCredential\n): RequestPolicyFactory => {\n  if (isTokenCredential(credential)) {\n    return bearerTokenAuthenticationPolicy(credential, \"https://communication.azure.com//.default\");\n  } else {\n    return createCommunicationAccessKeyCredentialPolicy(credential);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}