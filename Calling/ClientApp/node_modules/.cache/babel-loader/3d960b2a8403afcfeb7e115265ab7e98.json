{"ast":null,"code":"import _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport { listBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useAutoControlled, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { ListContextProvider } from './listContext';\nimport { ListItem } from './ListItem';\nexport var listClassName = 'ui-list';\n/**\n * A List displays a group of related sequential items.\n *\n * @accessibility\n * List may follow one of the following accessibility semantics:\n * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.\n * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.\n */\n\nexport var List = /*#__PURE__*/function () {\n  var List = function List(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(List.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        as = props.as,\n        children = props.children,\n        className = props.className,\n        debug = props.debug,\n        design = props.design,\n        horizontal = props.horizontal,\n        items = props.items,\n        navigable = props.navigable,\n        selectable = props.selectable,\n        styles = props.styles,\n        truncateContent = props.truncateContent,\n        truncateHeader = props.truncateHeader,\n        variables = props.variables,\n        wrap = props.wrap;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultSelectedIndex,\n      value: props.selectedIndex,\n      initialValue: -1\n    }),\n        selectedIndex = _useAutoControlled[0],\n        setSelectedIndex = _useAutoControlled[1];\n\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: List.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          horizontal: horizontal,\n          navigable: navigable,\n          selectable: selectable\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(List.displayName, {\n      className: listClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          isListTag: as === 'ol' || as === 'ul',\n          debug: debug,\n          horizontal: horizontal\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var latestProps = React.useRef(props);\n    latestProps.current = props;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(List.handledProps, props);\n    var hasContent = childrenExist(children) || items && items.length > 0;\n    var onItemClick = React.useCallback(function (e, itemIndex) {\n      if (latestProps.current.selectable) {\n        setSelectedIndex(itemIndex);\n\n        _invoke(latestProps.current, 'onSelectedIndexChange', e, Object.assign({}, latestProps.current, {\n          selectedIndex: itemIndex\n        }));\n      }\n    }, [latestProps, setSelectedIndex]);\n    var childProps = {\n      debug: debug,\n      navigable: navigable,\n      onItemClick: onItemClick,\n      selectable: selectable,\n      selectedIndex: selectedIndex,\n      truncateContent: truncateContent,\n      truncateHeader: truncateHeader,\n      variables: variables\n    };\n\n    var renderItems = function renderItems() {\n      return _map(items, function (item, index) {\n        return ListItem.create(item, {\n          defaultProps: function defaultProps() {\n            return {\n              index: index\n            };\n          }\n        });\n      });\n    };\n\n    var element = getA11Props.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), /*#__PURE__*/React.createElement(ListContextProvider, {\n      value: childProps\n    }, hasContent && wrap(childrenExist(children) ? children : renderItems()))));\n    setEnd();\n    return element;\n  };\n\n  List.displayName = 'List';\n  List.defaultProps = {\n    as: 'ul',\n    accessibility: listBehavior,\n    wrap: function wrap(children) {\n      return children;\n    }\n  };\n  List.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    debug: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]),\n    navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]),\n    truncateContent: PropTypes.bool,\n    truncateHeader: PropTypes.bool,\n    selectedIndex: PropTypes.number,\n    defaultSelectedIndex: PropTypes.number,\n    onSelectedIndexChange: PropTypes.func,\n    horizontal: PropTypes.bool,\n    wrap: PropTypes.func\n  });\n  List.handledProps = Object.keys(List.propTypes);\n  List.Item = ListItem;\n  List.create = createShorthandFactory({\n    Component: List,\n    mappedArrayProp: 'items'\n  });\n  return List;\n}();","map":{"version":3,"sources":["components/List/List.tsx"],"names":["listClassName","List","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","as","children","className","debug","design","horizontal","items","navigable","selectable","styles","truncateContent","truncateHeader","variables","wrap","props","selectedIndex","setSelectedIndex","useAutoControlled","defaultValue","value","initialValue","getA11Props","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","isListTag","mapPropsToInlineStyles","latestProps","React","ElementType","getElementType","unhandledProps","useUnhandledProps","hasContent","childrenExist","onItemClick","itemIndex","childProps","renderItems","defaultProps","index","element","root","forElements","content","PropTypes","customPropTypes","defaultSelectedIndex","onSelectedIndexChange","func","Object","createShorthandFactory","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, listBehavior, ListBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useAutoControlled,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ComponentEventHandler, ShorthandCollection, ReactChildren, FluentComponentStaticProps } from '../../types';\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n} from '../../utils';\nimport { ListContextProvider, ListContextValue } from './listContext';\nimport { ListItem, ListItemProps } from './ListItem';\n\nexport interface ListProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ListBehaviorProps>;\n\n  /** Toggle debug mode */\n  debug?: boolean;\n\n  /** Shorthand array of props for ListItem. */\n  items?: ShorthandCollection<ListItemProps>;\n\n  /** A selectable list formats list items as possible choices. */\n  selectable?: boolean;\n\n  /** A navigable list allows user to navigate through items. */\n  navigable?: boolean;\n\n  /** Index of the currently selected item. */\n  selectedIndex?: number;\n\n  /** Initial selectedIndex value. */\n  defaultSelectedIndex?: number;\n\n  /**\n   * Event for request to change 'selectedIndex' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onSelectedIndexChange?: ComponentEventHandler<ListProps>;\n\n  /** Truncates content */\n  truncateContent?: boolean;\n\n  /** Truncates header */\n  truncateHeader?: boolean;\n\n  /** A horizontal list displays elements horizontally. */\n  horizontal?: boolean;\n\n  /** An optional wrapper function. */\n  wrap?: (children: ReactChildren) => React.ReactNode;\n}\n\nexport type ListStylesProps = Pick<ListProps, 'debug' | 'horizontal'> & { isListTag: boolean };\nexport const listClassName = 'ui-list';\n\n/**\n * A List displays a group of related sequential items.\n *\n * @accessibility\n * List may follow one of the following accessibility semantics:\n * - Static non-navigable list. Implements [ARIA list](https://www.w3.org/TR/wai-aria-1.1/#list) role.\n * - Selectable list: allows the user to select item from a list of choices. Implements [ARIA Listbox](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox) design pattern.\n */\nexport const List: ComponentWithAs<'ul', ListProps> &\n  FluentComponentStaticProps<ListProps> & {\n    Item: typeof ListItem;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(List.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    as,\n    children,\n    className,\n    debug,\n    design,\n    horizontal,\n    items,\n    navigable,\n    selectable,\n    styles,\n    truncateContent,\n    truncateHeader,\n    variables,\n    wrap,\n  } = props;\n\n  const [selectedIndex, setSelectedIndex] = useAutoControlled({\n    defaultValue: props.defaultSelectedIndex,\n    value: props.selectedIndex,\n    initialValue: -1,\n  });\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: List.displayName,\n    mapPropsToBehavior: () => ({\n      horizontal,\n      navigable,\n      selectable,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ListStylesProps>(List.displayName, {\n    className: listClassName,\n    mapPropsToStyles: () => ({ isListTag: as === 'ol' || as === 'ul', debug, horizontal }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const latestProps = React.useRef<ListProps>(props);\n  latestProps.current = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(List.handledProps, props);\n\n  const hasContent = childrenExist(children) || (items && items.length > 0);\n  const onItemClick = React.useCallback(\n    (e, itemIndex) => {\n      if (latestProps.current.selectable) {\n        setSelectedIndex(itemIndex);\n        _.invoke(latestProps.current, 'onSelectedIndexChange', e, {\n          ...latestProps.current,\n          selectedIndex: itemIndex,\n        });\n      }\n    },\n    [latestProps, setSelectedIndex],\n  );\n\n  const childProps: ListContextValue = {\n    debug,\n    navigable,\n    onItemClick,\n    selectable,\n    selectedIndex,\n    truncateContent,\n    truncateHeader,\n    variables,\n  };\n  const renderItems = () => _.map(items, (item, index) => ListItem.create(item, { defaultProps: () => ({ index }) }));\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      <ListContextProvider value={childProps}>\n        {hasContent && wrap(childrenExist(children) ? children : renderItems())}\n      </ListContextProvider>\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nList.displayName = 'List';\n\nList.defaultProps = {\n  as: 'ul',\n  accessibility: listBehavior,\n  wrap: children => children,\n};\nList.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  debug: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  selectable: customPropTypes.every([customPropTypes.disallow(['navigable']), PropTypes.bool]),\n  navigable: customPropTypes.every([customPropTypes.disallow(['selectable']), PropTypes.bool]),\n  truncateContent: PropTypes.bool,\n  truncateHeader: PropTypes.bool,\n  selectedIndex: PropTypes.number,\n  defaultSelectedIndex: PropTypes.number,\n  onSelectedIndexChange: PropTypes.func,\n  horizontal: PropTypes.bool,\n  wrap: PropTypes.func,\n};\n\nList.handledProps = Object.keys(List.propTypes) as any;\nList.Item = ListItem;\n\nList.create = createShorthandFactory({ Component: List, mappedArrayProp: 'items' });\n"]},"metadata":{},"sourceType":"module"}