{"ast":null,"code":"import { pxToRem } from '../../../../utils';\n\nvar getBackgroundColor = function getBackgroundColor(state, variables) {\n  switch (state) {\n    case 'success':\n      return variables.successBackgroundColor;\n\n    case 'info':\n      return variables.infoBackgroundColor;\n\n    case 'warning':\n      return variables.warningBackgroundColor;\n\n    case 'error':\n      return variables.errorBackgroundColor;\n\n    case 'unknown':\n    default:\n      return variables.defaultBackgroundColor;\n  }\n};\n\nvar getTextColor = function getTextColor(state, variables) {\n  switch (state) {\n    case 'success':\n      return variables.successTextColor;\n\n    case 'info':\n      return variables.infoTextColor;\n\n    case 'warning':\n      return variables.warningTextColor;\n\n    case 'error':\n      return variables.errorTextColor;\n\n    case 'unknown':\n    default:\n      return variables.defaultTextColor;\n  }\n};\n\nvar sizeToPxValue = {\n  smallest: 6,\n  smaller: 10,\n  small: 10,\n  medium: 10,\n  large: 10,\n  larger: 16,\n  largest: 0\n};\nexport var getSizeStyles = function getSizeStyles(sizeInPx, variables) {\n  var borderWidth = variables.borderColor && variables.borderWidth || 0;\n  var sizeInRem = pxToRem(sizeInPx + 2 * borderWidth);\n  return {\n    height: sizeInRem,\n    width: sizeInRem\n  };\n};\nexport var statusStyles = {\n  root: function root(_ref) {\n    var _ref$props = _ref.props,\n        color = _ref$props.color,\n        size = _ref$props.size,\n        state = _ref$props.state,\n        variables = _ref.variables;\n    return Object.assign({\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }, getSizeStyles(sizeToPxValue[size], variables), {\n      verticalAlign: 'middle',\n      borderRadius: '9999px'\n    }, variables.borderColor && {\n      borderColor: variables.borderColor,\n      borderWidth: pxToRem(variables.borderWidth),\n      borderStyle: 'solid'\n    }, {\n      backgroundColor: color || getBackgroundColor(state, variables)\n    });\n  },\n  icon: function icon(_ref2) {\n    var state = _ref2.props.state,\n        v = _ref2.variables;\n    return {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: v.iconSize,\n      height: v.iconSize,\n      color: getTextColor(state, v),\n      '& > :first-child': {\n        height: '100%',\n        width: '100%',\n        '& svg': {\n          height: '100%',\n          width: '100%'\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Status/statusStyles.ts"],"names":["getBackgroundColor","variables","getTextColor","sizeToPxValue","smallest","smaller","small","medium","large","larger","largest","getSizeStyles","borderWidth","sizeInRem","pxToRem","sizeInPx","height","width","statusStyles","root","props","color","size","state","display","alignItems","justifyContent","verticalAlign","borderRadius","borderColor","borderStyle","backgroundColor","icon","v"],"mappings":"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","sourcesContent":["import { pxToRem, SizeValue } from '../../../../utils';\nimport { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { StatusStylesProps } from '../../../../components/Status/Status';\nimport { StatusVariables } from './statusVariables';\n\nconst getBackgroundColor = (state: string, variables: StatusVariables) => {\n  switch (state) {\n    case 'success':\n      return variables.successBackgroundColor;\n    case 'info':\n      return variables.infoBackgroundColor;\n    case 'warning':\n      return variables.warningBackgroundColor;\n    case 'error':\n      return variables.errorBackgroundColor;\n    case 'unknown':\n    default:\n      return variables.defaultBackgroundColor;\n  }\n};\n\nconst getTextColor = (state: string, variables: StatusVariables) => {\n  switch (state) {\n    case 'success':\n      return variables.successTextColor;\n    case 'info':\n      return variables.infoTextColor;\n    case 'warning':\n      return variables.warningTextColor;\n    case 'error':\n      return variables.errorTextColor;\n    case 'unknown':\n    default:\n      return variables.defaultTextColor;\n  }\n};\n\nconst sizeToPxValue: Record<SizeValue, number> = {\n  smallest: 6,\n  smaller: 10,\n  small: 10,\n  medium: 10,\n  large: 10,\n  larger: 16,\n  largest: 0,\n};\n\nexport const getSizeStyles = (sizeInPx: number, variables: StatusVariables) => {\n  const borderWidth = (variables.borderColor && variables.borderWidth) || 0;\n  const sizeInRem = pxToRem(sizeInPx + 2 * borderWidth);\n\n  return {\n    height: sizeInRem,\n    width: sizeInRem,\n  };\n};\n\nexport const statusStyles: ComponentSlotStylesPrepared<StatusStylesProps, StatusVariables> = {\n  root: ({ props: { color, size, state }, variables }): ICSSInJSStyle => {\n    return {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      ...getSizeStyles(sizeToPxValue[size], variables),\n      verticalAlign: 'middle',\n      borderRadius: '9999px',\n      ...(variables.borderColor && {\n        borderColor: variables.borderColor,\n        borderWidth: pxToRem(variables.borderWidth),\n        borderStyle: 'solid',\n      }),\n      backgroundColor: color || getBackgroundColor(state, variables),\n    };\n  },\n\n  icon: ({ props: { state }, variables: v }): ICSSInJSStyle => ({\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: v.iconSize,\n    height: v.iconSize,\n    color: getTextColor(state, v),\n    '& > :first-child': {\n      height: '100%',\n      width: '100%',\n      '& svg': {\n        height: '100%',\n        width: '100%',\n      },\n    },\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}