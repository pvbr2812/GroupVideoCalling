{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n/**\n * @specification\n * Adds role 'presentation' to 'wrapper' slot.\n * Adds role 'tab' to 'root' slot.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-selected=true' based on the property 'active'. This can be overriden by providing 'aria-selected' property directly to the component.\n * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.\n * Adds attribute 'aria-controls' based on the property 'aria-controls' to 'root' slot.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\n\nexport var tabBehavior = function tabBehavior(props) {\n  var _root;\n\n  return {\n    attributes: {\n      wrapper: {\n        role: 'presentation'\n      },\n      root: (_root = {\n        role: 'tab',\n        tabIndex: 0,\n        'aria-selected': !!props.active,\n        'aria-label': props['aria-label'],\n        'aria-labelledby': props['aria-labelledby'],\n        'aria-describedby': props['aria-describedby'],\n        'aria-controls': props['aria-controls'],\n        'aria-disabled': props['disabled']\n      }, _root[IS_FOCUSABLE_ATTRIBUTE] = !props.disabled, _root)\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["behaviors/Tab/tabBehavior.ts"],"names":["tabBehavior","attributes","wrapper","role","root","tabIndex","props","keyActions","performClick","keyCombinations","keyCode","keyboardKey","Enter","SpacebarKey"],"mappings":"AAAA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAEA,SAAA,sBAAA,QAAA,kBAAA;AAGA;;;;;;;;;;;;;;;AAcA,OAAO,IAAMA,WAA4C,GAAG,SAA/CA,WAA+C,CAAA,KAAA,EAAK;AAAA,MAAA,KAAA;;AAAA,SAAK;AACpEC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC,OADC;AAIVC,MAAAA,IAAI,GAAA,KAAA,GAAA;AACFD,QAAAA,IAAI,EADF,KAAA;AAEFE,QAAAA,QAAQ,EAFN,CAAA;AAGF,yBAAiB,CAAC,CAACC,KAAK,CAHtB,MAAA;AAIF,sBAAcA,KAAK,CAJjB,YAIiB,CAJjB;AAKF,2BAAmBA,KAAK,CALtB,iBAKsB,CALtB;AAMF,4BAAoBA,KAAK,CANvB,kBAMuB,CANvB;AAOF,yBAAiBA,KAAK,CAPpB,eAOoB,CAPpB;AAQF,yBAAiBA,KAAK,CAAA,UAAA;AARpB,OAAA,EAAA,KAAA,CAAA,sBAAA,CAAA,GASwB,CAACA,KAAK,CAT9B,QAAA,EAAA,KAAA;AAJM,KADwD;AAkBpEC,IAAAA,UAAU,EAAE;AACVH,MAAAA,IAAI,EAAE;AACJI,QAAAA,YAAY,EAAE;AACZC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD,EAAiC;AAAEF,YAAAA,OAAO,EAAEG;AAAX,WAAjC;AADL;AADV;AADI;AAlBwD,GAAL;AAA1D,CAAA","sourcesContent":["import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @specification\n * Adds role 'presentation' to 'wrapper' slot.\n * Adds role 'tab' to 'root' slot.\n * Adds attribute 'tabIndex=0' to 'root' slot.\n * Adds attribute 'data-is-focusable=false' to 'root' slot if 'disabled' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-selected=true' based on the property 'active'. This can be overriden by providing 'aria-selected' property directly to the component.\n * Adds attribute 'aria-label' based on the property 'aria-label' to 'root' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'root' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'root' slot.\n * Adds attribute 'aria-controls' based on the property 'aria-controls' to 'root' slot.\n * Adds attribute 'aria-disabled=true' based on the property 'disabled'. This can be overriden by providing 'aria-disabled' property directly to the component.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n */\nexport const tabBehavior: Accessibility<TabBehaviorProps> = props => ({\n  attributes: {\n    wrapper: {\n      role: 'presentation',\n    },\n    root: {\n      role: 'tab',\n      tabIndex: 0,\n      'aria-selected': !!props.active,\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-describedby': props['aria-describedby'],\n      'aria-controls': props['aria-controls'],\n      'aria-disabled': props['disabled'],\n      [IS_FOCUSABLE_ATTRIBUTE]: !props.disabled,\n    },\n  },\n\n  keyActions: {\n    root: {\n      performClick: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n  },\n});\n\nexport type TabBehaviorProps = {\n  /** Indicates if tab is selected. */\n  active?: boolean;\n  /** Indicates if tab is disabled. */\n  disabled?: boolean;\n} & Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'aria-controls'>;\n"]},"metadata":{},"sourceType":"module"}