{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport _get from \"lodash/get\";\nimport { textAreaBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useAutoControlled, getElementType, useTelemetry, useUnhandledProps, useFluentContext, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var textAreaClassName = 'ui-textarea';\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\n\nexport var TextArea = /*#__PURE__*/function () {\n  var TextArea = function TextArea(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(TextArea.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var disabled = props.disabled,\n        accessibility = props.accessibility,\n        inverted = props.inverted,\n        resize = props.resize,\n        fluid = props.fluid,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultValue,\n      value: props.value,\n      initialValue: ''\n    }),\n        value = _useAutoControlled[0],\n        setValue = _useAutoControlled[1];\n\n    var unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: TextArea.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          disabled: disabled\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(TextArea.displayName, {\n      className: textAreaClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          inverted: inverted,\n          resize: resize,\n          fluid: fluid,\n          disabled: disabled\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n\n    var handleChange = function handleChange(e) {\n      var newValue = _get(e, 'target.value');\n\n      _invoke(props, 'onChange', e, Object.assign({}, props, {\n        value: newValue\n      }));\n\n      setValue(newValue);\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      value: value,\n      disabled: disabled,\n      onChange: handleChange\n    }, unhandledProps)));\n    setEnd();\n    return element;\n  };\n\n  TextArea.displayName = 'TextArea';\n  TextArea.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    defaultValue: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    disabled: PropTypes.bool,\n    inverted: PropTypes.bool\n  });\n  TextArea.defaultProps = {\n    as: 'textarea',\n    accessibility: textAreaBehavior\n  };\n  TextArea.handledProps = Object.keys(TextArea.propTypes);\n  TextArea.create = createShorthandFactory({\n    Component: TextArea\n  });\n  return TextArea;\n}();","map":{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaClassName","TextArea","context","useFluentContext","setStart","setEnd","useTelemetry","disabled","accessibility","inverted","resize","fluid","className","design","styles","variables","props","value","setValue","useAutoControlled","defaultValue","initialValue","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","handleChange","newValue","element","onChange","content","PropTypes","bool","as","textAreaBehavior","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, textAreaBehavior, TextAreaBehaviorProps } from '@fluentui/accessibility';\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes, createShorthandFactory } from '../../utils';\nimport {\n  ComponentWithAs,\n  useAutoControlled,\n  getElementType,\n  useTelemetry,\n  useUnhandledProps,\n  useFluentContext,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TextAreaBehaviorProps>;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n}\n\nexport type TextAreaStylesProps = Required<Pick<TextAreaProps, 'inverted' | 'resize' | 'fluid' | 'disabled'>>;\n\nexport const textAreaClassName = 'ui-textarea';\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport const TextArea: ComponentWithAs<'textarea', TextAreaProps> &\n  FluentComponentStaticProps<TextAreaProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TextArea.displayName, context.telemetry);\n\n  setStart();\n\n  const { disabled, accessibility, inverted, resize, fluid, className, design, styles, variables } = props;\n\n  const [value, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    value: props.value,\n    initialValue: '',\n  });\n\n  const unhandledProps = useUnhandledProps(TextArea.handledProps, props);\n\n  const getA11yProps = useAccessibility<TextAreaBehaviorProps>(accessibility, {\n    debugName: TextArea.displayName,\n    mapPropsToBehavior: () => ({\n      disabled,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<TextAreaStylesProps>(TextArea.displayName, {\n    className: textAreaClassName,\n    mapPropsToStyles: () => ({\n      inverted,\n      resize,\n      fluid,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n\n  const handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const newValue = _.get(e, 'target.value');\n\n    _.invoke(props, 'onChange', e, { ...props, value: newValue });\n    setValue(newValue);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        value,\n        disabled,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    />\n  );\n  setEnd();\n  return element;\n};\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  inverted: PropTypes.bool,\n};\n\nTextArea.defaultProps = {\n  as: 'textarea',\n  accessibility: textAreaBehavior,\n};\n\nTextArea.handledProps = Object.keys(TextArea.propTypes) as any;\n\nTextArea.create = createShorthandFactory({\n  Component: TextArea,\n});\n"]},"metadata":{},"sourceType":"module"}