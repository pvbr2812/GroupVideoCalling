{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\n\nvar ExpiringAccessTokenCache =\n/** @class */\nfunction () {\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  function ExpiringAccessTokenCache(tokenRefreshBufferMs) {\n    if (tokenRefreshBufferMs === void 0) {\n      tokenRefreshBufferMs = TokenRefreshBufferMs;\n    }\n\n    this.cachedToken = undefined;\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  ExpiringAccessTokenCache.prototype.setCachedToken = function (accessToken) {\n    this.cachedToken = accessToken;\n  };\n\n  ExpiringAccessTokenCache.prototype.getCachedToken = function () {\n    if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  };\n\n  return ExpiringAccessTokenCache;\n}();\n\nexport { ExpiringAccessTokenCache };","map":{"version":3,"sources":["../../../src/credentials/accessTokenCache.ts"],"names":[],"mappings":"AAAA;AACA;;AAIA;;AAEG;AACH,OAAO,IAAM,oBAAoB,GAAG,IAAI,EAAJ,GAAS,IAAtC,C,CAA4C;;AAqBnD;;;;AAIG;;AACH,IAAA,wBAAA;AAAA;AAAA,YAAA;AAIE;;;AAGG;AACH,WAAA,wBAAA,CAAY,oBAAZ,EAA+D;AAAnD,QAAA,oBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,oBAAA,GAAA,oBAAA;AAAmD;;AANvD,SAAA,WAAA,GAA4B,SAA5B;AAON,SAAK,oBAAL,GAA4B,oBAA5B;AACD;;AAED,EAAA,wBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,WAAf,EAAmD;AACjD,SAAK,WAAL,GAAmB,WAAnB;AACD,GAFD;;AAIA,EAAA,wBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,QACE,KAAK,WAAL,IACA,IAAI,CAAC,GAAL,KAAa,KAAK,oBAAlB,IAA0C,KAAK,WAAL,CAAiB,kBAF7D,EAGE;AACA,WAAK,WAAL,GAAmB,SAAnB;AACD;;AAED,WAAO,KAAK,WAAZ;AACD,GATD;;AAUF,SAAA,wBAAA;AAAC,CA1BD,EAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken } from \"@azure/core-auth\";\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides a cache for an AccessToken that was that\n * was returned from a TokenCredential.\n */\nexport interface AccessTokenCache {\n  /**\n   * Sets the cached token.\n   *\n   * @param accessToken - The {@link AccessToken} to be cached or null to\n   *        clear the cached token.\n   */\n  setCachedToken(accessToken: AccessToken | undefined): void;\n\n  /**\n   * Returns the cached {@link AccessToken} or undefined if nothing is cached.\n   */\n  getCachedToken(): AccessToken | undefined;\n}\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n */\nexport class ExpiringAccessTokenCache implements AccessTokenCache {\n  private tokenRefreshBufferMs: number;\n  private cachedToken?: AccessToken = undefined;\n\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs: number = TokenRefreshBufferMs) {\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n\n  setCachedToken(accessToken: AccessToken | undefined): void {\n    this.cachedToken = accessToken;\n  }\n\n  getCachedToken(): AccessToken | undefined {\n    if (\n      this.cachedToken &&\n      Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp\n    ) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}