{"ast":null,"code":"import _has from \"lodash/has\";\nimport { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { Image } from '../Image/Image';\nimport { Box } from '../Box/Box';\nexport var labelClassName = 'ui-label';\n/**\n * A Label allows user to classify content.\n */\n\nexport var Label = /*#__PURE__*/function () {\n  var Label = function Label(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Label.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        circular = props.circular,\n        color = props.color,\n        content = props.content,\n        icon = props.icon,\n        iconPosition = props.iconPosition,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        image = props.image,\n        imagePosition = props.imagePosition;\n    var getA11Props = useAccessibility(accessibility, {\n      debugName: Label.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Label.displayName, {\n      className: labelClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          hasActionableIcon: _has(icon, 'onClick'),\n          hasImage: !!image,\n          hasIcon: !!icon,\n          circular: circular,\n          color: color,\n          imagePosition: imagePosition,\n          iconPosition: iconPosition\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Label.handledProps, props);\n\n    if (childrenExist(children)) {\n      var _element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n        className: classes.root\n      }, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps)), children);\n\n      setEnd();\n      return _element;\n    }\n\n    var imageElement = Image.create(image, {\n      defaultProps: function defaultProps() {\n        return {\n          styles: resolvedStyles.image\n        };\n      }\n    });\n    var iconElement = Box.create(icon, {\n      defaultProps: function defaultProps() {\n        return {\n          styles: resolvedStyles.icon\n        };\n      }\n    });\n    var contentElement = Box.create(content, {\n      defaultProps: function defaultProps() {\n        return {\n          styles: resolvedStyles.content\n        };\n      }\n    });\n    var startImage = imagePosition === 'start' && imageElement;\n    var startIcon = iconPosition === 'start' && iconElement;\n    var endIcon = iconPosition === 'end' && iconElement;\n    var endImage = imagePosition === 'end' && imageElement;\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), startImage, startIcon, contentElement, endIcon, endImage);\n    setEnd();\n    return element;\n  };\n\n  Label.displayName = 'Label';\n  Label.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    color: true,\n    content: 'shorthand'\n  }), {\n    circular: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconPosition: PropTypes.oneOf(['start', 'end']),\n    image: customPropTypes.itemShorthandWithoutJSX,\n    imagePosition: PropTypes.oneOf(['start', 'end']),\n    fluid: PropTypes.bool\n  });\n  Label.handledProps = Object.keys(Label.propTypes);\n  Label.defaultProps = {\n    as: 'span',\n    imagePosition: 'start',\n    iconPosition: 'end'\n  };\n  Label.create = createShorthandFactory({\n    Component: Label,\n    mappedProp: 'content'\n  });\n  return Label;\n}();","map":{"version":3,"sources":["components/Label/Label.tsx"],"names":["labelClassName","Label","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","children","className","circular","color","content","icon","iconPosition","design","styles","variables","image","imagePosition","props","getA11Props","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasActionableIcon","hasImage","hasIcon","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","childrenExist","element","root","forElements","imageElement","defaultProps","iconElement","contentElement","startImage","startIcon","endIcon","endImage","PropTypes","customPropTypes","fluid","bool","Object","as","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  ColorComponentProps,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { Image, ImageProps } from '../Image/Image';\nimport { Box, BoxProps } from '../Box/Box';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\n\nexport interface LabelProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ColorComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A Label can be circular. */\n  circular?: boolean;\n\n  /** A Label can take up the width of its container. */\n  fluid?: boolean;\n\n  /** A Label can have an icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** A Label can position its Icon at the start or end of the layout. */\n  iconPosition?: 'start' | 'end';\n\n  /** A Label can contain an image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** A Label can position its image at the start or end of the layout. */\n  imagePosition?: 'start' | 'end';\n}\n\nexport type LabelStylesProps = Pick<LabelProps, 'circular' | 'color' | 'imagePosition' | 'iconPosition'> & {\n  hasImage: boolean;\n  hasIcon: boolean;\n  hasActionableIcon: boolean;\n};\nexport const labelClassName = 'ui-label';\n\n/**\n * A Label allows user to classify content.\n */\nexport const Label: ComponentWithAs<'span', LabelProps> & FluentComponentStaticProps = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Label.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    circular,\n    color,\n    content,\n    icon,\n    iconPosition,\n    design,\n    styles,\n    variables,\n    image,\n    imagePosition,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Label.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<LabelStylesProps>(Label.displayName, {\n    className: labelClassName,\n    mapPropsToStyles: () => ({\n      hasActionableIcon: _.has(icon, 'onClick'),\n      hasImage: !!image,\n      hasIcon: !!icon,\n      circular,\n      color,\n      imagePosition,\n      iconPosition,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Label.handledProps, props);\n\n  if (childrenExist(children)) {\n    const element = (\n      <ElementType\n        {...getA11Props('root', {\n          className: classes.root,\n          ...rtlTextContainer.getAttributes({ forElements: [children] }),\n          ...unhandledProps,\n        })}\n      >\n        {children}\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  }\n\n  const imageElement = Image.create(image, {\n    defaultProps: () => ({\n      styles: resolvedStyles.image,\n    }),\n  });\n  const iconElement = Box.create(icon, {\n    defaultProps: () => ({\n      styles: resolvedStyles.icon,\n    }),\n  });\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const startImage = imagePosition === 'start' && imageElement;\n  const startIcon = iconPosition === 'start' && iconElement;\n  const endIcon = iconPosition === 'end' && iconElement;\n  const endImage = imagePosition === 'end' && imageElement;\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {startImage}\n      {startIcon}\n      {contentElement}\n      {endIcon}\n      {endImage}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nLabel.displayName = 'Label';\n\nLabel.propTypes = {\n  ...commonPropTypes.createCommon({ color: true, content: 'shorthand' }),\n  circular: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  image: customPropTypes.itemShorthandWithoutJSX,\n  imagePosition: PropTypes.oneOf(['start', 'end']),\n  fluid: PropTypes.bool,\n};\nLabel.handledProps = Object.keys(Label.propTypes) as any;\n\nLabel.defaultProps = {\n  as: 'span',\n  imagePosition: 'start',\n  iconPosition: 'end',\n};\n\nLabel.create = createShorthandFactory({ Component: Label, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}