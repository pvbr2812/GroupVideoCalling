{"ast":null,"code":"import { formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, getOrGenerateIdFromShorthand, createShorthand } from '../../../utils';\nimport { Box } from '../../Box/Box';\nimport { getElementType, useUnhandledProps, useTelemetry, useAccessibility, useFluentContext, compose, useStyles } from '@fluentui/react-bindings';\nimport { FormLabel } from '../FormLabel';\nimport { FormMessage } from '../FormMessage';\nimport { FormFieldBaseProvider } from './formFieldBaseContext';\nexport var formFieldBaseClassName = 'ui-form__field__base';\n/**\n * A FormFiedBase represents a Form element containing a label and an input.\n */\n\nexport var _FormFieldBase = /*#__PURE__*/function () {\n  var _FormFieldBase = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var message = props.message,\n        inline = props.inline,\n        errorMessage = props.errorMessage,\n        control = props.control,\n        label = props.label,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var messageId = React.useRef();\n    messageId.current = getOrGenerateIdFromShorthand('error-message-', errorMessage || message, messageId.current);\n    var labelId = React.useRef();\n    labelId.current = getOrGenerateIdFromShorthand('form-label-', label, labelId.current);\n\n    var _useStyles = useStyles(_FormFieldBase.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          hasErrorMessage: !!errorMessage,\n          messageId: messageId.current,\n          labelId: labelId.current\n        };\n      },\n      rtl: context.rtl\n    });\n    var childProps = React.useMemo(function () {\n      return {\n        labelId: labelId.current\n      };\n    }, // TODO: create hooks for id to avoid disbaling esling for accessing the value of refs\n    // eslint-disable-next-line\n    [labelId.current]);\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', {\n      className: classes.root\n    }), createShorthand(composeOptions.slots.label, label, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('label', Object.assign({\n          id: labelId.current,\n          inline: inline\n        }, slotProps.label));\n      }\n    }), /*#__PURE__*/React.createElement(FormFieldBaseProvider, {\n      value: childProps\n    }, createShorthand(composeOptions.slots.control, control || {}, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('control', Object.assign({\n          error: !!errorMessage || null,\n          ref: ref\n        }, unhandledProps, slotProps.control));\n      }\n    })), createShorthand(composeOptions.slots.message, errorMessage || message, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('message', Object.assign({\n          id: messageId.current\n        }, slotProps.message));\n      }\n    }));\n    setEnd();\n    return element;\n  }, {\n    className: formFieldBaseClassName,\n    displayName: 'FormFieldBase',\n    slots: {\n      label: FormLabel,\n      message: FormMessage,\n      control: Box\n    },\n    handledProps: ['as', 'accessibility', 'className', 'variables', 'design', 'styles', 'inline', 'errorMessage', 'message'],\n    shorthandConfig: {\n      mappedProp: 'control'\n    }\n  });\n\n  _FormFieldBase.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false\n  }), {\n    inline: PropTypes.bool,\n    message: customPropTypes.itemShorthand,\n    errorMessage: customPropTypes.itemShorthand\n  });\n  _FormFieldBase.defaultProps = {\n    accessibility: formFieldBehavior\n  };\n  return _FormFieldBase;\n}();","map":{"version":3,"sources":["components/Form/utils/formFieldBase.tsx"],"names":["formFieldBaseClassName","_FormFieldBase","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","message","inline","errorMessage","control","label","className","design","styles","variables","props","slotProps","ElementType","getElementType","unhandledProps","useUnhandledProps","messageId","React","getOrGenerateIdFromShorthand","labelId","classes","useStyles","mapPropsToInlineStyles","rtl","unstable_props","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","hasErrorMessage","current","childProps","element","root","createShorthand","defaultProps","id","error","ref","displayName","slots","Box","handledProps","shorthandConfig","mappedProp","children","PropTypes","customPropTypes","itemShorthand","accessibility","formFieldBehavior"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, commonPropTypes, getOrGenerateIdFromShorthand, createShorthand } from '../../../utils';\nimport { ShorthandValue } from '../../../types';\nimport { Box, BoxProps } from '../../Box/Box';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n  useFluentContext,\n  compose,\n  useStyles,\n} from '@fluentui/react-bindings';\nimport { FormLabel, FormLabelProps } from '../FormLabel';\nimport { FormMessage, FormMessageProps } from '../FormMessage';\nimport { FormFieldBaseValue, FormFieldBaseProvider } from './formFieldBaseContext';\n\nexport interface FormFieldBaseProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** A control for the form field. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** A label for the form field. */\n  label?: ShorthandValue<FormLabelProps>;\n\n  /** Text message that will be displayed below the control (can be used for error, warning, success messages). */\n  message?: ShorthandValue<FormMessageProps>;\n\n  /** Message to be shown when input has error */\n  errorMessage?: ShorthandValue<FormMessageProps>;\n}\n\nexport const formFieldBaseClassName = 'ui-form__field__base';\nexport type FormFieldBaseStylesProps = never;\n\n/**\n * A FormFiedBase represents a Form element containing a label and an input.\n */\nexport const _FormFieldBase = compose<'div', FormFieldBaseProps, {}, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { message, inline, errorMessage, control, label, className, design, styles, variables } = props;\n\n    const slotProps = composeOptions.resolveSlotProps<FormFieldBaseProps>(props);\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const messageId = React.useRef<string>();\n    messageId.current = getOrGenerateIdFromShorthand('error-message-', errorMessage || message, messageId.current);\n    const labelId = React.useRef<string>();\n    labelId.current = getOrGenerateIdFromShorthand('form-label-', label, labelId.current);\n\n    const { classes } = useStyles<FormFieldBaseStylesProps>(_FormFieldBase.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: () => ({\n        hasErrorMessage: !!errorMessage,\n        messageId: messageId.current,\n        labelId: labelId.current,\n      }),\n      rtl: context.rtl,\n    });\n\n    const childProps: FormFieldBaseValue = React.useMemo(\n      () => ({\n        labelId: labelId.current,\n      }),\n      // TODO: create hooks for id to avoid disbaling esling for accessing the value of refs\n      // eslint-disable-next-line\n      [labelId.current],\n    );\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n        })}\n      >\n        {createShorthand(composeOptions.slots.label, label, {\n          defaultProps: () =>\n            getA11yProps('label', {\n              id: labelId.current,\n              inline,\n              ...slotProps.label,\n            }),\n        })}\n        {/**\n         * When there's a message for the input the labelId and messageId should be consistent in the\n         * aria-labelledby attribute (aria-labelledby=\"labelID messageID\") therefore we need to pass it down\n         * for components like input that are generating its own label internally\n         */}\n        <FormFieldBaseProvider value={childProps}>\n          {createShorthand(composeOptions.slots.control, control || {}, {\n            defaultProps: () =>\n              getA11yProps('control', {\n                error: !!errorMessage || null,\n                ref,\n                ...unhandledProps,\n                ...slotProps.control,\n              }),\n          })}\n        </FormFieldBaseProvider>\n        {createShorthand(composeOptions.slots.message, errorMessage || message, {\n          defaultProps: () =>\n            getA11yProps('message', {\n              id: messageId.current,\n              ...slotProps.message,\n            }),\n        })}\n      </ElementType>\n    );\n    setEnd();\n    return element;\n  },\n  {\n    className: formFieldBaseClassName,\n    displayName: 'FormFieldBase',\n    slots: {\n      label: FormLabel,\n      message: FormMessage,\n      control: Box,\n    },\n    handledProps: [\n      'as',\n      'accessibility',\n      'className',\n      'variables',\n      'design',\n      'styles',\n      'inline',\n      'errorMessage',\n      'message',\n    ],\n    shorthandConfig: {\n      mappedProp: 'control',\n    },\n  },\n);\n\n_FormFieldBase.propTypes = {\n  ...commonPropTypes.createCommon({ children: false }),\n  inline: PropTypes.bool,\n  message: customPropTypes.itemShorthand,\n  errorMessage: customPropTypes.itemShorthand,\n};\n\n_FormFieldBase.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n"]},"metadata":{},"sourceType":"module"}