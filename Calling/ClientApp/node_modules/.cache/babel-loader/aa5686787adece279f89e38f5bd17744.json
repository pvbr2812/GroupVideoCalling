{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { getCache } from \"./utils/cache\";\nvar defaultTracer;\n\nfunction getDefaultTracer() {\n  if (!defaultTracer) {\n    defaultTracer = new NoOpTracer();\n  }\n\n  return defaultTracer;\n}\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\n\n\nexport function setTracer(tracer) {\n  var cache = getCache();\n  cache.tracer = tracer;\n}\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\n\nexport function getTracer() {\n  var cache = getCache();\n\n  if (!cache.tracer) {\n    return getDefaultTracer();\n  }\n\n  return cache.tracer;\n}","map":{"version":3,"sources":["../../src/tracerProxy.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,UAAT,QAA2B,2BAA3B;AAEA,SAAS,QAAT,QAAyB,eAAzB;AAEA,IAAI,aAAJ;;AAEA,SAAS,gBAAT,GAAyB;AACvB,MAAI,CAAC,aAAL,EAAoB;AAClB,IAAA,aAAa,GAAG,IAAI,UAAJ,EAAhB;AACD;;AACD,SAAO,aAAP;AACD;AAED;;;AAGG;;;AACH,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAkC;AACtC,MAAM,KAAK,GAAG,QAAQ,EAAtB;AACA,EAAA,KAAK,CAAC,MAAN,GAAe,MAAf;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,SAAV,GAAmB;AACvB,MAAM,KAAK,GAAG,QAAQ,EAAtB;;AACA,MAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,WAAO,gBAAgB,EAAvB;AACD;;AACD,SAAO,KAAK,CAAC,MAAb;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { NoOpTracer } from \"./tracers/noop/noOpTracer\";\nimport { Tracer } from \"@opentelemetry/api\";\nimport { getCache } from \"./utils/cache\";\n\nlet defaultTracer: Tracer;\n\nfunction getDefaultTracer(): Tracer {\n  if (!defaultTracer) {\n    defaultTracer = new NoOpTracer();\n  }\n  return defaultTracer;\n}\n\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer An OpenTelemetry Tracer instance.\n */\nexport function setTracer(tracer: Tracer): void {\n  const cache = getCache();\n  cache.tracer = tracer;\n}\n\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nexport function getTracer(): Tracer {\n  const cache = getCache();\n  if (!cache.tracer) {\n    return getDefaultTracer();\n  }\n  return cache.tracer;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}