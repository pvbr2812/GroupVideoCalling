{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { dialogBehavior } from '@fluentui/accessibility';\nimport { useAutoControlled, useTelemetry, useAccessibility, useStyles, useFluentContext, useUnhandledProps, getElementType } from '@fluentui/react-bindings';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport { lockBodyScroll, unlockBodyScroll } from './utils';\nimport { commonPropTypes, doesNodeContainClick, getOrGenerateIdFromShorthand, createShorthand, createShorthandFactory } from '../../utils';\nimport { Button } from '../Button/Button';\nimport { ButtonGroup } from '../Button/ButtonGroup';\nimport { Box } from '../Box/Box';\nimport { Header } from '../Header/Header';\nimport { Portal } from '../Portal/Portal';\nimport { Flex } from '../Flex/Flex';\nimport { DialogFooter } from './DialogFooter';\nexport var dialogClassName = 'ui-dialog';\nexport var dialogSlotClassNames = {\n  header: dialogClassName + \"__header\",\n  headerAction: dialogClassName + \"__headerAction\",\n  content: dialogClassName + \"__content\",\n  overlay: dialogClassName + \"__overlay\",\n  footer: dialogClassName + \"__footer\"\n};\n/**\n * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.\n * Dialogs are purposefully interruptive, so they should be used sparingly.\n *\n * @accessibility\n * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.\n * @accessibilityIssues\n * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)\n * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)\n * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)\n * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)\n */\n\nexport var Dialog = /*#__PURE__*/function () {\n  var Dialog = function Dialog(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Dialog.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        content = props.content,\n        header = props.header,\n        actions = props.actions,\n        cancelButton = props.cancelButton,\n        closeOnOutsideClick = props.closeOnOutsideClick,\n        confirmButton = props.confirmButton,\n        headerAction = props.headerAction,\n        overlay = props.overlay,\n        trapFocus = props.trapFocus,\n        trigger = props.trigger,\n        footer = props.footer,\n        backdrop = props.backdrop,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Dialog.handledProps, props);\n    var contentRef = React.useRef();\n    var overlayRef = React.useRef();\n    var triggerRef = React.useRef();\n    var contentId = React.useRef();\n    contentId.current = getOrGenerateIdFromShorthand('dialog-content-', content, contentId.current);\n    var headerId = React.useRef();\n    headerId.current = getOrGenerateIdFromShorthand('dialog-header-', header, headerId.current);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Dialog.displayName,\n      actionHandlers: {\n        closeAndFocusTrigger: function closeAndFocusTrigger(e) {\n          handleDialogCancel(e);\n          e.stopPropagation();\n\n          _invoke(triggerRef, 'current.focus');\n        },\n        close: function close(e) {\n          return handleDialogCancel(e);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          headerId: headerId.current,\n          contentId: contentId.current,\n          trapFocus: trapFocus,\n          trigger: trigger\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Dialog.displayName, {\n      className: dialogClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          backdrop: backdrop\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultOpen,\n      value: props.open,\n      initialValue: false\n    }),\n        open = _useAutoControlled[0],\n        setOpen = _useAutoControlled[1];\n\n    React.useEffect(function () {\n      if (open) {\n        lockBodyScroll(context.target);\n      }\n\n      return function () {\n        if (open) {\n          unlockBodyScroll(context.target);\n        }\n      };\n    }, [context.target, open]);\n\n    var handleDialogCancel = function handleDialogCancel(e) {\n      _invoke(props, 'onCancel', e, Object.assign({}, props, {\n        open: false\n      }));\n\n      setOpen(false);\n    };\n\n    var handleDialogConfirm = function handleDialogConfirm(e) {\n      _invoke(props, 'onConfirm', e, Object.assign({}, props, {\n        open: false\n      }));\n\n      setOpen(false);\n    };\n\n    var handleDialogOpen = function handleDialogOpen(e) {\n      _invoke(props, 'onOpen', e, Object.assign({}, props, {\n        open: true\n      }));\n\n      setOpen(true);\n    };\n\n    var handleCancelButtonOverrides = function handleCancelButtonOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          handleDialogCancel(e);\n        }\n      };\n    };\n\n    var handleConfirmButtonOverrides = function handleConfirmButtonOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          handleDialogConfirm(e);\n        }\n      };\n    };\n\n    var handleOverlayClick = function handleOverlayClick(e) {\n      // Dialog has different conditions to close than Popup, so we don't need to iterate across all\n      // refs\n      var isInsideContentClick = doesNodeContainClick(contentRef.current, e, context.target);\n      var isInsideOverlayClick = doesNodeContainClick(overlayRef.current, e, context.target);\n      var shouldClose = !isInsideContentClick && isInsideOverlayClick;\n\n      if (shouldClose) {\n        handleDialogCancel(e);\n      }\n    };\n\n    var handleDocumentKeydown = function handleDocumentKeydown(getRefs) {\n      return function (e) {\n        // if focus was lost from Dialog, for e.g. when click on Dialog's content\n        // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus\n        var lastOverlayRef = getRefs().pop();\n        var isLastOpenedDialog = lastOverlayRef && lastOverlayRef.current === overlayRef.current;\n        var targetIsBody = e.target.nodeName === 'BODY';\n\n        if (targetIsBody && getCode(e) === keyboardKey.Escape && isLastOpenedDialog) {\n          handleDialogCancel(e);\n\n          _invoke(triggerRef, 'current.focus');\n        }\n      };\n    };\n\n    var cancelElement = createShorthand(Button, cancelButton, {\n      overrideProps: handleCancelButtonOverrides\n    });\n    var confirmElement = createShorthand(Button, confirmButton, {\n      defaultProps: function defaultProps() {\n        return {\n          primary: true\n        };\n      },\n      overrideProps: handleConfirmButtonOverrides\n    });\n    var dialogActions = (cancelElement || confirmElement) && ButtonGroup.create(actions, {\n      defaultProps: function defaultProps() {\n        return {\n          styles: resolvedStyles.actions\n        };\n      },\n      overrideProps: {\n        content: /*#__PURE__*/React.createElement(Flex, {\n          gap: \"gap.smaller\"\n        }, cancelElement, confirmElement)\n      }\n    });\n    var dialogContent = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: contentRef\n    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('popup', Object.assign({\n      className: classes.root\n    }, unhandledProps)), Header.create(header, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('header', {\n          as: 'h2',\n          className: dialogSlotClassNames.header,\n          styles: resolvedStyles.header\n        });\n      }\n    }), createShorthand(Button, headerAction, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('headerAction', {\n          className: dialogSlotClassNames.headerAction,\n          styles: resolvedStyles.headerAction,\n          text: true,\n          iconOnly: true\n        });\n      }\n    }), Box.create(content, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('content', {\n          styles: resolvedStyles.content,\n          className: dialogSlotClassNames.content\n        });\n      }\n    }), DialogFooter.create(footer, {\n      overrideProps: {\n        content: dialogActions,\n        className: dialogSlotClassNames.footer,\n        styles: resolvedStyles.footer\n      }\n    })));\n    var triggerAccessibility = {\n      // refactor this when unstable_behaviorDefinition gets merged\n      attributes: accessibility(props).attributes.trigger,\n      keyHandlers: accessibility(props).keyActions.trigger\n    };\n    var element = /*#__PURE__*/React.createElement(Portal, {\n      onTriggerClick: handleDialogOpen,\n      open: open,\n      trapFocus: trapFocus,\n      trigger: trigger,\n      triggerAccessibility: triggerAccessibility,\n      triggerRef: triggerRef\n    }, /*#__PURE__*/React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Ref, {\n        innerRef: function innerRef(contentNode) {\n          overlayRef.current = contentNode;\n          nestingRef.current = contentNode;\n        }\n      }, Box.create(overlay, {\n        defaultProps: function defaultProps() {\n          return {\n            className: dialogSlotClassNames.overlay,\n            styles: resolvedStyles.overlay\n          };\n        },\n        overrideProps: {\n          content: dialogContent\n        }\n      })), closeOnOutsideClick && /*#__PURE__*/React.createElement(EventListener, {\n        listener: handleOverlayClick,\n        target: context.target,\n        type: \"click\",\n        capture: true\n      }), /*#__PURE__*/React.createElement(EventListener, {\n        listener: handleDocumentKeydown(getRefs),\n        target: context.target,\n        type: \"keydown\",\n        capture: true\n      }));\n    }));\n    setEnd();\n    return element;\n  };\n\n  Dialog.displayName = 'Dialog';\n  Dialog.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: 'shorthand'\n  }), {\n    actions: customPropTypes.itemShorthand,\n    backdrop: PropTypes.bool,\n    headerAction: customPropTypes.itemShorthand,\n    cancelButton: customPropTypes.itemShorthand,\n    closeOnOutsideClick: PropTypes.bool,\n    confirmButton: customPropTypes.itemShorthand,\n    defaultOpen: PropTypes.bool,\n    header: customPropTypes.itemShorthand,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func,\n    onOpen: PropTypes.func,\n    open: PropTypes.bool,\n    overlay: customPropTypes.itemShorthand,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    trigger: PropTypes.any\n  });\n  Dialog.defaultProps = {\n    accessibility: dialogBehavior,\n    actions: {},\n    backdrop: true,\n    closeOnOutsideClick: true,\n    overlay: {},\n    footer: {},\n    trapFocus: true\n  };\n  Dialog.handledProps = Object.keys(Dialog.propTypes);\n  Dialog.Footer = DialogFooter;\n  Dialog.create = createShorthandFactory({\n    Component: Dialog\n  });\n  return Dialog;\n}();","map":{"version":3,"sources":["components/Dialog/Dialog.tsx"],"names":["dialogClassName","dialogSlotClassNames","header","headerAction","content","overlay","footer","Dialog","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","actions","cancelButton","closeOnOutsideClick","confirmButton","trapFocus","trigger","backdrop","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","contentRef","React","overlayRef","triggerRef","contentId","getOrGenerateIdFromShorthand","headerId","getA11yProps","useAccessibility","debugName","actionHandlers","closeAndFocusTrigger","handleDialogCancel","e","close","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","open","setOpen","useAutoControlled","defaultValue","value","initialValue","lockBodyScroll","unlockBodyScroll","handleDialogConfirm","handleDialogOpen","handleCancelButtonOverrides","onClick","handleConfirmButtonOverrides","handleOverlayClick","isInsideContentClick","doesNodeContainClick","isInsideOverlayClick","shouldClose","handleDocumentKeydown","lastOverlayRef","getRefs","isLastOpenedDialog","targetIsBody","getCode","keyboardKey","cancelElement","createShorthand","overrideProps","confirmElement","defaultProps","primary","dialogActions","dialogContent","root","as","text","iconOnly","triggerAccessibility","attributes","keyHandlers","element","nestingRef","children","customPropTypes","PropTypes","defaultOpen","onCancel","onConfirm","onOpen","any","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, dialogBehavior, DialogBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  FocusTrapZoneProps,\n  useAutoControlled,\n  useTelemetry,\n  useAccessibility,\n  useStyles,\n  useFluentContext,\n  useUnhandledProps,\n  getElementType,\n} from '@fluentui/react-bindings';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport { lockBodyScroll, unlockBodyScroll } from './utils';\n\nimport {\n  UIComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  doesNodeContainClick,\n  getOrGenerateIdFromShorthand,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { ButtonGroup } from '../Button/ButtonGroup';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Header, HeaderProps } from '../Header/Header';\nimport { Portal, TriggerAccessibility } from '../Portal/Portal';\nimport { Flex } from '../Flex/Flex';\nimport { DialogFooter, DialogFooterProps } from './DialogFooter';\n\nexport interface DialogSlotClassNames {\n  header: string;\n  headerAction: string;\n  content: string;\n  overlay: string;\n  footer: string;\n}\n\nexport interface DialogProps extends UIComponentProps, ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** A dialog can contain actions. */\n  actions?: ShorthandValue<BoxProps>;\n\n  /** A dialog can have a backdrop on its overlay. */\n  backdrop?: boolean;\n\n  /** A dialog can contain a cancel button. */\n  cancelButton?: ShorthandValue<ButtonProps>;\n\n  /** A dialog can be closed when a user clicks outside of it. */\n  closeOnOutsideClick?: boolean;\n\n  /** A dialog can contain a confirm button. */\n  confirmButton?: ShorthandValue<ButtonProps>;\n\n  /** A dialog can be open by default. */\n  defaultOpen?: boolean;\n\n  /** A dialog can contain a header. */\n  header?: ShorthandValue<HeaderProps>;\n\n  /** A dialog can contain a button next to the header. */\n  headerAction?: ShorthandValue<ButtonProps>;\n\n  /** A dialog can contain a footer. */\n  footer?: ShorthandValue<DialogFooterProps>;\n\n  /**\n   * Called after a user clicks the cancel button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onCancel?: ComponentEventHandler<DialogProps>;\n\n  /**\n   * Called after a user clicks the confirm button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onConfirm?: ComponentEventHandler<DialogProps>;\n\n  /**\n   * Called after a user opens the dialog.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onOpen?: ComponentEventHandler<DialogProps>;\n\n  /** A dialog's open state can be controlled. */\n  open?: boolean;\n\n  /** A dialog can contain a overlay. */\n  overlay?: ShorthandValue<BoxProps>;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value. */\n  trapFocus?: boolean | FocusTrapZoneProps;\n\n  /** Element to be rendered in-place where the dialog is defined. */\n  trigger?: JSX.Element;\n}\n\nexport interface DialogState {\n  contentId?: string;\n  headerId?: string;\n  open?: boolean;\n}\n\nexport const dialogClassName = 'ui-dialog';\nexport const dialogSlotClassNames: DialogSlotClassNames = {\n  header: `${dialogClassName}__header`,\n  headerAction: `${dialogClassName}__headerAction`,\n  content: `${dialogClassName}__content`,\n  overlay: `${dialogClassName}__overlay`,\n  footer: `${dialogClassName}__footer`,\n};\n\nexport type DialogStylesProps = Required<Pick<DialogProps, 'backdrop'>>;\n\n/**\n * A Dialog displays important information on top of a page which requires a user's attention, confirmation, or interaction.\n * Dialogs are purposefully interruptive, so they should be used sparingly.\n *\n * @accessibility\n * Implements [ARIA Dialog (Modal)](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal) design pattern.\n * @accessibilityIssues\n * [NVDA narrates dialog title and button twice](https://github.com/nvaccess/nvda/issues/10003)\n * [NVDA does not recognize the ARIA 1.1 values of aria-haspopup](https://github.com/nvaccess/nvda/issues/8235)\n * [Jaws does not announce token values of aria-haspopup](https://github.com/FreedomScientific/VFO-standards-support/issues/33)\n * [Issue 989517: VoiceOver narrates dialog content and button twice](https://bugs.chromium.org/p/chromium/issues/detail?id=989517)\n */\nexport const Dialog: ComponentWithAs<'div', DialogProps> &\n  FluentComponentStaticProps<DialogProps> & {\n    Footer: typeof DialogFooter;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dialog.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    content,\n    header,\n    actions,\n    cancelButton,\n    closeOnOutsideClick,\n    confirmButton,\n    headerAction,\n    overlay,\n    trapFocus,\n    trigger,\n    footer,\n    backdrop,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dialog.handledProps, props);\n\n  const contentRef = React.useRef<HTMLElement>();\n  const overlayRef = React.useRef<HTMLElement>();\n  const triggerRef = React.useRef<HTMLElement>();\n\n  const contentId = React.useRef<string>();\n  contentId.current = getOrGenerateIdFromShorthand('dialog-content-', content, contentId.current);\n  const headerId = React.useRef<string>();\n  headerId.current = getOrGenerateIdFromShorthand('dialog-header-', header, headerId.current);\n\n  const getA11yProps = useAccessibility<DialogBehaviorProps>(accessibility, {\n    debugName: Dialog.displayName,\n    actionHandlers: {\n      closeAndFocusTrigger: e => {\n        handleDialogCancel(e);\n        e.stopPropagation();\n\n        _.invoke(triggerRef, 'current.focus');\n      },\n      close: e => handleDialogCancel(e),\n    },\n    mapPropsToBehavior: () => ({\n      headerId: headerId.current,\n      contentId: contentId.current,\n      trapFocus,\n      trigger,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DialogStylesProps>(Dialog.displayName, {\n    className: dialogClassName,\n    mapPropsToStyles: () => ({\n      backdrop,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false,\n  });\n\n  React.useEffect(() => {\n    if (open) {\n      lockBodyScroll(context.target);\n    }\n    return () => {\n      if (open) {\n        unlockBodyScroll(context.target);\n      }\n    };\n  }, [context.target, open]);\n\n  const handleDialogCancel = (e: Event | React.SyntheticEvent) => {\n    _.invoke(props, 'onCancel', e, { ...props, open: false });\n    setOpen(false);\n  };\n\n  const handleDialogConfirm = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onConfirm', e, { ...props, open: false });\n    setOpen(false);\n  };\n\n  const handleDialogOpen = (e: React.SyntheticEvent) => {\n    _.invoke(props, 'onOpen', e, { ...props, open: true });\n    setOpen(true);\n  };\n\n  const handleCancelButtonOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      handleDialogCancel(e);\n    },\n  });\n\n  const handleConfirmButtonOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      handleDialogConfirm(e);\n    },\n  });\n\n  const handleOverlayClick = (e: MouseEvent) => {\n    // Dialog has different conditions to close than Popup, so we don't need to iterate across all\n    // refs\n    const isInsideContentClick = doesNodeContainClick(contentRef.current, e, context.target);\n    const isInsideOverlayClick = doesNodeContainClick(overlayRef.current, e, context.target);\n\n    const shouldClose = !isInsideContentClick && isInsideOverlayClick;\n\n    if (shouldClose) {\n      handleDialogCancel(e);\n    }\n  };\n\n  const handleDocumentKeydown = (getRefs: Function) => (e: KeyboardEvent) => {\n    // if focus was lost from Dialog, for e.g. when click on Dialog's content\n    // and ESC is pressed, the opened Dialog should get closed and the trigger should get focus\n    const lastOverlayRef = getRefs().pop();\n    const isLastOpenedDialog: boolean = lastOverlayRef && lastOverlayRef.current === overlayRef.current;\n    const targetIsBody = (e.target as HTMLElement).nodeName === 'BODY';\n\n    if (targetIsBody && getCode(e) === keyboardKey.Escape && isLastOpenedDialog) {\n      handleDialogCancel(e);\n      _.invoke(triggerRef, 'current.focus');\n    }\n  };\n\n  const cancelElement = createShorthand(Button, cancelButton, {\n    overrideProps: handleCancelButtonOverrides,\n  });\n\n  const confirmElement = createShorthand(Button, confirmButton, {\n    defaultProps: () => ({\n      primary: true,\n    }),\n    overrideProps: handleConfirmButtonOverrides,\n  });\n\n  const dialogActions =\n    (cancelElement || confirmElement) &&\n    ButtonGroup.create(actions, {\n      defaultProps: () => ({\n        styles: resolvedStyles.actions,\n      }),\n      overrideProps: {\n        content: (\n          <Flex gap=\"gap.smaller\">\n            {cancelElement}\n            {confirmElement}\n          </Flex>\n        ),\n      },\n    });\n\n  const dialogContent = (\n    <Ref innerRef={contentRef}>\n      <ElementType\n        {...getA11yProps('popup', {\n          className: classes.root,\n          ...unhandledProps,\n        })}\n      >\n        {Header.create(header, {\n          defaultProps: () =>\n            getA11yProps('header', {\n              as: 'h2',\n              className: dialogSlotClassNames.header,\n              styles: resolvedStyles.header,\n            }),\n        })}\n        {createShorthand(Button, headerAction, {\n          defaultProps: () =>\n            getA11yProps('headerAction', {\n              className: dialogSlotClassNames.headerAction,\n              styles: resolvedStyles.headerAction,\n              text: true,\n              iconOnly: true,\n            }),\n        })}\n        {Box.create(content, {\n          defaultProps: () =>\n            getA11yProps('content', {\n              styles: resolvedStyles.content,\n              className: dialogSlotClassNames.content,\n            }),\n        })}\n        {DialogFooter.create(footer, {\n          overrideProps: {\n            content: dialogActions,\n            className: dialogSlotClassNames.footer,\n            styles: resolvedStyles.footer,\n          },\n        })}\n      </ElementType>\n    </Ref>\n  );\n\n  const triggerAccessibility: TriggerAccessibility = {\n    // refactor this when unstable_behaviorDefinition gets merged\n    attributes: accessibility(props).attributes.trigger,\n    keyHandlers: accessibility(props).keyActions.trigger,\n  };\n\n  const element = (\n    <Portal\n      onTriggerClick={handleDialogOpen}\n      open={open}\n      trapFocus={trapFocus}\n      trigger={trigger}\n      triggerAccessibility={triggerAccessibility}\n      triggerRef={triggerRef}\n    >\n      <Unstable_NestingAuto>\n        {(getRefs, nestingRef) => (\n          <>\n            <Ref\n              innerRef={(contentNode: HTMLElement) => {\n                overlayRef.current = contentNode;\n                nestingRef.current = contentNode;\n              }}\n            >\n              {Box.create(overlay, {\n                defaultProps: () => ({\n                  className: dialogSlotClassNames.overlay,\n                  styles: resolvedStyles.overlay,\n                }),\n                overrideProps: { content: dialogContent },\n              })}\n            </Ref>\n\n            {closeOnOutsideClick && (\n              <EventListener listener={handleOverlayClick} target={context.target} type=\"click\" capture />\n            )}\n            <EventListener listener={handleDocumentKeydown(getRefs)} target={context.target} type=\"keydown\" capture />\n          </>\n        )}\n      </Unstable_NestingAuto>\n    </Portal>\n  );\n  setEnd();\n  return element;\n};\n\nDialog.displayName = 'Dialog';\n\nDialog.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: 'shorthand',\n  }),\n  actions: customPropTypes.itemShorthand,\n  backdrop: PropTypes.bool,\n  headerAction: customPropTypes.itemShorthand,\n  cancelButton: customPropTypes.itemShorthand,\n  closeOnOutsideClick: PropTypes.bool,\n  confirmButton: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  onCancel: PropTypes.func,\n  onConfirm: PropTypes.func,\n  onOpen: PropTypes.func,\n  open: PropTypes.bool,\n  overlay: customPropTypes.itemShorthand,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  trigger: PropTypes.any,\n};\n\nDialog.defaultProps = {\n  accessibility: dialogBehavior,\n  actions: {},\n  backdrop: true,\n  closeOnOutsideClick: true,\n  overlay: {},\n  footer: {},\n  trapFocus: true,\n};\n\nDialog.handledProps = Object.keys(Dialog.propTypes) as any;\n\nDialog.Footer = DialogFooter;\n\nDialog.create = createShorthandFactory({\n  Component: Dialog,\n});\n"]},"metadata":{},"sourceType":"module"}