{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Git Uploads\\\\GroupVideoCalling\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\ParticipantStack.tsx\";\nimport * as React from 'react';\nimport { Persona, PersonaSize, Stack, IconButton, PersonaPresence, FontIcon, OverflowSet } from '@fluentui/react';\nimport { itemStyles, participantStackStyle, participantStackTokens, overFlowButtonStyles, iconStyle } from './styles/ParticipantStack.styles';\nimport { utils } from '../Utils/Utils';\nimport { MicIcon, MicOffIcon } from '@fluentui/react-icons-northstar';\n\nconst onRenderItem = item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Persona, {\n  text: item.name,\n  styles: itemStyles,\n  size: PersonaSize.size32,\n  presence: item.state === 'Connected' ? PersonaPresence.online : PersonaPresence.offline,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }\n}), item.isSpeaking ? /*#__PURE__*/React.createElement(MicIcon, {\n  size: \"medium\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 24\n  }\n}) : /*#__PURE__*/React.createElement(MicOffIcon, {\n  size: \"medium\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 52\n  }\n}), item.isScreenSharing && /*#__PURE__*/React.createElement(FontIcon, {\n  className: iconStyle,\n  iconName: \"ScreenCast\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 30\n  }\n}));\n\nconst onRenderOverflowButton = overflowItems => /*#__PURE__*/React.createElement(IconButton, {\n  role: \"menuitem\",\n  title: \"More options\",\n  styles: overFlowButtonStyles,\n  menuIconProps: {\n    iconName: 'More'\n  },\n  menuProps: {\n    items: overflowItems\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }\n});\n\nconst getParticipants = participants => participants.map((item, i) => /*#__PURE__*/React.createElement(OverflowSet, {\n  key: i,\n  items: [item],\n  role: \"menubar\",\n  vertical: false,\n  onRenderOverflowButton: onRenderOverflowButton,\n  onRenderItem: onRenderItem,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }\n}));\n\nexport default (props => {\n  const activeScreenShareStream = props.screenShareStreams && props.screenShareStreams.length === 1;\n  const screenShareStream = props.screenShareStreams[0];\n  const participants = props.remoteParticipants.map(participant => {\n    var _participant$displayN;\n\n    const isScreenSharing = activeScreenShareStream ? screenShareStream.user === participant : false;\n    return {\n      key: utils.getId(participant.identifier),\n      name: (_participant$displayN = participant.displayName) !== null && _participant$displayN !== void 0 ? _participant$displayN : utils.getId(participant.identifier),\n      participant: participant,\n      state: participant.state,\n      isScreenSharing: isScreenSharing,\n      isSpeaking: participant.isSpeaking\n    };\n  });\n  participants.push({\n    key: `${props.userId} (You)`,\n    name: `${props.displayName} (You)`,\n    participant: undefined,\n    state: 'Connected',\n    isScreenSharing: activeScreenShareStream ? utils.getId(screenShareStream.user.identifier) === props.userId : false,\n    isSpeaking: !props.call.isMuted\n  });\n  return /*#__PURE__*/React.createElement(Stack, {\n    className: participantStackStyle,\n    tokens: participantStackTokens,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, getParticipants(participants));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Git Uploads/GroupVideoCalling/Calling/ClientApp/src/components/ParticipantStack.tsx"],"names":["React","Persona","PersonaSize","Stack","IconButton","PersonaPresence","FontIcon","OverflowSet","itemStyles","participantStackStyle","participantStackTokens","overFlowButtonStyles","iconStyle","utils","MicIcon","MicOffIcon","onRenderItem","item","name","size32","state","online","offline","isSpeaking","isScreenSharing","onRenderOverflowButton","overflowItems","iconName","items","getParticipants","participants","map","i","props","activeScreenShareStream","screenShareStreams","length","screenShareStream","remoteParticipants","participant","user","key","getId","identifier","displayName","push","userId","undefined","call","isMuted"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Persona, PersonaSize, Stack, IconButton, PersonaPresence, FontIcon, OverflowSet } from '@fluentui/react';\r\nimport {\r\n  itemStyles,\r\n  participantStackStyle,\r\n  participantStackTokens,\r\n  overFlowButtonStyles,\r\n  iconStyle\r\n} from './styles/ParticipantStack.styles';\r\nimport { RemoteParticipant, Call } from '@azure/communication-calling';\r\nimport { ParticipantStream } from 'core/reducers';\r\nimport { utils } from '../Utils/Utils';\r\nimport { MicIcon, MicOffIcon } from '@fluentui/react-icons-northstar';\r\n\r\nexport interface ParticipantStackProps {\r\n  userId: string;\r\n  displayName: string;\r\n  call: Call;\r\n  callState: string;\r\n  screenShareStreams: ParticipantStream[];\r\n  remoteParticipants: RemoteParticipant[];\r\n}\r\nexport interface CallParticipant {\r\n  key: string;\r\n  name: string;\r\n  participant: RemoteParticipant | undefined;\r\n  state: string;\r\n  isScreenSharing: boolean;\r\n  isSpeaking: boolean;\r\n}\r\n\r\nconst onRenderItem = (item: any): JSX.Element => (\r\n  <>\r\n    <Persona\r\n      text={item.name}\r\n      styles={itemStyles}\r\n      size={PersonaSize.size32}\r\n      presence={item.state === 'Connected' ? PersonaPresence.online : PersonaPresence.offline}\r\n    />\r\n    {item.isSpeaking ? <MicIcon size=\"medium\" /> : <MicOffIcon size=\"medium\" />}\r\n    {item.isScreenSharing && <FontIcon className={iconStyle} iconName=\"ScreenCast\" />}\r\n  </>\r\n);\r\nconst onRenderOverflowButton = (overflowItems: any): JSX.Element => (\r\n  <IconButton\r\n    role=\"menuitem\"\r\n    title=\"More options\"\r\n    styles={overFlowButtonStyles}\r\n    menuIconProps={{ iconName: 'More' }}\r\n    menuProps={{ items: overflowItems }}\r\n  />\r\n);\r\nconst getParticipants = (participants: CallParticipant[]): JSX.Element[] =>\r\n  participants.map((item, i) => (\r\n    <OverflowSet\r\n      key={i}\r\n      items={[item]}\r\n      role=\"menubar\"\r\n      vertical={false}\r\n      onRenderOverflowButton={onRenderOverflowButton}\r\n      onRenderItem={onRenderItem}\r\n    />\r\n  ));\r\nexport default (props: ParticipantStackProps): JSX.Element => {\r\n  const activeScreenShareStream = props.screenShareStreams && props.screenShareStreams.length === 1;\r\n  const screenShareStream = props.screenShareStreams[0];\r\n  const participants: CallParticipant[] = props.remoteParticipants.map((participant) => {\r\n    const isScreenSharing = activeScreenShareStream ? screenShareStream.user === participant : false;\r\n    return {\r\n      key: utils.getId(participant.identifier),\r\n      name: participant.displayName ?? utils.getId(participant.identifier),\r\n      participant: participant,\r\n      state: participant.state,\r\n      isScreenSharing: isScreenSharing,\r\n      isSpeaking: participant.isSpeaking\r\n    };\r\n  });\r\n  participants.push({\r\n    key: `${props.userId} (You)`,\r\n    name: `${props.displayName} (You)`,\r\n    participant: undefined,\r\n    state: 'Connected',\r\n    isScreenSharing: activeScreenShareStream ? utils.getId(screenShareStream.user.identifier) === props.userId : false,\r\n    isSpeaking: !props.call.isMuted\r\n  });\r\n  return (\r\n    <Stack className={participantStackStyle} tokens={participantStackTokens}>\r\n      {getParticipants(participants)}\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}