{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Teams_Clone\\\\Group_Call\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\Configuration.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useEffect, useState } from 'react';\nimport { Stack, Spinner, PrimaryButton } from '@fluentui/react';\nimport LocalPreview from './LocalPreview';\nimport LocalSettings from './LocalSettings';\nimport DisplayNameField from './DisplayNameField';\nimport { VideoCameraEmphasisIcon } from '@fluentui/react-icons-northstar';\nimport { videoCameraIconStyle, configurationStackTokens, buttonStyle, localSettingsContainerStyle, mainContainerStyle, fullScreenStyle, verticalStackStyle } from './styles/Configuration.styles';\nexport default (props => {\n  const spinnerLabel = 'Initializing call client...';\n  const buttonText = 'Start call';\n\n  const createUserId = () => 'user' + Math.ceil(Math.random() * 1000);\n\n  const [name, setName] = useState(createUserId());\n  const [emptyWarning, setEmptyWarning] = useState(false);\n  const {\n    groupId,\n    setupCallClient,\n    setGroup,\n    unsupportedStateHandler\n  } = props;\n  useEffect(() => {\n    setupCallClient(unsupportedStateHandler);\n  }, [setupCallClient, unsupportedStateHandler]);\n  return /*#__PURE__*/React.createElement(Stack, {\n    className: mainContainerStyle,\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, props.deviceManager ? /*#__PURE__*/React.createElement(Stack, {\n    className: props.screenWidth > 750 ? fullScreenStyle : verticalStackStyle,\n    horizontal: props.screenWidth > 750,\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    tokens: props.screenWidth > 750 ? configurationStackTokens : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LocalPreview, {\n    mic: props.mic,\n    setMic: props.setMic,\n    setLocalVideoStream: props.setLocalVideoStream,\n    videoDeviceInfo: props.videoDeviceInfo,\n    audioDeviceInfo: props.audioDeviceInfo,\n    localVideoStream: props.localVideoStream,\n    videoDeviceList: props.videoDeviceList,\n    audioDeviceList: props.audioDeviceList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Stack, {\n    className: localSettingsContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DisplayNameField, {\n    setName: setName,\n    name: name,\n    setEmptyWarning: setEmptyWarning,\n    isEmpty: emptyWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LocalSettings, {\n    videoDeviceList: props.videoDeviceList,\n    audioDeviceList: props.audioDeviceList,\n    audioDeviceInfo: props.audioDeviceInfo,\n    videoDeviceInfo: props.videoDeviceInfo,\n    setVideoDeviceInfo: props.setVideoDeviceInfo,\n    setAudioDeviceInfo: props.setAudioDeviceInfo,\n    deviceManager: props.deviceManager,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PrimaryButton, {\n    className: buttonStyle,\n    onClick: async () => {\n      if (!name) {\n        setEmptyWarning(true);\n      } else {\n        setEmptyWarning(false); //1. Retrieve a token\n\n        const {\n          tokenCredential,\n          userId\n        } = await props.getToken(); //2. Initialize the call agent\n\n        const callAgent = await props.createCallAgent(tokenCredential, name); //3. Register for calling events\n\n        props.registerToCallEvents(userId, callAgent, props.callEndedHandler); //4. Join the call\n\n        await props.joinGroup(callAgent, groupId);\n        props.startCallHandler();\n        setGroup(groupId);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(VideoCameraEmphasisIcon, {\n    className: videoCameraIconStyle,\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }), buttonText)))) : /*#__PURE__*/React.createElement(Spinner, {\n    label: spinnerLabel,\n    ariaLive: \"assertive\",\n    labelPosition: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/src/components/Configuration.tsx"],"names":["React","useEffect","useState","Stack","Spinner","PrimaryButton","LocalPreview","LocalSettings","DisplayNameField","VideoCameraEmphasisIcon","videoCameraIconStyle","configurationStackTokens","buttonStyle","localSettingsContainerStyle","mainContainerStyle","fullScreenStyle","verticalStackStyle","props","spinnerLabel","buttonText","createUserId","Math","ceil","random","name","setName","emptyWarning","setEmptyWarning","groupId","setupCallClient","setGroup","unsupportedStateHandler","deviceManager","screenWidth","undefined","mic","setMic","setLocalVideoStream","videoDeviceInfo","audioDeviceInfo","localVideoStream","videoDeviceList","audioDeviceList","setVideoDeviceInfo","setAudioDeviceInfo","tokenCredential","userId","getToken","callAgent","createCallAgent","registerToCallEvents","callEndedHandler","joinGroup","startCallHandler"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,aAAzB,QAA8C,iBAA9C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AASA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SACEC,oBADF,EAEEC,wBAFF,EAGEC,WAHF,EAIEC,2BAJF,EAKEC,kBALF,EAMEC,eANF,EAOEC,kBAPF,QAQO,+BARP;AAqDA,gBAAgBC,KAAD,IAAkD;AAC/D,QAAMC,YAAY,GAAG,6BAArB;AACA,QAAMC,UAAU,GAAG,YAAnB;;AAEA,QAAMC,YAAY,GAAG,MAAc,SAASC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,IAA1B,CAA5C;;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAACkB,YAAY,EAAb,CAAhC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM;AAAE0B,IAAAA,OAAF;AAAWC,IAAAA,eAAX;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA;AAAtC,MAAkEd,KAAxE;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,eAAe,CAACE,uBAAD,CAAf;AACD,GAFQ,EAEN,CAACF,eAAD,EAAkBE,uBAAlB,CAFM,CAAT;AAIA,sBACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEjB,kBAAlB;AAAsC,IAAA,eAAe,EAAC,QAAtD;AAA+D,IAAA,aAAa,EAAC,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,KAAK,CAACe,aAAN,gBACC,oBAAC,KAAD;AACE,IAAA,SAAS,EAAEf,KAAK,CAACgB,WAAN,GAAoB,GAApB,GAA0BlB,eAA1B,GAA4CC,kBADzD;AAEE,IAAA,UAAU,EAAEC,KAAK,CAACgB,WAAN,GAAoB,GAFlC;AAGE,IAAA,eAAe,EAAC,QAHlB;AAIE,IAAA,aAAa,EAAC,QAJhB;AAKE,IAAA,MAAM,EAAEhB,KAAK,CAACgB,WAAN,GAAoB,GAApB,GAA0BtB,wBAA1B,GAAqDuB,SAL/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,YAAD;AACE,IAAA,GAAG,EAAEjB,KAAK,CAACkB,GADb;AAEE,IAAA,MAAM,EAAElB,KAAK,CAACmB,MAFhB;AAGE,IAAA,mBAAmB,EAAEnB,KAAK,CAACoB,mBAH7B;AAIE,IAAA,eAAe,EAAEpB,KAAK,CAACqB,eAJzB;AAKE,IAAA,eAAe,EAAErB,KAAK,CAACsB,eALzB;AAME,IAAA,gBAAgB,EAAEtB,KAAK,CAACuB,gBAN1B;AAOE,IAAA,eAAe,EAAEvB,KAAK,CAACwB,eAPzB;AAQE,IAAA,eAAe,EAAExB,KAAK,CAACyB,eARzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAiBE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE7B,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEY,OAA3B;AAAoC,IAAA,IAAI,EAAED,IAA1C;AAAgD,IAAA,eAAe,EAAEG,eAAjE;AAAkF,IAAA,OAAO,EAAED,YAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,eAAe,EAAET,KAAK,CAACwB,eADzB;AAEE,IAAA,eAAe,EAAExB,KAAK,CAACyB,eAFzB;AAGE,IAAA,eAAe,EAAEzB,KAAK,CAACsB,eAHzB;AAIE,IAAA,eAAe,EAAEtB,KAAK,CAACqB,eAJzB;AAKE,IAAA,kBAAkB,EAAErB,KAAK,CAAC0B,kBAL5B;AAME,IAAA,kBAAkB,EAAE1B,KAAK,CAAC2B,kBAN5B;AAOE,IAAA,aAAa,EAAE3B,KAAK,CAACe,aAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAEpB,WADb;AAEE,IAAA,OAAO,EAAE,YAA2B;AAClC,UAAI,CAACY,IAAL,EAAW;AACTG,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD,OAFD,MAEO;AACLA,QAAAA,eAAe,CAAC,KAAD,CAAf,CADK,CAEL;;AACA,cAAM;AAAEkB,UAAAA,eAAF;AAAmBC,UAAAA;AAAnB,YAA8B,MAAM7B,KAAK,CAAC8B,QAAN,EAA1C,CAHK,CAIL;;AACA,cAAMC,SAAS,GAAG,MAAM/B,KAAK,CAACgC,eAAN,CAAsBJ,eAAtB,EAAuCrB,IAAvC,CAAxB,CALK,CAML;;AACAP,QAAAA,KAAK,CAACiC,oBAAN,CAA2BJ,MAA3B,EAAmCE,SAAnC,EAA8C/B,KAAK,CAACkC,gBAApD,EAPK,CAQL;;AACA,cAAMlC,KAAK,CAACmC,SAAN,CAAgBJ,SAAhB,EAA2BpB,OAA3B,CAAN;AACAX,QAAAA,KAAK,CAACoC,gBAAN;AACAvB,QAAAA,QAAQ,CAACF,OAAD,CAAR;AACD;AACF,KAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAoBE,oBAAC,uBAAD;AAAyB,IAAA,SAAS,EAAElB,oBAApC;AAA0D,IAAA,IAAI,EAAC,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,EAqBGS,UArBH,CADF,CAbF,CAjBF,CADD,gBA2DC,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAED,YAAhB;AAA8B,IAAA,QAAQ,EAAC,WAAvC;AAAmD,IAAA,aAAa,EAAC,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5DJ,CADF;AAiED,CAhFD","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stack, Spinner, PrimaryButton } from '@fluentui/react';\r\nimport LocalPreview from './LocalPreview';\r\nimport LocalSettings from './LocalSettings';\r\nimport DisplayNameField from './DisplayNameField';\r\nimport {\r\n  VideoDeviceInfo,\r\n  AudioDeviceInfo,\r\n  LocalVideoStream,\r\n  DeviceManager,\r\n  CallAgent,\r\n  CallEndReason\r\n} from '@azure/communication-calling';\r\nimport { VideoCameraEmphasisIcon } from '@fluentui/react-icons-northstar';\r\nimport {\r\n  videoCameraIconStyle,\r\n  configurationStackTokens,\r\n  buttonStyle,\r\n  localSettingsContainerStyle,\r\n  mainContainerStyle,\r\n  fullScreenStyle,\r\n  verticalStackStyle\r\n} from './styles/Configuration.styles';\r\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\r\n\r\nexport type TokenResponse = {\r\n  tokenCredential: AzureCommunicationTokenCredential;\r\n  userId: string;\r\n};\r\n\r\nexport interface ConfigurationScreenProps {\r\n  userId: string;\r\n  groupId: string;\r\n  callAgent: CallAgent;\r\n  deviceManager: DeviceManager;\r\n  setupCallClient(unsupportedStateHandler: () => void): void;\r\n  setupCallAgent(\r\n    displayName: string,\r\n    groupId: string,\r\n    afterSetupHandler: (callAgent: CallAgent, groupId: string) => void\r\n  ): void;\r\n  setGroup(groupId: string): void;\r\n  startCallHandler(): void;\r\n  unsupportedStateHandler: () => void;\r\n  callEndedHandler: (reason: CallEndReason) => void;\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  setVideoDeviceInfo(device: VideoDeviceInfo): void;\r\n  setAudioDeviceInfo(device: AudioDeviceInfo): void;\r\n  mic: boolean;\r\n  setMic(mic: boolean): void;\r\n  setLocalVideoStream(stream: LocalVideoStream | undefined): void;\r\n  localVideoRendererIsBusy: boolean;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  localVideoStream: LocalVideoStream;\r\n  screenWidth: number;\r\n  joinGroup(callAgent: CallAgent, groupId: string): void;\r\n  getToken(): Promise<TokenResponse>;\r\n  createCallAgent(tokenCredential: AzureCommunicationTokenCredential, displayName: string): Promise<CallAgent>;\r\n  registerToCallEvents(\r\n    userId: string,\r\n    callAgent: CallAgent,\r\n    endCallHandler: (reason: CallEndReason) => void\r\n  ): Promise<void>;\r\n}\r\n\r\nexport default (props: ConfigurationScreenProps): JSX.Element => {\r\n  const spinnerLabel = 'Initializing call client...';\r\n  const buttonText = 'Start call';\r\n\r\n  const createUserId = (): string => 'user' + Math.ceil(Math.random() * 1000);\r\n\r\n  const [name, setName] = useState(createUserId());\r\n  const [emptyWarning, setEmptyWarning] = useState(false);\r\n\r\n  const { groupId, setupCallClient, setGroup, unsupportedStateHandler } = props;\r\n\r\n  useEffect(() => {\r\n    setupCallClient(unsupportedStateHandler);\r\n  }, [setupCallClient, unsupportedStateHandler]);\r\n\r\n  return (\r\n    <Stack className={mainContainerStyle} horizontalAlign=\"center\" verticalAlign=\"center\">\r\n      {props.deviceManager ? (\r\n        <Stack\r\n          className={props.screenWidth > 750 ? fullScreenStyle : verticalStackStyle}\r\n          horizontal={props.screenWidth > 750}\r\n          horizontalAlign=\"center\"\r\n          verticalAlign=\"center\"\r\n          tokens={props.screenWidth > 750 ? configurationStackTokens : undefined}\r\n        >\r\n          <LocalPreview\r\n            mic={props.mic}\r\n            setMic={props.setMic}\r\n            setLocalVideoStream={props.setLocalVideoStream}\r\n            videoDeviceInfo={props.videoDeviceInfo}\r\n            audioDeviceInfo={props.audioDeviceInfo}\r\n            localVideoStream={props.localVideoStream}\r\n            videoDeviceList={props.videoDeviceList}\r\n            audioDeviceList={props.audioDeviceList}\r\n          />\r\n          <Stack className={localSettingsContainerStyle}>\r\n            <DisplayNameField setName={setName} name={name} setEmptyWarning={setEmptyWarning} isEmpty={emptyWarning} />\r\n            <div>\r\n              <LocalSettings\r\n                videoDeviceList={props.videoDeviceList}\r\n                audioDeviceList={props.audioDeviceList}\r\n                audioDeviceInfo={props.audioDeviceInfo}\r\n                videoDeviceInfo={props.videoDeviceInfo}\r\n                setVideoDeviceInfo={props.setVideoDeviceInfo}\r\n                setAudioDeviceInfo={props.setAudioDeviceInfo}\r\n                deviceManager={props.deviceManager}\r\n              />\r\n            </div>\r\n            <div>\r\n              <PrimaryButton\r\n                className={buttonStyle}\r\n                onClick={async (): Promise<void> => {\r\n                  if (!name) {\r\n                    setEmptyWarning(true);\r\n                  } else {\r\n                    setEmptyWarning(false);\r\n                    //1. Retrieve a token\r\n                    const { tokenCredential, userId } = await props.getToken();\r\n                    //2. Initialize the call agent\r\n                    const callAgent = await props.createCallAgent(tokenCredential, name);\r\n                    //3. Register for calling events\r\n                    props.registerToCallEvents(userId, callAgent, props.callEndedHandler);\r\n                    //4. Join the call\r\n                    await props.joinGroup(callAgent, groupId);\r\n                    props.startCallHandler();\r\n                    setGroup(groupId);\r\n                  }\r\n                }}\r\n              >\r\n                <VideoCameraEmphasisIcon className={videoCameraIconStyle} size=\"medium\" />\r\n                {buttonText}\r\n              </PrimaryButton>\r\n            </div>\r\n          </Stack>\r\n        </Stack>\r\n      ) : (\r\n        <Spinner label={spinnerLabel} ariaLive=\"assertive\" labelPosition=\"top\" />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}