{"ast":null,"code":"var isObject = function isObject(o) {\n  return o !== null && typeof o === 'object' && !Array.isArray(o);\n};\n\nexport var objectKeyToValues = function objectKeyToValues(input, formatter) {\n  if (formatter === void 0) {\n    formatter = function formatter(input) {\n      return input;\n    };\n  }\n\n  if (!isObject(input)) {\n    return input;\n  }\n\n  var inner = function inner(result, obj, prefix) {\n    Object.keys(obj).forEach(function (k) {\n      if (isObject(obj[k])) {\n        result[k] = {};\n        inner(result[k], obj[k], \"\" + prefix + k + \".\");\n      } else {\n        result[k] = formatter(\"\" + prefix + k);\n      }\n    });\n    return result;\n  };\n\n  return inner({}, input, '');\n};","map":{"version":3,"sources":["objectKeysToValues.ts"],"names":["isObject","o","Array","objectKeyToValues","formatter","inner","Object","obj","result"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,CAAA,EAAC;AAAA,SAAIC,CAAC,KAADA,IAAAA,IAAc,OAAA,CAAA,KAAdA,QAAAA,IAAuC,CAACC,KAAK,CAALA,OAAAA,CAA5C,CAA4CA,CAA5C;AAAlB,CAAA;;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA,SAAA,EAAmE;AAAA,MAAnDC,SAAmD,KAAA,KAAA,CAAA,EAAA;AAAnDA,IAAAA,SAAmD,GAAnB,SAAA,SAAA,CAAA,KAAA,EAAK;AAAA,aAAA,KAAA;AAAc,KAAnDA;AAAmD;;AAClG,MAAI,CAACJ,QAAQ,CAAb,KAAa,CAAb,EAAsB;AACpB,WAAA,KAAA;AACD;;AACD,MAAMK,KAAK,GAAG,SAARA,KAAQ,CAAA,MAAA,EAAA,GAAA,EAAA,MAAA,EAAyB;AACrCC,IAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAAyB,UAAA,CAAA,EAAK;AAC5B,UAAIN,QAAQ,CAACO,GAAG,CAAhB,CAAgB,CAAJ,CAAZ,EAAsB;AACpBC,QAAAA,MAAM,CAANA,CAAM,CAANA,GAAAA,EAAAA;AACAH,QAAAA,KAAK,CAACG,MAAM,CAAP,CAAO,CAAP,EAAYD,GAAG,CAAf,CAAe,CAAf,EAAA,KAAA,MAAA,GAAA,CAAA,GAALF,GAAK,CAALA;AAFF,OAAA,MAGO;AACLG,QAAAA,MAAM,CAANA,CAAM,CAANA,GAAYJ,SAAS,CAAA,KAAA,MAAA,GAArBI,CAAqB,CAArBA;AACD;AANHF,KAAAA;AASA,WAAA,MAAA;AAVF,GAAA;;AAaA,SAAOD,KAAK,CAAA,EAAA,EAAA,KAAA,EAAZ,EAAY,CAAZ;AAjBK,CAAA","sourcesContent":["const isObject = o => o !== null && typeof o === 'object' && !Array.isArray(o);\n\nexport const objectKeyToValues = (input: Object, formatter: (string) => string = input => input) => {\n  if (!isObject(input)) {\n    return input;\n  }\n  const inner = (result, obj, prefix) => {\n    Object.keys(obj).forEach(k => {\n      if (isObject(obj[k])) {\n        result[k] = {};\n        inner(result[k], obj[k], `${prefix}${k}.`);\n      } else {\n        result[k] = formatter(`${prefix}${k}`);\n      }\n    });\n\n    return result;\n  };\n\n  return inner({}, input, '');\n};\n"]},"metadata":{},"sourceType":"module"}