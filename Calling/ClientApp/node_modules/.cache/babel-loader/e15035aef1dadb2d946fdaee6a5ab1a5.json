{"ast":null,"code":"import { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n/**\n * @description\n * Adds attribute 'role=region' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * Adds attribute 'aria-roledescription' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * Adds attribute 'aria-label' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * Adds attribute 'aria-roledescription' to 'itemsContainer' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-label' to 'itemsContainer' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'role=region' to 'itemsContainer' slot if 'navigation' property is true.  Set 'role=none' otherwise.\n * Adds attribute 'tabIndex=-1' to 'itemsContainer' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * @specification\n * Adds attribute 'role=region' to 'root' slot.\n * Adds attribute 'aria-live=polite' to 'itemsContainerWrapper' slot if 'ariaLiveOn' property is true. Sets the attribute to 'off' otherwise.\n * Adds attribute 'aria-hidden=true' to 'paddleNext' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-hidden=true' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'tabIndex=-1' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'tabIndex=-1' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Triggers 'showNextSlideByKeyboardNavigation' action with 'ArrowRight' on 'itemsContainer'.\n * Triggers 'showPreviousSlideByKeyboardNavigation' action with 'ArrowLeft' on 'itemsContainer'.\n * Triggers 'showNextSlideByPaddlePress' action with 'Enter' or 'Spacebar' on 'paddleNext'.\n * Triggers 'showPreviousSlideByPaddlePress' action with 'Enter' or 'Spacebar' on 'paddlePrevious'.\n */\n\nexport var carouselBehavior = function carouselBehavior(props) {\n  return {\n    attributes: {\n      root: Object.assign({}, !props.navigation && {\n        role: 'region',\n        'aria-roledescription': props.ariaRoleDescription,\n        'aria-label': props.ariaLabel\n      }),\n      itemsContainerWrapper: {\n        'aria-live': props.ariaLiveOn ? 'polite' : 'off'\n      },\n      itemsContainer: Object.assign({}, props.navigation ? {\n        role: 'region',\n        'aria-roledescription': props.ariaRoleDescription,\n        'aria-label': props.ariaLabel\n      } : {\n        tabIndex: -1,\n        role: 'none'\n      }),\n      paddleNext: Object.assign({}, props.navigation && {\n        tabIndex: -1,\n        'aria-hidden': 'true'\n      }),\n      paddlePrevious: Object.assign({}, props.navigation && {\n        tabIndex: -1,\n        'aria-hidden': 'true'\n      })\n    },\n    keyActions: {\n      itemsContainer: {\n        showNextSlideByKeyboardNavigation: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowRight\n          }]\n        },\n        showPreviousSlideByKeyboardNavigation: {\n          keyCombinations: [{\n            keyCode: keyboardKey.ArrowLeft\n          }]\n        }\n      },\n      paddleNext: {\n        showNextSlideByPaddlePress: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      },\n      paddlePrevious: {\n        showPreviousSlideByPaddlePress: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Enter\n          }, {\n            keyCode: SpacebarKey\n          }]\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["behaviors/Carousel/carouselBehavior.ts"],"names":["carouselBehavior","attributes","root","props","role","ariaLabel","itemsContainerWrapper","itemsContainer","tabIndex","paddleNext","paddlePrevious","keyActions","showNextSlideByKeyboardNavigation","keyCombinations","keyCode","keyboardKey","ArrowRight","showPreviousSlideByKeyboardNavigation","ArrowLeft","showNextSlideByPaddlePress","Enter","SpacebarKey","showPreviousSlideByPaddlePress"],"mappings":"AACA,SAAA,WAAA,EAAA,WAAA,QAAA,wBAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,IAAMA,gBAAsD,GAAG,SAAzDA,gBAAyD,CAAA,KAAA,EAAK;AAAA,SAAK;AAC9EC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACE,CAACC,KAAK,CAAN,UAAA,IAAqB;AACvBC,QAAAA,IAAI,EADmB,QAAA;AAEvB,gCAAwBD,KAAK,CAFN,mBAAA;AAGvB,sBAAcA,KAAK,CAACE;AAHG,OADvB,CADM;AAQVC,MAAAA,qBAAqB,EAAE;AACrB,qBAAaH,KAAK,CAALA,UAAAA,GAAAA,QAAAA,GAA8B;AADtB,OARb;AAWVI,MAAAA,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,KAAK,CAAL,UAAA,GACA;AAAEH,QAAAA,IAAI,EAAN,QAAA;AAAkB,gCAAwBD,KAAK,CAA/C,mBAAA;AAAqE,sBAAcA,KAAK,CAACE;AAAzF,OADA,GAEA;AAAEG,QAAAA,QAAQ,EAAE,CAAZ,CAAA;AAAgBJ,QAAAA,IAAI,EAAE;AAAtB,OAHQ,CAXJ;AAiBVK,MAAAA,UAAU,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJN,KAAK,CAALA,UAAAA,IAAoB;AACtBK,QAAAA,QAAQ,EAAE,CADY,CAAA;AAEtB,uBAAe;AAFO,OADhB,CAjBA;AAuBVE,MAAAA,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACRP,KAAK,CAALA,UAAAA,IAAoB;AACtBK,QAAAA,QAAQ,EAAE,CADY,CAAA;AAEtB,uBAAe;AAFO,OADZ;AAvBJ,KADkE;AAgC9EG,IAAAA,UAAU,EAAE;AACVJ,MAAAA,cAAc,EAAE;AACdK,QAAAA,iCAAiC,EAAE;AACjCC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACC;AAAvB,WAAD;AADgB,SADrB;AAIdC,QAAAA,qCAAqC,EAAE;AACrCJ,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACG;AAAvB,WAAD;AADoB;AAJzB,OADN;AASVT,MAAAA,UAAU,EAAE;AACVU,QAAAA,0BAA0B,EAAE;AAC1BN,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD,EAAiC;AAAEN,YAAAA,OAAO,EAAEO;AAAX,WAAjC;AADS;AADlB,OATF;AAcVX,MAAAA,cAAc,EAAE;AACdY,QAAAA,8BAA8B,EAAE;AAC9BT,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAACK;AAAvB,WAAD,EAAiC;AAAEN,YAAAA,OAAO,EAAEO;AAAX,WAAjC;AADa;AADlB;AAdN;AAhCkE,GAAL;AAApE,CAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport { keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\n\n/**\n * @description\n * Adds attribute 'role=region' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * Adds attribute 'aria-roledescription' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * Adds attribute 'aria-label' to 'root' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * Adds attribute 'aria-roledescription' to 'itemsContainer' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-label' to 'itemsContainer' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'role=region' to 'itemsContainer' slot if 'navigation' property is true.  Set 'role=none' otherwise.\n * Adds attribute 'tabIndex=-1' to 'itemsContainer' slot if 'navigation' property is false. Does not set the attribute otherwise.\n * @specification\n * Adds attribute 'role=region' to 'root' slot.\n * Adds attribute 'aria-live=polite' to 'itemsContainerWrapper' slot if 'ariaLiveOn' property is true. Sets the attribute to 'off' otherwise.\n * Adds attribute 'aria-hidden=true' to 'paddleNext' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-hidden=true' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'tabIndex=-1' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Adds attribute 'tabIndex=-1' to 'paddlePrevious' slot if 'navigation' property is true. Does not set the attribute otherwise.\n * Triggers 'showNextSlideByKeyboardNavigation' action with 'ArrowRight' on 'itemsContainer'.\n * Triggers 'showPreviousSlideByKeyboardNavigation' action with 'ArrowLeft' on 'itemsContainer'.\n * Triggers 'showNextSlideByPaddlePress' action with 'Enter' or 'Spacebar' on 'paddleNext'.\n * Triggers 'showPreviousSlideByPaddlePress' action with 'Enter' or 'Spacebar' on 'paddlePrevious'.\n */\nexport const carouselBehavior: Accessibility<CarouselBehaviorProps> = props => ({\n  attributes: {\n    root: {\n      ...(!props.navigation && {\n        role: 'region',\n        'aria-roledescription': props.ariaRoleDescription,\n        'aria-label': props.ariaLabel,\n      }),\n    },\n    itemsContainerWrapper: {\n      'aria-live': props.ariaLiveOn ? 'polite' : 'off',\n    },\n    itemsContainer: {\n      ...(props.navigation\n        ? { role: 'region', 'aria-roledescription': props.ariaRoleDescription, 'aria-label': props.ariaLabel }\n        : { tabIndex: -1, role: 'none' }),\n    },\n\n    paddleNext: {\n      ...(props.navigation && {\n        tabIndex: -1,\n        'aria-hidden': 'true',\n      }),\n    },\n    paddlePrevious: {\n      ...(props.navigation && {\n        tabIndex: -1,\n        'aria-hidden': 'true',\n      }),\n    },\n  },\n\n  keyActions: {\n    itemsContainer: {\n      showNextSlideByKeyboardNavigation: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n      },\n      showPreviousSlideByKeyboardNavigation: {\n        keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n      },\n    },\n    paddleNext: {\n      showNextSlideByPaddlePress: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n    paddlePrevious: {\n      showPreviousSlideByPaddlePress: {\n        keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n      },\n    },\n  },\n});\n\nexport type CarouselBehaviorProps = {\n  /** Element type. */\n  navigation: Object | Object[];\n  ariaLiveOn: boolean;\n  ariaRoleDescription?: string;\n  ariaLabel?: string;\n};\n"]},"metadata":{},"sourceType":"module"}