{"ast":null,"code":"import { appendClasses } from './appendClasses';\n/**\n * Helper utility which takes in a classes array from compose options, resolves functions,\n * merges them into a final result, and distributes classnames to slotProps within the given\n * resolver result object.\n */\n\nexport function resolveClasses(result, classes) {\n  var state = result.state,\n      slots = result.slots,\n      slotProps = result.slotProps;\n\n  for (var _i = 0, classes_1 = classes; _i < classes_1.length; _i++) {\n    var classFunctionOrObject = classes_1[_i];\n    var classObj = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof classFunctionOrObject === 'function' ? classFunctionOrObject(state, slots) : classFunctionOrObject;\n\n    if (classObj) {\n      for (var _a = 0, _b = Object.keys(classObj); _a < _b.length; _a++) {\n        var slotName = _b[_a];\n\n        if (classObj[slotName] && slots[slotName]) {\n          appendToSlotClassName(slotProps, slotName, classObj[slotName]);\n        }\n      }\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  appendToSlotClassName(slotProps, 'root', state.className);\n  return result;\n}\nexport function appendToSlotClassName(slotProps, slotName, className) {\n  if (className) {\n    var slot = slotProps[slotName] = slotProps[slotName] || {};\n    slot.className = appendClasses(slot.className, className);\n  }\n}","map":{"version":3,"sources":["resolveClasses.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CACJ,MADI,EAEJ,OAFI,EAEsC;AAElC,MAAA,KAAA,GAAA,MAAA,CAAA,KAAA;AAAA,MAAO,KAAA,GAAA,MAAA,CAAA,KAAP;AAAA,MAAc,SAAA,GAAA,MAAA,CAAA,SAAd;;AAER,OAAoC,IAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,OAApC,EAAoC,EAAA,GAAA,SAAA,CAAA,MAApC,EAAoC,EAAA,EAApC,EAA6C;AAAxC,QAAM,qBAAqB,GAAA,SAAA,CAAA,EAAA,CAA3B;AACH,QAAM,QAAQ,GACZ;AACA,WAAO,qBAAP,KAAiC,UAAjC,GAA8C,qBAAqB,CAAC,KAAD,EAAQ,KAAR,CAAnE,GAA2F,qBAF7F;;AAIA,QAAI,QAAJ,EAAc;AACZ,WAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAvB,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAA8C;AAAzC,YAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;;AACH,YAAI,QAAQ,CAAC,QAAD,CAAR,IAAsB,KAAK,CAAC,QAAD,CAA/B,EAA2C;AACzC,UAAA,qBAAqB,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAQ,CAAC,QAAD,CAA9B,CAArB;AACD;AACF;AACF;AACF,GAhByC,CAkB1C;;;AACA,EAAA,qBAAqB,CAAC,SAAD,EAAY,MAAZ,EAAqB,KAAa,CAAC,SAAnC,CAArB;AAEA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,qBAAV,CACJ,SADI,EAEJ,QAFI,EAGJ,SAHI,EAGa;AAEjB,MAAI,SAAJ,EAAe;AACb,QAAM,IAAI,GAAI,SAAS,CAAC,QAAD,CAAT,GAAsB,SAAS,CAAC,QAAD,CAAT,IAAuB,EAA3D;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,aAAa,CAAC,IAAI,CAAC,SAAN,EAAiB,SAAjB,CAA9B;AACD;AACF","sourcesContent":["import { ComposePreparedOptions, ClassDictionary, GenericDictionary, MergePropsResult } from './types';\nimport { appendClasses } from './appendClasses';\n/**\n * Helper utility which takes in a classes array from compose options, resolves functions,\n * merges them into a final result, and distributes classnames to slotProps within the given\n * resolver result object.\n */\nexport function resolveClasses<TState>(\n  result: MergePropsResult<TState>,\n  classes: ComposePreparedOptions['classes'],\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  for (const classFunctionOrObject of classes) {\n    const classObj: ClassDictionary | undefined =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      typeof classFunctionOrObject === 'function' ? classFunctionOrObject(state, slots as any) : classFunctionOrObject;\n\n    if (classObj) {\n      for (const slotName of Object.keys(classObj)) {\n        if (classObj[slotName] && slots[slotName]) {\n          appendToSlotClassName(slotProps, slotName, classObj[slotName]);\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  appendToSlotClassName(slotProps, 'root', (state as any).className);\n\n  return result;\n}\n\nexport function appendToSlotClassName(\n  slotProps: Record<string, GenericDictionary>,\n  slotName: string,\n  className: string,\n) {\n  if (className) {\n    const slot = (slotProps[slotName] = slotProps[slotName] || {});\n    slot.className = appendClasses(slot.className, className);\n  }\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}