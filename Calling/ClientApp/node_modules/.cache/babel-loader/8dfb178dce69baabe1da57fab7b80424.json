{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nexport var cardHeaderClassName = 'ui-card__header';\n/**\n * A CardHeader is used to display data in Card header.\n */\n\nexport var CardHeader = /*#__PURE__*/function () {\n  var CardHeader = function CardHeader(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(CardHeader.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        children = props.children,\n        fitted = props.fitted;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(CardHeader.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: CardHeader.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(CardHeader.displayName, {\n      className: cardHeaderClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          fitted: fitted\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), children);\n    setEnd();\n    return element;\n  };\n\n  CardHeader.displayName = 'CardHeader';\n  CardHeader.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    fitted: PropTypes.bool\n  });\n  CardHeader.handledProps = Object.keys(CardHeader.propTypes);\n  CardHeader.create = createShorthandFactory({\n    Component: CardHeader\n  });\n  return CardHeader;\n}();","map":{"version":3,"sources":["components/Card/CardHeader.tsx"],"names":["cardHeaderClassName","CardHeader","context","useFluentContext","setStart","setEnd","useTelemetry","className","design","styles","variables","children","fitted","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","commonPropTypes","PropTypes","bool","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { FluentComponentStaticProps } from '../../types';\nimport { ChildrenComponentProps, commonPropTypes, createShorthandFactory, UIComponentProps } from '../../utils';\n\nexport interface CardHeaderProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A footer can be fitted, without any space above or below it. */\n  fitted?: boolean;\n}\n\nexport type CardHeaderStylesProps = Pick<CardHeaderProps, 'fitted'>;\nexport const cardHeaderClassName = 'ui-card__header';\n\n/**\n * A CardHeader is used to display data in Card header.\n */\nexport const CardHeader: ComponentWithAs<'div', CardHeaderProps> &\n  FluentComponentStaticProps<CardHeaderProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(CardHeader.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, fitted } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(CardHeader.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: CardHeader.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardHeaderStylesProps>(CardHeader.displayName, {\n    className: cardHeaderClassName,\n    mapPropsToStyles: () => ({ fitted }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCardHeader.displayName = 'CardHeader';\n\nCardHeader.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.bool,\n};\n\nCardHeader.handledProps = Object.keys(CardHeader.propTypes) as any;\n\nCardHeader.create = createShorthandFactory({ Component: CardHeader });\n"]},"metadata":{},"sourceType":"module"}