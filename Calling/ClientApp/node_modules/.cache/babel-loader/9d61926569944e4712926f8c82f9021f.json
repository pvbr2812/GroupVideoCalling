{"ast":null,"code":"import _includes from \"lodash/includes\";\nimport _isArray from \"lodash/isArray\";\nimport _some from \"lodash/some\";\nimport _invoke from \"lodash/invoke\";\nimport { popupBehavior } from '@fluentui/accessibility';\nimport { useAccessibility, useAutoControlled, useTelemetry, useFluentContext, useTriggerElement } from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { getCode, keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, isFromKeyboard, doesNodeContainClick, setWhatInputSource } from '../../utils';\nimport { ALIGNMENTS, POSITIONS, Popper } from '../../utils/positioner';\nimport { PopupContent } from './PopupContent';\nimport { createShorthandFactory } from '../../utils/factories';\nimport { createReferenceFromContextClick } from './createReferenceFromContextClick';\nimport { isRightClick } from '../../utils/isRightClick';\nimport { PortalInner } from '../Portal/PortalInner';\nimport { Animation } from '../Animation/Animation';\nexport var popupClassName = 'ui-popup';\n/**\n * A Popup displays a non-modal, often rich content, on top of its target element.\n */\n\nexport var Popup = /*#__PURE__*/function () {\n  var Popup = function Popup(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Popup.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        align = props.align,\n        autoFocus = props.autoFocus,\n        inline = props.inline,\n        contentRef = props.contentRef,\n        flipBoundary = props.flipBoundary,\n        on = props.on,\n        mountNode = props.mountNode,\n        mouseLeaveDelay = props.mouseLeaveDelay,\n        offset = props.offset,\n        overflowBoundary = props.overflowBoundary,\n        pointing = props.pointing,\n        popperRef = props.popperRef,\n        position = props.position,\n        positionFixed = props.positionFixed,\n        renderContent = props.renderContent,\n        tabbableTrigger = props.tabbableTrigger,\n        target = props.target,\n        trapFocus = props.trapFocus,\n        trigger = props.trigger,\n        unstable_disableTether = props.unstable_disableTether,\n        unstable_pinned = props.unstable_pinned;\n\n    var _useAutoControlled = useAutoControlled({\n      initialValue: false,\n      defaultValue: props.defaultOpen,\n      value: props.open\n    }),\n        open = _useAutoControlled[0],\n        setOpen = _useAutoControlled[1];\n\n    var _React$useState = React.useState(false),\n        isOpenedByRightClick = _React$useState[0],\n        setIsOpenedByRightClick = _React$useState[1];\n\n    var closeTimeoutId = React.useRef();\n    var popupContentRef = React.useRef();\n    var pointerTargetRef = React.useRef();\n    var triggerRef = React.useRef(); // focusable element which has triggered Popup, can be either triggerDomElement or the element inside it\n\n    var triggerFocusableRef = React.useRef();\n    var rightClickReferenceObject = React.useRef();\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: Popup.displayName,\n      actionHandlers: {\n        closeAndFocusTrigger: function closeAndFocusTrigger(e) {\n          e.preventDefault();\n          close(e, function () {\n            return _invoke(triggerFocusableRef.current, 'focus');\n          });\n        },\n        close: function (_close) {\n          function close(_x) {\n            return _close.apply(this, arguments);\n          }\n\n          close.toString = function () {\n            return _close.toString();\n          };\n\n          return close;\n        }(function (e) {\n          close(e);\n        }),\n        toggle: function toggle(e) {\n          e.preventDefault();\n          trySetOpen(!open, e);\n        },\n        open: function open(e) {\n          e.preventDefault();\n          setPopupOpen(true, e);\n        },\n        click: function click(e) {\n          _invoke(triggerRef.current, 'click');\n        },\n        preventScroll: function preventScroll(e) {\n          e.preventDefault();\n        },\n        stopPropagation: function stopPropagation(e) {\n          e.stopPropagation();\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          disabled: false,\n          // definition has this prop, but `Popup` doesn't support it\n          isOpenedByRightClick: isOpenedByRightClick,\n          on: on,\n          trapFocus: trapFocus,\n          tabbableTrigger: tabbableTrigger,\n          trigger: trigger\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var handleDocumentClick = function handleDocumentClick(getRefs) {\n      return function (e) {\n        if (isOpenedByRightClick && isOutsidePopupElement(getRefs(), e)) {\n          trySetOpen(false, e);\n          return;\n        }\n\n        if (isOutsidePopupElementAndOutsideTriggerElement(getRefs(), e)) {\n          trySetOpen(false, e);\n        }\n      };\n    };\n\n    var handleDocumentKeyDown = function handleDocumentKeyDown(getRefs) {\n      return function (e) {\n        var keyCode = getCode(e);\n        var isMatchingKey = keyCode === keyboardKey.Enter || keyCode === SpacebarKey;\n\n        if (isMatchingKey && isOutsidePopupElementAndOutsideTriggerElement(getRefs(), e)) {\n          trySetOpen(false, e);\n        } // if focus was lost from Popup and moved to body, for e.g. when click on popup content\n        // and ESC is pressed, the last opened Popup should get closed and the trigger should get focus\n\n\n        var lastContentRef = getRefs().pop();\n        var isLastOpenedPopup = lastContentRef && lastContentRef.current === popupContentRef.current;\n        var activeDocument = context.target;\n        var bodyHasFocus = activeDocument.activeElement === activeDocument.body;\n\n        if (keyCode === keyboardKey.Escape && bodyHasFocus && isLastOpenedPopup) {\n          close(e, function () {\n            return _invoke(triggerFocusableRef.current, 'focus');\n          });\n        }\n      };\n    };\n\n    var isOutsidePopupElementAndOutsideTriggerElement = function isOutsidePopupElementAndOutsideTriggerElement(refs, e) {\n      var isOutsidePopup = isOutsidePopupElement(refs, e);\n      var isInsideTrigger = triggerRef.current && doesNodeContainClick(triggerRef.current, e, context.target);\n      return isOutsidePopup && !isInsideTrigger;\n    };\n\n    var isOutsidePopupElement = function isOutsidePopupElement(refs, e) {\n      var isInsideNested = _some(refs, function (childRef) {\n        return doesNodeContainClick(childRef.current, e, context.target);\n      });\n\n      var isOutsidePopup = popupContentRef.current && !isInsideNested;\n      return isOutsidePopup;\n    };\n\n    var getTriggerProps = function getTriggerProps(triggerElement) {\n      var triggerProps = {};\n      var normalizedOn = _isArray(on) ? on : [on];\n      /**\n       * The focus is adding the focus, blur and click event (always opening on click)\n       * If focus and context are provided, there is no need to add onClick\n       */\n\n      if (_includes(normalizedOn, 'focus')) {\n        triggerProps.onFocus = function (e) {\n          if (isFromKeyboard()) {\n            trySetOpen(true, e);\n          }\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onFocus', e].concat(args));\n        };\n\n        triggerProps.onBlur = function (e) {\n          if (shouldBlurClose(e)) {\n            trySetOpen(false, e);\n          }\n\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onBlur', e].concat(args));\n        };\n\n        if (!_includes(normalizedOn, 'context')) {\n          triggerProps.onClick = function (e) {\n            setPopupOpen(true, e);\n\n            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n              args[_key3 - 1] = arguments[_key3];\n            }\n\n            _invoke.apply(void 0, [triggerElement, 'props.onClick', e].concat(args));\n          };\n        }\n      }\n      /**\n       * The click is toggling the open state of the popup\n       */\n\n\n      if (_includes(normalizedOn, 'click')) {\n        triggerProps.onClick = function (e) {\n          trySetOpen(!open, e);\n\n          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n            args[_key4 - 1] = arguments[_key4];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onClick', e].concat(args));\n        };\n      }\n      /**\n       * The context is opening the popup\n       */\n\n\n      if (_includes(normalizedOn, 'context')) {\n        triggerProps.onContextMenu = function (e) {\n          setPopupOpen(!open, e);\n\n          for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            args[_key5 - 1] = arguments[_key5];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onContextMenu', e].concat(args));\n\n          e.preventDefault();\n        };\n      }\n      /**\n       * The hover is adding the mouseEnter, mouseLeave, blur and click event (always opening on click)\n       * If hover and context are provided, there is no need to add onClick\n       */\n\n\n      if (_includes(normalizedOn, 'hover')) {\n        triggerProps.onMouseEnter = function (e) {\n          setPopupOpen(true, e);\n          setWhatInputSource(context.target, 'mouse');\n\n          for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n            args[_key6 - 1] = arguments[_key6];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onMouseEnter', e].concat(args));\n        };\n\n        triggerProps.onMouseLeave = function (e) {\n          setPopupOpen(false, e);\n\n          for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n            args[_key7 - 1] = arguments[_key7];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onMouseLeave', e].concat(args));\n        };\n\n        if (!_includes(normalizedOn, 'context')) {\n          triggerProps.onClick = function (e) {\n            setPopupOpen(true, e);\n\n            for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n              args[_key8 - 1] = arguments[_key8];\n            }\n\n            _invoke.apply(void 0, [triggerElement, 'props.onClick', e].concat(args));\n          };\n        }\n\n        triggerProps.onBlur = function (e) {\n          if (shouldBlurClose(e)) {\n            trySetOpen(false, e);\n          }\n\n          for (var _len9 = arguments.length, args = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n            args[_key9 - 1] = arguments[_key9];\n          }\n\n          _invoke.apply(void 0, [triggerElement, 'props.onBlur', e].concat(args));\n        };\n      }\n\n      return triggerProps;\n    };\n\n    var getContentProps = function getContentProps(predefinedProps) {\n      var contentHandlerProps = {};\n      var normalizedOn = _isArray(on) ? on : [on];\n      /**\n       * The focus is adding the focus and blur events on the content\n       */\n\n      if (_includes(normalizedOn, 'focus')) {\n        contentHandlerProps.onFocus = function (e, contentProps) {\n          trySetOpen(true, e);\n          predefinedProps && _invoke(predefinedProps, 'onFocus', e, contentProps);\n        };\n\n        contentHandlerProps.onBlur = function (e, contentProps) {\n          if (shouldBlurClose(e)) {\n            trySetOpen(false, e);\n          }\n\n          predefinedProps && _invoke(predefinedProps, 'onBlur', e, contentProps);\n        };\n      }\n      /**\n       * The hover is adding the mouseEnter, mouseLeave\n       */\n\n\n      if (_includes(normalizedOn, 'hover')) {\n        contentHandlerProps.onMouseEnter = function (e, contentProps) {\n          setPopupOpen(true, e);\n          predefinedProps && _invoke(predefinedProps, 'onMouseEnter', e, contentProps);\n        };\n\n        contentHandlerProps.onMouseLeave = function (e, contentProps) {\n          setPopupOpen(false, e);\n          predefinedProps && _invoke(predefinedProps, 'onMouseLeave', e, contentProps);\n        };\n      }\n\n      return contentHandlerProps;\n    };\n\n    var shouldBlurClose = function shouldBlurClose(e) {\n      return !e.currentTarget || !popupContentRef.current || !e.currentTarget.contains(e.relatedTarget) && !popupContentRef.current.contains(e.relatedTarget);\n    };\n\n    var renderPopperChildren = function renderPopperChildren(classes) {\n      return function (_ref) {\n        var placement = _ref.placement,\n            scheduleUpdate = _ref.scheduleUpdate;\n        var content = renderContent ? renderContent(scheduleUpdate) : props.content;\n        var popupContent = Popup.Content.create(content || {}, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('popup', Object.assign({}, getContentProps(), {\n              placement: placement,\n              pointing: pointing,\n              pointerRef: pointerTargetRef,\n              trapFocus: trapFocus,\n              autoFocus: autoFocus,\n              className: classes\n            }));\n          },\n          overrideProps: getContentProps\n        });\n        return /*#__PURE__*/React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Ref, {\n            innerRef: function innerRef(domElement) {\n              popupContentRef.current = domElement;\n              handleRef(contentRef, domElement);\n              nestingRef.current = domElement;\n            }\n          }, popupContent), /*#__PURE__*/React.createElement(EventListener, {\n            listener: handleDocumentClick(getRefs),\n            target: context.target,\n            type: \"click\",\n            capture: true\n          }), /*#__PURE__*/React.createElement(EventListener, {\n            listener: handleDocumentClick(getRefs),\n            target: context.target,\n            type: \"contextmenu\",\n            capture: true\n          }), /*#__PURE__*/React.createElement(EventListener, {\n            listener: handleDocumentKeyDown(getRefs),\n            target: context.target,\n            type: \"keydown\",\n            capture: true\n          }), isOpenedByRightClick && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EventListener, {\n            listener: dismissOnScroll,\n            target: context.target,\n            type: \"wheel\",\n            capture: true\n          }), /*#__PURE__*/React.createElement(EventListener, {\n            listener: dismissOnScroll,\n            target: context.target,\n            type: \"touchmove\",\n            capture: true\n          })));\n        });\n      };\n    };\n\n    var dismissOnScroll = function dismissOnScroll(e) {\n      trySetOpen(false, e);\n    };\n\n    var trySetOpen = function trySetOpen(newValue, event) {\n      var isOpenedByRightClick = newValue && isRightClick(event); // when new state 'open' === 'true', save the last focused element\n\n      if (newValue) {\n        updateTriggerFocusableRef();\n        updateContextPosition(isOpenedByRightClick && event.nativeEvent);\n      }\n\n      setOpen(newValue);\n      setIsOpenedByRightClick(isOpenedByRightClick);\n\n      _invoke(props, 'onOpenChange', event, Object.assign({}, props, {\n        open: newValue\n      }));\n    };\n\n    var setPopupOpen = function setPopupOpen(newOpen, e) {\n      clearTimeout(closeTimeoutId.current);\n      newOpen ? trySetOpen(true, e) : schedulePopupClose(e);\n    };\n\n    var schedulePopupClose = function schedulePopupClose(e) {\n      closeTimeoutId.current = setTimeout(function () {\n        trySetOpen(false, e);\n      }, mouseLeaveDelay);\n    };\n\n    var close = function close(e, onClose) {\n      if (open) {\n        trySetOpen(false, e);\n        onClose && onClose();\n        e.stopPropagation();\n      }\n    };\n    /**\n     * Save DOM element which had focus before Popup opens.\n     * Can be either trigger DOM element itself or the element inside it.\n     */\n\n\n    var updateTriggerFocusableRef = function updateTriggerFocusableRef() {\n      var activeDocument = context.target;\n      var activeElement = activeDocument.activeElement;\n      triggerFocusableRef.current = triggerRef.current && triggerRef.current.contains(activeElement) ? activeElement : triggerRef.current;\n    };\n\n    var updateContextPosition = function updateContextPosition(nativeEvent) {\n      rightClickReferenceObject.current = nativeEvent ? createReferenceFromContextClick(nativeEvent) : null;\n    };\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is fine to violate there conditional rule as environment variables will never change during component\n      // lifecycle\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React.useEffect(function () {\n        if (inline && trapFocus) {\n          // eslint-disable-next-line no-console\n          console.warn('Using \"trapFocus\" in inline popup leads to broken behavior for screen reader users.');\n        }\n\n        if (!inline && autoFocus) {\n          // eslint-disable-next-line no-console\n          console.warn('Beware, \"autoFocus\" prop will just grab focus at the moment of mount and will not trap it. As user is able to TAB out from popup, better use \"inline\" prop to keep correct tab order.');\n        }\n      }, [autoFocus, inline, trapFocus]);\n    }\n\n    React.useEffect(function () {\n      if (open) {\n        // when new state 'open' === 'true', save the last focused element\n        updateTriggerFocusableRef();\n      }\n    });\n    var triggerNode = useTriggerElement(props);\n    var triggerProps = getTriggerProps(triggerNode);\n    var contentElement = /*#__PURE__*/React.createElement(Animation, {\n      mountOnEnter: true,\n      unmountOnExit: true,\n      visible: open,\n      name: open ? 'popup-show' : 'popup-hide'\n    }, function (_ref2) {\n      var classes = _ref2.classes;\n      return /*#__PURE__*/React.createElement(Popper, {\n        pointerTargetRef: pointerTargetRef,\n        align: align,\n        flipBoundary: flipBoundary,\n        popperRef: popperRef,\n        position: position,\n        positionFixed: positionFixed,\n        offset: offset,\n        overflowBoundary: overflowBoundary,\n        rtl: context.rtl,\n        unstable_disableTether: unstable_disableTether,\n        unstable_pinned: unstable_pinned,\n        targetRef: rightClickReferenceObject.current || target || triggerRef\n      }, renderPopperChildren(classes));\n    });\n    var triggerElement = triggerNode && /*#__PURE__*/React.createElement(Ref, {\n      innerRef: triggerRef\n    }, /*#__PURE__*/React.cloneElement(triggerNode, getA11yProps('trigger', triggerProps)));\n    var element = /*#__PURE__*/React.createElement(React.Fragment, null, triggerElement, inline ? contentElement : /*#__PURE__*/React.createElement(PortalInner, {\n      mountNode: mountNode\n    }, contentElement));\n    setEnd();\n    return element;\n  };\n\n  Popup.displayName = 'Popup';\n  Popup.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    as: false,\n    content: false\n  }), {\n    align: PropTypes.oneOf(ALIGNMENTS),\n    defaultOpen: PropTypes.bool,\n    inline: PropTypes.bool,\n    mountNode: customPropTypes.domNode,\n    mouseLeaveDelay: PropTypes.number,\n    offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n    popperRef: customPropTypes.ref,\n    flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n    overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n    on: PropTypes.oneOfType([PropTypes.oneOf(['hover', 'click', 'focus', 'context']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'focus', 'context'])), PropTypes.arrayOf(PropTypes.oneOf(['hover', 'focus', 'context']))]),\n    open: PropTypes.bool,\n    onOpenChange: PropTypes.func,\n    pointing: PropTypes.bool,\n    position: PropTypes.oneOf(POSITIONS),\n    positionFixed: PropTypes.bool,\n    renderContent: PropTypes.func,\n    target: PropTypes.any,\n    trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.any]),\n    tabbableTrigger: PropTypes.bool,\n    unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n    unstable_pinned: PropTypes.bool,\n    content: customPropTypes.shorthandAllowingChildren,\n    contentRef: customPropTypes.ref,\n    trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\n  });\n  Popup.defaultProps = {\n    accessibility: popupBehavior,\n    align: 'start',\n    position: 'above',\n    on: 'click',\n    mouseLeaveDelay: 500,\n    tabbableTrigger: true\n  };\n  Popup.handledProps = Object.keys(Popup.propTypes);\n  Popup.Content = PopupContent;\n  Popup.create = createShorthandFactory({\n    Component: Popup,\n    mappedProp: 'content'\n  });\n  Popup.shorthandConfig = {\n    mappedProp: 'content'\n  };\n  return Popup;\n}();","map":{"version":3,"sources":["components/Popup/Popup.tsx"],"names":["popupClassName","Popup","context","useFluentContext","setStart","setEnd","useTelemetry","accessibility","align","autoFocus","inline","contentRef","flipBoundary","on","mountNode","mouseLeaveDelay","offset","overflowBoundary","pointing","popperRef","position","positionFixed","renderContent","tabbableTrigger","target","trapFocus","trigger","unstable_disableTether","unstable_pinned","props","open","setOpen","useAutoControlled","initialValue","defaultValue","value","isOpenedByRightClick","setIsOpenedByRightClick","React","closeTimeoutId","popupContentRef","pointerTargetRef","triggerRef","triggerFocusableRef","rightClickReferenceObject","getA11yProps","useAccessibility","debugName","actionHandlers","closeAndFocusTrigger","e","close","toggle","trySetOpen","setPopupOpen","click","preventScroll","stopPropagation","mapPropsToBehavior","disabled","rtl","handleDocumentClick","isOutsidePopupElement","getRefs","isOutsidePopupElementAndOutsideTriggerElement","handleDocumentKeyDown","keyCode","getCode","isMatchingKey","keyboardKey","lastContentRef","isLastOpenedPopup","activeDocument","bodyHasFocus","isOutsidePopup","isInsideTrigger","doesNodeContainClick","isInsideNested","childRef","getTriggerProps","triggerProps","normalizedOn","args","isFromKeyboard","shouldBlurClose","setWhatInputSource","getContentProps","contentHandlerProps","predefinedProps","renderPopperChildren","placement","scheduleUpdate","content","popupContent","defaultProps","pointerRef","className","classes","overrideProps","handleRef","nestingRef","dismissOnScroll","newValue","isRightClick","updateTriggerFocusableRef","updateContextPosition","event","clearTimeout","newOpen","schedulePopupClose","setTimeout","onClose","activeElement","nativeEvent","createReferenceFromContextClick","process","console","triggerNode","useTriggerElement","contentElement","triggerElement","element","as","PropTypes","defaultOpen","customPropTypes","onOpenChange","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, popupBehavior, PopupBehaviorProps } from '@fluentui/accessibility';\nimport {\n  AutoFocusZoneProps,\n  FocusTrapZoneProps,\n  useAccessibility,\n  useAutoControlled,\n  useTelemetry,\n  useFluentContext,\n  useTriggerElement,\n} from '@fluentui/react-bindings';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { NodeRef, Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PopperJs from '@popperjs/core';\nimport { getCode, keyboardKey, SpacebarKey } from '@fluentui/keyboard-key';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  StyledComponentProps,\n  commonPropTypes,\n  isFromKeyboard,\n  doesNodeContainClick,\n  setWhatInputSource,\n} from '../../utils';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { ALIGNMENTS, POSITIONS, Popper, PositioningProps, PopperChildrenProps } from '../../utils/positioner';\nimport { PopupContent, PopupContentProps } from './PopupContent';\n\nimport { createShorthandFactory } from '../../utils/factories';\nimport { createReferenceFromContextClick } from './createReferenceFromContextClick';\nimport { isRightClick } from '../../utils/isRightClick';\nimport { PortalInner } from '../Portal/PortalInner';\nimport { Animation } from '../Animation/Animation';\n\nexport type PopupEvents = 'click' | 'hover' | 'focus' | 'context';\nexport type RestrictedClickEvents = 'click' | 'focus';\nexport type RestrictedHoverEvents = 'hover' | 'focus' | 'context';\nexport type PopupEventsArray = RestrictedClickEvents[] | RestrictedHoverEvents[];\n\nexport interface PopupProps\n  extends StyledComponentProps<PopupProps>,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<PopupContentProps>>,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available dialogBehavior\n   */\n  accessibility?: Accessibility<PopupBehaviorProps>;\n\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** Whether the Popup should be rendered inline with the trigger or in the body. */\n  inline?: boolean;\n\n  /** Existing element the popup should be bound to. */\n  mountNode?: HTMLElement;\n\n  /** Delay in ms for the mouse leave event, before the popup will be closed. */\n  mouseLeaveDelay?: number;\n\n  /** Events triggering the popup. */\n  on?: PopupEvents | PopupEventsArray;\n\n  /** Defines whether popup is displayed. */\n  open?: boolean;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: ComponentEventHandler<PopupProps>;\n\n  /** A popup can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /**\n   * Function to render popup content.\n   * @deprecated Please use `popperRef` to get an imperative handle to Popper's APIs.\n   * @param updatePosition - function to request popup position update.\n   */\n  renderContent?: (updatePosition: Function) => ShorthandValue<PopupContentProps>;\n\n  /**\n   * DOM element that should be used as popup's target - instead of 'trigger' element that is used by default.\n   */\n  target?: HTMLElement;\n\n  /** Element to be rendered in-place where the popup is defined. */\n  trigger?: React.ReactNode;\n\n  /** Whether the trigger should be tabbable */\n  tabbableTrigger?: boolean;\n\n  /** Ref for Popup content DOM node. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value. */\n  trapFocus?: boolean | FocusTrapZoneProps;\n\n  /** Controls whether or not auto focus should be applied, using boolean or AutoFocusZoneProps type value. */\n  autoFocus?: boolean | AutoFocusZoneProps;\n}\n\nexport const popupClassName = 'ui-popup';\n\n/**\n * A Popup displays a non-modal, often rich content, on top of its target element.\n */\nexport const Popup: React.FC<PopupProps> &\n  FluentComponentStaticProps<PopupProps> & {\n    Content: typeof PopupContent;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Popup.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    align,\n    autoFocus,\n    inline,\n    contentRef,\n    flipBoundary,\n    on,\n    mountNode,\n    mouseLeaveDelay,\n    offset,\n    overflowBoundary,\n    pointing,\n    popperRef,\n    position,\n    positionFixed,\n    renderContent,\n    tabbableTrigger,\n    target,\n    trapFocus,\n    trigger,\n    unstable_disableTether,\n    unstable_pinned,\n  } = props;\n\n  const [open, setOpen] = useAutoControlled({\n    initialValue: false,\n    defaultValue: props.defaultOpen,\n    value: props.open,\n  });\n  const [isOpenedByRightClick, setIsOpenedByRightClick] = React.useState(false);\n\n  const closeTimeoutId = React.useRef<number | undefined>();\n\n  const popupContentRef = React.useRef<HTMLElement>();\n  const pointerTargetRef = React.useRef<HTMLElement>();\n  const triggerRef = React.useRef<HTMLElement>();\n  // focusable element which has triggered Popup, can be either triggerDomElement or the element inside it\n  const triggerFocusableRef = React.useRef<HTMLElement>();\n  const rightClickReferenceObject = React.useRef<PopperJs.VirtualElement | null>();\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: Popup.displayName,\n    actionHandlers: {\n      closeAndFocusTrigger: e => {\n        e.preventDefault();\n        close(e, () => _.invoke(triggerFocusableRef.current, 'focus'));\n      },\n      close: e => {\n        close(e);\n      },\n      toggle: e => {\n        e.preventDefault();\n        trySetOpen(!open, e);\n      },\n      open: e => {\n        e.preventDefault();\n        setPopupOpen(true, e);\n      },\n      click: e => {\n        _.invoke(triggerRef.current, 'click');\n      },\n      preventScroll: e => {\n        e.preventDefault();\n      },\n      stopPropagation: e => {\n        e.stopPropagation();\n      },\n    },\n    mapPropsToBehavior: () => ({\n      disabled: false, // definition has this prop, but `Popup` doesn't support it\n      isOpenedByRightClick,\n      on,\n      trapFocus,\n      tabbableTrigger,\n      trigger: trigger as any,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleDocumentClick = (getRefs: Function) => (e: MouseEvent) => {\n    if (isOpenedByRightClick && isOutsidePopupElement(getRefs(), e)) {\n      trySetOpen(false, e);\n      return;\n    }\n\n    if (isOutsidePopupElementAndOutsideTriggerElement(getRefs(), e)) {\n      trySetOpen(false, e);\n    }\n  };\n\n  const handleDocumentKeyDown = (getRefs: Function) => (e: KeyboardEvent) => {\n    const keyCode = getCode(e);\n    const isMatchingKey = keyCode === keyboardKey.Enter || keyCode === SpacebarKey;\n\n    if (isMatchingKey && isOutsidePopupElementAndOutsideTriggerElement(getRefs(), e)) {\n      trySetOpen(false, e);\n    }\n\n    // if focus was lost from Popup and moved to body, for e.g. when click on popup content\n    // and ESC is pressed, the last opened Popup should get closed and the trigger should get focus\n    const lastContentRef = getRefs().pop();\n    const isLastOpenedPopup: boolean = lastContentRef && lastContentRef.current === popupContentRef.current;\n\n    const activeDocument: HTMLDocument = context.target;\n    const bodyHasFocus: boolean = activeDocument.activeElement === activeDocument.body;\n\n    if (keyCode === keyboardKey.Escape && bodyHasFocus && isLastOpenedPopup) {\n      close(e, () => _.invoke(triggerFocusableRef.current, 'focus'));\n    }\n  };\n\n  const isOutsidePopupElementAndOutsideTriggerElement = (refs: NodeRef[], e: KeyboardEvent | MouseEvent) => {\n    const isOutsidePopup = isOutsidePopupElement(refs, e);\n    const isInsideTrigger =\n      triggerRef.current && doesNodeContainClick(triggerRef.current, e as MouseEvent, context.target);\n\n    return isOutsidePopup && !isInsideTrigger;\n  };\n\n  const isOutsidePopupElement = (refs: NodeRef[], e) => {\n    const isInsideNested = _.some(refs, (childRef: NodeRef) => {\n      return doesNodeContainClick(childRef.current as HTMLElement, e, context.target);\n    });\n    const isOutsidePopup = popupContentRef.current && !isInsideNested;\n\n    return isOutsidePopup;\n  };\n\n  const getTriggerProps = triggerElement => {\n    const triggerProps: any = {};\n    const normalizedOn = _.isArray(on) ? on : [on];\n\n    /**\n     * The focus is adding the focus, blur and click event (always opening on click)\n     * If focus and context are provided, there is no need to add onClick\n     */\n    if (_.includes(normalizedOn, 'focus')) {\n      triggerProps.onFocus = (e, ...args) => {\n        if (isFromKeyboard()) {\n          trySetOpen(true, e);\n        }\n        _.invoke(triggerElement, 'props.onFocus', e, ...args);\n      };\n      triggerProps.onBlur = (e, ...args) => {\n        if (shouldBlurClose(e)) {\n          trySetOpen(false, e);\n        }\n        _.invoke(triggerElement, 'props.onBlur', e, ...args);\n      };\n      if (!_.includes(normalizedOn, 'context')) {\n        triggerProps.onClick = (e, ...args) => {\n          setPopupOpen(true, e);\n          _.invoke(triggerElement, 'props.onClick', e, ...args);\n        };\n      }\n    }\n\n    /**\n     * The click is toggling the open state of the popup\n     */\n    if (_.includes(normalizedOn, 'click')) {\n      triggerProps.onClick = (e, ...args) => {\n        trySetOpen(!open, e);\n        _.invoke(triggerElement, 'props.onClick', e, ...args);\n      };\n    }\n\n    /**\n     * The context is opening the popup\n     */\n    if (_.includes(normalizedOn, 'context')) {\n      triggerProps.onContextMenu = (e, ...args) => {\n        setPopupOpen(!open, e);\n        _.invoke(triggerElement, 'props.onContextMenu', e, ...args);\n        e.preventDefault();\n      };\n    }\n\n    /**\n     * The hover is adding the mouseEnter, mouseLeave, blur and click event (always opening on click)\n     * If hover and context are provided, there is no need to add onClick\n     */\n    if (_.includes(normalizedOn, 'hover')) {\n      triggerProps.onMouseEnter = (e, ...args) => {\n        setPopupOpen(true, e);\n        setWhatInputSource(context.target, 'mouse');\n        _.invoke(triggerElement, 'props.onMouseEnter', e, ...args);\n      };\n      triggerProps.onMouseLeave = (e, ...args) => {\n        setPopupOpen(false, e);\n        _.invoke(triggerElement, 'props.onMouseLeave', e, ...args);\n      };\n      if (!_.includes(normalizedOn, 'context')) {\n        triggerProps.onClick = (e, ...args) => {\n          setPopupOpen(true, e);\n          _.invoke(triggerElement, 'props.onClick', e, ...args);\n        };\n      }\n      triggerProps.onBlur = (e, ...args) => {\n        if (shouldBlurClose(e)) {\n          trySetOpen(false, e);\n        }\n        _.invoke(triggerElement, 'props.onBlur', e, ...args);\n      };\n    }\n\n    return triggerProps;\n  };\n\n  const getContentProps = (predefinedProps?) => {\n    const contentHandlerProps: any = {};\n    const normalizedOn = _.isArray(on) ? on : [on];\n\n    /**\n     * The focus is adding the focus and blur events on the content\n     */\n    if (_.includes(normalizedOn, 'focus')) {\n      contentHandlerProps.onFocus = (e, contentProps) => {\n        trySetOpen(true, e);\n        predefinedProps && _.invoke(predefinedProps, 'onFocus', e, contentProps);\n      };\n      contentHandlerProps.onBlur = (e, contentProps) => {\n        if (shouldBlurClose(e)) {\n          trySetOpen(false, e);\n        }\n        predefinedProps && _.invoke(predefinedProps, 'onBlur', e, contentProps);\n      };\n    }\n\n    /**\n     * The hover is adding the mouseEnter, mouseLeave\n     */\n    if (_.includes(normalizedOn, 'hover')) {\n      contentHandlerProps.onMouseEnter = (e, contentProps) => {\n        setPopupOpen(true, e);\n        predefinedProps && _.invoke(predefinedProps, 'onMouseEnter', e, contentProps);\n      };\n      contentHandlerProps.onMouseLeave = (e, contentProps) => {\n        setPopupOpen(false, e);\n        predefinedProps && _.invoke(predefinedProps, 'onMouseLeave', e, contentProps);\n      };\n    }\n\n    return contentHandlerProps;\n  };\n\n  const shouldBlurClose = e => {\n    return (\n      !e.currentTarget ||\n      !popupContentRef.current ||\n      (!e.currentTarget.contains(e.relatedTarget) && !popupContentRef.current.contains(e.relatedTarget))\n    );\n  };\n\n  const renderPopperChildren = classes => ({ placement, scheduleUpdate }: PopperChildrenProps) => {\n    const content = renderContent ? renderContent(scheduleUpdate) : props.content;\n    const popupContent = Popup.Content.create(content || {}, {\n      defaultProps: () =>\n        getA11yProps('popup', {\n          ...getContentProps(),\n          placement,\n          pointing,\n          pointerRef: pointerTargetRef,\n          trapFocus,\n          autoFocus,\n          className: classes,\n        }),\n      overrideProps: getContentProps,\n    });\n\n    return (\n      <Unstable_NestingAuto>\n        {(getRefs, nestingRef) => (\n          <>\n            <Ref\n              innerRef={domElement => {\n                popupContentRef.current = domElement;\n                handleRef(contentRef, domElement);\n                nestingRef.current = domElement;\n              }}\n            >\n              {popupContent}\n            </Ref>\n\n            <EventListener listener={handleDocumentClick(getRefs)} target={context.target} type=\"click\" capture />\n            <EventListener listener={handleDocumentClick(getRefs)} target={context.target} type=\"contextmenu\" capture />\n            <EventListener listener={handleDocumentKeyDown(getRefs)} target={context.target} type=\"keydown\" capture />\n\n            {isOpenedByRightClick && (\n              <>\n                <EventListener listener={dismissOnScroll} target={context.target} type=\"wheel\" capture />\n                <EventListener listener={dismissOnScroll} target={context.target} type=\"touchmove\" capture />\n              </>\n            )}\n          </>\n        )}\n      </Unstable_NestingAuto>\n    );\n  };\n\n  const dismissOnScroll = (e: TouchEvent | WheelEvent) => {\n    trySetOpen(false, e);\n  };\n\n  const trySetOpen = (\n    newValue: boolean,\n    event: React.KeyboardEvent | React.MouseEvent | KeyboardEvent | MouseEvent | TouchEvent | WheelEvent,\n  ) => {\n    const isOpenedByRightClick = newValue && isRightClick(event as React.MouseEvent);\n\n    // when new state 'open' === 'true', save the last focused element\n    if (newValue) {\n      updateTriggerFocusableRef();\n      updateContextPosition(isOpenedByRightClick && (event as React.MouseEvent).nativeEvent);\n    }\n\n    setOpen(newValue);\n    setIsOpenedByRightClick(isOpenedByRightClick);\n\n    _.invoke(props, 'onOpenChange', event, { ...props, ...{ open: newValue } });\n  };\n\n  const setPopupOpen = (newOpen: boolean, e: React.KeyboardEvent) => {\n    clearTimeout(closeTimeoutId.current);\n    newOpen ? trySetOpen(true, e) : schedulePopupClose(e);\n  };\n\n  const schedulePopupClose = (e: React.KeyboardEvent) => {\n    closeTimeoutId.current = setTimeout(() => {\n      trySetOpen(false, e);\n    }, mouseLeaveDelay) as any;\n  };\n\n  const close = (e, onClose?: Function) => {\n    if (open) {\n      trySetOpen(false, e);\n      onClose && onClose();\n      e.stopPropagation();\n    }\n  };\n\n  /**\n   * Save DOM element which had focus before Popup opens.\n   * Can be either trigger DOM element itself or the element inside it.\n   */\n  const updateTriggerFocusableRef = () => {\n    const activeDocument: HTMLDocument = context.target;\n    const activeElement = activeDocument.activeElement;\n\n    triggerFocusableRef.current =\n      triggerRef.current && triggerRef.current.contains(activeElement)\n        ? (activeElement as HTMLElement)\n        : triggerRef.current;\n  };\n\n  const updateContextPosition = (nativeEvent: MouseEvent) => {\n    rightClickReferenceObject.current = nativeEvent ? createReferenceFromContextClick(nativeEvent) : null;\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (inline && trapFocus) {\n        // eslint-disable-next-line no-console\n        console.warn('Using \"trapFocus\" in inline popup leads to broken behavior for screen reader users.');\n      }\n      if (!inline && autoFocus) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Beware, \"autoFocus\" prop will just grab focus at the moment of mount and will not trap it. As user is able to TAB out from popup, better use \"inline\" prop to keep correct tab order.',\n        );\n      }\n    }, [autoFocus, inline, trapFocus]);\n  }\n\n  React.useEffect(() => {\n    if (open) {\n      // when new state 'open' === 'true', save the last focused element\n      updateTriggerFocusableRef();\n    }\n  });\n\n  const triggerNode = useTriggerElement(props);\n  const triggerProps = getTriggerProps(triggerNode);\n\n  const contentElement = (\n    <Animation mountOnEnter unmountOnExit visible={open} name={open ? 'popup-show' : 'popup-hide'}>\n      {({ classes }) => (\n        <Popper\n          pointerTargetRef={pointerTargetRef}\n          align={align}\n          flipBoundary={flipBoundary}\n          popperRef={popperRef}\n          position={position}\n          positionFixed={positionFixed}\n          offset={offset}\n          overflowBoundary={overflowBoundary}\n          rtl={context.rtl}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n          targetRef={rightClickReferenceObject.current || target || triggerRef}\n        >\n          {renderPopperChildren(classes)}\n        </Popper>\n      )}\n    </Animation>\n  );\n  const triggerElement = triggerNode && (\n    <Ref innerRef={triggerRef}>\n      {React.cloneElement(triggerNode as React.ReactElement, getA11yProps('trigger', triggerProps))}\n    </Ref>\n  );\n\n  const element = (\n    <>\n      {triggerElement}\n      {inline ? contentElement : <PortalInner mountNode={mountNode}>{contentElement}</PortalInner>}\n    </>\n  );\n  setEnd();\n\n  return element;\n};\n\nPopup.displayName = 'Popup';\n\nPopup.propTypes = {\n  ...commonPropTypes.createCommon({\n    as: false,\n    content: false,\n  }),\n  align: PropTypes.oneOf(ALIGNMENTS),\n  defaultOpen: PropTypes.bool,\n  inline: PropTypes.bool,\n  mountNode: customPropTypes.domNode,\n  mouseLeaveDelay: PropTypes.number,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  popperRef: customPropTypes.ref,\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  on: PropTypes.oneOfType([\n    PropTypes.oneOf(['hover', 'click', 'focus', 'context']),\n    PropTypes.arrayOf(PropTypes.oneOf(['click', 'focus', 'context'])),\n    PropTypes.arrayOf(PropTypes.oneOf(['hover', 'focus', 'context'])),\n  ]) as any,\n  open: PropTypes.bool,\n  onOpenChange: PropTypes.func,\n  pointing: PropTypes.bool,\n  position: PropTypes.oneOf(POSITIONS),\n  positionFixed: PropTypes.bool,\n  renderContent: PropTypes.func,\n  target: PropTypes.any,\n  trigger: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.any]),\n  tabbableTrigger: PropTypes.bool,\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  content: customPropTypes.shorthandAllowingChildren,\n  contentRef: customPropTypes.ref,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n};\nPopup.defaultProps = {\n  accessibility: popupBehavior,\n  align: 'start',\n  position: 'above',\n  on: 'click',\n  mouseLeaveDelay: 500,\n  tabbableTrigger: true,\n};\nPopup.handledProps = Object.keys(Popup.propTypes) as any;\n\nPopup.Content = PopupContent;\n\nPopup.create = createShorthandFactory({ Component: Popup, mappedProp: 'content' });\nPopup.shorthandConfig = {\n  mappedProp: 'content',\n};\n"]},"metadata":{},"sourceType":"module"}