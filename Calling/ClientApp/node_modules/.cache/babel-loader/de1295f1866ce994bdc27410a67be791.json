{"ast":null,"code":"import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { getElementType, useStyles, useFluentContext, useUnhandledProps, useTelemetry, useAccessibility } from '@fluentui/react-bindings';\nexport var videoClassName = 'ui-video';\n/**\n * A Video provides ability to embed video content.\n */\n\nexport var Video = /*#__PURE__*/function () {\n  var Video = function Video(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Video.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var controls = props.controls,\n        autoPlay = props.autoPlay,\n        loop = props.loop,\n        poster = props.poster,\n        src = props.src,\n        muted = props.muted,\n        variables = props.variables,\n        className = props.className,\n        design = props.design,\n        styles = props.styles;\n    var videoRef = React.useRef();\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Video.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Video.displayName\n    });\n    React.useEffect(function () {\n      // this is a workaround for a potential memory leak in Chromium which retains a Detached HTMLVideoElement when <video autoplay> is unmounted\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=969049\n      return function () {\n        if (videoRef.current) {\n          // we want to perform the cleanup on the latest element rendered\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          videoRef.current.src = '';\n        }\n      };\n    }, []);\n    React.useEffect(function () {\n      // React doesn't guaranty that props will be set:\n      // https://github.com/facebook/react/issues/10389\n      if (videoRef.current) {\n        videoRef.current.muted = !!muted;\n      }\n    }, [muted]);\n\n    var _useStyles = useStyles(Video.displayName, {\n      className: videoClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          variables: variables,\n          design: design,\n          styles: styles\n        };\n      }\n    }),\n        classes = _useStyles.classes;\n\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: videoRef\n    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      autoPlay: autoPlay,\n      controls: controls,\n      loop: loop,\n      poster: poster,\n      src: src\n    }, unhandledProps))));\n    setEnd();\n    return element;\n  };\n\n  Video.create = createShorthandFactory({\n    Component: Video,\n    mappedProp: 'src'\n  });\n  Video.displayName = 'Video';\n  Video.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    children: false,\n    content: false\n  }), {\n    autoPlay: PropTypes.bool,\n    controls: PropTypes.bool,\n    loop: PropTypes.bool,\n    muted: PropTypes.bool,\n    poster: PropTypes.string,\n    src: PropTypes.string\n  });\n  Video.defaultProps = {\n    as: 'video',\n    accessibility: videoBehavior,\n    controls: true,\n    autoPlay: false,\n    muted: false\n  };\n  Video.handledProps = Object.keys(Video.propTypes);\n  return Video;\n}();","map":{"version":3,"sources":["components/Video/Video.tsx"],"names":["videoClassName","Video","context","useFluentContext","setStart","setEnd","useTelemetry","controls","autoPlay","loop","poster","src","muted","variables","className","design","styles","props","videoRef","React","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","displayName","classes","useStyles","mapPropsToInlineStyles","element","createShorthandFactory","Component","mappedProp","children","content","PropTypes","string","as","accessibility","Object"],"mappings":"AAAA,SAAA,GAAA,QAAA,+BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,aAAA,QAAA,yBAAA;AACA,SAAA,sBAAA,EAAA,eAAA,QAAA,aAAA;AAEA,SAAA,cAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,gBAAA,QAAA,0BAAA;AAmCA,OAAO,IAAMA,cAAc,GAApB,UAAA;AAIP;;;;AAGA,OAAO,IAAMC,KAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,KAAoF,GAAG,SAAvFA,KAAuF,CAAA,KAAA,EAAS;AAC3G,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AAD2G,QAAA,aAAA,GAE9EG,YAAY,CAACL,KAAK,CAAN,WAAA,EAAoBC,OAAO,CAFuC,SAElE,CAFkE;AAAA,QAEnGE,QAFmG,GAAA,aAAA,CAAA,QAAA;AAAA,QAEzFC,MAFyF,GAAA,aAAA,CAAA,MAAA;;AAG3GD,IAAAA,QAAQ;AAHmG,QAKnGG,QALmG,GAKZU,KALY,CAAA,QAAA;AAAA,QAKzFT,QALyF,GAKZS,KALY,CAAA,QAAA;AAAA,QAK/ER,IAL+E,GAKZQ,KALY,CAAA,IAAA;AAAA,QAKzEP,MALyE,GAKZO,KALY,CAAA,MAAA;AAAA,QAKjEN,GALiE,GAKZM,KALY,CAAA,GAAA;AAAA,QAK5DL,KAL4D,GAKZK,KALY,CAAA,KAAA;AAAA,QAKrDJ,SALqD,GAKZI,KALY,CAAA,SAAA;AAAA,QAK1CH,SAL0C,GAKZG,KALY,CAAA,SAAA;AAAA,QAK/BF,MAL+B,GAKZE,KALY,CAAA,MAAA;AAAA,QAKvBD,MALuB,GAKZC,KALY,CAAA,MAAA;AAM3G,QAAMC,QAAQ,GAAGC,KAAK,CAAtB,MAAiBA,EAAjB;AAEA,QAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAACtB,KAAK,CAAN,YAAA,EAAxC,KAAwC,CAAxC;AAEA,QAAMuB,YAAY,GAAGC,gBAAgB,CAACR,KAAK,CAAN,aAAA,EAAsB;AACzDS,MAAAA,SAAS,EAAEzB,KAAK,CAAC0B;AADwC,KAAtB,CAArC;AAIAR,IAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB;AACA;AACA,aAAO,YAAM;AACX,YAAID,QAAQ,CAAZ,OAAA,EAAsB;AACpB;AACA;AACAA,UAAAA,QAAQ,CAARA,OAAAA,CAAAA,GAAAA,GAAAA,EAAAA;AACD;AALH,OAAA;AAHFC,KAAAA,EAAAA,EAAAA;AAYAA,IAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB;AACA;AACA,UAAID,QAAQ,CAAZ,OAAA,EAAsB;AACpBA,QAAAA,QAAQ,CAARA,OAAAA,CAAAA,KAAAA,GAAyB,CAAC,CAA1BA,KAAAA;AACD;AALHC,KAAAA,EAMG,CANHA,KAMG,CANHA;;AA3B2G,QAAA,UAAA,GAmCvFU,SAAS,CAAmB5B,KAAK,CAAxB,WAAA,EAAsC;AACjEa,MAAAA,SAAS,EADwD,cAAA;AAEjEgB,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAAEhB,UAAAA,SAAS,EAAX,SAAA;AAAaD,UAAAA,SAAS,EAAtB,SAAA;AAAwBE,UAAAA,MAAM,EAA9B,MAAA;AAAgCC,UAAAA,MAAM,EAANA;AAAhC,SAAP;AAAA;AAFyC,KAAtC,CAnC8E;AAAA,QAmCnGY,OAnCmG,GAAA,UAAA,CAAA,OAAA;;AAwC3G,QAAMG,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,MAAA,QAAQ,EAAEb;AAAf,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EACMM,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdV,MAAAA,SAAS,EAAEc,OAAO,CADJ,IAAA;AAEdpB,MAAAA,QAAQ,EAFM,QAAA;AAGdD,MAAAA,QAAQ,EAHM,QAAA;AAIdE,MAAAA,IAAI,EAJU,IAAA;AAKdC,MAAAA,MAAM,EALQ,MAAA;AAMdC,MAAAA,GAAG,EAAHA;AANc,KAAA,EAHtB,cAGsB,CAAA,CADlB,CADF,CADF;AAeAN,IAAAA,MAAM;AACN,WAAA,OAAA;AAxDK,GAAA;;AA2DPJ,EAAAA,KAAK,CAALA,MAAAA,GAAe+B,sBAAsB,CAAC;AAAEC,IAAAA,SAAS,EAAX,KAAA;AAAoBC,IAAAA,UAAU,EAAE;AAAhC,GAAD,CAArCjC;AAEAA,EAAAA,KAAK,CAALA,WAAAA,GAAAA,OAAAA;AAEAA,EAAAA,KAAK,CAALA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BkC,IAAAA,QAAQ,EADsB,KAAA;AAE9BC,IAAAA,OAAO,EAAE;AAFqB,GAA7B,CADLnC,EAAAA;AAKEO,IAAAA,QAAQ,EAAE6B,SAAS,CALrBpC,IAAAA;AAMEM,IAAAA,QAAQ,EAAE8B,SAAS,CANrBpC,IAAAA;AAOEQ,IAAAA,IAAI,EAAE4B,SAAS,CAPjBpC,IAAAA;AAQEW,IAAAA,KAAK,EAAEyB,SAAS,CARlBpC,IAAAA;AASES,IAAAA,MAAM,EAAE2B,SAAS,CATnBpC,MAAAA;AAUEU,IAAAA,GAAG,EAAE0B,SAAS,CAACC;AAVjBrC,GAAAA,CAAAA;AAaAA,EAAAA,KAAK,CAALA,YAAAA,GAAqB;AACnBsC,IAAAA,EAAE,EADiB,OAAA;AAEnBC,IAAAA,aAAa,EAFM,aAAA;AAGnBjC,IAAAA,QAAQ,EAHW,IAAA;AAInBC,IAAAA,QAAQ,EAJW,KAAA;AAKnBI,IAAAA,KAAK,EAAE;AALY,GAArBX;AAQAA,EAAAA,KAAK,CAALA,YAAAA,GAAqBwC,MAAM,CAANA,IAAAA,CAAYxC,KAAK,CAAtCA,SAAqBwC,CAArBxC;AApFO,SAAA,KAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { Accessibility, VideoBehaviorProps, videoBehavior } from '@fluentui/accessibility';\nimport { createShorthandFactory, UIComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useStyles,\n  useFluentContext,\n  useUnhandledProps,\n  useTelemetry,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface VideoProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<VideoBehaviorProps>;\n\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nexport const videoClassName = 'ui-video';\n\nexport type VideoStylesProps = Required<Pick<VideoProps, 'variables'>>;\n\n/**\n * A Video provides ability to embed video content.\n */\nexport const Video: ComponentWithAs<'video', VideoProps> & FluentComponentStaticProps<VideoProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Video.displayName, context.telemetry);\n  setStart();\n\n  const { controls, autoPlay, loop, poster, src, muted, variables, className, design, styles } = props;\n  const videoRef = React.useRef<HTMLVideoElement>();\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Video.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Video.displayName,\n  });\n\n  React.useEffect(() => {\n    // this is a workaround for a potential memory leak in Chromium which retains a Detached HTMLVideoElement when <video autoplay> is unmounted\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=969049\n    return () => {\n      if (videoRef.current) {\n        // we want to perform the cleanup on the latest element rendered\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        videoRef.current.src = '';\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (videoRef.current) {\n      videoRef.current.muted = !!muted;\n    }\n  }, [muted]);\n\n  const { classes } = useStyles<VideoStylesProps>(Video.displayName, {\n    className: videoClassName,\n    mapPropsToInlineStyles: () => ({ className, variables, design, styles }),\n  });\n\n  const element = (\n    <Ref innerRef={videoRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          autoPlay,\n          controls,\n          loop,\n          poster,\n          src,\n          ...unhandledProps,\n        })}\n      />\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\nVideo.displayName = 'Video';\n\nVideo.propTypes = {\n  ...commonPropTypes.createCommon({\n    children: false,\n    content: false,\n  }),\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string,\n};\n\nVideo.defaultProps = {\n  as: 'video',\n  accessibility: videoBehavior,\n  controls: true,\n  autoPlay: false,\n  muted: false,\n};\n\nVideo.handledProps = Object.keys(Video.propTypes) as any;\n"]},"metadata":{},"sourceType":"module"}