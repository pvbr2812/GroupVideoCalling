{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { NoOpSpan } from \"./noOpSpan\";\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\n\nvar NoOpTracer =\n/** @class */\nfunction () {\n  function NoOpTracer() {}\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n\n\n  NoOpTracer.prototype.startSpan = function (_name, _options) {\n    return new NoOpSpan();\n  };\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n\n\n  NoOpTracer.prototype.getCurrentSpan = function () {\n    return new NoOpSpan();\n  };\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n\n\n  NoOpTracer.prototype.withSpan = function (_span, fn) {\n    return fn();\n  };\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n\n\n  NoOpTracer.prototype.bind = function (target, _span) {\n    return target;\n  };\n\n  return NoOpTracer;\n}();\n\nexport { NoOpTracer };","map":{"version":3,"sources":["../../../../src/tracers/noop/noOpTracer.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,QAAT,QAAyB,YAAzB;AAGA;;;AAGG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAkCC;AAjCC;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAyB,QAAzB,EAA+C;AAC7C,WAAO,IAAI,QAAJ,EAAP;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,IAAI,QAAJ,EAAP;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAA0D,KAA1D,EAAuE,EAAvE,EAA4E;AAC1E,WAAO,EAAE,EAAT;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAQ,MAAR,EAAmB,KAAnB,EAA+B;AAC7B,WAAO,MAAP;AACD,GAFD;;AAGF,SAAA,UAAA;AAAC,CAlCD,EAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { NoOpSpan } from \"./noOpSpan\";\nimport { Tracer, Span, SpanOptions } from \"@opentelemetry/api\";\n\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nexport class NoOpTracer implements Tracer {\n  /**\n   * Starts a new Span.\n   * @param _name The name of the span.\n   * @param _options The SpanOptions used during Span creation.\n   */\n  startSpan(_name: string, _options?: SpanOptions): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span {\n    return new NoOpSpan();\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => ReturnType<T>>(_span: Span, fn: T): ReturnType<T> {\n    return fn();\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(target: T, _span?: Span): T {\n    return target;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}