{"ast":null,"code":"import { getUnhandledProps } from '../utils/getUnhandledProps';\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\n\nexport function useUnhandledProps(handledProps, props) {\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps(handledProps, Object.assign({}, props, {\n      'data-uses-unhanded-props': true\n    }));\n  }\n\n  return getUnhandledProps(handledProps, props);\n}","map":{"version":3,"sources":["hooks/useUnhandledProps.ts"],"names":["process","getUnhandledProps"],"mappings":"AAAA,SAAA,iBAAA,QAAA,4BAAA;AAEA;;;;;;;;;AAQA,OAAO,SAAA,iBAAA,CAAA,YAAA,EAAA,KAAA,EAAoG;AACzG,MAAIA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,MAAA,EAAqC;AACnC,WAAOC,iBAAiB,CAAA,YAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEtB,kCAA4B;AAFN,KAAA,CAAA,CAAxB;AAID;;AAED,SAAOA,iBAAiB,CAAA,YAAA,EAAxB,KAAwB,CAAxB;AACD","sourcesContent":["import { getUnhandledProps } from '../utils/getUnhandledProps';\n\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\nexport function useUnhandledProps(handledProps: string[], props: Record<string, any>): Record<string, any> {\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps(handledProps, {\n      ...props,\n      'data-uses-unhanded-props': true,\n    } as Record<string, any>);\n  }\n\n  return getUnhandledProps(handledProps, props);\n}\n"]},"metadata":{},"sourceType":"module"}