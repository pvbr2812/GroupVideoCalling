{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\nimport { childrenExist } from '../utils/childrenExist'; // https://github.com/facebook/react/blob/c4e0768d7487a9359b74986e3b07841d2520f593/packages/react-dom/src/events/getListener.js#L15-L22\n\nfunction isDisabledInteractive(node) {\n  return (node.nodeName === 'BUTTON' || node.nodeName === 'INPUT' || node.nodeName === 'SELECT' || node.nodeName === 'TEXTAREA') && node.disabled;\n}\n\nfunction isInteractiveFilter(node) {\n  return isDisabledInteractive(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n}\n/**\n * Performs consistent checks for components that are using `trigger` pattern (`Tooltip`, `Popup`). Ensures that\n * `children` or `trigger` props will always pass a valid React element to what additional props and handlers can\n * be applied.\n */\n\n\nexport function useTriggerElement(props) {\n  var trigger = childrenExist(props.children) ? props.children : props.trigger;\n  var element = trigger ? React.Children.only(trigger) : null; // An exception should not be thrown in tests as components might be rendered without styles\n\n  if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n    if (ReactIs.isFragment(element)) {\n      throw new Error('useTriggerElement(): A \"React.Fragment\" cannot be used as a \"trigger\" as it will be impossible to spread props on it');\n    } // Hooks are used only for dev mode validations and will be removed in production builds\n\n    /* eslint-disable react-hooks/rules-of-hooks */\n\n\n    var ref = React.useRef();\n    React.useEffect(function () {\n      if (ref.current) {\n        var _ref$current$ownerDoc;\n\n        if (isDisabledInteractive(ref.current)) {\n          // eslint-disable-next-line no-console\n          console.warn(['useTriggerElement(): Disabled elements should used as a \"trigger\" accurately as it may lead to ', 'unexpected behavior as pointer events are ignored on disabled elements. Please wrap your \"trigger\" with', 'an additional element like a \"div\" if you need to show tooltips or popups on disabled elements, an', 'example is available in docs:', 'https://fluentsite.z22.web.core.windows.net/components/tooltip/definition#usage-disabled-trigger'].join(' '));\n        }\n\n        var treeWalker = (_ref$current$ownerDoc = ref.current.ownerDocument) == null ? void 0 : _ref$current$ownerDoc.createTreeWalker(ref.current, NodeFilter.SHOW_ELEMENT, {\n          acceptNode: isInteractiveFilter\n        });\n\n        while (treeWalker == null ? void 0 : treeWalker.nextNode()) {\n          var _node$ownerDocument, _node$ownerDocument$d;\n\n          var node = treeWalker.currentNode;\n          var nodeStyles = (_node$ownerDocument = node.ownerDocument) == null ? void 0 : (_node$ownerDocument$d = _node$ownerDocument.defaultView) == null ? void 0 : _node$ownerDocument$d.getComputedStyle(node);\n\n          if ((nodeStyles == null ? void 0 : nodeStyles.pointerEvents) !== 'none') {\n            throw new Error(['useTriggerElement(): A disabled element should have explicit \"pointer-events: \"none\" in its styles', 'due a bug in Chrome that breaks \"onMouseLeave\" event in React:', 'https://github.com/facebook/react/issues/19692'].join(' '));\n          }\n        }\n      }\n    }, []);\n    return element ?\n    /*#__PURE__*/\n\n    /* Required as components may call handlers via `trigger.props`, Ref will pass unhandled props down */\n    React.createElement(Ref, _extends({}, element.props, {\n      innerRef: ref\n    }), element) : null;\n  }\n\n  return element;\n}","map":{"version":3,"sources":["hooks/useTriggerElement.tsx"],"names":["node","isDisabledInteractive","NodeFilter","trigger","childrenExist","props","element","React","process","ReactIs","ref","console","treeWalker","acceptNode","isInteractiveFilter","nodeStyles"],"mappings":"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","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport { childrenExist } from '../utils/childrenExist';\n\ntype UseTriggerElementOptions = {\n  children?: React.ReactNode;\n  trigger?: React.ReactElement;\n};\n\n// https://github.com/facebook/react/blob/c4e0768d7487a9359b74986e3b07841d2520f593/packages/react-dom/src/events/getListener.js#L15-L22\nfunction isDisabledInteractive(node: Node): boolean {\n  return (\n    (node.nodeName === 'BUTTON' ||\n      node.nodeName === 'INPUT' ||\n      node.nodeName === 'SELECT' ||\n      node.nodeName === 'TEXTAREA') &&\n    (node as HTMLButtonElement).disabled\n  );\n}\n\nfunction isInteractiveFilter(node: Node) {\n  return isDisabledInteractive(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n}\n\n/**\n * Performs consistent checks for components that are using `trigger` pattern (`Tooltip`, `Popup`). Ensures that\n * `children` or `trigger` props will always pass a valid React element to what additional props and handlers can\n * be applied.\n */\nexport function useTriggerElement(props: UseTriggerElementOptions): React.ReactElement | null {\n  const trigger = childrenExist(props.children) ? props.children : props.trigger;\n  const element = trigger ? (React.Children.only(trigger) as React.ReactElement) : null;\n\n  // An exception should not be thrown in tests as components might be rendered without styles\n  if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n    if (ReactIs.isFragment(element)) {\n      throw new Error(\n        'useTriggerElement(): A \"React.Fragment\" cannot be used as a \"trigger\" as it will be impossible to spread props on it',\n      );\n    }\n\n    // Hooks are used only for dev mode validations and will be removed in production builds\n    /* eslint-disable react-hooks/rules-of-hooks */\n\n    const ref = React.useRef<HTMLElement>() as React.RefObject<HTMLElement | HTMLButtonElement>;\n\n    React.useEffect(() => {\n      if (ref.current) {\n        if (isDisabledInteractive(ref.current)) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            [\n              'useTriggerElement(): Disabled elements should used as a \"trigger\" accurately as it may lead to ',\n              'unexpected behavior as pointer events are ignored on disabled elements. Please wrap your \"trigger\" with',\n              'an additional element like a \"div\" if you need to show tooltips or popups on disabled elements, an',\n              'example is available in docs:',\n              'https://fluentsite.z22.web.core.windows.net/components/tooltip/definition#usage-disabled-trigger',\n            ].join(' '),\n          );\n        }\n\n        const treeWalker = ref.current.ownerDocument?.createTreeWalker(ref.current, NodeFilter.SHOW_ELEMENT, {\n          acceptNode: isInteractiveFilter,\n        });\n        while (treeWalker?.nextNode()) {\n          const node = treeWalker.currentNode;\n          const nodeStyles = node.ownerDocument?.defaultView?.getComputedStyle(node as Element);\n\n          if (nodeStyles?.pointerEvents !== 'none') {\n            throw new Error(\n              [\n                'useTriggerElement(): A disabled element should have explicit \"pointer-events: \"none\" in its styles',\n                'due a bug in Chrome that breaks \"onMouseLeave\" event in React:',\n                'https://github.com/facebook/react/issues/19692',\n              ].join(' '),\n            );\n          }\n        }\n      }\n    }, []);\n\n    return element ? (\n      /* Required as components may call handlers via `trigger.props`, Ref will pass unhandled props down */\n      <Ref {...(element as React.ReactElement).props} innerRef={ref}>\n        {element}\n      </Ref>\n    ) : null;\n  }\n\n  return element;\n}\n"]},"metadata":{},"sourceType":"module"}