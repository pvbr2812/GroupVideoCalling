{"ast":null,"code":"import * as React from 'react';\n\nvar getDefinedProps = function getDefinedProps(props) {\n  var definedProps = {};\n  Object.keys(props).forEach(function (propName) {\n    if (props[propName] !== undefined) {\n      definedProps[propName] = props[propName];\n    }\n  });\n  return definedProps;\n};\n\nexport var useStateManager = function useStateManager(managerFactory, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$mapPropsToIn = _options.mapPropsToInitialState,\n      mapPropsToInitialState = _options$mapPropsToIn === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToIn,\n      _options$mapPropsToSt = _options.mapPropsToState,\n      mapPropsToState = _options$mapPropsToSt === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToSt,\n      _options$sideEffects = _options.sideEffects,\n      sideEffects = _options$sideEffects === void 0 ? [] : _options$sideEffects;\n  var latestActions = React.useMemo(function () {\n    return {};\n  }, // The change of `managerFactory` should trigger recreation of `latestActions` as they can be different between\n  // managers\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [managerFactory]);\n  var latestManager = React.useRef(null); // Heads up! forceUpdate() is used only for triggering rerenders, stateManager is SSOT\n\n  var _ref = React.useReducer(function (c) {\n    return c + 1;\n  }, 0),\n      forceUpdate = _ref[1]; // If manager exists, the current state will be used\n\n\n  var initialState = latestManager.current ? latestManager.current.state : getDefinedProps(mapPropsToInitialState());\n  latestManager.current = managerFactory({\n    // Factory has already configured actions\n    actions: {},\n    state: Object.assign({}, initialState, getDefinedProps(mapPropsToState())),\n    sideEffects: [].concat(sideEffects, [// `sideEffect` is called with two arguments, but hooks don't support the second callback\n    // argument\n    function () {\n      return forceUpdate();\n    }])\n  }); // We need to keep the same reference to an object with actions to allow usage them as\n  // a dependency in useCallback() hook\n\n  Object.assign(latestActions, latestManager.current.actions); // For development environments we disallow ability to extend object with other properties to\n  // avoid misusage\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.isExtensible(latestActions)) Object.preventExtensions(latestActions);\n  } // We need to pass exactly `manager.state` to provide the same state object during the same render\n  // frame.\n  // It keeps behavior consistency between React state tools and our managers\n  // https://github.com/facebook/react/issues/11527#issuecomment-360199710\n  // Object.freeze() is used only in dev-mode to avoid usage mistakes\n\n\n  return {\n    state: process.env.NODE_ENV === 'production' ? latestManager.current.state : Object.freeze(latestManager.current.state),\n    actions: latestActions\n  };\n};","map":{"version":3,"sources":["hooks/useStateManager.ts"],"names":["getDefinedProps","definedProps","Object","props","useStateManager","options","mapPropsToInitialState","mapPropsToState","sideEffects","latestActions","latestManager","React","forceUpdate","c","initialState","managerFactory","actions","state","process"],"mappings":"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","sourcesContent":["import { AnyAction, EnhancedActions, Manager, ManagerFactory, SideEffect } from '@fluentui/state';\nimport * as React from 'react';\n\ntype UseStateManagerOptions<State> = {\n  mapPropsToInitialState?: () => Partial<State>;\n  mapPropsToState?: () => Partial<State>;\n  sideEffects?: SideEffect<State>[];\n};\n\ntype UseStateManagerResult<State, Actions> = {\n  state: Readonly<State>;\n  actions: Readonly<Actions>;\n};\n\nconst getDefinedProps = <Props extends Record<string, any>>(props: Props): Partial<Props> => {\n  const definedProps: Partial<Props> = {};\n\n  Object.keys(props).forEach(propName => {\n    if (props[propName] !== undefined) {\n      (<Record<string, any>>definedProps)[propName] = props[propName];\n    }\n  });\n\n  return definedProps;\n};\n\nexport const useStateManager = <State extends Record<string, any>, Actions extends Record<string, AnyAction>>(\n  managerFactory: ManagerFactory<State, Actions>,\n  options: UseStateManagerOptions<State> = {},\n): UseStateManagerResult<State, Actions> => {\n  const {\n    mapPropsToInitialState = () => ({} as Partial<State>),\n    mapPropsToState = () => ({} as Partial<State>),\n    sideEffects = [],\n  } = options;\n  const latestActions = React.useMemo<Actions>(\n    () => ({} as Actions),\n    // The change of `managerFactory` should trigger recreation of `latestActions` as they can be different between\n    // managers\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [managerFactory],\n  );\n  const latestManager = React.useRef<Manager<State, Actions> | null>(null);\n\n  // Heads up! forceUpdate() is used only for triggering rerenders, stateManager is SSOT\n  const [, forceUpdate] = React.useReducer((c: number) => c + 1, 0) as [never, () => void];\n\n  // If manager exists, the current state will be used\n  const initialState = latestManager.current ? latestManager.current.state : getDefinedProps(mapPropsToInitialState());\n\n  latestManager.current = managerFactory({\n    // Factory has already configured actions\n    actions: {} as EnhancedActions<State, Actions>,\n    state: { ...initialState, ...getDefinedProps(mapPropsToState()) },\n    sideEffects: [\n      ...sideEffects,\n      // `sideEffect` is called with two arguments, but hooks don't support the second callback\n      // argument\n      () => forceUpdate(),\n    ],\n  });\n\n  // We need to keep the same reference to an object with actions to allow usage them as\n  // a dependency in useCallback() hook\n  Object.assign(latestActions, latestManager.current.actions);\n\n  // For development environments we disallow ability to extend object with other properties to\n  // avoid misusage\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.isExtensible(latestActions)) Object.preventExtensions(latestActions);\n  }\n\n  // We need to pass exactly `manager.state` to provide the same state object during the same render\n  // frame.\n  // It keeps behavior consistency between React state tools and our managers\n  // https://github.com/facebook/react/issues/11527#issuecomment-360199710\n  // Object.freeze() is used only in dev-mode to avoid usage mistakes\n\n  return {\n    state:\n      process.env.NODE_ENV === 'production' ? latestManager.current.state : Object.freeze(latestManager.current.state),\n    actions: latestActions,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}