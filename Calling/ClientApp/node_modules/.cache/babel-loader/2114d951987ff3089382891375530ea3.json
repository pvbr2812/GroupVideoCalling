{"ast":null,"code":"import { addMonths, findAvailableDate, addDays, addWeeks, isAfterMaxDate, isBeforeMinDate } from '../../utils/date-time-utilities';\nexport var contstraintNavigatedDate = function contstraintNavigatedDate(initialDate, targetDate, direction, restrictedDatesOptions, navigateToDisabledDates) {\n  if (!targetDate) {\n    // if we couldn't find a target date at all, do nothing\n    return undefined;\n  }\n\n  var findAvailableDateOptions = Object.assign({\n    initialDate: initialDate,\n    targetDate: targetDate,\n    direction: direction\n  }, !navigateToDisabledDates && restrictedDatesOptions);\n  var newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n\n  if (!newNavigatedDate) {\n    // if no dates available in initial direction, try going backwards\n    findAvailableDateOptions.direction = -direction;\n    newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n  }\n\n  if (!navigateToDisabledDates && isAfterMaxDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.maxDate;\n  } else if (!navigateToDisabledDates && isBeforeMinDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.minDate;\n  }\n\n  return newNavigatedDate;\n};\nexport var navigateToNewDate = function navigateToNewDate(originalDate, kind, step, restrictedDatesOptions, navigateToDisabledDates) {\n  var targetDate = null;\n  var targetDayDirection = step > 0 ? 1 : -1;\n\n  switch (kind) {\n    case 'Month':\n      {\n        targetDate = addMonths(originalDate, targetDayDirection);\n        break;\n      }\n\n    case 'Week':\n      {\n        targetDate = addWeeks(originalDate, targetDayDirection);\n        break;\n      }\n\n    case 'Day':\n      {\n        targetDate = addDays(originalDate, targetDayDirection);\n        break;\n      }\n\n    default:\n      break;\n  }\n\n  return contstraintNavigatedDate(originalDate, targetDate, step, restrictedDatesOptions, navigateToDisabledDates);\n};","map":{"version":3,"sources":["components/Datepicker/navigateToNewDate.tsx"],"names":["contstraintNavigatedDate","findAvailableDateOptions","initialDate","targetDate","direction","newNavigatedDate","findAvailableDate","isAfterMaxDate","restrictedDatesOptions","isBeforeMinDate","navigateToNewDate","targetDayDirection","step","addMonths","addWeeks","addDays"],"mappings":"AAAA,SAAA,SAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,QAAA,EAAA,cAAA,EAAA,eAAA,QAAA,iCAAA;AAaA,OAAO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,sBAAA,EAAA,uBAAA,EAMnC;AACH,MAAI,CAAJ,UAAA,EAAiB;AACf;AACA,WAAA,SAAA;AACD;;AAED,MAAMC,wBAA+C,GAAA,MAAA,CAAA,MAAA,CAAA;AACnDC,IAAAA,WAAW,EADwC,WAAA;AAEnDC,IAAAA,UAAU,EAFyC,UAAA;AAGnDC,IAAAA,SAAS,EAATA;AAHmD,GAAA,EAI/C,CAAA,uBAAA,IAJN,sBAAqD,CAArD;AAOA,MAAIC,gBAAgB,GAAGC,iBAAiB,CAAxC,wBAAwC,CAAxC;;AAEA,MAAI,CAAJ,gBAAA,EAAuB;AACrB;AACAL,IAAAA,wBAAwB,CAAxBA,SAAAA,GAAqC,CAArCA,SAAAA;AACAI,IAAAA,gBAAgB,GAAGC,iBAAiB,CAApCD,wBAAoC,CAApCA;AACD;;AAED,MAAI,CAAA,uBAAA,IAA4BE,cAAc,CAAA,UAAA,EAA9C,sBAA8C,CAA9C,EAAoF;AAClFF,IAAAA,gBAAgB,GAAGG,sBAAsB,CAAzCH,OAAAA;AADF,GAAA,MAEO,IAAI,CAAA,uBAAA,IAA4BI,eAAe,CAAA,UAAA,EAA/C,sBAA+C,CAA/C,EAAqF;AAC1FJ,IAAAA,gBAAgB,GAAGG,sBAAsB,CAAzCH,OAAAA;AACD;;AAED,SAAA,gBAAA;AAjCK,CAAA;AAoCP,OAAO,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,YAAA,EAAA,IAAA,EAAA,IAAA,EAAA,sBAAA,EAAA,uBAAA,EAMtB;AACT,MAAIP,UAAuB,GAA3B,IAAA;AACA,MAAMQ,kBAAkB,GAAGC,IAAI,GAAJA,CAAAA,GAAAA,CAAAA,GAAe,CAA1C,CAAA;;AAEA,UAAA,IAAA;AACE,SAAA,OAAA;AAAc;AACZT,QAAAA,UAAU,GAAGU,SAAS,CAAA,YAAA,EAAtBV,kBAAsB,CAAtBA;AACA;AACD;;AACD,SAAA,MAAA;AAAa;AACXA,QAAAA,UAAU,GAAGW,QAAQ,CAAA,YAAA,EAArBX,kBAAqB,CAArBA;AACA;AACD;;AACD,SAAA,KAAA;AAAY;AACVA,QAAAA,UAAU,GAAGY,OAAO,CAAA,YAAA,EAApBZ,kBAAoB,CAApBA;AACA;AACD;;AACD;AACE;AAdJ;;AAiBA,SAAOH,wBAAwB,CAAA,YAAA,EAAA,UAAA,EAAA,IAAA,EAAA,sBAAA,EAA/B,uBAA+B,CAA/B;AA3BK,CAAA","sourcesContent":["import {\n  addMonths,\n  IAvailableDateOptions,\n  IRestrictedDatesOptions,\n  findAvailableDate,\n  addDays,\n  addWeeks,\n  isAfterMaxDate,\n  isBeforeMinDate,\n} from '../../utils/date-time-utilities';\n\nexport type NavigationKind = 'Month' | 'Week' | 'Day';\n\nexport const contstraintNavigatedDate = (\n  initialDate: Date,\n  targetDate: Date,\n  direction: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n) => {\n  if (!targetDate) {\n    // if we couldn't find a target date at all, do nothing\n    return undefined;\n  }\n\n  const findAvailableDateOptions: IAvailableDateOptions = {\n    initialDate,\n    targetDate,\n    direction,\n    ...(!navigateToDisabledDates && restrictedDatesOptions),\n  };\n\n  let newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n\n  if (!newNavigatedDate) {\n    // if no dates available in initial direction, try going backwards\n    findAvailableDateOptions.direction = -direction;\n    newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n  }\n\n  if (!navigateToDisabledDates && isAfterMaxDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.maxDate;\n  } else if (!navigateToDisabledDates && isBeforeMinDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.minDate;\n  }\n\n  return newNavigatedDate;\n};\n\nexport const navigateToNewDate = (\n  originalDate: Date,\n  kind: NavigationKind,\n  step: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n): Date => {\n  let targetDate: Date | null = null;\n  const targetDayDirection = step > 0 ? 1 : -1;\n\n  switch (kind) {\n    case 'Month': {\n      targetDate = addMonths(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Week': {\n      targetDate = addWeeks(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Day': {\n      targetDate = addDays(originalDate, targetDayDirection);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return contstraintNavigatedDate(originalDate, targetDate, step, restrictedDatesOptions, navigateToDisabledDates);\n};\n"]},"metadata":{},"sourceType":"module"}