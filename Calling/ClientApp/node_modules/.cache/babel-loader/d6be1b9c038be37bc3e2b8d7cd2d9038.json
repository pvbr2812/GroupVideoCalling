{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { hierarchicalTreeTitleBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getElementType, useUnhandledProps, useFluentContext, useTelemetry, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var hierarchicalTreeTitleClassName = 'ui-hierarchicaltree__title';\n/**\n * A TreeTitle renders a title of TreeItem.\n */\n\nexport var HierarchicalTreeTitle = /*#__PURE__*/function () {\n  var HierarchicalTreeTitle = function HierarchicalTreeTitle(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(HierarchicalTreeTitle.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        content = props.content,\n        open = props.open,\n        hasSubtree = props.hasSubtree,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(HierarchicalTreeTitle.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: HierarchicalTreeTitle.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          e.preventDefault();\n          handleClick(e);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          open: open,\n          hasSubtree: hasSubtree\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(HierarchicalTreeTitle.displayName, {\n      className: hierarchicalTreeTitleClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var handleClick = function handleClick(e) {\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick\n    }, unhandledProps, rtlTextContainer.getAttributes({\n      forElements: [children, content]\n    }))), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  };\n\n  HierarchicalTreeTitle.displayName = 'HierarchicalTreeTitle';\n  HierarchicalTreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    onClick: PropTypes.func,\n    open: PropTypes.bool,\n    hasSubtree: PropTypes.bool\n  });\n  HierarchicalTreeTitle.defaultProps = {\n    as: 'a',\n    accessibility: hierarchicalTreeTitleBehavior\n  };\n  HierarchicalTreeTitle.handledProps = Object.keys(HierarchicalTreeTitle.propTypes);\n  HierarchicalTreeTitle.create = createShorthandFactory({\n    Component: HierarchicalTreeTitle,\n    mappedProp: 'content'\n  });\n  return HierarchicalTreeTitle;\n}();","map":{"version":3,"sources":["components/HierarchicalTree/HierarchicalTreeTitle.tsx"],"names":["hierarchicalTreeTitleClassName","HierarchicalTreeTitle","context","useFluentContext","setStart","setEnd","useTelemetry","children","content","open","hasSubtree","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToInlineStyles","element","onClick","forElements","childrenExist","commonPropTypes","PropTypes","bool","as","accessibility","hierarchicalTreeTitleBehavior","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  hierarchicalTreeTitleBehavior,\n  HierarchicalTreeTitleBehaviorProps,\n} from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\n\nimport { ComponentEventHandler, FluentComponentStaticProps } from '../../types';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface HierarchicalTreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<HierarchicalTreeTitleBehaviorProps>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<HierarchicalTreeTitleProps>;\n\n  /** Whether or not the subtree of the item is in the open state. */\n  open?: boolean;\n\n  /** Whether or not the item has a subtree. */\n  hasSubtree?: boolean;\n}\n\nexport const hierarchicalTreeTitleClassName = 'ui-hierarchicaltree__title';\n\nexport type HierarchicalTreeTitleStylesProps = never;\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport const HierarchicalTreeTitle: ComponentWithAs<'a', HierarchicalTreeTitleProps> &\n  FluentComponentStaticProps<HierarchicalTreeTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(HierarchicalTreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const { children, content, open, hasSubtree, className, design, styles, variables } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(HierarchicalTreeTitle.handledProps, props);\n\n  const getA11yProps = useAccessibility<HierarchicalTreeTitleBehaviorProps>(props.accessibility, {\n    debugName: HierarchicalTreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      open,\n      hasSubtree,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<HierarchicalTreeTitleStylesProps>(HierarchicalTreeTitle.displayName, {\n    className: hierarchicalTreeTitleClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nHierarchicalTreeTitle.displayName = 'HierarchicalTreeTitle';\n\nHierarchicalTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  open: PropTypes.bool,\n  hasSubtree: PropTypes.bool,\n};\n\nHierarchicalTreeTitle.defaultProps = {\n  as: 'a',\n  accessibility: hierarchicalTreeTitleBehavior,\n};\n\nHierarchicalTreeTitle.handledProps = Object.keys(HierarchicalTreeTitle.propTypes) as any;\n\nHierarchicalTreeTitle.create = createShorthandFactory({\n  Component: HierarchicalTreeTitle,\n  mappedProp: 'content',\n});\n"]},"metadata":{},"sourceType":"module"}