{"ast":null,"code":"// © Microsoft Corporation. All rights reserved.\nexport const utils = {\n  getAppServiceUrl: () => {\n    return window.location.origin;\n  },\n  getTokenForUser: async () => {\n    const response = await fetch('/token');\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Invalid token response');\n  },\n  getRefreshedTokenForUser: async identity => {\n    const response = await fetch(`/refreshToken/${identity}`);\n\n    if (response.ok) {\n      const content = await response.json();\n      return content.token;\n    }\n\n    throw new Error('Invalid token response');\n  },\n\n  isSelectedAudioDeviceInList(selected, list) {\n    return list.filter(item => item.name === selected.name).length > 0;\n  },\n\n  isSelectedVideoDeviceInList(selected, list) {\n    return list.filter(item => item.name === selected.name).length > 0;\n  },\n\n  isMobileSession() {\n    return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g) ? true : false;\n  },\n\n  isSmallScreen() {\n    return window.innerWidth < 700 || window.innerHeight < 400;\n  },\n\n  isUnsupportedBrowser() {\n    return window.navigator.userAgent.match(/(Firefox)/g) ? true : false;\n  },\n\n  getId: identifier => {\n    switch (identifier.kind) {\n      case 'communicationUser':\n        return identifier.communicationUserId;\n\n      case 'phoneNumber':\n        return identifier.phoneNumber;\n\n      case 'microsoftTeamsUser':\n        return identifier.microsoftTeamsUserId;\n\n      case 'unknown':\n        return identifier.id;\n    }\n  },\n  getStreamId: (userId, stream) => {\n    return `${userId}-${stream.id}-${stream.mediaStreamType}`;\n  },\n\n  /*\r\n   * TODO:\r\n   *  Remove this method once the SDK improves error handling for unsupported browser.\r\n   */\n  isOnIphoneAndNotSafari() {\n    const userAgent = navigator.userAgent; // Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\n\n    if (userAgent.includes('iPhone') && (userAgent.includes('FxiOS') || userAgent.includes('CriOS'))) {\n      return true;\n    }\n\n    return false;\n  },\n\n  getBuildTime: () => {\n    const dateTimeStamp = \"12/7/2021, 11:35:26 pm\";\n    return dateTimeStamp;\n  }\n};","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Git Uploads/GroupVideoCalling/Calling/ClientApp/src/Utils/Utils.ts"],"names":["utils","getAppServiceUrl","window","location","origin","getTokenForUser","response","fetch","ok","json","Error","getRefreshedTokenForUser","identity","content","token","isSelectedAudioDeviceInList","selected","list","filter","item","name","length","isSelectedVideoDeviceInList","isMobileSession","navigator","userAgent","match","isSmallScreen","innerWidth","innerHeight","isUnsupportedBrowser","getId","identifier","kind","communicationUserId","phoneNumber","microsoftTeamsUserId","id","getStreamId","userId","stream","mediaStreamType","isOnIphoneAndNotSafari","includes","getBuildTime","dateTimeStamp"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport { AudioDeviceInfo, VideoDeviceInfo, RemoteVideoStream } from '@azure/communication-calling';\r\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\r\nimport { CommunicationUserToken } from '@azure/communication-identity';\r\nimport preval from 'preval.macro';\r\n\r\nexport const utils = {\r\n  getAppServiceUrl: (): string => {\r\n    return window.location.origin;\r\n  },\r\n  getTokenForUser: async (): Promise<CommunicationUserToken> => {\r\n    const response = await fetch('/token');\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error('Invalid token response');\r\n  },\r\n  getRefreshedTokenForUser: async (identity: string): Promise<string> => {\r\n    const response = await fetch(`/refreshToken/${identity}`);\r\n    if (response.ok) {\r\n      const content = await response.json();\r\n      return content.token;\r\n    }\r\n    throw new Error('Invalid token response');\r\n  },\r\n  isSelectedAudioDeviceInList(selected: AudioDeviceInfo, list: AudioDeviceInfo[]): boolean {\r\n    return list.filter((item) => item.name === selected.name).length > 0;\r\n  },\r\n  isSelectedVideoDeviceInList(selected: VideoDeviceInfo, list: VideoDeviceInfo[]): boolean {\r\n    return list.filter((item) => item.name === selected.name).length > 0;\r\n  },\r\n  isMobileSession(): boolean {\r\n    return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g)\r\n      ? true\r\n      : false;\r\n  },\r\n  isSmallScreen(): boolean {\r\n    return window.innerWidth < 700 || window.innerHeight < 400;\r\n  },\r\n  isUnsupportedBrowser(): boolean {\r\n    return window.navigator.userAgent.match(/(Firefox)/g) ? true : false;\r\n  },\r\n  getId: (identifier: CommunicationIdentifierKind): string => {\r\n    switch (identifier.kind) {\r\n      case 'communicationUser':\r\n        return identifier.communicationUserId;\r\n      case 'phoneNumber':\r\n        return identifier.phoneNumber;\r\n      case 'microsoftTeamsUser':\r\n        return identifier.microsoftTeamsUserId;\r\n      case 'unknown':\r\n        return identifier.id;\r\n    }\r\n  },\r\n  getStreamId: (userId: string, stream: RemoteVideoStream): string => {\r\n    return `${userId}-${stream.id}-${stream.mediaStreamType}`;\r\n  },\r\n  /*\r\n   * TODO:\r\n   *  Remove this method once the SDK improves error handling for unsupported browser.\r\n   */\r\n  isOnIphoneAndNotSafari(): boolean {\r\n    const userAgent = navigator.userAgent;\r\n    // Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\r\n    if (userAgent.includes('iPhone') && (userAgent.includes('FxiOS') || userAgent.includes('CriOS'))) {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  getBuildTime: (): string => {\r\n    const dateTimeStamp = preval`module.exports = new Date().toLocaleString();`;\r\n    return dateTimeStamp;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}