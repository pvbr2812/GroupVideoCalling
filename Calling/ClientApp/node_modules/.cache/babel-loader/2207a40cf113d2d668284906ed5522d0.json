{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { computeDisplayNames } from './computeDisplayNames';\nimport { defaultComposeOptions } from './defaultComposeOptions';\nexport function mergeComposeOptions(input, inputOptions, parentOptions) {\n  if (parentOptions === void 0) {\n    parentOptions = defaultComposeOptions;\n  }\n\n  var mapPropsToSlotPropsChain = inputOptions.slotProps ? __spreadArrays(parentOptions.slotProps, [inputOptions.slotProps]) : parentOptions.slotProps;\n\n  var resolveSlotProps = function (props) {\n    return mapPropsToSlotPropsChain.reduce(function (acc, definition) {\n      var nextProps = __assign({}, definition(props));\n\n      var slots = __spreadArrays(Object.keys(acc), Object.keys(nextProps));\n\n      var mergedSlotProps = {};\n      slots.forEach(function (slot) {\n        if (!mergedSlotProps[slot]) {\n          mergedSlotProps[slot] = __assign(__assign({}, acc[slot]), nextProps[slot]);\n        }\n      });\n      return mergedSlotProps;\n    }, {});\n  };\n\n  var inputClasses = Array.isArray(inputOptions.classes) ? inputOptions.classes : [inputOptions.classes];\n\n  var state = function (props, ref, options) {\n    if (inputOptions.state) {\n      return inputOptions.state(parentOptions.state(props, ref, options), ref, options);\n    }\n\n    return parentOptions.state(props, ref, options);\n  };\n\n  return {\n    className: inputOptions.className || parentOptions.className,\n    classes: __spreadArrays(parentOptions.classes, inputClasses),\n    displayName: inputOptions.displayName || parentOptions.displayName,\n    displayNames: computeDisplayNames(inputOptions, parentOptions),\n    mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps ? __spreadArrays(parentOptions.mapPropsToStylesPropsChain, [inputOptions.mapPropsToStylesProps]) : parentOptions.mapPropsToStylesPropsChain,\n    render: typeof input === 'function' ? input : parentOptions.render,\n    handledProps: __spreadArrays(parentOptions.handledProps, inputOptions.handledProps || []),\n    overrideStyles: inputOptions.overrideStyles || false,\n    slots: __assign(__assign({}, parentOptions.slots), inputOptions.slots),\n    slotProps: mapPropsToSlotPropsChain,\n    state: state,\n    resolveSlotProps: resolveSlotProps,\n    shorthandConfig: __assign(__assign({}, parentOptions.shorthandConfig), inputOptions.shorthandConfig)\n  };\n}","map":{"version":3,"sources":["mergeComposeOptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComposeOptions, ComposePreparedOptions, Input } from './types';\nimport { computeDisplayNames } from './computeDisplayNames';\nimport { defaultComposeOptions } from './defaultComposeOptions';\n\nexport function mergeComposeOptions(\n  input: Input,\n  inputOptions: ComposeOptions,\n  parentOptions: Required<ComposePreparedOptions> = defaultComposeOptions,\n): Required<ComposePreparedOptions> {\n  const mapPropsToSlotPropsChain = inputOptions.slotProps\n    ? [...parentOptions.slotProps, inputOptions.slotProps]\n    : parentOptions.slotProps;\n\n  const resolveSlotProps = <P = {}>(props: P) =>\n    mapPropsToSlotPropsChain.reduce<Record<string, object>>((acc, definition) => {\n      const nextProps = { ...definition(props) };\n      const slots: string[] = [...Object.keys(acc), ...Object.keys(nextProps)];\n      const mergedSlotProps: Record<string, object> = {};\n\n      slots.forEach(slot => {\n        if (!mergedSlotProps[slot]) {\n          mergedSlotProps[slot] = {\n            ...acc[slot],\n            ...nextProps[slot],\n          };\n        }\n      });\n\n      return mergedSlotProps;\n    }, {});\n\n  const inputClasses = Array.isArray(inputOptions.classes) ? inputOptions.classes : [inputOptions.classes];\n\n  const state: ComposePreparedOptions['state'] = (props, ref, options) => {\n    if (inputOptions.state) {\n      return inputOptions.state(parentOptions.state(props, ref, options), ref, options);\n    }\n\n    return parentOptions.state(props, ref, options);\n  };\n\n  return {\n    className: inputOptions.className || parentOptions.className,\n    classes: [...parentOptions.classes, ...inputClasses],\n\n    displayName: inputOptions.displayName || parentOptions.displayName,\n    displayNames: computeDisplayNames(inputOptions, parentOptions),\n\n    mapPropsToStylesPropsChain: inputOptions.mapPropsToStylesProps\n      ? [...parentOptions.mapPropsToStylesPropsChain, inputOptions.mapPropsToStylesProps]\n      : parentOptions.mapPropsToStylesPropsChain,\n\n    render: typeof input === 'function' ? input : parentOptions.render,\n\n    handledProps: [...parentOptions.handledProps, ...((inputOptions.handledProps as never[]) || ([] as never[]))],\n\n    overrideStyles: inputOptions.overrideStyles || false,\n\n    slots: {\n      ...parentOptions.slots,\n      ...inputOptions.slots,\n    },\n\n    slotProps: mapPropsToSlotPropsChain,\n\n    state,\n\n    resolveSlotProps,\n\n    shorthandConfig: {\n      ...parentOptions.shorthandConfig,\n      ...inputOptions.shorthandConfig,\n    },\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}