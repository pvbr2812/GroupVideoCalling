{"ast":null,"code":"import { formFieldBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes } from '../../utils';\nimport { getElementType, useUnhandledProps, useTelemetry, useFluentContext, useStyles, useAccessibility } from '@fluentui/react-bindings';\nexport var formFieldCustomClassName = 'ui-form__fieldcustom';\n/**\n * A FormFieldCustom represents a Form element containing a label and an input.\n */\n\nexport var FormFieldCustom = /*#__PURE__*/function () {\n  var FormFieldCustom = function FormFieldCustom(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(FormFieldCustom.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        required = props.required,\n        type = props.type,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        inline = props.inline;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(FormFieldCustom.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: FormFieldCustom.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(FormFieldCustom.displayName, {\n      className: formFieldCustomClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          type: type,\n          inline: inline,\n          required: required\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), children);\n    setEnd();\n    return element;\n  };\n\n  FormFieldCustom.displayName = 'FormFieldCustom';\n  FormFieldCustom.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false,\n    children: false\n  }), {\n    id: PropTypes.string,\n    inline: PropTypes.bool,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.string\n  });\n  FormFieldCustom.handledProps = Object.keys(FormFieldCustom.propTypes);\n  FormFieldCustom.defaultProps = {\n    accessibility: formFieldBehavior\n  };\n  return FormFieldCustom;\n}();","map":{"version":3,"sources":["components/Form/FormFieldCustom.tsx"],"names":["formFieldCustomClassName","FormFieldCustom","context","useFluentContext","setStart","setEnd","useTelemetry","children","required","type","className","design","styles","variables","inline","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","root","content","id","PropTypes","name","string","Object","accessibility","formFieldBehavior"],"mappings":"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","sourcesContent":["import { Accessibility, FormFieldBehaviorProps, formFieldBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { UIComponentProps, ChildrenComponentProps, commonPropTypes } from '../../utils';\nimport { FluentComponentStaticProps } from '../../types';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nexport interface FormFieldCustomProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<FormFieldBehaviorProps>;\n\n  /** The HTML input id. This will be set on the control element and will be use for linking it with the label for correct accessibility. */\n  id?: string;\n\n  /** A field can have its label next to instead of above it. */\n  inline?: boolean;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /** A field can show that input is mandatory. */\n  required?: boolean;\n\n  /** The HTML input type. */\n  type?: string;\n}\n\nexport const formFieldCustomClassName = 'ui-form__fieldcustom';\n\nexport type FormFieldCustomStylesProps = Required<Pick<FormFieldCustomProps, 'type' | 'inline' | 'required'>>;\n\n/**\n * A FormFieldCustom represents a Form element containing a label and an input.\n */\nexport const FormFieldCustom: React.FC<FormFieldCustomProps> &\n  FluentComponentStaticProps<FormFieldCustomProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(FormFieldCustom.displayName, context.telemetry);\n  setStart();\n\n  const { children, required, type, className, design, styles, variables, inline } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(FormFieldCustom.handledProps, props);\n\n  const getA11yProps = useAccessibility<FormFieldBehaviorProps>(props.accessibility, {\n    debugName: FormFieldCustom.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<FormFieldCustomStylesProps>(FormFieldCustom.displayName, {\n    className: formFieldCustomClassName,\n    mapPropsToStyles: () => ({\n      type,\n      inline,\n      required,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nFormFieldCustom.displayName = 'FormFieldCustom';\n\nFormFieldCustom.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n    children: false,\n  }),\n  id: PropTypes.string,\n  inline: PropTypes.bool,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n};\n\nFormFieldCustom.handledProps = Object.keys(FormFieldCustom.propTypes) as any;\n\nFormFieldCustom.defaultProps = {\n  accessibility: formFieldBehavior,\n};\n"]},"metadata":{},"sourceType":"module"}