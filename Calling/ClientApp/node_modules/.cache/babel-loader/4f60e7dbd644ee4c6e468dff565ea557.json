{"ast":null,"code":"import { pxToRem } from '../../../../utils';\nvar sizeToPxValue = {\n  smallest: 20,\n  smaller: 24,\n  small: 28,\n  medium: 32,\n  large: 44,\n  larger: 64,\n  largest: 96\n};\nvar iconSizeToPxValue = {\n  smallest: 10,\n  smaller: 12,\n  small: 16,\n  medium: 16,\n  large: 20,\n  larger: 32,\n  largest: 40\n};\nexport var avatarStyles = {\n  root: function root(_ref) {\n    var size = _ref.props.size;\n    var sizeInRem = pxToRem(sizeToPxValue[size]);\n    return {\n      position: 'relative',\n      backgroundColor: 'inherit',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      height: sizeInRem,\n      width: sizeInRem\n    };\n  },\n  icon: function icon(_ref2) {\n    var p = _ref2.props,\n        v = _ref2.variables;\n    var sizeInRem = pxToRem(sizeToPxValue[p.size]);\n    var iconsizeInRem = pxToRem(iconSizeToPxValue[p.size]);\n    return Object.assign({\n      color: v.iconColor,\n      background: v.iconBackgroundColor,\n      width: sizeInRem,\n      height: sizeInRem,\n      borderRadius: '50%',\n      display: 'inline-flex',\n      alignItems: 'center'\n    }, p.square && {\n      borderRadius: v.squareAvatarBorderRadius\n    }, {\n      '& > :first-child': {\n        margin: '0 auto',\n        width: iconsizeInRem,\n        height: iconsizeInRem,\n        '& svg': {\n          width: '100%',\n          height: '100%'\n        }\n      }\n    });\n  },\n  image: function image(_ref3) {\n    var p = _ref3.props,\n        v = _ref3.variables;\n    return Object.assign({\n      borderColor: v.avatarBorderColor,\n      borderStyle: 'solid',\n      borderWidth: v.avatarBorderWidth,\n      height: '100%',\n      objectFit: 'cover',\n      verticalAlign: 'top',\n      width: '100%'\n    }, p.square && {\n      borderRadius: v.squareAvatarBorderRadius\n    });\n  },\n  label: function label(_ref4) {\n    var p = _ref4.props,\n        v = _ref4.variables;\n    var sizeInRem = pxToRem(sizeToPxValue[p.size]);\n    return Object.assign({\n      display: 'inline-block',\n      width: sizeInRem,\n      height: sizeInRem,\n      lineHeight: sizeInRem,\n      fontSize: pxToRem(sizeToPxValue[p.size] / 2.333),\n      verticalAlign: 'top',\n      textAlign: 'center',\n      padding: '0'\n    }, p.square && {\n      borderRadius: v.squareAvatarBorderRadius\n    });\n  },\n  status: function status(_ref5) {\n    var v = _ref5.variables;\n    return {\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      boxShadow: \"0 0 0 \" + v.statusBorderWidth + \" \" + v.statusBorderColor\n    };\n  }\n};","map":{"version":3,"sources":["themes/teams/components/Avatar/avatarStyles.ts"],"names":["sizeToPxValue","smallest","smaller","small","medium","large","larger","largest","iconSizeToPxValue","avatarStyles","root","props","size","sizeInRem","pxToRem","position","backgroundColor","display","verticalAlign","height","width","icon","p","variables","v","iconsizeInRem","color","background","borderRadius","alignItems","squareAvatarBorderRadius","margin","image","borderColor","borderStyle","borderWidth","objectFit","label","lineHeight","fontSize","textAlign","padding","status","bottom","right","boxShadow","statusBorderColor"],"mappings":"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","sourcesContent":["import { pxToRem, SizeValue } from '../../../../utils';\nimport { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { AvatarStylesProps } from '../../../../components/Avatar/Avatar';\nimport { AvatarVariables } from './avatarVariables';\n\nconst sizeToPxValue: Record<SizeValue, number> = {\n  smallest: 20,\n  smaller: 24,\n  small: 28,\n  medium: 32,\n  large: 44,\n  larger: 64,\n  largest: 96,\n};\n\nconst iconSizeToPxValue: Record<SizeValue, number> = {\n  smallest: 10,\n  smaller: 12,\n  small: 16,\n  medium: 16,\n  large: 20,\n  larger: 32,\n  largest: 40,\n};\n\nexport const avatarStyles: ComponentSlotStylesPrepared<AvatarStylesProps, AvatarVariables> = {\n  root: ({ props: { size } }): ICSSInJSStyle => {\n    const sizeInRem = pxToRem(sizeToPxValue[size]);\n\n    return {\n      position: 'relative',\n      backgroundColor: 'inherit',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      height: sizeInRem,\n      width: sizeInRem,\n    };\n  },\n  icon: ({ props: p, variables: v }) => {\n    const sizeInRem = pxToRem(sizeToPxValue[p.size]);\n    const iconsizeInRem = pxToRem(iconSizeToPxValue[p.size]);\n\n    return {\n      color: v.iconColor,\n      background: v.iconBackgroundColor,\n      width: sizeInRem,\n      height: sizeInRem,\n      borderRadius: '50%',\n      display: 'inline-flex',\n      alignItems: 'center',\n      ...(p.square && {\n        borderRadius: v.squareAvatarBorderRadius,\n      }),\n      '& > :first-child': {\n        margin: '0 auto',\n        width: iconsizeInRem,\n        height: iconsizeInRem,\n        '& svg': {\n          width: '100%',\n          height: '100%',\n        },\n      },\n    };\n  },\n  image: ({ props: p, variables: v }): ICSSInJSStyle => ({\n    borderColor: v.avatarBorderColor,\n    borderStyle: 'solid',\n    borderWidth: v.avatarBorderWidth,\n\n    height: '100%',\n    objectFit: 'cover',\n    verticalAlign: 'top',\n    width: '100%',\n\n    ...(p.square && {\n      borderRadius: v.squareAvatarBorderRadius,\n    }),\n  }),\n  label: ({ props: p, variables: v }): ICSSInJSStyle => {\n    const sizeInRem = pxToRem(sizeToPxValue[p.size]);\n    return {\n      display: 'inline-block',\n      width: sizeInRem,\n      height: sizeInRem,\n      lineHeight: sizeInRem,\n      fontSize: pxToRem(sizeToPxValue[p.size] / 2.333),\n      verticalAlign: 'top',\n      textAlign: 'center',\n      padding: '0',\n      ...(p.square && {\n        borderRadius: v.squareAvatarBorderRadius,\n      }),\n    };\n  },\n  status: ({ variables: v }): ICSSInJSStyle => ({\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    boxShadow: `0 0 0 ${v.statusBorderWidth} ${v.statusBorderColor}`,\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}