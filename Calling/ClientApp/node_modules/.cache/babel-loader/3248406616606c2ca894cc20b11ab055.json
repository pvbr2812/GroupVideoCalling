{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OpenCensusSpanWrapper } from \"./openCensusSpanWrapper\";\n/**\n * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.\n */\n\nvar OpenCensusTracerWrapper =\n/** @class */\nfunction () {\n  /**\n   * Create a new wrapper around a given OpenCensus Tracer.\n   * @param tracer The OpenCensus Tracer to wrap.\n   */\n  function OpenCensusTracerWrapper(tracer) {\n    this._tracer = tracer;\n  }\n  /**\n   * The wrapped OpenCensus Tracer\n   */\n\n\n  OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {\n    return this._tracer;\n  };\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n\n\n  OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {\n    return new OpenCensusSpanWrapper(this, name, options);\n  };\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n\n\n  OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {\n    return undefined;\n  };\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param _fn The function to be executed.\n   */\n\n\n  OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n\n\n  OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {\n    throw new Error(\"Method not implemented.\");\n  };\n\n  return OpenCensusTracerWrapper;\n}();\n\nexport { OpenCensusTracerWrapper };","map":{"version":3,"sources":["../../../../src/tracers/opencensus/openCensusTracerWrapper.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,qBAAT,QAAsC,yBAAtC;AAGA;;AAEG;;AACH,IAAA,uBAAA;AAAA;AAAA,YAAA;AAUE;;;AAGG;AACH,WAAA,uBAAA,CAAmB,MAAnB,EAA2C;AACzC,SAAK,OAAL,GAAe,MAAf;AACD;AAbD;;AAEG;;;AACI,EAAA,uBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFM;AAYP;;;;AAIG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA6C;AAC3C,WAAO,IAAI,qBAAJ,CAA0B,IAA1B,EAAgC,IAAhC,EAAsC,OAAtC,CAAP;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,SAAP;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAoD,KAApD,EAAiE,GAAjE,EAAuE;AACrE,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAQ,OAAR,EAAoB,KAApB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD,GAFD;;AAGF,SAAA,uBAAA;AAAC,CAnDD,EAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Tracer, Span, SpanOptions } from \"@opentelemetry/api\";\nimport { OpenCensusSpanWrapper } from \"./openCensusSpanWrapper\";\nimport { TracerBase as OpenCensusTracer } from \"@opencensus/web-types\";\n\n/**\n * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.\n */\nexport class OpenCensusTracerWrapper implements Tracer {\n  private _tracer: OpenCensusTracer;\n\n  /**\n   * The wrapped OpenCensus Tracer\n   */\n  public getWrappedTracer(): OpenCensusTracer {\n    return this._tracer;\n  }\n\n  /**\n   * Create a new wrapper around a given OpenCensus Tracer.\n   * @param tracer The OpenCensus Tracer to wrap.\n   */\n  public constructor(tracer: OpenCensusTracer) {\n    this._tracer = tracer;\n  }\n\n  /**\n   * Starts a new Span.\n   * @param name The name of the span.\n   * @param options The SpanOptions used during Span creation.\n   */\n  startSpan(name: string, options?: SpanOptions): Span {\n    return new OpenCensusSpanWrapper(this, name, options);\n  }\n\n  /**\n   * Returns the current Span from the current context, if available.\n   */\n  getCurrentSpan(): Span | undefined {\n    return undefined;\n  }\n\n  /**\n   * Executes the given function within the context provided by a Span.\n   * @param _span The span that provides the context.\n   * @param _fn The function to be executed.\n   */\n  withSpan<T extends (...args: unknown[]) => unknown>(_span: Span, _fn: T): ReturnType<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * Bind a Span as the target's scope\n   * @param target An object to bind the scope.\n   * @param _span A specific Span to use. Otherwise, use the current one.\n   */\n  bind<T>(_target: T, _span?: Span): T {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}