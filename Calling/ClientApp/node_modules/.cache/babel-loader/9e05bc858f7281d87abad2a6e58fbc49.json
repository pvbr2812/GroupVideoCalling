{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { checkboxBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStateManager, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { Text } from '../Text/Text';\nexport var checkboxClassName = 'ui-checkbox';\nexport var checkboxSlotClassNames = {\n  label: checkboxClassName + \"__label\",\n  indicator: checkboxClassName + \"__indicator\"\n};\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\n\nexport var Checkbox = /*#__PURE__*/function () {\n  var Checkbox = function Checkbox(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Checkbox.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var checked = props.checked,\n        className = props.className,\n        defaultChecked = props.defaultChecked,\n        design = props.design,\n        disabled = props.disabled,\n        label = props.label,\n        labelPosition = props.labelPosition,\n        indicator = props.indicator,\n        styles = props.styles,\n        toggle = props.toggle,\n        variables = props.variables;\n\n    var _useStateManager = useStateManager(createCheckboxManager, {\n      mapPropsToInitialState: function mapPropsToInitialState() {\n        return {\n          checked: defaultChecked\n        };\n      },\n      mapPropsToState: function mapPropsToState() {\n        return {\n          checked: checked\n        };\n      }\n    }),\n        state = _useStateManager.state,\n        actions = _useStateManager.actions;\n\n    var getA11Props = useAccessibility(props.accessibility, {\n      debugName: Checkbox.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          checked: state.checked,\n          disabled: disabled\n        };\n      },\n      actionHandlers: {\n        performClick: function performClick(e) {\n          e.preventDefault();\n          handleClick(e);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Checkbox.displayName, {\n      className: checkboxClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          checked: state.checked,\n          disabled: disabled,\n          labelPosition: labelPosition,\n          toggle: toggle\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n    var handleChange = function handleChange(e) {\n      if (!disabled) {\n        // Checkbox component doesn't present any `input` component in markup, however all of our\n        // components should handle events transparently.\n        var _checked = !state.checked;\n\n        actions.toggle(_checked);\n\n        _invoke(props, 'onChange', e, Object.assign({}, props, {\n          checked: _checked\n        }));\n      }\n    };\n\n    var handleClick = function handleClick(e) {\n      if (!disabled) {\n        var _checked2 = !state.checked;\n\n        actions.toggle(_checked2);\n\n        _invoke(props, 'onClick', e, Object.assign({}, props, {\n          checked: _checked2\n        }));\n\n        _invoke(props, 'onChange', e, Object.assign({}, props, {\n          checked: _checked2\n        }));\n      }\n    };\n\n    var labelElement = Text.create(label, {\n      defaultProps: function defaultProps() {\n        return getA11Props('label', {\n          styles: resolvedStyles.label,\n          className: checkboxSlotClassNames.label\n        });\n      }\n    });\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11Props('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick,\n      onChange: handleChange\n    }, unhandledProps)), labelPosition === 'start' && labelElement, Box.create(indicator, {\n      defaultProps: function defaultProps() {\n        return getA11Props('indicator', {\n          className: checkboxSlotClassNames.indicator,\n          styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox\n        });\n      }\n    }), labelPosition === 'end' && labelElement);\n    setEnd();\n    return element;\n  };\n\n  Checkbox.displayName = 'Checkbox';\n  Checkbox.defaultProps = {\n    accessibility: checkboxBehavior,\n    indicator: {},\n    labelPosition: 'end'\n  };\n  Checkbox.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    checked: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    label: customPropTypes.itemShorthand,\n    labelPosition: PropTypes.oneOf(['start', 'end']),\n    onChange: PropTypes.func,\n    onClick: PropTypes.func,\n    toggle: PropTypes.bool\n  });\n  Checkbox.handledProps = Object.keys(Checkbox.propTypes);\n  Checkbox.create = createShorthandFactory({\n    Component: Checkbox,\n    mappedProp: 'label'\n  });\n  return Checkbox;\n}();","map":{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxClassName","checkboxSlotClassNames","label","indicator","Checkbox","context","useFluentContext","setStart","setEnd","useTelemetry","checked","className","defaultChecked","design","disabled","labelPosition","styles","toggle","variables","props","state","actions","useStateManager","mapPropsToInitialState","mapPropsToState","getA11Props","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","handleChange","labelElement","defaultProps","element","onClick","onChange","checkbox","accessibility","content","PropTypes","customPropTypes","bool","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Text, TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'];\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<CheckboxProps>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CheckboxProps>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\nexport const checkboxClassName = 'ui-checkbox';\nexport const checkboxSlotClassNames: CheckboxSlotClassNames = {\n  label: `${checkboxClassName}__label`,\n  indicator: `${checkboxClassName}__indicator`,\n};\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport const Checkbox: ComponentWithAs<'div', CheckboxProps> & FluentComponentStaticProps<CheckboxProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked }),\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: checkboxClassName,\n    mapPropsToStyles: () => ({\n      checked: state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: checkboxSlotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: checkboxSlotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n"]},"metadata":{},"sourceType":"module"}