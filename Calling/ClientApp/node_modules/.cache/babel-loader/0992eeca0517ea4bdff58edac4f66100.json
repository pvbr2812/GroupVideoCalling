{"ast":null,"code":"import _get from \"lodash/get\";\nimport _invoke from \"lodash/invoke\";\nimport { inputBehavior } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { partitionHTMLProps, commonPropTypes, createShorthandFactory, createShorthand, getOrGenerateIdFromShorthand } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { useAutoControlled, getElementType, useUnhandledProps, useTelemetry, useFluentContext, useStyles, useAccessibility, compose } from '@fluentui/react-bindings';\nimport { ExclamationCircleIcon, PresenceAvailableIcon } from '@fluentui/react-icons-northstar';\nimport { InputLabel } from './InputLabel';\nimport { FormFieldBaseContext } from '../Form/utils/formFieldBaseContext';\nexport var inputClassName = 'ui-input';\nexport var inputSlotClassNames = {\n  input: inputClassName + \"__input\",\n  icon: inputClassName + \"__icon\"\n};\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\n\nexport var Input = /*#__PURE__*/function () {\n  var Input = compose(function (props, ref, composeOptions) {\n    var _ref;\n\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var className = props.className,\n        input = props.input,\n        type = props.type,\n        wrapper = props.wrapper,\n        disabled = props.disabled,\n        fluid = props.fluid,\n        inverted = props.inverted,\n        inline = props.inline,\n        clearable = props.clearable,\n        icon = props.icon,\n        iconPosition = props.iconPosition,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        required = props.required,\n        successIndicator = props.successIndicator,\n        error = props.error,\n        errorIndicator = props.errorIndicator,\n        showSuccessIndicator = props.showSuccessIndicator,\n        label = props.label,\n        labelPosition = props.labelPosition;\n    var inputRef = React.useRef();\n\n    var _React$useContext = React.useContext(FormFieldBaseContext),\n        labelId = _React$useContext.labelId;\n\n    var inputId = React.useRef();\n    inputId.current = props.id || getOrGenerateIdFromShorthand('ui-input-', '', inputId.current);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    var _partitionHTMLProps = partitionHTMLProps(unhandledProps),\n        htmlInputProps = _partitionHTMLProps[0],\n        restProps = _partitionHTMLProps[1];\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultValue,\n      value: props.value,\n      initialValue: ''\n    }),\n        value = _useAutoControlled[0],\n        setValue = _useAutoControlled[1];\n\n    var hasValue = !!value && ((_ref = value) == null ? void 0 : _ref.length) !== 0;\n    var isShowSuccessIndicatorUndefined = typeof showSuccessIndicator === 'undefined';\n    var requiredAndSuccessful = isShowSuccessIndicatorUndefined ? (required && hasValue || showSuccessIndicator) && !error : showSuccessIndicator;\n    var hasIcon = !!icon || showSuccessIndicator || required && isShowSuccessIndicatorUndefined || !!error;\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: inputClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          fluid: fluid,\n          inverted: inverted,\n          inline: inline,\n          disabled: disabled,\n          clearable: clearable,\n          hasIcon: hasIcon,\n          requiredAndSuccessful: requiredAndSuccessful,\n          iconPosition: iconPosition,\n          hasValue: hasValue,\n          labelPosition: labelPosition,\n          error: error\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl,\n      composeOptions: composeOptions,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        clear: function clear(e) {\n          if (clearable && value !== '') {\n            e.stopPropagation();\n            e.nativeEvent && e.nativeEvent.stopPropagation();\n            handleOnClear(e);\n          }\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          disabled: disabled,\n          required: required,\n          error: error\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var handleIconOverrides = function handleIconOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e) {\n          if (!disabled) {\n            handleOnClear(e);\n            inputRef.current.focus();\n          }\n\n          _invoke(predefinedProps, 'onClick', e, props);\n        }\n      };\n    };\n\n    var handleChange = function handleChange(e) {\n      if (disabled) {\n        return;\n      }\n\n      var newValue = _get(e, 'target.value');\n\n      _invoke(props, 'onChange', e, Object.assign({}, props, {\n        value: newValue\n      }));\n\n      setValue(newValue);\n    };\n\n    var handleOnClear = function handleOnClear(e) {\n      if (clearable) {\n        _invoke(props, 'onChange', e, Object.assign({}, props, {\n          value: ''\n        }));\n\n        setValue('');\n      }\n    };\n\n    var computeIcon = function computeIcon() {\n      var _ref2;\n\n      if (clearable && ((_ref2 = value) == null ? void 0 : _ref2.length) !== 0) {\n        return {};\n      }\n\n      if (requiredAndSuccessful) {\n        return successIndicator;\n      }\n\n      if (error) {\n        return errorIndicator;\n      }\n\n      return icon || null;\n    };\n\n    var labelElement = createShorthand(composeOptions.slots.label, label, {\n      defaultProps: function defaultProps() {\n        return {\n          labelPosition: labelPosition,\n          label: label,\n          required: required,\n          htmlFor: inputId.current,\n          hasValue: hasValue,\n          id: labelId\n        };\n      }\n    });\n    var inputElement = Box.create({}, {\n      defaultProps: function defaultProps() {\n        return {\n          children: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Ref, {\n            innerRef: function innerRef(inputElement) {\n              handleRef(inputRef, inputElement);\n              handleRef(props.inputRef, inputElement);\n              handleRef(ref, inputElement);\n            }\n          }, createShorthand(composeOptions.slots.control, input || type, {\n            defaultProps: function defaultProps() {\n              return getA11yProps('input', Object.assign({}, htmlInputProps, {\n                as: 'input',\n                disabled: disabled,\n                type: type,\n                required: required,\n                value: value || '',\n                id: inputId.current,\n                className: inputSlotClassNames.input,\n                styles: resolvedStyles.input,\n                onChange: handleChange\n              }));\n            }\n          })), createShorthand(composeOptions.slots.icon, computeIcon(), {\n            defaultProps: function defaultProps() {\n              return getA11yProps('icon', {\n                className: inputSlotClassNames.icon,\n                styles: resolvedStyles.icon\n              });\n            },\n            overrideProps: handleIconOverrides\n          })),\n          styles: resolvedStyles.inputContainer\n        };\n      }\n    });\n    var element = Box.create(wrapper, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('root', Object.assign({\n          className: classes.root,\n          children: /*#__PURE__*/React.createElement(React.Fragment, null, labelElement, inputElement),\n          styles: resolvedStyles.root\n        }, restProps));\n      },\n      overrideProps: {\n        as: wrapper && wrapper.as || ElementType\n      }\n    });\n    setEnd();\n    return element;\n  }, {\n    className: inputClassName,\n    displayName: 'Input',\n    slots: {\n      control: Box,\n      icon: Box,\n      label: InputLabel\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'design', 'styles', 'variables', 'clearable', 'defaultValue', 'disabled', 'fluid', 'icon', 'iconPosition', 'input', 'inputRef', 'inline', 'inverted', 'onChange', 'type', 'value', 'wrapper', 'required', 'successIndicator', 'error', 'errorIndicator', 'showSuccessIndicator', 'label', 'labelPosition']\n  });\n  Input.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    clearable: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    disabled: PropTypes.bool,\n    fluid: PropTypes.bool,\n    label: customPropTypes.itemShorthand,\n    labelPosition: PropTypes.oneOf(['inside', 'inline']),\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconPosition: PropTypes.oneOf(['start', 'end']),\n    input: customPropTypes.itemShorthand,\n    inputRef: customPropTypes.ref,\n    inline: PropTypes.bool,\n    inverted: PropTypes.bool,\n    onChange: PropTypes.func,\n    type: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    wrapper: customPropTypes.wrapperShorthand,\n    required: PropTypes.bool,\n    successIndicator: customPropTypes.shorthandAllowingChildren,\n    error: PropTypes.bool,\n    errorIndicator: customPropTypes.shorthandAllowingChildren,\n    showSuccessIndicator: PropTypes.bool\n  });\n  Input.defaultProps = {\n    accessibility: inputBehavior,\n    type: 'text',\n    wrapper: {},\n    iconPosition: 'end',\n    errorIndicator: /*#__PURE__*/React.createElement(ExclamationCircleIcon, null),\n    successIndicator: /*#__PURE__*/React.createElement(PresenceAvailableIcon, null)\n  };\n  Input.Label = InputLabel;\n  Input.create = createShorthandFactory({\n    Component: Input\n  });\n  return Input;\n}();","map":{"version":3,"sources":["components/Input/Input.tsx"],"names":["inputClassName","inputSlotClassNames","input","icon","Input","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","className","type","wrapper","disabled","fluid","inverted","inline","clearable","iconPosition","design","styles","variables","required","successIndicator","error","errorIndicator","showSuccessIndicator","label","labelPosition","props","inputRef","React","labelId","inputId","getOrGenerateIdFromShorthand","ElementType","getElementType","unhandledProps","useUnhandledProps","htmlInputProps","restProps","partitionHTMLProps","value","setValue","useAutoControlled","defaultValue","initialValue","hasValue","isShowSuccessIndicatorUndefined","requiredAndSuccessful","hasIcon","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","unstable_props","getA11yProps","useAccessibility","debugName","actionHandlers","clear","e","handleOnClear","mapPropsToBehavior","handleIconOverrides","onClick","handleChange","newValue","computeIcon","labelElement","createShorthand","defaultProps","htmlFor","id","inputElement","children","handleRef","as","onChange","overrideProps","inputContainer","element","root","displayName","slots","control","InputLabel","handledProps","content","PropTypes","customPropTypes","bool","accessibility","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, inputBehavior, InputBehaviorProps } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  partitionHTMLProps,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  ShorthandFactory,\n  createShorthand,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { ShorthandValue, ComponentEventHandler } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  useAutoControlled,\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { ExclamationCircleIcon, PresenceAvailableIcon } from '@fluentui/react-icons-northstar';\nimport { InputLabel, InputLabelProps, LabelPosition } from './InputLabel';\nimport { FormFieldBaseContext } from '../Form/utils/formFieldBaseContext';\n\nexport interface InputProps extends UIComponentProps, ChildrenComponentProps, SupportedIntrinsicInputProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<InputBehaviorProps>;\n\n  /** A property that will change the icon on the input and clear the input on click on Cancel. */\n  clearable?: boolean;\n\n  /** The default value of the input. */\n  defaultValue?: string | string[];\n\n  /** An Input can be disabled. */\n  disabled?: boolean;\n\n  /** An input can take the width of its container. */\n  fluid?: boolean;\n\n  /** Optional Icon to display inside the Input. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An Input with icon can format the icon to appear at the start or at the end of the input field. */\n  iconPosition?: 'start' | 'end';\n\n  /** An input can be used inline with text. */\n  inline?: boolean;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onChange?: ComponentEventHandler<InputProps & { value: string }>;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** (DEPRECATED) Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The value of the input. */\n  value?: string | number;\n\n  /** A label for the input. */\n  label?: ShorthandValue<InputLabelProps>;\n\n  /** Poisition for the label */\n  labelPosition?: LabelPosition;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n\n  /** Input can be required to be valid. */\n  required?: boolean;\n\n  /** Input can have error state */\n  error?: boolean;\n\n  /** Input can have error indicator when error is true */\n  errorIndicator?: ShorthandValue<BoxProps>;\n\n  /** Optional Icon to display inside the Input if required and fulfilled. */\n  successIndicator?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the successIndicator should be visible. */\n  showSuccessIndicator?: boolean;\n}\n\nexport interface InputSlotClassNames {\n  input: string;\n  icon: string;\n}\n\nexport const inputClassName = 'ui-input';\n\nexport type InputStylesProps = Required<\n  Pick<\n    InputProps,\n    'fluid' | 'inverted' | 'inline' | 'disabled' | 'clearable' | 'iconPosition' | 'error' | 'labelPosition'\n  > & {\n    hasIcon: boolean;\n    hasValue: boolean;\n    requiredAndSuccessful: boolean;\n  }\n>;\n\nexport const inputSlotClassNames: InputSlotClassNames = {\n  input: `${inputClassName}__input`,\n  icon: `${inputClassName}__icon`,\n};\n\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\nexport const Input = compose<'input', InputProps, InputStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n    const {\n      className,\n      input,\n      type,\n      wrapper,\n      disabled,\n      fluid,\n      inverted,\n      inline,\n      clearable,\n      icon,\n      iconPosition,\n      design,\n      styles,\n      variables,\n      required,\n      successIndicator,\n      error,\n      errorIndicator,\n      showSuccessIndicator,\n      label,\n      labelPosition,\n    } = props;\n\n    const inputRef = React.useRef<HTMLInputElement>();\n\n    const { labelId } = React.useContext(FormFieldBaseContext);\n    const inputId = React.useRef<string>();\n    inputId.current = props.id || getOrGenerateIdFromShorthand('ui-input-', '', inputId.current);\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n    const [value, setValue] = useAutoControlled({\n      defaultValue: props.defaultValue,\n      value: props.value as string,\n      initialValue: '',\n    });\n    const hasValue: boolean = !!value && (value as string)?.length !== 0;\n\n    const isShowSuccessIndicatorUndefined = typeof showSuccessIndicator === 'undefined';\n\n    const requiredAndSuccessful = isShowSuccessIndicatorUndefined\n      ? ((required && hasValue) || showSuccessIndicator) && !error\n      : showSuccessIndicator;\n\n    const hasIcon = !!icon || showSuccessIndicator || (required && isShowSuccessIndicatorUndefined) || !!error;\n\n    const { classes, styles: resolvedStyles } = useStyles<InputStylesProps>(composeOptions.displayName, {\n      className: inputClassName,\n      mapPropsToStyles: () => ({\n        fluid,\n        inverted,\n        inline,\n        disabled,\n        clearable,\n        hasIcon,\n        requiredAndSuccessful,\n        iconPosition,\n        hasValue,\n        labelPosition,\n        error,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<InputBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        clear: e => {\n          if (clearable && value !== '') {\n            e.stopPropagation();\n            e.nativeEvent && e.nativeEvent.stopPropagation();\n            handleOnClear(e);\n          }\n        },\n      },\n      mapPropsToBehavior: () => ({\n        disabled,\n        required,\n        error,\n      }),\n      rtl: context.rtl,\n    });\n\n    const handleIconOverrides = predefinedProps => ({\n      onClick: (e: React.MouseEvent) => {\n        if (!disabled) {\n          handleOnClear(e);\n          inputRef.current.focus();\n        }\n\n        _.invoke(predefinedProps, 'onClick', e, props);\n      },\n    });\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      const newValue = _.get(e, 'target.value');\n\n      _.invoke(props, 'onChange', e, { ...props, value: newValue });\n\n      setValue(newValue);\n    };\n\n    const handleOnClear = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (clearable) {\n        _.invoke(props, 'onChange', e, { ...props, value: '' });\n        setValue('');\n      }\n    };\n\n    const computeIcon = (): ShorthandValue<BoxProps> => {\n      if (clearable && (value as string)?.length !== 0) {\n        return {};\n      }\n      if (requiredAndSuccessful) {\n        return successIndicator;\n      }\n      if (error) {\n        return errorIndicator;\n      }\n      return icon || null;\n    };\n\n    const labelElement = createShorthand(composeOptions.slots.label, label, {\n      defaultProps: () => ({\n        labelPosition,\n        label,\n        required,\n        htmlFor: inputId.current,\n        hasValue,\n        id: labelId,\n      }),\n    });\n\n    const inputElement = Box.create(\n      {},\n      {\n        defaultProps: () => ({\n          children: (\n            <>\n              <Ref\n                innerRef={(inputElement: HTMLElement) => {\n                  handleRef(inputRef, inputElement);\n                  handleRef(props.inputRef, inputElement);\n                  handleRef(ref, inputElement);\n                }}\n              >\n                {createShorthand(composeOptions.slots.control, input || type, {\n                  defaultProps: () =>\n                    getA11yProps('input', {\n                      ...htmlInputProps,\n                      as: 'input',\n                      disabled,\n                      type,\n                      required,\n                      value: value || '',\n                      id: inputId.current,\n                      className: inputSlotClassNames.input,\n                      styles: resolvedStyles.input,\n                      onChange: handleChange,\n                    }),\n                })}\n              </Ref>\n              {createShorthand(composeOptions.slots.icon, computeIcon(), {\n                defaultProps: () =>\n                  getA11yProps('icon', {\n                    className: inputSlotClassNames.icon,\n                    styles: resolvedStyles.icon,\n                  }),\n                overrideProps: handleIconOverrides,\n              })}\n            </>\n          ),\n          styles: resolvedStyles.inputContainer,\n        }),\n      },\n    );\n\n    const element = Box.create(wrapper, {\n      defaultProps: () =>\n        getA11yProps('root', {\n          className: classes.root,\n          children: (\n            <>\n              {labelElement}\n              {inputElement}\n            </>\n          ),\n          styles: resolvedStyles.root,\n          ...restProps,\n        }),\n      overrideProps: {\n        as: (wrapper && (wrapper as any).as) || ElementType,\n      },\n    });\n    setEnd();\n    return element;\n  },\n  {\n    className: inputClassName,\n    displayName: 'Input',\n    slots: {\n      control: Box,\n      icon: Box,\n      label: InputLabel,\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'design',\n      'styles',\n      'variables',\n      'clearable',\n      'defaultValue',\n      'disabled',\n      'fluid',\n      'icon',\n      'iconPosition',\n      'input',\n      'inputRef',\n      'inline',\n      'inverted',\n      'onChange',\n      'type',\n      'value',\n      'wrapper',\n      'required',\n      'successIndicator',\n      'error',\n      'errorIndicator',\n      'showSuccessIndicator',\n      'label',\n      'labelPosition',\n    ],\n  },\n) as ComponentWithAs<'input', InputProps> & {\n  create: ShorthandFactory<InputProps>;\n  Label: typeof InputLabel;\n};\n\nInput.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  clearable: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf<LabelPosition>(['inside', 'inline']),\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  wrapper: customPropTypes.wrapperShorthand,\n  required: PropTypes.bool,\n  successIndicator: customPropTypes.shorthandAllowingChildren,\n  error: PropTypes.bool,\n  errorIndicator: customPropTypes.shorthandAllowingChildren,\n  showSuccessIndicator: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  accessibility: inputBehavior,\n  type: 'text',\n  wrapper: {},\n  iconPosition: 'end',\n  errorIndicator: <ExclamationCircleIcon />,\n  successIndicator: <PresenceAvailableIcon />,\n};\n\nInput.Label = InputLabel;\n\nInput.create = createShorthandFactory({ Component: Input });\n"]},"metadata":{},"sourceType":"module"}