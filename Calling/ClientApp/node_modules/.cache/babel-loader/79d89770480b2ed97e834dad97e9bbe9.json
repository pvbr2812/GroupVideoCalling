{"ast":null,"code":"import _uniq from \"lodash/uniq\";\nimport _isArray from \"lodash/isArray\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport _isNil from \"lodash/isNil\";\nimport { mergeStyles } from '@fluentui/styles';\nimport cx from 'classnames';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is'; // It's only necessary to map props that don't use 'children' as value ('children' is the default)\n\nvar mappedProps = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type'\n};\nexport function createShorthandFactory(_ref) {\n  var Component = _ref.Component,\n      mappedProp = _ref.mappedProp,\n      mappedArrayProp = _ref.mappedArrayProp,\n      allowsJSX = _ref.allowsJSX;\n\n  if (!ReactIs.isValidElementType(Component)) {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return function (value, options) {\n    return createShorthandInternal({\n      allowsJSX: allowsJSX,\n      Component: Component,\n      mappedProp: mappedProp,\n      mappedArrayProp: mappedArrayProp,\n      value: value,\n      options: options\n    });\n  };\n} // ============================================================\n// Factories\n// ============================================================\n\nexport function createShorthandInternal(_ref2) {\n  var Component = _ref2.Component,\n      mappedProp = _ref2.mappedProp,\n      mappedArrayProp = _ref2.mappedArrayProp,\n      value = _ref2.value,\n      _ref2$options = _ref2.options,\n      options = _ref2$options === void 0 ? {} : _ref2$options,\n      _ref2$allowsJSX = _ref2.allowsJSX,\n      allowsJSX = _ref2$allowsJSX === void 0 ? true : _ref2$allowsJSX;\n\n  if (!ReactIs.isValidElementType(Component)) {\n    throw new Error('createShorthand() Component must be a string or function.');\n  } // short circuit noop values\n\n\n  var valIsNoop = _isNil(value) || typeof value === 'boolean';\n  if (valIsNoop && !options.render) return null;\n  var valIsPrimitive = typeof value === 'string' || typeof value === 'number';\n\n  var valIsPropsObject = _isPlainObject(value);\n\n  var valIsArray = _isArray(value);\n\n  var valIsReactElement = /*#__PURE__*/React.isValidElement(value); // unhandled type warning\n\n  if (process.env.NODE_ENV !== 'production') {\n    var displayName = typeof Component === 'string' ? Component : Component.displayName;\n\n    if (!valIsPrimitive && !valIsPropsObject && !valIsArray && !valIsReactElement && !valIsNoop) {\n      /* eslint-disable-next-line no-console */\n      console.error([\"The shorthand prop for \\\"\" + displayName + \"\\\" component was passed a JSX element but this slot only supports string|number|object|array|ReactElements.\", ' Use null|undefined|boolean for none.', \" Received: \" + value].join(''));\n    }\n\n    if (!allowsJSX && valIsReactElement) {\n      /* eslint-disable-next-line no-console */\n      console.error([\"The shorthand prop for \\\"\" + displayName + \"\\\" component was passed a JSX element but this slot only supports string|number|object|array.\", ' Use null|undefined|boolean for none.', \" Received: \" + value].join(''));\n    }\n  } // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n\n\n  var defaultProps = options.defaultProps ? options.defaultProps() || {} : {}; // User's props\n\n  var usersProps = valIsReactElement && {} || valIsPropsObject && value || {}; // Override props\n\n  var overrideProps = typeof options.overrideProps === 'function' ? options.overrideProps(Object.assign({}, defaultProps, usersProps)) : options.overrideProps || {}; // Merge props\n\n  var props = Object.assign({}, defaultProps, usersProps, overrideProps);\n  var mappedHTMLProps = mappedProps[overrideProps.as || defaultProps.as]; // Map prop for primitive value\n\n  if (valIsPrimitive || valIsReactElement) {\n    props[mappedHTMLProps || mappedProp || 'children'] = value;\n  } // Map prop for array value\n\n\n  if (valIsArray) {\n    props[mappedHTMLProps || mappedArrayProp || 'children'] = value;\n  } // Merge className\n\n\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    var mergedClassesNames = cx(defaultProps.className, overrideProps.className, usersProps.className);\n    props.className = _uniq(mergedClassesNames.split(' ')).join(' ');\n  } // Merge style\n\n\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    props.style = Object.assign({}, defaultProps.style, usersProps.style, overrideProps.style);\n  } // Merge styles\n\n\n  if (defaultProps.styles || overrideProps.styles || usersProps.styles) {\n    props.styles = mergeStyles(defaultProps.styles, usersProps.styles, overrideProps.styles);\n  } // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n\n\n  var _options$generateKey = options.generateKey,\n      generateKey = _options$generateKey === void 0 ? true : _options$generateKey; // Use key or generate key\n\n  if (generateKey && _isNil(props.key)) {\n    if (valIsPrimitive) {\n      // use string/number shorthand values as the key\n      props.key = value;\n    }\n\n    if (valIsReactElement) {\n      // use the key from React Element\n      var elementKey = value.key; // <div /> - key is not passed as will be `null`\n      // <div key={null} /> - key is passed as `null` and will be stringified\n\n      var isNullKey = elementKey === null;\n\n      if (!isNullKey) {\n        props.key = elementKey;\n      }\n    }\n  } // Remove the kind prop from the props object\n\n\n  delete props.kind; // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n\n  var render = options.render;\n\n  if (render) {\n    return render(Component, props);\n  }\n\n  if (typeof props.children === 'function') {\n    return props.children(Component, Object.assign({}, props, {\n      children: undefined\n    }));\n  }\n\n  if (!allowsJSX && valIsReactElement) {\n    return null;\n  } // Create ReactElements from built up props\n\n\n  if (valIsPrimitive || valIsPropsObject || valIsArray || valIsReactElement) {\n    return /*#__PURE__*/React.createElement(Component, props);\n  }\n\n  return null;\n}\nexport function createShorthand(Component, value, options) {\n  var _Component$fluentComp;\n\n  var _ref3 = Component.shorthandConfig || ((_Component$fluentComp = Component.fluentComposeConfig) == null ? void 0 : _Component$fluentComp.shorthandConfig) || {},\n      _ref3$mappedProp = _ref3.mappedProp,\n      mappedProp = _ref3$mappedProp === void 0 ? 'children' : _ref3$mappedProp,\n      _ref3$allowsJSX = _ref3.allowsJSX,\n      allowsJSX = _ref3$allowsJSX === void 0 ? true : _ref3$allowsJSX,\n      mappedArrayProp = _ref3.mappedArrayProp;\n\n  return createShorthandInternal({\n    Component: Component,\n    mappedProp: mappedProp,\n    allowsJSX: allowsJSX,\n    mappedArrayProp: mappedArrayProp,\n    value: value,\n    options: options || {}\n  });\n}","map":{"version":3,"sources":["utils/factories.ts"],"names":["mappedProps","iframe","img","input","Component","mappedProp","mappedArrayProp","allowsJSX","ReactIs","createShorthandInternal","value","options","valIsNoop","valIsPrimitive","valIsPropsObject","valIsArray","valIsReactElement","React","process","displayName","console","defaultProps","usersProps","overrideProps","props","mappedHTMLProps","mergedClassesNames","cx","mergeStyles","generateKey","elementKey","isNullKey","render","children","undefined"],"mappings":"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","sourcesContent":["import { mergeStyles } from '@fluentui/styles';\nimport { ComponentWithAs, ComposePreparedOptions, ShorthandConfig } from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport { ShorthandValue, Props, PropsOf, ShorthandRenderFunction } from '../types';\n\ntype HTMLTag = 'iframe' | 'img' | 'input';\ntype ShorthandProp = 'children' | 'src' | 'type';\n\ninterface CreateShorthandOptions<P> {\n  /** Default props object */\n  defaultProps?: () => Partial<Props<P>>;\n\n  /** Override props object or function (called with regular props) */\n  overrideProps?: Partial<Props<P>> | ((props: P) => Partial<Props<P>>);\n\n  /** Whether or not automatic key generation is allowed */\n  generateKey?: boolean;\n\n  /** Override the default render implementation. */\n  render?: ShorthandRenderFunction<P>;\n}\n\n// It's only necessary to map props that don't use 'children' as value ('children' is the default)\nconst mappedProps: { [key in HTMLTag]: ShorthandProp } = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type',\n};\n\nexport type ShorthandFactory<P> = (\n  value: ShorthandValue<P>,\n  options?: CreateShorthandOptions<P>,\n) => React.ReactElement | null | undefined;\n\n// ============================================================\n// Factory Creators\n// ============================================================\n\n/**\n * @param config - Options passed to factory\n * @returns A shorthand factory function waiting for `val` and `defaultProps`.\n */\nexport function createShorthandFactory<TStringElement extends keyof JSX.IntrinsicElements, P>(config: {\n  /** A ReactClass or string */\n  Component: TStringElement;\n  /** A function that maps a primitive value to the Component props */\n  mappedProp?: keyof PropsOf<TStringElement>;\n  /** A function that maps an array value to the Component props */\n  mappedArrayProp?: keyof PropsOf<TStringElement>;\n  /** Indicates if factory supports React Elements */\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<TFunctionComponent extends React.FunctionComponent, P>(config: {\n  Component: TFunctionComponent;\n  mappedProp?: keyof PropsOf<TFunctionComponent>;\n  mappedArrayProp?: keyof PropsOf<TFunctionComponent>;\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<TInstance extends React.Component, P>(config: {\n  Component: { new (...args: any[]): TInstance };\n  mappedProp?: keyof PropsOf<TInstance>;\n  mappedArrayProp?: keyof PropsOf<TInstance>;\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<P>({ Component, mappedProp, mappedArrayProp, allowsJSX }) {\n  if (!ReactIs.isValidElementType(Component)) {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return (value, options: CreateShorthandOptions<P>) =>\n    createShorthandInternal({\n      allowsJSX,\n      Component,\n      mappedProp,\n      mappedArrayProp,\n      value,\n      options,\n    });\n}\n\n// ============================================================\n// Factories\n// ============================================================\n\nexport function createShorthandInternal<P>({\n  Component,\n  mappedProp,\n  mappedArrayProp,\n  value,\n  options = {},\n  allowsJSX = true,\n}: {\n  Component: React.ElementType<P>;\n  mappedProp?: string;\n  mappedArrayProp?: string;\n  allowsJSX?: boolean;\n  value?: ShorthandValue<P>;\n  options?: CreateShorthandOptions<P>;\n}) {\n  if (!ReactIs.isValidElementType(Component)) {\n    throw new Error('createShorthand() Component must be a string or function.');\n  }\n\n  // short circuit noop values\n  const valIsNoop = _.isNil(value) || typeof value === 'boolean';\n  if (valIsNoop && !options.render) return null;\n\n  const valIsPrimitive = typeof value === 'string' || typeof value === 'number';\n  const valIsPropsObject = _.isPlainObject(value);\n  const valIsArray = _.isArray(value);\n  const valIsReactElement = React.isValidElement(value);\n\n  // unhandled type warning\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = typeof Component === 'string' ? Component : Component.displayName;\n\n    if (!valIsPrimitive && !valIsPropsObject && !valIsArray && !valIsReactElement && !valIsNoop) {\n      /* eslint-disable-next-line no-console */\n      console.error(\n        [\n          `The shorthand prop for \"${displayName}\" component was passed a JSX element but this slot only supports string|number|object|array|ReactElements.`,\n          ' Use null|undefined|boolean for none.',\n          ` Received: ${value}`,\n        ].join(''),\n      );\n    }\n\n    if (!allowsJSX && valIsReactElement) {\n      /* eslint-disable-next-line no-console */\n      console.error(\n        [\n          `The shorthand prop for \"${displayName}\" component was passed a JSX element but this slot only supports string|number|object|array.`,\n          ' Use null|undefined|boolean for none.',\n          ` Received: ${value}`,\n        ].join(''),\n      );\n    }\n  }\n\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n  const defaultProps = options.defaultProps ? options.defaultProps() || ({} as Props<P>) : ({} as Props<P>);\n\n  // User's props\n  const usersProps =\n    (valIsReactElement && ({} as Props<P>)) || (valIsPropsObject && (value as Props<P>)) || ({} as Props<P>);\n\n  // Override props\n  const overrideProps: Props<P> =\n    typeof options.overrideProps === 'function'\n      ? (options.overrideProps({ ...defaultProps, ...usersProps }) as Props<P>)\n      : (options.overrideProps as Props<P>) || ({} as Props<P>);\n\n  // Merge props\n  const props: Props<P> = { ...defaultProps, ...usersProps, ...overrideProps };\n\n  const mappedHTMLProps = mappedProps[overrideProps.as || defaultProps.as];\n\n  // Map prop for primitive value\n  if (valIsPrimitive || valIsReactElement) {\n    (props as any)[mappedHTMLProps || mappedProp || 'children'] = value;\n  }\n\n  // Map prop for array value\n  if (valIsArray) {\n    (props as any)[mappedHTMLProps || mappedArrayProp || 'children'] = value;\n  }\n\n  // Merge className\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    const mergedClassesNames = cx(defaultProps.className, overrideProps.className, usersProps.className);\n    (props as any).className = _.uniq(mergedClassesNames.split(' ')).join(' ');\n  }\n\n  // Merge style\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    (props as any).style = { ...defaultProps.style, ...usersProps.style, ...overrideProps.style };\n  }\n\n  // Merge styles\n  if (defaultProps.styles || overrideProps.styles || usersProps.styles) {\n    (props as any).styles = mergeStyles(defaultProps.styles, usersProps.styles, overrideProps.styles);\n  }\n\n  // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n  const { generateKey = true } = options;\n\n  // Use key or generate key\n  if (generateKey && _.isNil(props.key)) {\n    if (valIsPrimitive) {\n      // use string/number shorthand values as the key\n      (props as any).key = value;\n    }\n\n    if (valIsReactElement) {\n      // use the key from React Element\n      const elementKey = (value as React.ReactElement).key;\n      // <div /> - key is not passed as will be `null`\n      // <div key={null} /> - key is passed as `null` and will be stringified\n      const isNullKey = elementKey === null;\n\n      if (!isNullKey) {\n        (props as any).key = elementKey;\n      }\n    }\n  }\n\n  // Remove the kind prop from the props object\n  delete props.kind;\n\n  // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n  const { render } = options;\n  if (render) {\n    return render(Component, props);\n  }\n\n  if (typeof props.children === 'function') {\n    return props.children(Component, { ...props, children: undefined });\n  }\n\n  if (!allowsJSX && valIsReactElement) {\n    return null;\n  }\n\n  // Create ReactElements from built up props\n  if (valIsPrimitive || valIsPropsObject || valIsArray || valIsReactElement) {\n    return React.createElement(Component, props);\n  }\n\n  return null;\n}\n\nexport function createShorthand<TFunctionComponent extends React.FunctionComponent>(\n  Component: TFunctionComponent & {\n    shorthandConfig?: ShorthandConfig<PropsOf<TFunctionComponent>>;\n    fluentComposeConfig?: ComposePreparedOptions<PropsOf<TFunctionComponent>>;\n  },\n  value?: ShorthandValue<PropsOf<TFunctionComponent>>,\n  options?: CreateShorthandOptions<PropsOf<TFunctionComponent>>,\n): React.ReactElement;\nexport function createShorthand<TInstance extends React.Component>(\n  Component: { new (...args: any[]): TInstance } & {\n    shorthandConfig?: ShorthandConfig<PropsOf<TInstance>>;\n    fluentComposeConfig?: ComposePreparedOptions<PropsOf<TInstance>>;\n  },\n  value?: ShorthandValue<PropsOf<TInstance>>,\n  options?: CreateShorthandOptions<PropsOf<TInstance>>,\n): React.ReactElement;\nexport function createShorthand<E extends keyof JSX.IntrinsicElements, P>(\n  Component: ComponentWithAs<E, P> & {\n    shorthandConfig?: ShorthandConfig<P>;\n    fluentComposeConfig?: ComposePreparedOptions<P>;\n  },\n  value?: ShorthandValue<P>,\n  options?: CreateShorthandOptions<P>,\n): React.ReactElement;\nexport function createShorthand<TElementType extends React.ElementType>(\n  Component: TElementType & {\n    shorthandConfig?: ShorthandConfig<PropsOf<TElementType>>;\n    fluentComposeConfig?: ComposePreparedOptions<PropsOf<TElementType>>;\n  },\n  value?: ShorthandValue<PropsOf<TElementType>>,\n  options?: CreateShorthandOptions<PropsOf<TElementType>>,\n): React.ReactElement;\nexport function createShorthand<P>(Component, value?, options?) {\n  const { mappedProp = 'children', allowsJSX = true, mappedArrayProp } =\n    Component.shorthandConfig || Component.fluentComposeConfig?.shorthandConfig || {};\n\n  return createShorthandInternal<P>({\n    Component,\n    mappedProp,\n    allowsJSX,\n    mappedArrayProp,\n    value,\n    options: options || {},\n  });\n}\n"]},"metadata":{},"sourceType":"module"}