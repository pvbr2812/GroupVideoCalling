{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Git Uploads\\\\GroupVideoCalling\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\LocalPreview.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useEffect } from 'react';\nimport { Stack, Toggle, Image, ImageFit } from '@fluentui/react';\nimport { MicIcon, CallVideoIcon } from '@fluentui/react-icons-northstar';\nimport { Constants } from '../core/constants';\nimport { LocalVideoStream, VideoStreamRenderer } from '@azure/communication-calling';\nimport staticMediaSVG from \"../assets/staticmedia.svg\";\nimport { toggleStyle, imgStyles, toggleButtonsBarToken, localPreviewContainerStyle, toggleButtonsBarStyle, localPreviewStyle } from './styles/LocalPreview.styles';\nlet rendererView;\nexport default (props => {\n  const imageProps = {\n    src: staticMediaSVG.toString(),\n    imageFit: ImageFit.cover,\n    maximizeFrame: true\n  };\n\n  const handleLocalVideoOnOff = (_ev, checked = false) => {\n    const stream = new LocalVideoStream(props.videoDeviceInfo);\n    props.setLocalVideoStream(checked ? stream : undefined);\n  };\n\n  const handleLocalMicOnOff = (_ev, checked = false) => {\n    props.setMic(checked);\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (props.localVideoStream) {\n        const renderer = new VideoStreamRenderer(props.localVideoStream);\n        rendererView = await renderer.createView({\n          scalingMode: 'Crop',\n          isMirrored: true\n        });\n        const container = document.getElementById(Constants.CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID);\n\n        if (container && container.childElementCount === 0) {\n          container.appendChild(rendererView.target);\n        }\n      }\n    })();\n\n    return () => {\n      if (rendererView) {\n        rendererView.dispose();\n        rendererView = undefined;\n      }\n    };\n  }, [props.localVideoStream]);\n  return /*#__PURE__*/React.createElement(Stack, {\n    className: localPreviewContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    id: Constants.CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID,\n    className: localPreviewStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, !props.localVideoStream && /*#__PURE__*/React.createElement(Image, Object.assign({\n    styles: imgStyles\n  }, imageProps, {\n    \"aria-label\": \"Local video preview image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Stack, {\n    horizontal: true,\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    tokens: toggleButtonsBarToken,\n    className: toggleButtonsBarStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CallVideoIcon, {\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Toggle, {\n    checked: props.localVideoStream !== undefined,\n    styles: toggleStyle,\n    disabled: !props.videoDeviceInfo || props.videoDeviceList.length === 0,\n    onChange: handleLocalVideoOnOff,\n    ariaLabel: \"Video Icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MicIcon, {\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Toggle, {\n    checked: props.mic,\n    styles: toggleStyle,\n    disabled: !props.audioDeviceInfo || props.audioDeviceList.length === 0,\n    onChange: handleLocalMicOnOff,\n    ariaLabel: \"Microphone Icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Git Uploads/GroupVideoCalling/Calling/ClientApp/src/components/LocalPreview.tsx"],"names":["React","useEffect","Stack","Toggle","Image","ImageFit","MicIcon","CallVideoIcon","Constants","LocalVideoStream","VideoStreamRenderer","toggleStyle","imgStyles","toggleButtonsBarToken","localPreviewContainerStyle","toggleButtonsBarStyle","localPreviewStyle","rendererView","props","imageProps","src","staticMediaSVG","toString","imageFit","cover","maximizeFrame","handleLocalVideoOnOff","_ev","checked","stream","videoDeviceInfo","setLocalVideoStream","undefined","handleLocalMicOnOff","setMic","localVideoStream","renderer","createView","scalingMode","isMirrored","container","document","getElementById","CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID","childElementCount","appendChild","target","dispose","videoDeviceList","length","mic","audioDeviceInfo","audioDeviceList"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport React, { useEffect } from 'react';\r\nimport { Stack, Toggle, Image, ImageFit } from '@fluentui/react';\r\nimport { MicIcon, CallVideoIcon } from '@fluentui/react-icons-northstar';\r\nimport { Constants } from '../core/constants';\r\nimport {\r\n  VideoStreamRendererView,\r\n  VideoDeviceInfo,\r\n  AudioDeviceInfo,\r\n  LocalVideoStream,\r\n  VideoStreamRenderer\r\n} from '@azure/communication-calling';\r\nimport staticMediaSVG from '../assets/staticmedia.svg';\r\nimport {\r\n  toggleStyle,\r\n  imgStyles,\r\n  toggleButtonsBarToken,\r\n  localPreviewContainerStyle,\r\n  toggleButtonsBarStyle,\r\n  localPreviewStyle\r\n} from './styles/LocalPreview.styles';\r\n\r\nexport interface LocalPreviewProps {\r\n  setMic(mic: boolean): void;\r\n  mic: boolean;\r\n  setLocalVideoStream(device: LocalVideoStream | undefined): void;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  localVideoStream: LocalVideoStream;\r\n}\r\n\r\nlet rendererView: VideoStreamRendererView | undefined;\r\n\r\nexport default (props: LocalPreviewProps): JSX.Element => {\r\n  const imageProps = {\r\n    src: staticMediaSVG.toString(),\r\n    imageFit: ImageFit.cover,\r\n    maximizeFrame: true\r\n  };\r\n\r\n  const handleLocalVideoOnOff = (_ev: React.MouseEvent<HTMLElement>, checked = false): void => {\r\n    const stream = new LocalVideoStream(props.videoDeviceInfo);\r\n    props.setLocalVideoStream(checked ? stream : undefined);\r\n  };\r\n  const handleLocalMicOnOff = (_ev: React.MouseEvent<HTMLElement>, checked = false): void => {\r\n    props.setMic(checked);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async (): Promise<void> => {\r\n      if (props.localVideoStream) {\r\n        const renderer: VideoStreamRenderer = new VideoStreamRenderer(props.localVideoStream);\r\n        rendererView = await renderer.createView({ scalingMode: 'Crop', isMirrored: true });\r\n\r\n        const container = document.getElementById(Constants.CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID);\r\n\r\n        if (container && container.childElementCount === 0) {\r\n          container.appendChild(rendererView.target);\r\n        }\r\n      }\r\n    })();\r\n\r\n    return (): void => {\r\n      if (rendererView) {\r\n        rendererView.dispose();\r\n        rendererView = undefined;\r\n      }\r\n    };\r\n  }, [props.localVideoStream]);\r\n  return (\r\n    <Stack className={localPreviewContainerStyle}>\r\n      <Stack\r\n        horizontalAlign=\"center\"\r\n        verticalAlign=\"center\"\r\n        id={Constants.CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID}\r\n        className={localPreviewStyle}\r\n      >\r\n        {!props.localVideoStream && <Image styles={imgStyles} {...imageProps} aria-label=\"Local video preview image\" />}\r\n      </Stack>\r\n      <Stack\r\n        horizontal\r\n        horizontalAlign=\"center\"\r\n        verticalAlign=\"center\"\r\n        tokens={toggleButtonsBarToken}\r\n        className={toggleButtonsBarStyle}\r\n      >\r\n        <CallVideoIcon size=\"medium\" />\r\n        <Toggle\r\n          checked={props.localVideoStream !== undefined}\r\n          styles={toggleStyle}\r\n          disabled={!props.videoDeviceInfo || props.videoDeviceList.length === 0}\r\n          onChange={handleLocalVideoOnOff}\r\n          ariaLabel=\"Video Icon\"\r\n        />\r\n        <MicIcon size=\"medium\" />\r\n        <Toggle\r\n          checked={props.mic}\r\n          styles={toggleStyle}\r\n          disabled={!props.audioDeviceInfo || props.audioDeviceList.length === 0}\r\n          onChange={handleLocalMicOnOff}\r\n          ariaLabel=\"Microphone Icon\"\r\n        />\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}