{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { ReactionGroup } from './ReactionGroup';\nimport { useTelemetry, useFluentContext, getElementType, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var reactionClassName = 'ui-reaction';\nexport var reactionSlotClassNames = {\n  icon: reactionClassName + \"__icon\",\n  content: reactionClassName + \"__content\"\n};\n/**\n * A Reaction indicates user's emotion or perception.\n * Used to display user's reaction for entity in Chat (e.g. message).\n */\n\nexport var Reaction = /*#__PURE__*/function () {\n  var Reaction = function Reaction(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Reaction.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        icon = props.icon,\n        content = props.content,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Reaction.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Reaction.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Reaction.displayName, {\n      className: reactionClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          hasContent: !!content\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), rtlTextContainer.getAttributes({\n      forElements: [children]\n    })), childrenExist(children) ? children : /*#__PURE__*/React.createElement(React.Fragment, null, Box.create(icon, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('icon', {\n          className: reactionSlotClassNames.icon,\n          styles: resolvedStyles.icon\n        });\n      }\n    }), Box.create(content, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('content', {\n          className: reactionSlotClassNames.content,\n          styles: resolvedStyles.content\n        });\n      }\n    })));\n    setEnd();\n    return element;\n  };\n\n  Reaction.displayName = 'Reaction';\n  Reaction.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand'\n  }), {\n    icon: customPropTypes.shorthandAllowingChildren\n  });\n  Reaction.defaultProps = {\n    as: 'span'\n  };\n  Reaction.handledProps = Object.keys(Reaction.propTypes);\n  Reaction.Group = ReactionGroup;\n  Reaction.create = createShorthandFactory({\n    Component: Reaction,\n    mappedProp: 'content'\n  });\n  return Reaction;\n}();","map":{"version":3,"sources":["components/Reaction/Reaction.tsx"],"names":["reactionClassName","reactionSlotClassNames","icon","content","Reaction","context","useFluentContext","setStart","setEnd","useTelemetry","children","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","mapPropsToInlineStyles","element","root","forElements","childrenExist","defaultProps","customPropTypes","shorthandAllowingChildren","as","Object","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  ContentComponentProps,\n} from '../../utils';\nimport { Accessibility } from '@fluentui/accessibility';\n\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport { ReactionGroup } from './ReactionGroup';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface ReactionSlotClassNames {\n  icon: string;\n  content: string;\n}\n\nexport interface ReactionProps\n  extends UIComponentProps<ReactionProps>,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A reaction can have icon for the indicator of the reaction. */\n  icon?: ShorthandValue<BoxProps>;\n}\n\nexport type ReactionStylesProps = {\n  hasContent: boolean;\n};\n\nexport const reactionClassName = 'ui-reaction';\nexport const reactionSlotClassNames: ReactionSlotClassNames = {\n  icon: `${reactionClassName}__icon`,\n  content: `${reactionClassName}__content`,\n};\n\n/**\n * A Reaction indicates user's emotion or perception.\n * Used to display user's reaction for entity in Chat (e.g. message).\n */\nexport const Reaction: ComponentWithAs<'span', ReactionProps> &\n  FluentComponentStaticProps<ReactionProps> & {\n    Group: typeof ReactionGroup;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Reaction.displayName, context.telemetry);\n  setStart();\n  const { children, icon, content, className, design, styles, variables } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Reaction.handledProps, props);\n\n  const getA11yProps = useAccessibility<never>(props.accessibility, {\n    debugName: Reaction.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<ReactionStylesProps>(Reaction.displayName, {\n    className: reactionClassName,\n    mapPropsToStyles: () => ({\n      hasContent: !!content,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n    >\n      {childrenExist(children) ? (\n        children\n      ) : (\n        <>\n          {Box.create(icon, {\n            defaultProps: () =>\n              getA11yProps('icon', {\n                className: reactionSlotClassNames.icon,\n                styles: resolvedStyles.icon,\n              }),\n          })}\n          {Box.create(content, {\n            defaultProps: () =>\n              getA11yProps('content', {\n                className: reactionSlotClassNames.content,\n                styles: resolvedStyles.content,\n              }),\n          })}\n        </>\n      )}\n    </ElementType>\n  );\n\n  setEnd();\n  return element;\n};\n\nReaction.displayName = 'Reaction';\n\nReaction.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  icon: customPropTypes.shorthandAllowingChildren,\n};\n\nReaction.defaultProps = {\n  as: 'span',\n};\n\nReaction.handledProps = Object.keys(Reaction.propTypes) as any;\n\nReaction.Group = ReactionGroup;\n\nReaction.create = createShorthandFactory({ Component: Reaction, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}