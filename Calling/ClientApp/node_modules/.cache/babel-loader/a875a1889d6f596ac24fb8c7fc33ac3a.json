{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __assign } from \"tslib\";\nimport { SpanKind } from \"@opentelemetry/api\";\nimport { getTracer } from \"@azure/core-tracing\";\n/**\n * Creates a function called createSpan to create spans using the global tracer.\n * @hidden\n * @param spanConfig - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n */\n\nexport function createSpanFunction(_a) {\n  var packagePrefix = _a.packagePrefix,\n      namespace = _a.namespace;\n  return function (operationName, operationOptions) {\n    var tracer = getTracer();\n    var tracingOptions = operationOptions.tracingOptions || {};\n\n    var spanOptions = __assign(__assign({}, tracingOptions.spanOptions), {\n      kind: SpanKind.INTERNAL\n    });\n\n    var span = tracer.startSpan(packagePrefix + \".\" + operationName, spanOptions);\n    span.setAttribute(\"az.namespace\", namespace);\n    var newSpanOptions = tracingOptions.spanOptions || {};\n\n    if (span.isRecording()) {\n      newSpanOptions = __assign(__assign({}, tracingOptions.spanOptions), {\n        parent: span.context(),\n        attributes: __assign(__assign({}, spanOptions.attributes), {\n          \"az.namespace\": namespace\n        })\n      });\n    }\n\n    var newTracingOptions = __assign(__assign({}, tracingOptions), {\n      spanOptions: newSpanOptions\n    });\n\n    var newOperationOptions = __assign(__assign({}, operationOptions), {\n      tracingOptions: newTracingOptions\n    });\n\n    return {\n      span: span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}","map":{"version":3,"sources":["../../src/createSpan.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAA4B,QAA5B,QAA4C,oBAA5C;AACA,SAAS,SAAT,QAA0B,qBAA1B;AAmBA;;;;;AAKG;;AACH,OAAM,SAAU,kBAAV,CAA6B,EAA7B,EAAqE;MAAtC,aAAa,GAAA,EAAA,CAAA,a;MAAE,SAAS,GAAA,EAAA,CAAA,S;AAC3D,SAAO,UACL,aADK,EAEL,gBAFK,EAEc;AAEnB,QAAM,MAAM,GAAG,SAAS,EAAxB;AACA,QAAM,cAAc,GAAG,gBAAgB,CAAC,cAAjB,IAAmC,EAA1D;;AACA,QAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACZ,cAAc,CAAC,WADH,CAAA,EACc;AAC7B,MAAA,IAAI,EAAE,QAAQ,CAAC;AADc,KADd,CAAjB;;AAKA,QAAM,IAAI,GAAG,MAAM,CAAC,SAAP,CAAoB,aAAa,GAAA,GAAb,GAAiB,aAArC,EAAsD,WAAtD,CAAb;AAEA,IAAA,IAAI,CAAC,YAAL,CAAkB,cAAlB,EAAkC,SAAlC;AAEA,QAAI,cAAc,GAAG,cAAc,CAAC,WAAf,IAA8B,EAAnD;;AACA,QAAI,IAAI,CAAC,WAAL,EAAJ,EAAwB;AACtB,MAAA,cAAc,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACT,cAAc,CAAC,WADN,CAAA,EACiB;AAC7B,QAAA,MAAM,EAAE,IAAI,CAAC,OAAL,EADqB;AAE7B,QAAA,UAAU,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACL,WAAW,CAAC,UADP,CAAA,EACiB;AACzB,0BAAgB;AADS,SADjB;AAFmB,OADjB,CAAd;AAQD;;AAED,QAAM,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAClB,cADkB,CAAA,EACJ;AACjB,MAAA,WAAW,EAAE;AADI,KADI,CAAvB;;AAKA,QAAM,mBAAmB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACpB,gBADoB,CAAA,EACJ;AACnB,MAAA,cAAc,EAAE;AADG,KADI,CAAzB;;AAKA,WAAO;AACL,MAAA,IAAI,EAAA,IADC;AAEL,MAAA,cAAc,EAAE;AAFX,KAAP;AAID,GAzCD;AA0CD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { OperationOptions } from \"./coreHttp\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Configuration for creating a new Tracing Span\n */\nexport interface SpanConfig {\n  /**\n   * Package name prefix\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   */\n  namespace: string;\n}\n\n/**\n * Creates a function called createSpan to create spans using the global tracer.\n * @hidden\n * @param spanConfig - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n */\nexport function createSpanFunction({ packagePrefix, namespace }: SpanConfig) {\n  return function<T extends OperationOptions>(\n    operationName: string,\n    operationOptions: T\n  ): { span: Span; updatedOptions: T } {\n    const tracer = getTracer();\n    const tracingOptions = operationOptions.tracingOptions || {};\n    const spanOptions: SpanOptions = {\n      ...tracingOptions.spanOptions,\n      kind: SpanKind.INTERNAL\n    };\n\n    const span = tracer.startSpan(`${packagePrefix}.${operationName}`, spanOptions);\n\n    span.setAttribute(\"az.namespace\", namespace);\n\n    let newSpanOptions = tracingOptions.spanOptions || {};\n    if (span.isRecording()) {\n      newSpanOptions = {\n        ...tracingOptions.spanOptions,\n        parent: span.context(),\n        attributes: {\n          ...spanOptions.attributes,\n          \"az.namespace\": namespace\n        }\n      };\n    }\n\n    const newTracingOptions: OperationTracingOptions = {\n      ...tracingOptions,\n      spanOptions: newSpanOptions\n    };\n\n    const newOperationOptions: T = {\n      ...operationOptions,\n      tracingOptions: newTracingOptions\n    };\n\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}