{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;\n\nvar trace_flags_1 = require(\"./trace_flags\");\n\nexports.INVALID_TRACE_ID = '0';\nexports.INVALID_SPAN_ID = '0';\nvar INVALID_SPAN_CONTEXT = {\n  traceId: exports.INVALID_TRACE_ID,\n  spanId: exports.INVALID_SPAN_ID,\n  traceFlags: trace_flags_1.TraceFlags.NONE\n};\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\n\nvar NoopSpan =\n/** @class */\nfunction () {\n  function NoopSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n\n    this._spanContext = _spanContext;\n  } // Returns a SpanContext.\n\n\n  NoopSpan.prototype.context = function () {\n    return this._spanContext;\n  }; // By default does nothing\n\n\n  NoopSpan.prototype.setAttribute = function (key, value) {\n    return this;\n  }; // By default does nothing\n\n\n  NoopSpan.prototype.setAttributes = function (attributes) {\n    return this;\n  }; // By default does nothing\n\n\n  NoopSpan.prototype.addEvent = function (name, attributes) {\n    return this;\n  }; // By default does nothing\n\n\n  NoopSpan.prototype.setStatus = function (status) {\n    return this;\n  }; // By default does nothing\n\n\n  NoopSpan.prototype.updateName = function (name) {\n    return this;\n  }; // By default does nothing\n\n\n  NoopSpan.prototype.end = function (endTime) {}; // isRecording always returns false for noopSpan.\n\n\n  NoopSpan.prototype.isRecording = function () {\n    return false;\n  };\n\n  return NoopSpan;\n}();\n\nexports.NoopSpan = NoopSpan;\nexports.NOOP_SPAN = new NoopSpan();","map":{"version":3,"sources":["../../../src/trace/NoopSpan.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAOH,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEa,OAAA,CAAA,gBAAA,GAAmB,GAAnB;AACA,OAAA,CAAA,eAAA,GAAkB,GAAlB;AACb,IAAM,oBAAoB,GAAgB;AACxC,EAAA,OAAO,EAAE,OAAA,CAAA,gBAD+B;AAExC,EAAA,MAAM,EAAE,OAAA,CAAA,eAFgC;AAGxC,EAAA,UAAU,EAAE,aAAA,CAAA,UAAA,CAAW;AAHiB,CAA1C;AAMA;;;;AAIG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;AACE,WAAA,QAAA,CACmB,YADnB,EACmE;AAAhD,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,oBAAA;AAAgD;;AAAhD,SAAA,YAAA,GAAA,YAAA;AACf,GAHN,CAKE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,KAAK,YAAZ;AACD,GAFD,CANF,CAUE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,GAAb,EAA0B,KAA1B,EAAwC;AACtC,WAAO,IAAP;AACD,GAFD,CAXF,CAeE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,UAAd,EAAoC;AAClC,WAAO,IAAP;AACD,GAFD,CAhBF,CAoBE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAuB,UAAvB,EAA8C;AAC5C,WAAO,IAAP;AACD,GAFD,CArBF,CAyBE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,CA1BF,CA8BE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,IAAX,EAAuB;AACrB,WAAO,IAAP;AACD,GAFD,CA/BF,CAmCE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,OAAJ,EAAuB,CAAU,CAAjC,CApCF,CAsCE;;;AACA,EAAA,QAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAP;AACD,GAFD;;AAGF,SAAA,QAAA;AAAC,CA1CD,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA;AA4CA,OAAA,CAAA,SAAA,GAAY,IAAI,QAAJ,EAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;\nvar trace_flags_1 = require(\"./trace_flags\");\nexports.INVALID_TRACE_ID = '0';\nexports.INVALID_SPAN_ID = '0';\nvar INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACE_ID,\n    spanId: exports.INVALID_SPAN_ID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NoopSpan = /** @class */ (function () {\n    function NoopSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NoopSpan.prototype.context = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setAttribute = function (key, value) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setAttributes = function (attributes) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.addEvent = function (name, attributes) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setStatus = function (status) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.updateName = function (name) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.end = function (endTime) { };\n    // isRecording always returns false for noopSpan.\n    NoopSpan.prototype.isRecording = function () {\n        return false;\n    };\n    return NoopSpan;\n}());\nexports.NoopSpan = NoopSpan;\nexports.NOOP_SPAN = new NoopSpan();\n//# sourceMappingURL=NoopSpan.js.map"]},"metadata":{},"sourceType":"script"}