{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _filter from \"lodash/filter\";\nimport { isDebugEnabled } from '@fluentui/styles';\nimport { resolveVariables } from './resolveVariables';\nimport { resolveStyles } from './resolveStyles';\nexport var getStyles = function getStyles(options) {\n  var primaryDisplayName = options.primaryDisplayName,\n      telemetry = options.telemetry; //\n  // To compute styles we are going through three stages:\n  // - resolve variables (siteVariables => componentVariables + props.variables)\n  // - resolve styles (with resolvedVariables & props.styles & props.design)\n  // - compute classes (with resolvedStyles)\n  // - conditionally add sources for evaluating debug information to component\n\n  var telemetryPartStart = (telemetry == null ? void 0 : telemetry.enabled) ? performance.now() : 0;\n  var resolvedVariables = resolveVariables(options.allDisplayNames, options.theme, options.inlineStylesProps.variables, options.performance.enableVariablesCaching);\n\n  if ((telemetry == null ? void 0 : telemetry.enabled) && telemetry.performance[primaryDisplayName]) {\n    telemetry.performance[primaryDisplayName].msResolveVariablesTotal += performance.now() - telemetryPartStart;\n  }\n\n  var _resolveStyles = resolveStyles(options, resolvedVariables),\n      classes = _resolveStyles.classes,\n      resolvedStyles = _resolveStyles.resolvedStyles,\n      resolvedStylesDebug = _resolveStyles.resolvedStylesDebug; // conditionally add sources for evaluating debug information to component\n\n\n  if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n    options.saveDebug({\n      componentName: options.allDisplayNames.join(':'),\n      componentVariables: _filter(resolvedVariables._debug, function (variables) {\n        return !_isEmpty(variables.resolved);\n      }),\n      componentStyles: resolvedStylesDebug,\n      siteVariables: _filter(options.theme.siteVariables._debug, function (siteVars) {\n        if (_isEmpty(siteVars) || _isEmpty(siteVars.resolved)) {\n          return false;\n        }\n\n        var keys = Object.keys(siteVars.resolved);\n\n        if (keys.length === 1 && keys.pop() === 'fontSizes' && _isEmpty(siteVars.resolved['fontSizes'])) {\n          return false;\n        }\n\n        return true;\n      })\n    });\n  }\n\n  return {\n    classes: classes,\n    variables: resolvedVariables,\n    styles: resolvedStyles,\n    theme: options.theme\n  };\n};","map":{"version":3,"sources":["styles/getStyles.ts"],"names":["getStyles","primaryDisplayName","telemetry","options","telemetryPartStart","performance","resolvedVariables","resolveVariables","classes","resolvedStyles","resolvedStylesDebug","resolveStyles","process","componentName","componentVariables","variables","componentStyles","siteVariables","siteVars","keys","Object","styles","theme"],"mappings":";;AAAA,SAAA,cAAA,QAAA,kBAAA;AAKA,SAAA,gBAAA,QAAA,oBAAA;AACA,SAAA,aAAA,QAAA,iBAAA;AASA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,OAAA,EAAoD;AAAA,MACnEC,kBADmE,GACjCE,OADiC,CAAA,kBAAA;AAAA,MAC/CD,SAD+C,GACjCC,OADiC,CAAA,SAAA,CAAA,CAG3E;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,CAAA,SAAS,IAAT,IAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAT,OAAA,IAAqBC,WAAW,CAAhC,GAAqBA,EAArB,GAA3B,CAAA;AACA,MAAMC,iBAAiB,GAAGC,gBAAgB,CACxCJ,OAAO,CADiC,eAAA,EAExCA,OAAO,CAFiC,KAAA,EAGxCA,OAAO,CAAPA,iBAAAA,CAHwC,SAAA,EAIxCA,OAAO,CAAPA,WAAAA,CAJF,sBAA0C,CAA1C;;AAOA,MAAI,CAAA,SAAS,IAAT,IAAA,GAAA,KAAA,CAAA,GAAA,SAAS,CAAT,OAAA,KAAsBD,SAAS,CAATA,WAAAA,CAA1B,kBAA0BA,CAA1B,EAAqE;AACnEA,IAAAA,SAAS,CAATA,WAAAA,CAAAA,kBAAAA,EAAAA,uBAAAA,IAAqEG,WAAW,CAAXA,GAAAA,KAArEH,kBAAAA;AACD;;AApB0E,MAAA,cAAA,GAsBlBS,aAAa,CAAA,OAAA,EAtBK,iBAsBL,CAtBK;AAAA,MAsBnEH,OAtBmE,GAAA,cAAA,CAAA,OAAA;AAAA,MAsB1DC,cAtB0D,GAAA,cAAA,CAAA,cAAA;AAAA,MAsB1CC,mBAtB0C,GAAA,cAAA,CAAA,mBAAA,CAAA,CAwB3E;;;AACA,MAAIE,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IAAJ,cAAA,EAA6D;AAC3DT,IAAAA,OAAO,CAAPA,SAAAA,CAAkB;AAChBU,MAAAA,aAAa,EAAEV,OAAO,CAAPA,eAAAA,CAAAA,IAAAA,CADC,GACDA,CADC;AAEhBW,MAAAA,kBAAkB,EAAE,OAAA,CAASR,iBAAiB,CAA1B,MAAA,EAAmC,UAAA,SAAA,EAAS;AAAA,eAAI,CAAC,QAAA,CAAUS,SAAS,CAAxB,QAAK,CAAL;AAFhD,OAEI,CAFJ;AAGhBC,MAAAA,eAAe,EAHC,mBAAA;AAIhBC,MAAAA,aAAa,EAAE,OAAA,CAASd,OAAO,CAAPA,KAAAA,CAAAA,aAAAA,CAAT,MAAA,EAA6C,UAAA,QAAA,EAAY;AACtE,YAAI,QAAA,CAAA,QAAA,CAAA,IAAuB,QAAA,CAAUe,QAAQ,CAA7C,QAA2B,CAA3B,EAAyD;AACvD,iBAAA,KAAA;AACD;;AAED,YAAMC,IAAI,GAAGC,MAAM,CAANA,IAAAA,CAAYF,QAAQ,CAAjC,QAAaE,CAAb;;AACA,YAAID,IAAI,CAAJA,MAAAA,KAAAA,CAAAA,IAAqBA,IAAI,CAAJA,GAAAA,OAArBA,WAAAA,IAAmD,QAAA,CAAUD,QAAQ,CAARA,QAAAA,CAAjE,WAAiEA,CAAV,CAAvD,EAAkG;AAChG,iBAAA,KAAA;AACD;;AAED,eAAA,IAAA;AAVa,OAAA;AAJC,KAAlBf;AAiBD;;AAED,SAAO;AACLK,IAAAA,OAAO,EADF,OAAA;AAELO,IAAAA,SAAS,EAFJ,iBAAA;AAGLM,IAAAA,MAAM,EAHD,cAAA;AAILC,IAAAA,KAAK,EAAEnB,OAAO,CAACmB;AAJV,GAAP;AA7CK,CAAA","sourcesContent":["import { ComponentSlotStylesResolved, ComponentVariablesObject, isDebugEnabled } from '@fluentui/styles';\nimport * as _ from 'lodash';\n\nimport { ProviderContextPrepared } from '../context';\nimport { ComponentSlotClasses, ResolveStylesOptions } from '../styles/types';\nimport { resolveVariables } from './resolveVariables';\nimport { resolveStyles } from './resolveStyles';\n\nexport type GetStylesResult = {\n  classes: ComponentSlotClasses;\n  variables: ComponentVariablesObject;\n  styles: ComponentSlotStylesResolved;\n  theme: ProviderContextPrepared['theme'];\n};\n\nexport const getStyles = (options: ResolveStylesOptions): GetStylesResult => {\n  const { primaryDisplayName, telemetry } = options;\n\n  //\n  // To compute styles we are going through three stages:\n  // - resolve variables (siteVariables => componentVariables + props.variables)\n  // - resolve styles (with resolvedVariables & props.styles & props.design)\n  // - compute classes (with resolvedStyles)\n  // - conditionally add sources for evaluating debug information to component\n\n  const telemetryPartStart = telemetry?.enabled ? performance.now() : 0;\n  const resolvedVariables = resolveVariables(\n    options.allDisplayNames,\n    options.theme,\n    options.inlineStylesProps.variables,\n    options.performance.enableVariablesCaching,\n  );\n\n  if (telemetry?.enabled && telemetry.performance[primaryDisplayName]) {\n    telemetry.performance[primaryDisplayName].msResolveVariablesTotal += performance.now() - telemetryPartStart;\n  }\n\n  const { classes, resolvedStyles, resolvedStylesDebug } = resolveStyles(options, resolvedVariables);\n\n  // conditionally add sources for evaluating debug information to component\n  if (process.env.NODE_ENV !== 'production' && isDebugEnabled) {\n    options.saveDebug({\n      componentName: options.allDisplayNames.join(':'),\n      componentVariables: _.filter(resolvedVariables._debug, variables => !_.isEmpty(variables.resolved)),\n      componentStyles: resolvedStylesDebug,\n      siteVariables: _.filter(options.theme.siteVariables._debug, siteVars => {\n        if (_.isEmpty(siteVars) || _.isEmpty(siteVars.resolved)) {\n          return false;\n        }\n\n        const keys = Object.keys(siteVars.resolved);\n        if (keys.length === 1 && keys.pop() === 'fontSizes' && _.isEmpty(siteVars.resolved['fontSizes'])) {\n          return false;\n        }\n\n        return true;\n      }),\n    });\n  }\n\n  return {\n    classes,\n    variables: resolvedVariables,\n    styles: resolvedStyles,\n    theme: options.theme,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}