{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport { compose, getElementType, mergeVariablesOverrides, useUnhandledProps, useAccessibility, useFluentContext, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\nexport var toolbarCustomItemClassName = 'ui-toolbar__customitem';\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\n\nexport var ToolbarCustomItem = /*#__PURE__*/function () {\n  var ToolbarCustomItem = compose(function (props, ref, composeOptions) {\n    var _Object$assign;\n\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        children = props.children,\n        className = props.className,\n        content = props.content,\n        design = props.design,\n        fitted = props.fitted,\n        focusable = props.focusable,\n        styles = props.styles,\n        variables = props.variables;\n    var parentVariables = React.useContext(ToolbarVariablesContext);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions: composeOptions,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          fitted: fitted\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: mergeVariablesOverrides(parentVariables, variables)\n        };\n      },\n      rtl: context.rtl,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes;\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    var handleBlur = function handleBlur(e) {\n      if (focusable) {\n        _invoke(props, 'onBlur', e, props);\n      }\n    };\n\n    var handleFocus = function handleFocus(e) {\n      if (focusable) {\n        _invoke(props, 'onFocus', e, props);\n      }\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign((_Object$assign = {}, _Object$assign[IS_FOCUSABLE_ATTRIBUTE] = focusable, _Object$assign), unhandledProps, {\n      className: classes.root,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      ref: ref\n    })), childrenExist(children) ? children : content);\n    setEnd();\n    return element;\n  }, {\n    className: toolbarCustomItemClassName,\n    displayName: 'ToolbarCustomItem',\n    shorthandConfig: {\n      mappedProp: 'content'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'className', 'content', 'design', 'fitted', 'focusable', 'onBlur', 'onFocus', 'styles', 'variables']\n  });\n  ToolbarCustomItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    fitted: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n    focusable: PropTypes.bool,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func\n  });\n  return ToolbarCustomItem;\n}();","map":{"version":3,"sources":["components/Toolbar/ToolbarCustomItem.tsx"],"names":["toolbarCustomItemClassName","ToolbarCustomItem","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","children","className","content","design","fitted","focusable","styles","variables","props","parentVariables","React","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","mergeVariablesOverrides","unstable_props","ElementType","getElementType","unhandledProps","useUnhandledProps","handleBlur","handleFocus","element","onBlur","onFocus","ref","childrenExist","displayName","shorthandConfig","mappedProp","handledProps","commonPropTypes","PropTypes","func"],"mappings":"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","sourcesContent":["import { Accessibility, IS_FOCUSABLE_ATTRIBUTE } from '@fluentui/accessibility';\nimport {\n  compose,\n  getElementType,\n  mergeVariablesOverrides,\n  useUnhandledProps,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { ComponentEventHandler } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  UIComponentProps,\n  childrenExist,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarCustomItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** A custom item can remove element padding, vertically or horizontally. */\n  fitted?: boolean | 'horizontally' | 'vertically';\n\n  /** A custom item can be focused. */\n  focusable?: boolean;\n\n  /** A custom item can't be actionable. */\n  onClick?: never;\n\n  /**\n   * Called after user's focus. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ToolbarCustomItemProps>;\n\n  /**\n   * Called after item blur. Will be called only if the item is focusable.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ToolbarCustomItemProps>;\n}\n\nexport type ToolbarCustomItemStylesProps = Required<Pick<ToolbarCustomItemProps, 'fitted'>>;\nexport const toolbarCustomItemClassName = 'ui-toolbar__customitem';\n\n/**\n * A ToolbarCustomItem renders Toolbar item as a non-actionable `div` with custom content inside.\n */\nexport const ToolbarCustomItem = compose<'div', ToolbarCustomItemProps, ToolbarCustomItemStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const { accessibility, children, className, content, design, fitted, focusable, styles, variables } = props;\n    const parentVariables = React.useContext(ToolbarVariablesContext);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      rtl: context.rtl,\n    });\n    const { classes } = useStyles<ToolbarCustomItemStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      composeOptions,\n      mapPropsToStyles: () => ({ fitted }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables: mergeVariablesOverrides(parentVariables, variables),\n      }),\n      rtl: context.rtl,\n      unstable_props: props,\n    });\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const handleBlur = (e: React.SyntheticEvent) => {\n      if (focusable) {\n        _.invoke(props, 'onBlur', e, props);\n      }\n    };\n\n    const handleFocus = (e: React.SyntheticEvent) => {\n      if (focusable) {\n        _.invoke(props, 'onFocus', e, props);\n      }\n    };\n\n    const element = (\n      <ElementType\n        {...getA11yProps('root', {\n          [IS_FOCUSABLE_ATTRIBUTE]: focusable,\n          ...unhandledProps,\n          className: classes.root,\n          onBlur: handleBlur,\n          onFocus: handleFocus,\n          ref,\n        })}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n    setEnd();\n\n    return element;\n  },\n  {\n    className: toolbarCustomItemClassName,\n    displayName: 'ToolbarCustomItem',\n\n    shorthandConfig: { mappedProp: 'content' },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'content',\n      'design',\n      'fitted',\n      'focusable',\n      'onBlur',\n      'onFocus',\n      'styles',\n      'variables',\n    ],\n  },\n);\n\nToolbarCustomItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  fitted: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'horizontally' | 'vertically'>(['horizontally', 'vertically']),\n  ]),\n  focusable: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}