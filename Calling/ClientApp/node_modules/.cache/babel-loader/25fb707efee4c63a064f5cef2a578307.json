{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable eqeqeq */\nimport { __assign } from \"tslib\";\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./util/serializer.common\";\n\nvar Serializer =\n/** @class */\nfunction () {\n  function Serializer(modelMappers, isXML) {\n    if (modelMappers === void 0) {\n      modelMappers = {};\n    }\n\n    this.modelMappers = modelMappers;\n    this.isXML = isXML;\n  }\n\n  Serializer.prototype.validateConstraints = function (mapper, value, objectName) {\n    var failValidation = function (constraintName, constraintValue) {\n      throw new Error(\"\\\"\" + objectName + \"\\\" with value \\\"\" + value + \"\\\" should satisfy the constraint \\\"\" + constraintName + \"\\\": \" + constraintValue + \".\");\n    };\n\n    if (mapper.constraints && value != undefined) {\n      var valueAsNumber = value;\n      var _a = mapper.constraints,\n          ExclusiveMaximum = _a.ExclusiveMaximum,\n          ExclusiveMinimum = _a.ExclusiveMinimum,\n          InclusiveMaximum = _a.InclusiveMaximum,\n          InclusiveMinimum = _a.InclusiveMinimum,\n          MaxItems = _a.MaxItems,\n          MaxLength = _a.MaxLength,\n          MinItems = _a.MinItems,\n          MinLength = _a.MinLength,\n          MultipleOf = _a.MultipleOf,\n          Pattern = _a.Pattern,\n          UniqueItems = _a.UniqueItems;\n\n      if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n\n      if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n\n      if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n\n      if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n\n      var valueAsArray = value;\n\n      if (MaxItems != undefined && valueAsArray.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n\n      if (MaxLength != undefined && valueAsArray.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n\n      if (MinItems != undefined && valueAsArray.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n\n      if (MinLength != undefined && valueAsArray.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n\n      if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n\n      if (Pattern) {\n        var pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n\n      if (UniqueItems && valueAsArray.some(function (item, i, ar) {\n        return ar.indexOf(item) !== i;\n      })) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  };\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   * @param object - A valid Javascript object to be serialized\n   * @param objectName - Name of the serialized object\n   * @param options - additional options to deserialization\n   * @returns A valid serialized Javascript object\n   */\n\n\n  Serializer.prototype.serialize = function (mapper, object, objectName, options) {\n    var _a, _b, _c;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var updatedOptions = {\n      rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n      includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n      xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n    };\n    var payload = {};\n    var mapperType = mapper.type.name;\n\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    } // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n\n    var required = mapper.required,\n        nullable = mapper.nullable;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(objectName + \" cannot be undefined.\");\n    }\n\n    if (required && !nullable && object == undefined) {\n      throw new Error(objectName + \" cannot be null or undefined.\");\n    }\n\n    if (!required && nullable === false && object === null) {\n      throw new Error(objectName + \" cannot be null.\");\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        var enumMapper = mapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      }\n    }\n\n    return payload;\n  };\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   * @param responseBody - A valid Javascript entity to be deserialized\n   * @param objectName - Name of the deserialized object\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object\n   */\n\n\n  Serializer.prototype.deserialize = function (mapper, responseBody, objectName, options) {\n    var _a, _b, _c;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var updatedOptions = {\n      rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n      includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n      xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n    };\n\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      } // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n\n\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n\n      return responseBody;\n    }\n\n    var payload;\n    var mapperType = mapper.type.name;\n\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n    } else {\n      if (this.isXML) {\n        var xmlCharKey = updatedOptions.xmlCharKey;\n        var castResponseBody = responseBody;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n\n        if (castResponseBody[XML_ATTRKEY] != undefined && castResponseBody[xmlCharKey] != undefined) {\n          responseBody = castResponseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  };\n\n  return Serializer;\n}();\n\nexport { Serializer };\n\nfunction trimEnd(str, ch) {\n  var len = str.length;\n\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer) {\n  if (!buffer) {\n    return undefined;\n  }\n\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(\"Please provide an input of type Uint8Array for converting to Base64Url.\");\n  } // Uint8Array to Base64.\n\n\n  var str = base64.encodeByteArray(buffer); // Base64 to Base64Url.\n\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str) {\n  if (!str) {\n    return undefined;\n  }\n\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  } // Base64Url to Base64.\n\n\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\"); // Base64 to Uint8Array.\n\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop) {\n  var classes = [];\n  var partialclass = \"\";\n\n  if (prop) {\n    var subwords = prop.split(\".\");\n\n    for (var _i = 0, subwords_1 = subwords; _i < subwords_1.length; _i++) {\n      var item = subwords_1[_i];\n\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d) {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d);\n  }\n\n  return Math.floor(d.getTime() / 1000);\n}\n\nfunction unixTimeToDate(n) {\n  if (!n) {\n    return undefined;\n  }\n\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName, objectName, value) {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(objectName + \" with value \" + value + \" must be of type number.\");\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(objectName + \" with value \\\"\" + value + \"\\\" must be of type string.\");\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(objectName + \" with value \\\"\" + value + \"\\\" must be of type string and a valid uuid.\");\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(objectName + \" with value \" + value + \" must be of type boolean.\");\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      var objectType = typeof value;\n\n      if (objectType !== \"string\" && objectType !== \"function\" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob)) {\n        throw new Error(objectName + \" must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.\");\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction serializeEnumType(objectName, allowedValues, value) {\n  if (!allowedValues) {\n    throw new Error(\"Please provide a set of allowedValues to validate \" + objectName + \" as an Enum Type.\");\n  }\n\n  var isPresent = allowedValues.some(function (item) {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n\n    return item === value;\n  });\n\n  if (!isPresent) {\n    throw new Error(value + \" is not a valid value for \" + objectName + \". The valid values are: \" + JSON.stringify(allowedValues) + \".\");\n  }\n\n  return value;\n}\n\nfunction serializeByteArrayType(objectName, value) {\n  var returnValue = \"\";\n\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(objectName + \" must be of type Uint8Array.\");\n    }\n\n    returnValue = base64.encodeByteArray(value);\n  }\n\n  return returnValue;\n}\n\nfunction serializeBase64UrlType(objectName, value) {\n  var returnValue = \"\";\n\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(objectName + \" must be of type Uint8Array.\");\n    }\n\n    returnValue = bufferToBase64Url(value) || \"\";\n  }\n\n  return returnValue;\n}\n\nfunction serializeDateTypes(typeName, value, objectName) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(objectName + \" must be an instanceof Date or a string in ISO8601 format.\");\n      }\n\n      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(objectName + \" must be an instanceof Date or a string in ISO8601 format.\");\n      }\n\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(objectName + \" must be an instanceof Date or a string in RFC-1123 format.\");\n      }\n\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(objectName + \" must be an instanceof Date or a string in RFC-1123/ISO8601 format \" + \"for it to be serialized in UnixTime/Epoch format.\");\n      }\n\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(objectName + \" must be a string in ISO 8601 format. Instead was \\\"\" + value + \"\\\".\");\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n  var _a, _b;\n\n  if (!Array.isArray(object)) {\n    throw new Error(objectName + \" must be of type Array.\");\n  }\n\n  var elementType = mapper.type.element;\n\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\"element\\\" metadata for an Array must be defined in the \" + (\"mapper and it must of type \\\"object\\\" in \" + objectName + \".\"));\n  }\n\n  var tempArray = [];\n\n  for (var i = 0; i < object.length; i++) {\n    var serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n\n    if (isXml && elementType.xmlNamespace) {\n      var xmlnsKey = elementType.xmlNamespacePrefix ? \"xmlns:\" + elementType.xmlNamespacePrefix : \"xmlns\";\n\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = __assign({}, serializedValue);\n        tempArray[i][XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = elementType.xmlNamespace, _a);\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = (_b = {}, _b[xmlnsKey] = elementType.xmlNamespace, _b);\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n\n  return tempArray;\n}\n\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n  var _a;\n\n  if (typeof object !== \"object\") {\n    throw new Error(objectName + \" must be of type object.\");\n  }\n\n  var valueType = mapper.type.value;\n\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\"\\\"value\\\" metadata for a Dictionary must be defined in the \" + (\"mapper and it must of type \\\"object\\\" in \" + objectName + \".\"));\n  }\n\n  var tempDictionary = {};\n\n  for (var _i = 0, _b = Object.keys(object); _i < _b.length; _i++) {\n    var key = _b[_i];\n    var serializedValue = serializer.serialize(valueType, object[key], objectName, options); // If the element needs an XML namespace we need to add it within the $ property\n\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  } // Add the namespace to the root element if needed\n\n\n  if (isXml && mapper.xmlNamespace) {\n    var xmlnsKey = mapper.xmlNamespacePrefix ? \"xmlns:\" + mapper.xmlNamespacePrefix : \"xmlns\";\n    var result = tempDictionary;\n    result[XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = mapper.xmlNamespace, _a);\n    return result;\n  }\n\n  return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\n\n\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n  var additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\n\n\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n  var className = mapper.type.className;\n\n  if (!className) {\n    throw new Error(\"Class name for model \\\"\" + objectName + \"\\\" is not provided in the mapper \\\"\" + JSON.stringify(mapper, undefined, 2) + \"\\\".\");\n  }\n\n  return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n */\n\n\nfunction resolveModelProperties(serializer, mapper, objectName) {\n  var modelProps = mapper.type.modelProperties;\n\n  if (!modelProps) {\n    var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n\n    if (!modelMapper) {\n      throw new Error(\"mapper() cannot be null or undefined for model \\\"\" + mapper.type.className + \"\\\".\");\n    }\n\n    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n\n    if (!modelProps) {\n      throw new Error(\"modelProperties cannot be null or undefined in the \" + (\"mapper \\\"\" + JSON.stringify(modelMapper) + \"\\\" of type \\\"\" + mapper.type.className + \"\\\" for object \\\"\" + objectName + \"\\\".\"));\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n  var _a, _b;\n\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    var payload = {};\n    var modelProps = resolveModelProperties(serializer, mapper, objectName);\n\n    for (var _i = 0, _c = Object.keys(modelProps); _i < _c.length; _i++) {\n      var key = _c[_i];\n      var propertyMapper = modelProps[key];\n\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      var propName = void 0;\n      var parentObject = payload;\n\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        var paths = splitSerializeName(propertyMapper.serializedName);\n        propName = paths.pop();\n\n        for (var _d = 0, paths_1 = paths; _d < paths_1.length; _d++) {\n          var pathName = paths_1[_d];\n          var childObject = parentObject[pathName];\n\n          if (childObject == undefined && (object[key] != undefined || propertyMapper.defaultValue !== undefined)) {\n            parentObject[pathName] = {};\n          }\n\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        if (isXml && mapper.xmlNamespace) {\n          var xmlnsKey = mapper.xmlNamespacePrefix ? \"xmlns:\" + mapper.xmlNamespacePrefix : \"xmlns\";\n          parentObject[XML_ATTRKEY] = __assign(__assign({}, parentObject[XML_ATTRKEY]), (_a = {}, _a[xmlnsKey] = mapper.xmlNamespace, _a));\n        }\n\n        var propertyObjectName = propertyMapper.serializedName !== \"\" ? objectName + \".\" + propertyMapper.serializedName : objectName;\n        var toSerialize = object[key];\n        var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {\n          toSerialize = mapper.serializedName;\n        }\n\n        var serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n\n        if (serializedValue !== undefined && propName != undefined) {\n          var value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = (_b = {}, _b[propertyMapper.xmlElementName] = value, _b);\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    var additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n\n    if (additionalPropertiesMapper) {\n      var propNames = Object.keys(modelProps);\n\n      var _loop_1 = function (clientPropName) {\n        var isAdditionalProperty = propNames.every(function (pn) {\n          return pn !== clientPropName;\n        });\n\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n        }\n      };\n\n      for (var clientPropName in object) {\n        _loop_1(clientPropName);\n      }\n    }\n\n    return payload;\n  }\n\n  return object;\n}\n\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n  var _a;\n\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  var xmlnsKey = propertyMapper.xmlNamespacePrefix ? \"xmlns:\" + propertyMapper.xmlNamespacePrefix : \"xmlns\";\n  var xmlNamespace = (_a = {}, _a[xmlnsKey] = propertyMapper.xmlNamespace, _a);\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      var result_1 = __assign({}, serializedValue);\n\n      result_1[XML_ATTRKEY] = xmlNamespace;\n      return result_1;\n    }\n  }\n\n  var result = {};\n  result[options.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName, options) {\n  return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n  var _a;\n\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  var modelProps = resolveModelProperties(serializer, mapper, objectName);\n  var instance = {};\n  var handledPropertyNames = [];\n\n  for (var _i = 0, _b = Object.keys(modelProps); _i < _b.length; _i++) {\n    var key = _b[_i];\n    var propertyMapper = modelProps[key];\n    var paths = splitSerializeName(modelProps[key].serializedName);\n    handledPropertyNames.push(paths[0]);\n    var serializedName = propertyMapper.serializedName,\n        xmlName = propertyMapper.xmlName,\n        xmlElementName = propertyMapper.xmlElementName;\n    var propertyObjectName = objectName;\n\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    var headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n\n    if (headerCollectionPrefix) {\n      var dictionary = {};\n\n      for (var _c = 0, _d = Object.keys(responseBody); _c < _d.length; _c++) {\n        var headerKey = _d[_c];\n\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n      } else {\n        var propertyName = xmlElementName || xmlName || serializedName;\n\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          var wrapped = responseBody[xmlName];\n          var elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];\n          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n        } else {\n          var property = responseBody[propertyName];\n          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      var propertyInstance = void 0;\n      var res = responseBody; // traversing the object step by step.\n\n      for (var _e = 0, paths_2 = paths; _e < paths_2.length; _e++) {\n        var item = paths_2[_e];\n        if (!res) break;\n        res = res[item];\n      }\n\n      propertyInstance = res;\n      var polymorphicDiscriminator = mapper.type.polymorphicDiscriminator; // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      var serializedValue = void 0; // paging\n\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  var additionalPropertiesMapper = mapper.type.additionalProperties;\n\n  if (additionalPropertiesMapper) {\n    var isAdditionalProperty = function (responsePropName) {\n      for (var clientPropName in modelProps) {\n        var paths = splitSerializeName(modelProps[clientPropName].serializedName);\n\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    for (var responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n      }\n    }\n  } else if (responseBody) {\n    for (var _f = 0, _g = Object.keys(responseBody); _f < _g.length; _f++) {\n      var key = _g[_f];\n\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n  var value = mapper.type.value;\n\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\"\\\"value\\\" metadata for a Dictionary must be defined in the \" + (\"mapper and it must of type \\\"object\\\" in \" + objectName));\n  }\n\n  if (responseBody) {\n    var tempDictionary = {};\n\n    for (var _i = 0, _a = Object.keys(responseBody); _i < _a.length; _i++) {\n      var key = _a[_i];\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n\n    return tempDictionary;\n  }\n\n  return responseBody;\n}\n\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n  var element = mapper.type.element;\n\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\"element\\\" metadata for an Array must be defined in the \" + (\"mapper and it must of type \\\"object\\\" in \" + objectName));\n  }\n\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    var tempArray = [];\n\n    for (var i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], objectName + \"[\" + i + \"]\", options);\n    }\n\n    return tempArray;\n  }\n\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n  var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n\n  if (polymorphicDiscriminator) {\n    var discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n\n    if (discriminatorName != undefined) {\n      var discriminatorValue = object[discriminatorName];\n\n      if (discriminatorValue != undefined) {\n        var typeName = mapper.type.uberParent || mapper.type.className;\n        var indexDiscriminator = discriminatorValue === typeName ? discriminatorValue : typeName + \".\" + discriminatorValue;\n        var polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;\n} // TODO: why is this here?\n\n\nexport function serializeObject(toSerialize) {\n  var castToSerialize = toSerialize;\n  if (toSerialize == undefined) return undefined;\n\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    var array = [];\n\n    for (var i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    var dictionary = {};\n\n    for (var property in toSerialize) {\n      dictionary[property] = serializeObject(castToSerialize[property]);\n    }\n\n    return dictionary;\n  }\n\n  return toSerialize;\n}\n/**\n * Utility function to create a K:V from a list of strings\n */\n\nfunction strEnum(o) {\n  var result = {};\n\n  for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {\n    var key = o_1[_i];\n    result[key] = key;\n  }\n\n  return result;\n} // eslint-disable-next-line @typescript-eslint/no-redeclare\n\n\nexport var MapperType = strEnum([\"Base64Url\", \"Boolean\", \"ByteArray\", \"Composite\", \"Date\", \"DateTime\", \"DateTimeRfc1123\", \"Dictionary\", \"Enum\", \"Number\", \"Object\", \"Sequence\", \"String\", \"Stream\", \"TimeSpan\", \"UnixTime\"]);","map":{"version":3,"sources":["../../src/serializer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/* eslint-disable eqeqeq */\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\nimport { XML_ATTRKEY, XML_CHARKEY, SerializerOptions } from \"./util/serializer.common\";\n\nexport class Serializer {\n  constructor(\n    public readonly modelMappers: { [key: string]: any } = {},\n    public readonly isXML?: boolean\n  ) {}\n\n  validateConstraints(mapper: Mapper, value: unknown, objectName: string): void {\n    const failValidation = (\n      constraintName: keyof MapperConstraints,\n      constraintValue: any\n    ): Error => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`\n      );\n    };\n    if (mapper.constraints && value != undefined) {\n      const valueAsNumber = value as number;\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      const valueAsArray = value as any[];\n      if (MaxItems != undefined && valueAsArray.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && valueAsArray.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && valueAsArray.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && valueAsArray.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        valueAsArray.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   * @param object - A valid Javascript object to be serialized\n   * @param objectName - Name of the serialized object\n   * @param options - additional options to deserialization\n   * @returns A valid serialized Javascript object\n   */\n  serialize(\n    mapper: Mapper,\n    object: unknown,\n    objectName?: string,\n    options: SerializerOptions = {}\n  ): any {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: options.rootName ?? \"\",\n      includeRoot: options.includeRoot ?? false,\n      xmlCharKey: options.xmlCharKey ?? XML_CHARKEY\n    };\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object as Uint8Array);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object as Uint8Array);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(\n          this,\n          mapper as CompositeMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions\n        );\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   * @param responseBody - A valid Javascript entity to be deserialized\n   * @param objectName - Name of the deserialized object\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: unknown,\n    objectName: string,\n    options: SerializerOptions = {}\n  ): any {\n    const updatedOptions: Required<SerializerOptions> = {\n      rootName: options.rootName ?? \"\",\n      includeRoot: options.includeRoot ?? false,\n      xmlCharKey: options.xmlCharKey ?? XML_CHARKEY\n    };\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(\n        this,\n        mapper as CompositeMapper,\n        responseBody,\n        objectName,\n        updatedOptions\n      );\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xmlCharKey;\n        const castResponseBody = responseBody as Record<string, unknown>;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (\n          castResponseBody[XML_ATTRKEY] != undefined &&\n          castResponseBody[xmlCharKey] != undefined\n        ) {\n          responseBody = castResponseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody as string);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody as string);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody as number);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody as string);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody as string);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          responseBody,\n          objectName,\n          updatedOptions\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName,\n          updatedOptions\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string): string {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`\n        );\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob)\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`\n        );\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues\n      )}.`\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: Uint8Array): string {\n  let returnValue: string = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = base64.encodeByteArray(value);\n  }\n  return returnValue;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: Uint8Array): string {\n  let returnValue: string = \"\";\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    returnValue = bufferToBase64Url(value) || \"\";\n  }\n  return returnValue;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string): any {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any[] {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix\n        ? `xmlns:${elementType.xmlNamespacePrefix}`\n        : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = { ...serializedValue };\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): { [key: string]: any } {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n    return result;\n  }\n\n  return tempDictionary;\n}\n\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\nfunction resolveAdditionalProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): SequenceMapper | BaseMapper | CompositeMapper | DictionaryMapper | EnumMapper | undefined {\n  const additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper?.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n\n/**\n * Finds the mapper referenced by className\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n * @param objectName - Name of the object being serialized\n */\nfunction resolveReferencedMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): CompositeMapper | undefined {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(\n      `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n        mapper,\n        undefined,\n        2\n      )}\".`\n    );\n  }\n\n  return serializer.modelMappers[className];\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - The serializer containing the entire set of mappers\n * @param mapper - The composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper?.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(modelMapper)}\" of type \"${\n            mapper.type.className\n          }\" for object \"${objectName}\".`\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (\n            childObject == undefined &&\n            (object[key] != undefined || propertyMapper.defaultValue !== undefined)\n          ) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix\n            ? `xmlns:${mapper.xmlNamespacePrefix}`\n            : \"xmlns\";\n          parentObject[XML_ATTRKEY] = {\n            ...parentObject[XML_ATTRKEY],\n            [xmlnsKey]: mapper.xmlNamespace\n          };\n        }\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          toSerialize == undefined\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName,\n          options\n        );\n\n        if (serializedValue !== undefined && propName != undefined) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: value };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]',\n            options\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction getXmlObjectValue(\n  propertyMapper: Mapper,\n  serializedValue: any,\n  isXml: boolean,\n  options: Required<SerializerOptions>\n): any {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix\n    ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n    : \"xmlns\";\n  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result: any = { ...serializedValue };\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result: any = {};\n  result[options.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName: string, options: Required<SerializerOptions>): boolean {\n  return [XML_ATTRKEY, options.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName,\n            options\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody[XML_ATTRKEY][xmlName!],\n          propertyObjectName,\n          options\n        );\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName!];\n          const elementList = wrapped?.[xmlElementName!] ?? [];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            elementList,\n            propertyObjectName,\n            options\n          );\n        } else {\n          const property = responseBody[propertyName!];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            property,\n            propertyObjectName,\n            options\n          );\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        propertyInstance == undefined\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options\n        );\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string): boolean => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]',\n          options\n        );\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key, options)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): { [key: string]: any } {\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string,\n  options: Required<SerializerOptions>\n): any[] {\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(\n        element,\n        responseBody[i],\n        `${objectName}[${i}]`,\n        options\n      );\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\"\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator =\n          discriminatorValue === typeName\n            ? discriminatorValue\n            : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string): any {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  /**\n   * Name for the xml element\n   */\n  xmlName?: string;\n  /**\n   * Xml element namespace\n   */\n  xmlNamespace?: string;\n  /**\n   * Xml element namespace prefix\n   */\n  xmlNamespacePrefix?: string;\n  /**\n   * Determines if the current property should be serialized as an attribute of the parent xml element\n   */\n  xmlIsAttribute?: boolean;\n  /**\n   * Name for the xml elements when serializing an array\n   */\n  xmlElementName?: string;\n  /**\n   * Whether or not the current property should have a wrapping XML element\n   */\n  xmlIsWrapped?: boolean;\n  /**\n   * Whether or not the current property is readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Whether or not the current property is a constant\n   */\n  isConstant?: boolean;\n  /**\n   * Whether or not the current property is required\n   */\n  required?: boolean;\n  /**\n   * Whether or not the current property allows mull as a value\n   */\n  nullable?: boolean;\n  /**\n   * The name to use when serializing\n   */\n  serializedName?: string;\n  /**\n   * Type of the mapper\n   */\n  type: MapperType;\n  /**\n   * Default value when one is not explicitly provided\n   */\n  defaultValue?: any;\n  /**\n   * Constraints to test the current value against\n   */\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: unknown): any {\n  const castToSerialize = toSerialize as Record<string, unknown>;\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  } else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  } else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(castToSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}