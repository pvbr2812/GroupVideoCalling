{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { DEFAULT_CLIENT_MAX_RETRY_INTERVAL, DEFAULT_CLIENT_RETRY_COUNT, DEFAULT_CLIENT_RETRY_INTERVAL, isNumber, updateRetryData, shouldRetry } from \"../util/exponentialBackoffStrategy\";\nimport { RestError } from \"../restError\";\nimport { logger } from \"../log\";\nexport function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {\n  return {\n    create: function (nextPolicy, options) {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);\n    }\n  };\n}\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n */\n\nexport var RetryMode;\n\n(function (RetryMode) {\n  RetryMode[RetryMode[\"Exponential\"] = 0] = \"Exponential\";\n})(RetryMode || (RetryMode = {}));\n\nexport var DefaultRetryOptions = {\n  maxRetries: DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL\n};\n/**\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\n\nvar ExponentialRetryPolicy =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialRetryPolicy, _super);\n  /**\n   * @param nextPolicy - The next RequestPolicy in the pipeline chain.\n   * @param options - The options for this RequestPolicy.\n   * @param retryCount - The client retry count.\n   * @param retryInterval - The client retry interval, in milliseconds.\n   * @param minRetryInterval - The minimum retry interval, in milliseconds.\n   * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n   */\n\n\n  function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    _this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    _this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return _this;\n  }\n\n  ExponentialRetryPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n      return retry(_this, request, response);\n    }).catch(function (error) {\n      return retry(_this, request, error.response, undefined, error);\n    });\n  };\n\n  return ExponentialRetryPolicy;\n}(BaseRequestPolicy);\n\nexport { ExponentialRetryPolicy };\n\nfunction retry(policy, request, response, retryData, requestError) {\n  return __awaiter(this, void 0, void 0, function () {\n    function shouldPolicyRetry(responseParam) {\n      var statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;\n\n      if (statusCode === undefined || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) {\n        return false;\n      }\n\n      return true;\n    }\n\n    var isAborted, res, err_1, err;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          retryData = updateRetryData({\n            retryInterval: policy.retryInterval,\n            minRetryInterval: 0,\n            maxRetryInterval: policy.maxRetryInterval\n          }, retryData, requestError);\n          isAborted = request.abortSignal && request.abortSignal.aborted;\n          if (!(!isAborted && shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response))) return [3\n          /*break*/\n          , 6];\n          logger.info(\"Retrying request in \" + retryData.retryInterval);\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 4,, 5]);\n\n          return [4\n          /*yield*/\n          , utils.delay(retryData.retryInterval)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , policy._nextPolicy.sendRequest(request.clone())];\n\n        case 3:\n          res = _a.sent();\n          return [2\n          /*return*/\n          , retry(policy, request, res, retryData)];\n\n        case 4:\n          err_1 = _a.sent();\n          return [2\n          /*return*/\n          , retry(policy, request, response, retryData, err_1)];\n\n        case 5:\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          if (isAborted || requestError || !response) {\n            err = retryData.error || new RestError(\"Failed to send the request.\", RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);\n            throw err;\n          } else {\n            return [2\n            /*return*/\n            , response];\n          }\n\n          _a.label = 7;\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/policies/exponentialRetryPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions\n} from \"./requestPolicy\";\nimport {\n  RetryData,\n  RetryError,\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL,\n  DEFAULT_CLIENT_RETRY_COUNT,\n  DEFAULT_CLIENT_RETRY_INTERVAL,\n  isNumber,\n  updateRetryData,\n  shouldRetry\n} from \"../util/exponentialBackoffStrategy\";\nimport { RestError } from \"../restError\";\nimport { logger } from \"../log\";\n\nexport function exponentialRetryPolicy(\n  retryCount?: number,\n  retryInterval?: number,\n  maxRetryInterval?: number\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ExponentialRetryPolicy(\n        nextPolicy,\n        options,\n        retryCount,\n        retryInterval,\n        maxRetryInterval\n      );\n    }\n  };\n}\n\n/**\n * Describes the Retry Mode type. Currently supporting only Exponential.\n */\nexport enum RetryMode {\n  Exponential\n}\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface RetryOptions {\n  /**\n   * The maximum number of retry attempts.  Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 30000\n   * (30 seconds). The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 90000 (90 seconds).\n   */\n  maxRetryDelayInMs?: number;\n\n  /**\n   * Currently supporting only Exponential mode.\n   */\n  mode?: RetryMode;\n}\n\nexport const DefaultRetryOptions: RetryOptions = {\n  maxRetries: DEFAULT_CLIENT_RETRY_COUNT,\n  retryDelayInMs: DEFAULT_CLIENT_RETRY_INTERVAL,\n  maxRetryDelayInMs: DEFAULT_CLIENT_MAX_RETRY_INTERVAL\n};\n\n/**\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @param nextPolicy - The next RequestPolicy in the pipeline chain.\n   * @param options - The options for this RequestPolicy.\n   * @param retryCount - The client retry count.\n   * @param retryInterval - The client retry interval, in milliseconds.\n   * @param minRetryInterval - The minimum retry interval, in milliseconds.\n   * @param maxRetryInterval - The maximum retry interval, in milliseconds.\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryCount?: number,\n    retryInterval?: number,\n    maxRetryInterval?: number\n  ) {\n    super(nextPolicy, options);\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval)\n      ? maxRetryInterval\n      : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy\n      .sendRequest(request.clone())\n      .then((response) => retry(this, request, response))\n      .catch((error) => retry(this, request, error.response, undefined, error));\n  }\n}\n\nasync function retry(\n  policy: ExponentialRetryPolicy,\n  request: WebResourceLike,\n  response?: HttpOperationResponse,\n  retryData?: RetryData,\n  requestError?: RetryError\n): Promise<HttpOperationResponse> {\n  function shouldPolicyRetry(responseParam?: HttpOperationResponse): boolean {\n    const statusCode = responseParam?.status;\n    if (\n      statusCode === undefined ||\n      (statusCode < 500 && statusCode !== 408) ||\n      statusCode === 501 ||\n      statusCode === 505\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  retryData = updateRetryData(\n    {\n      retryInterval: policy.retryInterval,\n      minRetryInterval: 0,\n      maxRetryInterval: policy.maxRetryInterval\n    },\n    retryData,\n    requestError\n  );\n\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy.retryCount, shouldPolicyRetry, retryData, response)) {\n    logger.info(`Retrying request in ${retryData.retryInterval}`);\n    try {\n      await utils.delay(retryData.retryInterval);\n      const res = await policy._nextPolicy.sendRequest(request.clone());\n      return retry(policy, request, res, retryData);\n    } catch (err) {\n      return retry(policy, request, response, retryData, err);\n    }\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err =\n      retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response\n      );\n    throw err;\n  } else {\n    return response;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}