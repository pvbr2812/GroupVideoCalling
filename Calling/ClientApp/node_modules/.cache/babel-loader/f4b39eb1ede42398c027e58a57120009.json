{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _noop from \"lodash/noop\";\nimport _invoke from \"lodash/invoke\";\nimport { accordionTitleBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { getElementType, useTelemetry, useFluentContext, useUnhandledProps, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var accordionTitleClassName = 'ui-accordion__title';\nexport var accordionTitleSlotClassNames = {\n  contentWrapper: accordionTitleClassName + \"__content-wrapper\"\n};\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\n\nexport var AccordionTitle = /*#__PURE__*/function () {\n  var AccordionTitle = function AccordionTitle(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(AccordionTitle.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var contentRef = props.contentRef,\n        children = props.children,\n        content = props.content,\n        indicator = props.indicator,\n        contentWrapper = props.contentWrapper,\n        disabled = props.disabled,\n        accessibility = props.accessibility,\n        canBeCollapsed = props.canBeCollapsed,\n        as = props.as,\n        active = props.active,\n        accordionContentId = props.accordionContentId,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: AccordionTitle.displayName,\n      actionHandlers: {\n        performClick: function performClick(e) {\n          e.preventDefault();\n          e.stopPropagation();\n          handleClick(e);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          hasContent: !!content,\n          canBeCollapsed: canBeCollapsed,\n          as: String(as),\n          active: active,\n          disabled: disabled,\n          accordionContentId: accordionContentId\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(AccordionTitle.displayName, {\n      className: accordionTitleClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          disabled: disabled,\n          content: !!content,\n          active: active\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var handleClick = function handleClick(e) {\n      if (!disabled) {\n        _invoke(props, 'onClick', e, props);\n      }\n    };\n\n    var handleFocus = function handleFocus(e) {\n      e.stopPropagation();\n\n      _invoke(props, 'onFocus', e, props);\n    };\n\n    var handleWrapperOverrides = function handleWrapperOverrides(predefinedProps) {\n      return {\n        onFocus: function onFocus(e) {\n          handleFocus(e);\n\n          _invoke(predefinedProps, 'onFocus', e, props);\n        },\n        onClick: function onClick(e) {\n          handleClick(e);\n\n          _invoke(predefinedProps, 'onClick', e, props);\n        }\n      };\n    };\n\n    var contentWrapperElement = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: contentRef\n    }, Box.create(contentWrapper, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('content', {\n          className: accordionTitleSlotClassNames.contentWrapper,\n          styles: resolvedStyles.contentWrapper\n        });\n      },\n      overrideProps: function overrideProps(predefinedProps) {\n        return Object.assign({\n          children: /*#__PURE__*/React.createElement(React.Fragment, null, Box.create(indicator, {\n            defaultProps: function defaultProps() {\n              return getA11yProps('indicator', {\n                styles: resolvedStyles.indicator\n              });\n            }\n          }), Box.create(content, {\n            defaultProps: function defaultProps() {\n              return {\n                styles: resolvedStyles.content\n              };\n            }\n          }))\n        }, handleWrapperOverrides(predefinedProps));\n      }\n    }));\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps))), childrenExist(children) ? children : contentWrapperElement);\n    setEnd();\n    return element;\n  };\n\n  AccordionTitle.displayName = 'AccordionTitle';\n  AccordionTitle.shorthandConfig = {\n    mappedProp: 'content'\n  };\n  AccordionTitle.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand'\n  }), {\n    accordionContentId: PropTypes.string,\n    active: PropTypes.bool,\n    contentRef: customPropTypes.ref,\n    contentWrapper: customPropTypes.wrapperShorthand,\n    canBeCollapsed: PropTypes.bool,\n    disabled: PropTypes.bool,\n    index: PropTypes.number,\n    onClick: PropTypes.func,\n    indicator: customPropTypes.shorthandAllowingChildren\n  });\n  AccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes);\n  AccordionTitle.defaultProps = {\n    accessibility: accordionTitleBehavior,\n    as: 'dt',\n    contentRef: _noop,\n    indicator: {},\n    contentWrapper: {}\n  };\n  AccordionTitle.create = createShorthandFactory({\n    Component: AccordionTitle,\n    mappedProp: 'content'\n  });\n  return AccordionTitle;\n}();","map":{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["accordionTitleClassName","accordionTitleSlotClassNames","contentWrapper","AccordionTitle","context","useFluentContext","setStart","setEnd","useTelemetry","contentRef","children","content","indicator","disabled","accessibility","canBeCollapsed","as","active","accordionContentId","className","design","styles","variables","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","mapPropsToBehavior","hasContent","String","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleFocus","handleWrapperOverrides","onFocus","onClick","contentWrapperElement","defaultProps","overrideProps","element","forElements","root","childrenExist","mappedProp","PropTypes","customPropTypes","index","shorthandAllowingChildren","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, Accessibility, AccordionTitleBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { ComponentEventHandler, ShorthandValue, FluentComponentStaticProps } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useTelemetry,\n  useFluentContext,\n  useUnhandledProps,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<AccordionTitleBehaviorProps>;\n\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nexport const accordionTitleClassName = 'ui-accordion__title';\nexport const accordionTitleSlotClassNames: AccordionTitleSlotClassNames = {\n  contentWrapper: `${accordionTitleClassName}__content-wrapper`,\n};\n\nexport type AccordionTitleStylesProps = Required<Pick<AccordionTitleProps, 'disabled' | 'active'>> & {\n  content: boolean;\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport const AccordionTitle: ComponentWithAs<'dt', AccordionTitleProps> &\n  FluentComponentStaticProps<AccordionTitleProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(AccordionTitle.displayName, context.telemetry);\n  setStart();\n  const {\n    contentRef,\n    children,\n    content,\n    indicator,\n    contentWrapper,\n    disabled,\n    accessibility,\n    canBeCollapsed,\n    as,\n    active,\n    accordionContentId,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(AccordionTitle.handledProps, props);\n\n  const getA11yProps = useAccessibility<AccordionTitleBehaviorProps>(accessibility, {\n    debugName: AccordionTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasContent: !!content,\n      canBeCollapsed,\n      as: String(as),\n      active,\n      disabled,\n      accordionContentId,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<AccordionTitleStylesProps>(AccordionTitle.displayName, {\n    className: accordionTitleClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      content: !!content,\n      active,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (!disabled) {\n      _.invoke(props, 'onClick', e, props);\n    }\n  };\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, props);\n    },\n  });\n\n  const contentWrapperElement = (\n    <Ref innerRef={contentRef}>\n      {Box.create(contentWrapper, {\n        defaultProps: () =>\n          getA11yProps('content', {\n            className: accordionTitleSlotClassNames.contentWrapper,\n            styles: resolvedStyles.contentWrapper,\n          }),\n        overrideProps: predefinedProps => ({\n          children: (\n            <>\n              {Box.create(indicator, {\n                defaultProps: () =>\n                  getA11yProps('indicator', {\n                    styles: resolvedStyles.indicator,\n                  }),\n              })}\n              {Box.create(content, {\n                defaultProps: () => ({\n                  styles: resolvedStyles.content,\n                }),\n              })}\n            </>\n          ),\n          ...handleWrapperOverrides(predefinedProps),\n        }),\n      })}\n    </Ref>\n  );\n\n  const element = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : contentWrapperElement}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nAccordionTitle.displayName = 'AccordionTitle';\n\nAccordionTitle.shorthandConfig = {\n  mappedProp: 'content',\n};\n\nAccordionTitle.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren,\n};\n\nAccordionTitle.handledProps = Object.keys(AccordionTitle.propTypes) as any;\n\nAccordionTitle.defaultProps = {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _.noop,\n  indicator: {},\n  contentWrapper: {},\n};\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}