{"ast":null,"code":"import _map from \"lodash/map\";\nimport _without from \"lodash/without\";\nimport _includes from \"lodash/includes\";\nimport _isArray from \"lodash/isArray\";\nimport _invoke from \"lodash/invoke\";\nimport { hierarchicalTreeBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { HierarchicalTreeItem } from './HierarchicalTreeItem';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { useTelemetry, useFluentContext, useAutoControlled, useUnhandledProps, getElementType, useAccessibility, useStyles } from '@fluentui/react-bindings';\nexport var hierarchicalTreeClassName = 'ui-hierarchicaltree';\n/**\n * (DEPRECATED) A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\n\nexport var HierarchicalTree = /*#__PURE__*/function () {\n  var HierarchicalTree = function HierarchicalTree(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(HierarchicalTree.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var children = props.children,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        items = props.items,\n        renderItemTitle = props.renderItemTitle,\n        exclusive = props.exclusive;\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultActiveIndex,\n      value: props.activeIndex,\n      initialValue: exclusive ? -1 : []\n    }),\n        activeIndex = _useAutoControlled[0],\n        setActiveIndex = _useAutoControlled[1];\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(HierarchicalTree.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: HierarchicalTree.displayName,\n      actionHandlers: {\n        expandSiblings: function expandSiblings(e) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (exclusive) {\n            return;\n          }\n\n          var activeIndex = items ? items.reduce(function (acc, item, index) {\n            if (item['items']) {\n              return [].concat(acc, [index]);\n            }\n\n            return acc;\n          }, []) : [];\n          trySetActiveIndexAndTriggerEvent(e, activeIndex);\n        }\n      },\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          'aria-labelledby': props['aria-labelledby']\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(HierarchicalTree.displayName, {\n      className: hierarchicalTreeClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var trySetActiveIndexAndTriggerEvent = function trySetActiveIndexAndTriggerEvent(e, activeIndex) {\n      setActiveIndex(activeIndex);\n\n      _invoke(props, 'onActiveIndexChange', e, Object.assign({}, props, {\n        activeIndex: activeIndex\n      }));\n    };\n\n    var getActiveIndexes = function getActiveIndexes() {\n      return _isArray(activeIndex) ? activeIndex : [activeIndex];\n    };\n\n    var computeNewIndex = function computeNewIndex(treeItemProps) {\n      var index = treeItemProps.index,\n          items = treeItemProps.items;\n      var activeIndexes = getActiveIndexes();\n      var exclusive = props.exclusive;\n\n      if (!items) {\n        return activeIndexes;\n      }\n\n      if (exclusive) return index; // check to see if index is in array, and remove it, if not then add it\n\n      return _includes(activeIndexes, index) ? _without(activeIndexes, index) : [].concat(activeIndexes, [index]);\n    };\n\n    var handleTreeItemOverrides = function handleTreeItemOverrides(predefinedProps) {\n      return {\n        onTitleClick: function onTitleClick(e, treeItemProps) {\n          trySetActiveIndexAndTriggerEvent(e, computeNewIndex(treeItemProps));\n\n          _invoke(predefinedProps, 'onTitleClick', e, treeItemProps);\n        }\n      };\n    };\n\n    var renderContent = function renderContent() {\n      var activeIndexes = getActiveIndexes();\n      return _map(items, function (item, index) {\n        return HierarchicalTreeItem.create(item, {\n          defaultProps: function defaultProps() {\n            return {\n              index: index,\n              exclusive: exclusive,\n              renderItemTitle: renderItemTitle,\n              open: exclusive ? index === activeIndex : _includes(activeIndexes, index)\n            };\n          },\n          overrideProps: handleTreeItemOverrides\n        });\n      });\n    };\n\n    var element = /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), unhandledProps)), childrenExist(children) ? children : renderContent());\n    setEnd();\n    return element;\n  };\n\n  HierarchicalTree.displayName = 'HierarchicalTree';\n  HierarchicalTree.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n    defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n    exclusive: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    renderItemTitle: PropTypes.func,\n    onActiveIndexChange: PropTypes.func\n  });\n  HierarchicalTree.defaultProps = {\n    as: 'ul',\n    accessibility: hierarchicalTreeBehavior\n  };\n  HierarchicalTree.handledProps = Object.keys(HierarchicalTree.propTypes);\n  HierarchicalTree.create = createShorthandFactory({\n    Component: HierarchicalTree,\n    mappedArrayProp: 'items'\n  });\n  return HierarchicalTree;\n}();","map":{"version":3,"sources":["components/HierarchicalTree/HierarchicalTree.tsx"],"names":["hierarchicalTreeClassName","HierarchicalTree","context","useFluentContext","setStart","setEnd","useTelemetry","children","className","design","styles","variables","items","renderItemTitle","exclusive","props","activeIndex","setActiveIndex","useAutoControlled","defaultValue","value","initialValue","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","expandSiblings","e","item","trySetActiveIndexAndTriggerEvent","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToInlineStyles","getActiveIndexes","computeNewIndex","index","treeItemProps","activeIndexes","handleTreeItemOverrides","onTitleClick","renderContent","defaultProps","open","overrideProps","element","root","forElements","childrenExist","content","customPropTypes","PropTypes","defaultActiveIndex","onActiveIndexChange","func","as","accessibility","hierarchicalTreeBehavior","Object","createShorthandFactory","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  hierarchicalTreeBehavior,\n  HierarchicalTreeBehaviorBehaviorProps,\n} from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { HierarchicalTreeItem, HierarchicalTreeItemProps } from './HierarchicalTreeItem';\nimport { HierarchicalTreeTitleProps } from './HierarchicalTreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ShorthandValue,\n  ShorthandRenderFunction,\n  ShorthandCollection,\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n} from '../../types';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useFluentContext,\n  useAutoControlled,\n  useUnhandledProps,\n  getElementType,\n  useAccessibility,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface HierarchicalTreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active subtree. */\n  activeIndex?: number[] | number;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<HierarchicalTreeBehaviorBehaviorProps>;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one subtree to be open at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ShorthandCollection<HierarchicalTreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<HierarchicalTreeTitleProps>;\n\n  /** Called when activeIndex changes.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveIndexChange?: ComponentEventHandler<HierarchicalTreeProps>;\n}\n\nexport interface HierarchicalTreeState {\n  activeIndex: number[] | number;\n}\n\nexport const hierarchicalTreeClassName = 'ui-hierarchicaltree';\n\nexport type HierarchicalTreeStylesProps = never;\n\n/**\n * (DEPRECATED) A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport const HierarchicalTree: ComponentWithAs<'ul', HierarchicalTreeProps> &\n  FluentComponentStaticProps<HierarchicalTreeProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(HierarchicalTree.displayName, context.telemetry);\n  setStart();\n\n  const { children, className, design, styles, variables, items, renderItemTitle, exclusive } = props;\n\n  const [activeIndex, setActiveIndex] = useAutoControlled({\n    defaultValue: props.defaultActiveIndex,\n    value: props.activeIndex,\n    initialValue: exclusive ? -1 : [],\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(HierarchicalTree.handledProps, props);\n\n  const getA11yProps = useAccessibility<HierarchicalTreeBehaviorBehaviorProps>(props.accessibility, {\n    debugName: HierarchicalTree.displayName,\n    actionHandlers: {\n      expandSiblings: e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (exclusive) {\n          return;\n        }\n\n        const activeIndex = items\n          ? items.reduce((acc: HierarchicalTreeItemProps[], item, index) => {\n              if (item['items']) {\n                return [...acc, index];\n              }\n              return acc;\n            }, [])\n          : [];\n        trySetActiveIndexAndTriggerEvent(e, activeIndex);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      'aria-labelledby': props['aria-labelledby'],\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<HierarchicalTreeStylesProps>(HierarchicalTree.displayName, {\n    className: hierarchicalTreeClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const trySetActiveIndexAndTriggerEvent = (e, activeIndex) => {\n    setActiveIndex(activeIndex);\n    _.invoke(props, 'onActiveIndexChange', e, { ...props, activeIndex });\n  };\n\n  const getActiveIndexes = (): number[] => {\n    return _.isArray(activeIndex) ? activeIndex : [activeIndex];\n  };\n\n  const computeNewIndex = (treeItemProps: HierarchicalTreeItemProps) => {\n    const { index, items } = treeItemProps;\n    const activeIndexes = getActiveIndexes();\n    const { exclusive } = props;\n    if (!items) {\n      return activeIndexes;\n    }\n\n    if (exclusive) return index;\n\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndexes, index) ? _.without(activeIndexes, index) : [...activeIndexes, index];\n  };\n\n  const handleTreeItemOverrides = (predefinedProps: HierarchicalTreeItemProps) => ({\n    onTitleClick: (e: React.SyntheticEvent, treeItemProps: HierarchicalTreeItemProps) => {\n      trySetActiveIndexAndTriggerEvent(e, computeNewIndex(treeItemProps));\n      _.invoke(predefinedProps, 'onTitleClick', e, treeItemProps);\n    },\n  });\n\n  const renderContent = () => {\n    const activeIndexes = getActiveIndexes();\n\n    return _.map(items, (item: ShorthandValue<HierarchicalTreeItemProps>, index: number) =>\n      HierarchicalTreeItem.create(item, {\n        defaultProps: () => ({\n          index,\n          exclusive,\n          renderItemTitle,\n          open: exclusive ? index === activeIndex : _.includes(activeIndexes, index),\n        }),\n        overrideProps: handleTreeItemOverrides,\n      }),\n    );\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n\n  setEnd();\n  return element;\n};\n\nHierarchicalTree.displayName = 'HierarchicalTree';\n\nHierarchicalTree.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  activeIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  defaultActiveIndex: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  ]),\n  exclusive: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  renderItemTitle: PropTypes.func,\n  onActiveIndexChange: PropTypes.func,\n};\n\nHierarchicalTree.defaultProps = {\n  as: 'ul',\n  accessibility: hierarchicalTreeBehavior,\n};\n\nHierarchicalTree.handledProps = Object.keys(HierarchicalTree.propTypes) as any;\n\nHierarchicalTree.create = createShorthandFactory({\n  Component: HierarchicalTree,\n  mappedArrayProp: 'items',\n});\n"]},"metadata":{},"sourceType":"module"}