{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Teams_Clone\\\\Group_Call\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\Header.tsx\";\n// Â© Microsoft Corporation. All rights reserved.\nimport React, { useEffect } from 'react';\nimport { Separator, Pivot, PivotItem, Stack } from '@fluentui/react';\nimport { LocalVideoStream } from '@azure/communication-calling';\nimport MediaControls from './MediaControls';\nimport { CommandPanelTypes } from './CommandPanel';\nimport { UserFriendsIcon, SettingsIcon } from '@fluentui/react-icons-northstar';\nimport { Constants } from 'core/constants';\nimport { headerContainer, pivotItemStyles, separatorContainerStyle, separatorStyles, pivotItemStyle, headerCenteredContainer } from './styles/Header.styles';\nexport default (props => {\n  var _props$screenShareStr;\n\n  const togglePeople = (selectedPane, setSelectedPane) => {\n    return selectedPane !== CommandPanelTypes.People ? setSelectedPane(CommandPanelTypes.People) : setSelectedPane(CommandPanelTypes.None);\n  };\n\n  const toggleOptions = (selectedPane, setSelectedPane) => {\n    return selectedPane !== CommandPanelTypes.Settings ? setSelectedPane(CommandPanelTypes.Settings) : setSelectedPane(CommandPanelTypes.None);\n  };\n\n  const handleLocalVideoOnOff = async () => {\n    if (props.localVideoStream) {\n      await props.call.stopVideo(props.localVideoStream);\n      props.setLocalVideoStream(undefined);\n    } else {\n      if (props.videoDeviceInfo) {\n        const localVideoStream = new LocalVideoStream(props.videoDeviceInfo);\n        props.setLocalVideoStream(localVideoStream);\n        await props.call.startVideo(localVideoStream);\n      }\n    }\n  };\n\n  const handleMuteOnOff = () => {\n    props.setMic(!props.mic);\n  };\n\n  const handleScreenSharingOnOff = () => {\n    props.setScreenShare(!props.shareScreen);\n  };\n\n  useEffect(() => {\n    if (props.call && props.call.localVideoStreams.length === 0 && props.localVideoStream) {\n      props.call.startVideo(props.localVideoStream);\n    }\n  }, [props.call, props.localVideoStream]);\n  return /*#__PURE__*/React.createElement(Stack, {\n    id: \"header\",\n    className: props.screenWidth > Constants.MINI_HEADER_WINDOW_WIDTH ? headerContainer : headerCenteredContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Pivot, {\n    onKeyDownCapture: e => {\n      if (e.target.id === CommandPanelTypes.People && e.keyCode === 39) e.preventDefault();\n    },\n    getTabId: itemKey => itemKey,\n    onLinkClick: item => {\n      if (!item) return;\n      if (item.props.itemKey === CommandPanelTypes.Settings) toggleOptions(props.selectedPane, props.setSelectedPane);\n      if (item.props.itemKey === CommandPanelTypes.People) togglePeople(props.selectedPane, props.setSelectedPane);\n    },\n    styles: pivotItemStyles,\n    initialSelectedKey: CommandPanelTypes.None,\n    selectedKey: props.selectedPane,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PivotItem, {\n    itemKey: CommandPanelTypes.Settings,\n    onRenderItemLink: () => /*#__PURE__*/React.createElement(SettingsIcon, {\n      outline: props.selectedPane === CommandPanelTypes.Settings ? false : true,\n      size: \"medium\",\n      className: pivotItemStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PivotItem, {\n    itemKey: CommandPanelTypes.People,\n    onRenderItemLink: () => /*#__PURE__*/React.createElement(UserFriendsIcon, {\n      outline: props.selectedPane === CommandPanelTypes.People ? false : true,\n      size: \"medium\",\n      className: pivotItemStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PivotItem, {\n    itemKey: CommandPanelTypes.None,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })), props.screenWidth > Constants.MINI_HEADER_WINDOW_WIDTH && /*#__PURE__*/React.createElement(\"div\", {\n    className: separatorContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Separator, {\n    styles: separatorStyles,\n    vertical: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(MediaControls, {\n    micActive: props.mic,\n    onMicChange: handleMuteOnOff,\n    cameraActive: props.localVideoStream !== undefined,\n    onCameraChange: handleLocalVideoOnOff,\n    screenShareActive: props.shareScreen,\n    activeScreenShareStream: (_props$screenShareStr = props.screenShareStreams[0]) !== null && _props$screenShareStr !== void 0 ? _props$screenShareStr : undefined,\n    onScreenShareChange: handleScreenSharingOnOff,\n    onEndCallClick: () => {\n      if (props.localVideo) handleLocalVideoOnOff();\n      props.endCall();\n    },\n    cameraPermission: props.cameraPermission,\n    microphonePermission: props.microphonePermission,\n    localVideoRendererIsBusy: props.localVideoRendererIsBusy,\n    compressedMode: props.screenWidth <= Constants.MINI_HEADER_WINDOW_WIDTH,\n    isLocalScreenShareSupportedInBrowser: props.isLocalScreenShareSupportedInBrowser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/src/components/Header.tsx"],"names":["React","useEffect","Separator","Pivot","PivotItem","Stack","LocalVideoStream","MediaControls","CommandPanelTypes","UserFriendsIcon","SettingsIcon","Constants","headerContainer","pivotItemStyles","separatorContainerStyle","separatorStyles","pivotItemStyle","headerCenteredContainer","props","togglePeople","selectedPane","setSelectedPane","People","None","toggleOptions","Settings","handleLocalVideoOnOff","localVideoStream","call","stopVideo","setLocalVideoStream","undefined","videoDeviceInfo","startVideo","handleMuteOnOff","setMic","mic","handleScreenSharingOnOff","setScreenShare","shareScreen","localVideoStreams","length","screenWidth","MINI_HEADER_WINDOW_WIDTH","e","target","id","keyCode","preventDefault","itemKey","item","screenShareStreams","localVideo","endCall","cameraPermission","microphonePermission","localVideoRendererIsBusy","isLocalScreenShareSupportedInBrowser"],"mappings":"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","sourcesContent":["// Â© Microsoft Corporation. All rights reserved.\r\nimport React, { useEffect } from 'react';\r\nimport { Separator, Pivot, PivotItem, Stack } from '@fluentui/react';\r\nimport { Call, LocalVideoStream, VideoDeviceInfo } from '@azure/communication-calling';\r\nimport MediaControls from './MediaControls';\r\nimport { CommandPanelTypes } from './CommandPanel';\r\nimport { UserFriendsIcon, SettingsIcon } from '@fluentui/react-icons-northstar';\r\nimport { Constants } from 'core/constants';\r\nimport {\r\n  headerContainer,\r\n  pivotItemStyles,\r\n  separatorContainerStyle,\r\n  separatorStyles,\r\n  pivotItemStyle,\r\n  headerCenteredContainer\r\n} from './styles/Header.styles';\r\nimport { ParticipantStream } from 'core/reducers';\r\n\r\nexport interface HeaderProps {\r\n  selectedPane: CommandPanelTypes;\r\n  setSelectedPane: any;\r\n  endCallHandler(): void;\r\n  actionable: boolean;\r\n  localVideo: boolean;\r\n  mic: boolean;\r\n  shareScreen: boolean;\r\n  call: Call;\r\n  endCall(): void;\r\n  screenShareStreams: ParticipantStream[];\r\n  activeScreenShareStream: ParticipantStream | undefined;\r\n  localVideoRendererIsBusy: boolean;\r\n  cameraPermission: string;\r\n  microphonePermission: string;\r\n  screenWidth: number;\r\n  setMic(mic: boolean): void;\r\n  setLocalVideoStream(localVideoStream: LocalVideoStream | undefined): void;\r\n  setScreenShare(screenShare: boolean): void;\r\n  isLocalScreenShareSupportedInBrowser(): boolean;\r\n  localVideoStream: LocalVideoStream | undefined;\r\n  videoDeviceInfo: VideoDeviceInfo | undefined;\r\n}\r\n\r\nexport default (props: HeaderProps): JSX.Element => {\r\n  const togglePeople = (selectedPane: string, setSelectedPane: (pane: string) => void): void => {\r\n    return selectedPane !== CommandPanelTypes.People\r\n      ? setSelectedPane(CommandPanelTypes.People)\r\n      : setSelectedPane(CommandPanelTypes.None);\r\n  };\r\n\r\n  const toggleOptions = (selectedPane: string, setSelectedPane: (pane: string) => void): void => {\r\n    return selectedPane !== CommandPanelTypes.Settings\r\n      ? setSelectedPane(CommandPanelTypes.Settings)\r\n      : setSelectedPane(CommandPanelTypes.None);\r\n  };\r\n\r\n  const handleLocalVideoOnOff = async (): Promise<void> => {\r\n    if (props.localVideoStream) {\r\n      await props.call.stopVideo(props.localVideoStream);\r\n      props.setLocalVideoStream(undefined);\r\n    } else {\r\n      if (props.videoDeviceInfo) {\r\n        const localVideoStream = new LocalVideoStream(props.videoDeviceInfo);\r\n        props.setLocalVideoStream(localVideoStream);\r\n        await props.call.startVideo(localVideoStream);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMuteOnOff = (): void => {\r\n    props.setMic(!props.mic);\r\n  };\r\n\r\n  const handleScreenSharingOnOff = (): void => {\r\n    props.setScreenShare(!props.shareScreen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.call && props.call.localVideoStreams.length === 0 && props.localVideoStream) {\r\n      props.call.startVideo(props.localVideoStream);\r\n    }\r\n  }, [props.call, props.localVideoStream]);\r\n\r\n  return (\r\n    <Stack\r\n      id=\"header\"\r\n      className={props.screenWidth > Constants.MINI_HEADER_WINDOW_WIDTH ? headerContainer : headerCenteredContainer}\r\n    >\r\n      <Pivot\r\n        onKeyDownCapture={(e): void => {\r\n          if ((e.target as HTMLElement).id === CommandPanelTypes.People && e.keyCode === 39) e.preventDefault();\r\n        }}\r\n        getTabId={(itemKey: string): string => itemKey}\r\n        onLinkClick={(item): void => {\r\n          if (!item) return;\r\n          if (item.props.itemKey === CommandPanelTypes.Settings)\r\n            toggleOptions(props.selectedPane, props.setSelectedPane);\r\n          if (item.props.itemKey === CommandPanelTypes.People) togglePeople(props.selectedPane, props.setSelectedPane);\r\n        }}\r\n        styles={pivotItemStyles}\r\n        initialSelectedKey={CommandPanelTypes.None}\r\n        selectedKey={props.selectedPane}\r\n      >\r\n        <PivotItem\r\n          itemKey={CommandPanelTypes.Settings}\r\n          onRenderItemLink={(): JSX.Element => (\r\n            <SettingsIcon\r\n              outline={props.selectedPane === CommandPanelTypes.Settings ? false : true}\r\n              size=\"medium\"\r\n              className={pivotItemStyle}\r\n            />\r\n          )}\r\n        />\r\n        <PivotItem\r\n          itemKey={CommandPanelTypes.People}\r\n          onRenderItemLink={(): JSX.Element => (\r\n            <UserFriendsIcon\r\n              outline={props.selectedPane === CommandPanelTypes.People ? false : true}\r\n              size=\"medium\"\r\n              className={pivotItemStyle}\r\n            />\r\n          )}\r\n        />\r\n        <PivotItem itemKey={CommandPanelTypes.None} />\r\n      </Pivot>\r\n      {props.screenWidth > Constants.MINI_HEADER_WINDOW_WIDTH && (\r\n        <div className={separatorContainerStyle}>\r\n          <Separator styles={separatorStyles} vertical={true} />\r\n        </div>\r\n      )}\r\n      <MediaControls\r\n        micActive={props.mic}\r\n        onMicChange={handleMuteOnOff}\r\n        cameraActive={props.localVideoStream !== undefined}\r\n        onCameraChange={handleLocalVideoOnOff}\r\n        screenShareActive={props.shareScreen}\r\n        activeScreenShareStream={props.screenShareStreams[0] ?? undefined}\r\n        onScreenShareChange={handleScreenSharingOnOff}\r\n        onEndCallClick={(): void => {\r\n          if (props.localVideo) handleLocalVideoOnOff();\r\n          props.endCall();\r\n        }}\r\n        cameraPermission={props.cameraPermission}\r\n        microphonePermission={props.microphonePermission}\r\n        localVideoRendererIsBusy={props.localVideoRendererIsBusy}\r\n        compressedMode={props.screenWidth <= Constants.MINI_HEADER_WINDOW_WIDTH}\r\n        isLocalScreenShareSupportedInBrowser={props.isLocalScreenShareSupportedInBrowser}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}