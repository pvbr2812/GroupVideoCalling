{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { wasComposedPreviously } from './wasComposedPreviously';\nimport { mergeComposeOptions } from './mergeComposeOptions';\n\nfunction compose(input, inputOptions) {\n  if (inputOptions === void 0) {\n    inputOptions = {};\n  }\n\n  var composeOptions = mergeComposeOptions(input, inputOptions, wasComposedPreviously(input) ? input.fluentComposeConfig : undefined);\n  var Component = React.forwardRef(function (props, ref) {\n    return composeOptions.render(props, ref, __assign(__assign({}, composeOptions), {\n      state: composeOptions.state(props, ref, composeOptions),\n      slots: __assign(__assign({}, composeOptions.slots), {\n        __self: Component\n      })\n    }));\n  });\n  Component.displayName = composeOptions.displayName;\n\n  if (input.defaultProps) {\n    Component.defaultProps = input.defaultProps;\n  }\n\n  Component.fluentComposeConfig = composeOptions;\n  return Component;\n}\n\nexport default compose;","map":{"version":3,"sources":["compose.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAGA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,mBAAT,QAAoC,uBAApC;;AAEA,SAAS,OAAT,CAOE,KAPF,EAQE,YARF,EAQqG;AAAnG,MAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,EAAA;AAAmG;;AAEnG,MAAM,cAAc,GAAG,mBAAmB,CACxC,KADwC,EAEvC,YAFuC,EAGxC,qBAAqB,CAAC,KAAD,CAArB,GAA+B,KAAK,CAAC,mBAArC,GAA2D,SAHnB,CAA1C;AAMA,MAAM,SAAS,GAAI,KAAK,CAAC,UAAN,CACjB,UAAC,KAAD,EAAQ,GAAR,EAAW;AACT,WAAO,cAAc,CAAC,MAAf,CAAsB,KAAtB,EAA6B,GAA7B,EAA6D,QAAA,CAAA,QAAA,CAAA,EAAA,EAC/D,cAD+D,CAAA,EACjD;AACjB,MAAA,KAAK,EAAE,cAAc,CAAC,KAAf,CAAqB,KAArB,EAA4B,GAA5B,EAAiC,cAAjC,CADU;AAEjB,MAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,cAAc,CAAC,KADf,CAAA,EACoB;AACvB,QAAA,MAAM,EAAE;AADe,OADpB;AAFY,KADiD,CAA7D,CAAP;AAQD,GAVgB,CAAnB;AAaA,EAAA,SAAS,CAAC,WAAV,GAAwB,cAAc,CAAC,WAAvC;;AAEA,MAAK,KAA+B,CAAC,YAArC,EAAmD;AACjD,IAAA,SAAS,CAAC,YAAV,GAA0B,KAA+B,CAAC,YAA1D;AACD;;AAEC,EAAA,SAA2C,CAAC,mBAA5C,GAAkE,cAAlE;AAEF,SAAO,SAAP;AACD;;AAED,eAAe,OAAf","sourcesContent":["import * as React from 'react';\n\nimport { ComponentWithAs, ComposedComponent, ComposeOptions, Input, InputComposeComponent } from './types';\nimport { wasComposedPreviously } from './wasComposedPreviously';\nimport { mergeComposeOptions } from './mergeComposeOptions';\n\nfunction compose<\n  TElementType extends keyof JSX.IntrinsicElements,\n  TInputProps,\n  TInputStylesProps,\n  TParentProps,\n  TParentStylesProps\n>(\n  input: Input<TElementType, TInputProps>,\n  inputOptions: ComposeOptions<TInputProps, TInputStylesProps, TParentProps, TParentStylesProps> = {},\n) {\n  const composeOptions = mergeComposeOptions(\n    input as Input,\n    (inputOptions as unknown) as ComposeOptions,\n    wasComposedPreviously(input) ? input.fluentComposeConfig : undefined,\n  );\n\n  const Component = (React.forwardRef<HTMLElement, TInputProps & TParentProps & { as?: React.ElementType }>(\n    (props, ref) => {\n      return composeOptions.render(props, ref as React.Ref<HTMLDivElement>, {\n        ...composeOptions,\n        state: composeOptions.state(props, ref, composeOptions),\n        slots: {\n          ...composeOptions.slots,\n          __self: Component,\n        },\n      });\n    },\n  ) as unknown) as ComponentWithAs<TElementType, TInputProps & TParentProps>;\n\n  Component.displayName = composeOptions.displayName;\n\n  if ((input as InputComposeComponent).defaultProps) {\n    Component.defaultProps = (input as InputComposeComponent).defaultProps;\n  }\n\n  ((Component as unknown) as ComposedComponent).fluentComposeConfig = composeOptions;\n\n  return Component;\n}\n\nexport default compose;\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}