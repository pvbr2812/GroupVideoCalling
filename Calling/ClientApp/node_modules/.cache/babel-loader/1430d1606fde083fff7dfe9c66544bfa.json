{"ast":null,"code":"import { FocusZoneDirection } from '../../focusZone/types';\nimport { menuItemBehavior } from './menuItemBehavior';\n/**\n * @description\n * The 'menu' role is used to identify an element that creates a list of common actions or functions that a user can invoke.\n *\n * @specification\n * Adds role='menu'.\n * Provides arrow key navigation in vertical direction.\n * Keyboard navigation is circular.\n * Component will get focus when mounted.\n */\n\nexport var submenuBehavior = function submenuBehavior() {\n  return {\n    attributes: {\n      root: {\n        role: 'menu'\n      }\n    },\n    focusZone: {\n      props: {\n        isCircularNavigation: true,\n        shouldFocusOnMount: true,\n        direction: FocusZoneDirection.vertical\n      }\n    },\n    childBehaviors: {\n      item: menuItemBehavior\n    }\n  };\n};","map":{"version":3,"sources":["behaviors/Menu/submenuBehavior.ts"],"names":["submenuBehavior","attributes","root","role","focusZone","props","isCircularNavigation","shouldFocusOnMount","direction","FocusZoneDirection","vertical","childBehaviors","item","menuItemBehavior"],"mappings":"AACA,SAAA,kBAAA,QAAA,uBAAA;AACA,SAAA,gBAAA,QAAA,oBAAA;AAEA;;;;;;;;;;;AAUA,OAAO,IAAMA,eAA8B,GAAG,SAAjCA,eAAiC,GAAA;AAAA,SAAO;AACnDC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAE;AADF;AADI,KADuC;AAMnDC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AACLC,QAAAA,oBAAoB,EADf,IAAA;AAELC,QAAAA,kBAAkB,EAFb,IAAA;AAGLC,QAAAA,SAAS,EAAEC,kBAAkB,CAACC;AAHzB;AADE,KANwC;AAanDC,IAAAA,cAAc,EAAE;AAAEC,MAAAA,IAAI,EAAEC;AAAR;AAbmC,GAAP;AAAvC,CAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { menuItemBehavior } from './menuItemBehavior';\n\n/**\n * @description\n * The 'menu' role is used to identify an element that creates a list of common actions or functions that a user can invoke.\n *\n * @specification\n * Adds role='menu'.\n * Provides arrow key navigation in vertical direction.\n * Keyboard navigation is circular.\n * Component will get focus when mounted.\n */\nexport const submenuBehavior: Accessibility = () => ({\n  attributes: {\n    root: {\n      role: 'menu',\n    },\n  },\n  focusZone: {\n    props: {\n      isCircularNavigation: true,\n      shouldFocusOnMount: true,\n      direction: FocusZoneDirection.vertical,\n    },\n  },\n  childBehaviors: { item: menuItemBehavior },\n});\n"]},"metadata":{},"sourceType":"module"}