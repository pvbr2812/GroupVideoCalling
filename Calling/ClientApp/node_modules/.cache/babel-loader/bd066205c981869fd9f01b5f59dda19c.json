{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\n\nvar AbortError =\n/** @class */\nfunction (_super) {\n  __extends(AbortError, _super);\n\n  function AbortError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = \"AbortError\";\n    return _this;\n  }\n\n  return AbortError;\n}(Error);\n\nexport { AbortError };\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\n\nvar AbortController =\n/** @class */\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  function AbortController(parentSignals) {\n    var _this = this;\n\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    } // coerce parentSignals into an array\n\n\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n\n    for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {\n      var parentSignal = parentSignals_1[_i]; // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", function () {\n          _this.abort();\n        });\n      }\n    }\n  }\n\n  Object.defineProperty(AbortController.prototype, \"signal\", {\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this._signal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n\n  AbortController.prototype.abort = function () {\n    abortSignal(this._signal);\n  };\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n\n\n  AbortController.timeout = function (ms) {\n    var signal = new AbortSignal();\n    var timer = setTimeout(abortSignal, ms, signal); // Prevent the active Timer from keeping the Node.js event loop active.\n\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n\n    return signal;\n  };\n\n  return AbortController;\n}();\n\nexport { AbortController };","map":{"version":3,"sources":["../../src/AbortController.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAAS,WAAT,EAAsB,WAAtB,QAA0D,eAA1D;AAEA;;;;;;;;;;;;;;;;;AAiBG;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAC9B,WAAA,UAAA,CAAY,OAAZ,EAA4B;AAA5B,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IADhB;;AAEE,IAAA,KAAI,CAAC,IAAL,GAAY,YAAZ;;AACD;;AACH,SAAA,UAAA;AAAC,CALD,CAAgC,KAAhC,CAAA;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCG;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;AAWE;AACA,WAAA,eAAA,CAAY,aAAZ,EAA+B;AAA/B,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,OAAL,GAAe,IAAI,WAAJ,EAAf;;AAEA,QAAI,CAAC,aAAL,EAAoB;AAClB;AACD,KAL4B,CAM7B;;;AACA,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,aAAd,CAAL,EAAmC;AACjC;AACA,MAAA,aAAa,GAAG,SAAhB;AACD;;AACD,SAA2B,IAAA,EAAA,GAAA,CAAA,EAAA,eAAA,GAAA,aAA3B,EAA2B,EAAA,GAAA,eAAA,CAAA,MAA3B,EAA2B,EAAA,EAA3B,EAA0C;AAArC,UAAM,YAAY,GAAA,eAAA,CAAA,EAAA,CAAlB,CAAqC,CACxC;AACA;;AACA,UAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB,aAAK,KAAL;AACD,OAFD,MAEO;AACL;AACA,QAAA,YAAY,CAAC,gBAAb,CAA8B,OAA9B,EAAuC,YAAA;AACrC,UAAA,KAAI,CAAC,KAAL;AACD,SAFD;AAGD;AACF;AACF;;AAQD,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AANjB;;;;;AAKG;SACH,YAAA;AACE,aAAO,KAAK,OAAZ;AACD,KAFgB;qBAAA;;AAAA,GAAjB;AAIA;;;AAGG;;AACH,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,IAAA,WAAW,CAAC,KAAK,OAAN,CAAX;AACD,GAFD;AAIA;;;AAGG;;;AACW,EAAA,eAAA,CAAA,OAAA,GAAd,UAAsB,EAAtB,EAAgC;AAC9B,QAAM,MAAM,GAAG,IAAI,WAAJ,EAAf;AACA,QAAM,KAAK,GAAG,UAAU,CAAC,WAAD,EAAc,EAAd,EAAkB,MAAlB,CAAxB,CAF8B,CAG9B;;AACA,QAAI,OAAO,KAAK,CAAC,KAAb,KAAuB,UAA3B,EAAuC;AACrC,MAAA,KAAK,CAAC,KAAN;AACD;;AACD,WAAO,MAAP;AACD,GARa;;AAShB,SAAA,eAAA;AAAC,CApED,EAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, abortSignal, AbortSignalLike } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}