{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport { buttonBehavior } from '@fluentui/accessibility';\nimport { compose, getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, createShorthand } from '../../utils';\nimport { Box } from '../Box/Box';\nimport { Loader } from '../Loader/Loader';\nimport { ButtonGroup } from './ButtonGroup';\nimport { ButtonContent } from './ButtonContent';\nexport var buttonClassName = 'ui-button';\n/**\n * A Button enables users to take an action, such as submitting a form, opening a dialog, etc.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport var Button = /*#__PURE__*/function () {\n  var Button = compose(function (props, ref, composeOptions) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(composeOptions.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var accessibility = props.accessibility,\n        active = props.active,\n        as = props.as,\n        children = props.children,\n        content = props.content,\n        icon = props.icon,\n        loader = props.loader,\n        disabled = props.disabled,\n        iconPosition = props.iconPosition,\n        loading = props.loading,\n        text = props.text,\n        primary = props.primary,\n        inverted = props.inverted,\n        size = props.size,\n        iconOnly = props.iconOnly,\n        fluid = props.fluid,\n        circular = props.circular,\n        className = props.className,\n        styles = props.styles,\n        variables = props.variables,\n        design = props.design;\n    var hasChildren = childrenExist(children);\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          as: as,\n          active: active,\n          disabled: disabled,\n          loading: loading\n        };\n      },\n      actionHandlers: {\n        performClick: function performClick(event) {\n          event.preventDefault();\n          handleClick(event);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          text: text,\n          primary: primary,\n          disabled: disabled,\n          circular: circular,\n          size: size,\n          loading: loading,\n          inverted: inverted,\n          iconOnly: iconOnly,\n          iconPosition: iconPosition,\n          fluid: fluid,\n          hasContent: !!content\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl,\n      composeOptions: composeOptions,\n      unstable_props: props\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var slotProps = composeOptions.resolveSlotProps(props);\n    var unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    var ElementType = getElementType(props);\n\n    var renderIcon = function renderIcon() {\n      return createShorthand(composeOptions.slots.icon, icon, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('icon', Object.assign({\n            styles: resolvedStyles.icon\n          }, slotProps.icon));\n        }\n      });\n    };\n\n    var renderLoader = function renderLoader() {\n      return createShorthand(composeOptions.slots.loader, loader || {}, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('loader', Object.assign({\n            styles: resolvedStyles.loader\n          }, slotProps.loader));\n        }\n      });\n    };\n\n    var renderContent = function renderContent() {\n      return createShorthand(composeOptions.slots.content, content, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('content', slotProps.content);\n        }\n      });\n    };\n\n    var handleClick = function handleClick(e) {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(props, 'onClick', e, props);\n    };\n\n    var handleFocus = function handleFocus(e) {\n      _invoke(props, 'onFocus', e, props);\n    };\n\n    var result = /*#__PURE__*/React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n      forElements: [children]\n    }), getA11yProps('root', Object.assign({\n      onClick: handleClick,\n      disabled: disabled,\n      className: classes.root,\n      onFocus: handleFocus,\n      ref: ref\n    }, unhandledProps))), hasChildren ? children : /*#__PURE__*/React.createElement(React.Fragment, null, loading && renderLoader(), iconPosition !== 'after' && renderIcon(), renderContent(), iconPosition === 'after' && renderIcon()));\n    setEnd();\n    return result;\n  }, {\n    className: buttonClassName,\n    displayName: 'Button',\n    slots: {\n      content: ButtonContent,\n      icon: Box,\n      loader: Loader\n    },\n    slotProps: function slotProps(props) {\n      return {\n        content: {\n          size: props.size\n        },\n        loader: {\n          role: undefined\n        }\n      };\n    },\n    shorthandConfig: {\n      mappedProp: 'content'\n    },\n    handledProps: ['accessibility', 'as', 'children', 'circular', 'className', 'content', 'design', 'disabled', 'fluid', 'icon', 'iconOnly', 'iconPosition', 'inverted', 'loader', 'loading', 'onClick', 'onFocus', 'primary', 'text', 'secondary', 'size', 'styles', 'variables']\n  });\n  Button.defaultProps = {\n    as: 'button',\n    accessibility: buttonBehavior,\n    size: 'medium'\n  };\n  Button.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: 'shorthand'\n  }), {\n    circular: PropTypes.bool,\n    disabled: PropTypes.bool,\n    fluid: PropTypes.bool,\n    icon: customPropTypes.shorthandAllowingChildren,\n    iconOnly: PropTypes.bool,\n    iconPosition: PropTypes.oneOf(['before', 'after']),\n    inverted: PropTypes.bool,\n    loader: customPropTypes.itemShorthandWithoutJSX,\n    loading: PropTypes.bool,\n    onClick: PropTypes.func,\n    onFocus: PropTypes.func,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    text: PropTypes.bool,\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    size: customPropTypes.size\n  });\n  Button.Group = ButtonGroup;\n  Button.Content = ButtonContent;\n  Button.create = createShorthandFactory({\n    Component: Button,\n    mappedProp: 'content'\n  });\n  return Button;\n}();","map":{"version":3,"sources":["components/Button/Button.tsx"],"names":["buttonClassName","Button","compose","context","useFluentContext","setStart","setEnd","useTelemetry","composeOptions","accessibility","active","as","children","content","icon","loader","disabled","iconPosition","loading","text","primary","inverted","size","iconOnly","fluid","circular","className","styles","variables","design","props","hasChildren","childrenExist","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","event","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","mapPropsToInlineStyles","unstable_props","slotProps","unhandledProps","useUnhandledProps","ElementType","getElementType","renderIcon","createShorthand","defaultProps","renderLoader","renderContent","e","handleFocus","result","forElements","onClick","onFocus","ref","displayName","slots","Loader","role","undefined","shorthandConfig","mappedProp","handledProps","PropTypes","customPropTypes","secondary","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior } from '@fluentui/accessibility';\nimport {\n  compose,\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n  ShorthandConfig,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  SizeValue,\n  ShorthandFactory,\n  createShorthand,\n} from '../../utils';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Loader, LoaderProps } from '../Loader/Loader';\nimport { ComponentEventHandler, ShorthandValue } from '../../types';\nimport { ButtonGroup } from './ButtonGroup';\nimport { ButtonContent, ButtonContentProps } from './ButtonContent';\n\nexport interface ButtonProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<ButtonContentProps>>,\n    ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** A button can appear circular. */\n  circular?: boolean;\n\n  /** A button can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A button can fill the width of its container. */\n  fluid?: boolean;\n\n  /** A button can have an icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** A button can contain only an icon. */\n  iconOnly?: boolean;\n\n  /** An icon button can format its Icon to appear before or after its content */\n  iconPosition?: 'before' | 'after';\n\n  /** A button that inherits its background and has a subtle appearance */\n  inverted?: boolean;\n\n  /** Shorthand to customize a button's loader. */\n  loader?: ShorthandValue<LoaderProps>;\n\n  /** A button can show a loading indicator. */\n  loading?: boolean;\n\n  /**\n   * Called after a user clicks the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<ButtonProps>;\n\n  /**\n   * Called after a user focuses the button.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ButtonProps>;\n\n  /** A button can emphasize that it represents the primary action. */\n  primary?: boolean;\n\n  /** A button can be formatted to show only text in order to indicate a less-pronounced action. */\n  text?: boolean;\n\n  /** A button can emphasize that it represents an alternative action. */\n  secondary?: boolean;\n\n  /** A button can be sized. */\n  size?: SizeValue;\n}\n\nexport type ButtonStylesProps = Pick<\n  ButtonProps,\n  'text' | 'primary' | 'disabled' | 'circular' | 'size' | 'loading' | 'inverted' | 'iconOnly' | 'fluid' | 'iconPosition'\n> & {\n  hasContent?: boolean;\n};\n\nexport const buttonClassName = 'ui-button';\n\n/**\n * A Button enables users to take an action, such as submitting a form, opening a dialog, etc.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\nexport const Button = compose<'button', ButtonProps, ButtonStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n\n    const {\n      accessibility,\n      // @ts-ignore\n      active,\n      as,\n      children,\n      content,\n      icon,\n      loader,\n      disabled,\n      iconPosition,\n      loading,\n      text,\n      primary,\n      inverted,\n      size,\n      iconOnly,\n      fluid,\n      circular,\n      className,\n      styles,\n      variables,\n      design,\n    } = props;\n\n    const hasChildren = childrenExist(children);\n\n    const getA11yProps = useAccessibility(accessibility, {\n      debugName: composeOptions.displayName,\n      mapPropsToBehavior: () => ({\n        as,\n        active,\n        disabled,\n        loading,\n      }),\n      actionHandlers: {\n        performClick: event => {\n          event.preventDefault();\n          handleClick(event);\n        },\n      },\n      rtl: context.rtl,\n    });\n    const { classes, styles: resolvedStyles } = useStyles<ButtonStylesProps>(composeOptions.displayName, {\n      className: composeOptions.className,\n      mapPropsToStyles: () => ({\n        text,\n        primary,\n        disabled,\n        circular,\n        size,\n        loading,\n        inverted,\n        iconOnly,\n        iconPosition,\n        fluid,\n        hasContent: !!content,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const slotProps = composeOptions.resolveSlotProps<ButtonProps>(props);\n\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n    const ElementType = getElementType(props);\n\n    const renderIcon = () => {\n      return createShorthand(composeOptions.slots.icon, icon, {\n        defaultProps: () =>\n          getA11yProps('icon', {\n            styles: resolvedStyles.icon,\n            ...slotProps.icon,\n          }),\n      });\n    };\n\n    const renderLoader = () => {\n      return createShorthand(composeOptions.slots.loader, loader || {}, {\n        defaultProps: () =>\n          getA11yProps('loader', {\n            styles: resolvedStyles.loader,\n            ...slotProps.loader,\n          }),\n      });\n    };\n\n    const renderContent = () => {\n      return createShorthand(composeOptions.slots.content, content, {\n        defaultProps: () => getA11yProps('content', slotProps.content),\n      });\n    };\n\n    const handleClick = (e: React.SyntheticEvent) => {\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _.invoke(props, 'onClick', e, props);\n    };\n\n    const handleFocus = (e: React.SyntheticEvent) => {\n      _.invoke(props, 'onFocus', e, props);\n    };\n\n    const result = (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...getA11yProps('root', {\n          onClick: handleClick,\n          disabled,\n          className: classes.root,\n          onFocus: handleFocus,\n          ref,\n          ...unhandledProps,\n        })}\n      >\n        {hasChildren ? (\n          children\n        ) : (\n          <>\n            {loading && renderLoader()}\n            {iconPosition !== 'after' && renderIcon()}\n            {renderContent()}\n            {iconPosition === 'after' && renderIcon()}\n          </>\n        )}\n      </ElementType>\n    );\n\n    setEnd();\n\n    return result;\n  },\n  {\n    className: buttonClassName,\n    displayName: 'Button',\n\n    slots: {\n      content: ButtonContent,\n      icon: Box,\n      loader: Loader,\n    },\n    slotProps: props => ({\n      content: {\n        size: props.size,\n      },\n      loader: {\n        role: undefined,\n      },\n    }),\n\n    shorthandConfig: {\n      mappedProp: 'content',\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'circular',\n      'className',\n      'content',\n      'design',\n      'disabled',\n      'fluid',\n      'icon',\n      'iconOnly',\n      'iconPosition',\n      'inverted',\n      'loader',\n      'loading',\n      'onClick',\n      'onFocus',\n      'primary',\n      'text',\n      'secondary',\n      'size',\n      'styles',\n      'variables',\n    ],\n  },\n) as ComponentWithAs<'button', ButtonProps> & {\n  create: ShorthandFactory<ButtonProps>;\n  shorthandConfig: ShorthandConfig<ButtonProps>;\n  Content: typeof ButtonContent;\n  Group: typeof ButtonGroup;\n};\n\nButton.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n  size: 'medium',\n};\n\nButton.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  circular: PropTypes.bool,\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconOnly: PropTypes.bool,\n  iconPosition: PropTypes.oneOf(['before', 'after']),\n  inverted: PropTypes.bool,\n  loader: customPropTypes.itemShorthandWithoutJSX,\n  loading: PropTypes.bool,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  text: PropTypes.bool,\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  size: customPropTypes.size,\n};\n\nButton.Group = ButtonGroup;\nButton.Content = ButtonContent;\n\nButton.create = createShorthandFactory({ Component: Button, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}