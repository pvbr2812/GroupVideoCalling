{"ast":null,"code":"// Notice:\n// This temporary lives here, will be remove once `animation` prop will be dropped\nexport var createAnimationStyles = function createAnimationStyles(animation, theme) {\n  var animationCSSProp = {};\n  var _theme$animations = theme.animations,\n      animations = _theme$animations === void 0 ? {} : _theme$animations;\n\n  if (animation) {\n    var animationName = typeof animation === 'string' ? animation : animation.name;\n\n    if (animations[animationName]) {\n      var _animations$animation = animations[animationName],\n          keyframe = _animations$animation.keyframe,\n          duration = _animations$animation.duration,\n          delay = _animations$animation.delay,\n          direction = _animations$animation.direction,\n          fillMode = _animations$animation.fillMode,\n          iterationCount = _animations$animation.iterationCount,\n          playState = _animations$animation.playState,\n          timingFunction = _animations$animation.timingFunction,\n          keyframeParams = _animations$animation.keyframeParams;\n      var animationThemeKeyframeParams = keyframeParams || {};\n      var animationPropKeyframeParams = animation.keyframeParams;\n      var mergedKeyframeParams = typeof animation === 'string' || !animationPropKeyframeParams ? animationThemeKeyframeParams : Object.assign({}, animationThemeKeyframeParams, animationPropKeyframeParams || {});\n      var keyframeDefinition = typeof keyframe === 'string' ? keyframe : {\n        keyframe: keyframe,\n        params: mergedKeyframeParams\n      };\n\n      if (typeof animation === 'string') {\n        animationCSSProp = {\n          animationName: keyframeDefinition,\n          animationDelay: delay,\n          animationDirection: direction,\n          animationDuration: duration,\n          animationFillMode: fillMode,\n          animationIterationCount: iterationCount,\n          animationPlayState: playState,\n          animationTimingFunction: timingFunction\n        };\n      } else {\n        animationCSSProp = {\n          animationName: keyframeDefinition,\n          animationDelay: animation.delay || delay,\n          animationDirection: animation.direction || direction,\n          animationDuration: animation.duration || duration,\n          animationFillMode: animation.fillMode || fillMode,\n          animationIterationCount: animation.iterationCount || iterationCount,\n          animationPlayState: animation.playState || playState,\n          animationTimingFunction: animation.timingFunction || timingFunction\n        };\n      }\n    } else {\n      // animations was not found in the theme object\n      // TS issue, it's impossible to assign without this condition\n      // eslint-disable-next-line no-lonely-if\n      if (typeof animation === 'string') {\n        animationCSSProp = {\n          animationName: animation\n        };\n      } else {\n        animationCSSProp = Object.assign({\n          animationName: animation.name\n        }, animation.delay && {\n          animationDelay: animation.delay\n        }, animation.direction && {\n          animationDirection: animation.direction\n        }, animation.duration && {\n          animationDuration: animation.duration\n        }, animation.fillMode && {\n          animationFillMode: animation.fillMode\n        }, animation.iterationCount && {\n          animationIterationCount: animation.iterationCount\n        }, animation.playState && {\n          animationPlayState: animation.playState\n        }, animation.timingFunction && {\n          animationTimingFunction: animation.timingFunction\n        });\n      }\n    }\n  }\n\n  return animationCSSProp;\n};","map":{"version":3,"sources":["styles/createAnimationStyles.tsx"],"names":["createAnimationStyles","animationCSSProp","animations","theme","animationName","animation","keyframe","duration","delay","direction","fillMode","iterationCount","playState","timingFunction","keyframeParams","animationThemeKeyframeParams","animationPropKeyframeParams","mergedKeyframeParams","keyframeDefinition","params","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationPlayState","animationTimingFunction","name"],"mappings":"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","sourcesContent":["import { ICSSInJSStyle, ThemePrepared } from '@fluentui/styles';\nimport { ComponentAnimationProp } from '../styles/types';\n\n// Notice:\n// This temporary lives here, will be remove once `animation` prop will be dropped\nexport const createAnimationStyles = (animation: ComponentAnimationProp, theme: ThemePrepared) => {\n  let animationCSSProp: ICSSInJSStyle = {};\n  const { animations = {} } = theme;\n\n  if (animation) {\n    const animationName = typeof animation === 'string' ? animation : animation.name;\n    if (animations[animationName]) {\n      const {\n        keyframe,\n        duration,\n        delay,\n        direction,\n        fillMode,\n        iterationCount,\n        playState,\n        timingFunction,\n        keyframeParams,\n      } = animations[animationName];\n\n      const animationThemeKeyframeParams = keyframeParams || {};\n      const animationPropKeyframeParams = (animation as any).keyframeParams;\n\n      const mergedKeyframeParams =\n        typeof animation === 'string' || !animationPropKeyframeParams\n          ? animationThemeKeyframeParams\n          : { ...animationThemeKeyframeParams, ...(animationPropKeyframeParams || {}) };\n\n      const keyframeDefinition = typeof keyframe === 'string' ? keyframe : { keyframe, params: mergedKeyframeParams };\n\n      if (typeof animation === 'string') {\n        animationCSSProp = {\n          animationName: keyframeDefinition,\n          animationDelay: delay,\n          animationDirection: direction,\n          animationDuration: duration,\n          animationFillMode: fillMode,\n          animationIterationCount: iterationCount,\n          animationPlayState: playState,\n          animationTimingFunction: timingFunction,\n        };\n      } else {\n        animationCSSProp = {\n          animationName: keyframeDefinition,\n          animationDelay: animation.delay || delay,\n          animationDirection: animation.direction || direction,\n          animationDuration: animation.duration || duration,\n          animationFillMode: animation.fillMode || fillMode,\n          animationIterationCount: animation.iterationCount || iterationCount,\n          animationPlayState: animation.playState || playState,\n          animationTimingFunction: animation.timingFunction || timingFunction,\n        };\n      }\n    } else {\n      // animations was not found in the theme object\n\n      // TS issue, it's impossible to assign without this condition\n      // eslint-disable-next-line no-lonely-if\n      if (typeof animation === 'string') {\n        animationCSSProp = { animationName: animation };\n      } else {\n        animationCSSProp = {\n          animationName: animation.name,\n          ...(animation.delay && { animationDelay: animation.delay }),\n          ...(animation.direction && { animationDirection: animation.direction }),\n          ...(animation.duration && { animationDuration: animation.duration }),\n          ...(animation.fillMode && { animationFillMode: animation.fillMode }),\n          ...(animation.iterationCount && {\n            animationIterationCount: animation.iterationCount,\n          }),\n          ...(animation.playState && { animationPlayState: animation.playState }),\n          ...(animation.timingFunction && {\n            animationTimingFunction: animation.timingFunction,\n          }),\n        };\n      }\n    }\n  }\n  return animationCSSProp;\n};\n"]},"metadata":{},"sourceType":"module"}