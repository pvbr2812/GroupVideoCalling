{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWANATH REDDY\\\\Documents\\\\Teams_Clone\\\\Group_Call\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\RemoteStreamMedia.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Label, Spinner, SpinnerSize } from '@fluentui/react';\nimport { VideoStreamRenderer } from '@azure/communication-calling';\nimport { videoHint, mediaContainer } from './styles/StreamMedia.styles';\nimport { utils } from 'Utils/Utils';\nimport staticMediaSVG from \"../assets/staticmedia.svg\";\nimport { Image, ImageFit } from '@fluentui/react';\nexport default (props => {\n  const rendererViewRef = useRef();\n  const streamId = props.stream ? utils.getStreamId(props.label, props.stream) : `${props.label} - no stream`;\n  const [activeStreamBeingRendered, setActiveStreamBeingRendered] = useState(false);\n  const [showRenderLoading, setShowRenderLoading] = useState(false);\n  const imageProps = {\n    src: staticMediaSVG.toString(),\n    imageFit: ImageFit.contain,\n    styles: {\n      root: {\n        width: '100%',\n        height: '100%',\n        display: activeStreamBeingRendered ? 'none' : 'block'\n      }\n    }\n  };\n  const loadingStyle = {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n  const {\n    label,\n    stream,\n    isParticipantStreamSelected\n  } = props;\n  const renderRemoteStream = useCallback(async () => {\n    const container = document.getElementById(streamId);\n\n    if (container && stream && stream.isAvailable && isParticipantStreamSelected) {\n      // if we are already rendering a stream we don't want to start rendering the same stream\n      if (activeStreamBeingRendered) {\n        return;\n      } // set the flag that a stream is being rendered\n\n\n      setActiveStreamBeingRendered(true);\n      setShowRenderLoading(true);\n      const renderer = new VideoStreamRenderer(stream); // this can block a really long time if we fail to be subscribed to the call and it has to retry\n\n      rendererViewRef.current = await renderer.createView({\n        scalingMode: 'Crop'\n      });\n      setShowRenderLoading(false);\n\n      if (container && container.childElementCount === 0) {\n        container.appendChild(rendererViewRef.current.target);\n      }\n    } else {\n      setActiveStreamBeingRendered(false);\n\n      if (rendererViewRef.current) {\n        rendererViewRef.current.dispose();\n        rendererViewRef.current = undefined;\n      }\n    }\n  }, [stream, streamId, isParticipantStreamSelected, activeStreamBeingRendered, setShowRenderLoading, setActiveStreamBeingRendered]);\n  useEffect(() => {\n    if (!stream) {\n      return;\n    }\n\n    stream.on('isAvailableChanged', renderRemoteStream);\n\n    if (stream.isAvailable) {\n      renderRemoteStream();\n    }\n  }, [stream, isParticipantStreamSelected, renderRemoteStream]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: mediaContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: activeStreamBeingRendered ? 'block' : 'none'\n    },\n    className: mediaContainer,\n    id: streamId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, showRenderLoading && /*#__PURE__*/React.createElement(Spinner, {\n    style: loadingStyle,\n    label: `Rendering stream...`,\n    size: SpinnerSize.xSmall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 31\n    }\n  })), /*#__PURE__*/React.createElement(Image, Object.assign({}, imageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Label, {\n    className: videoHint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, label));\n});","map":{"version":3,"sources":["C:/Users/VISHWANATH REDDY/Documents/Teams_Clone/Group_Call/Calling/ClientApp/src/components/RemoteStreamMedia.tsx"],"names":["React","useCallback","useEffect","useRef","useState","Label","Spinner","SpinnerSize","VideoStreamRenderer","videoHint","mediaContainer","utils","Image","ImageFit","props","rendererViewRef","streamId","stream","getStreamId","label","activeStreamBeingRendered","setActiveStreamBeingRendered","showRenderLoading","setShowRenderLoading","imageProps","src","staticMediaSVG","toString","imageFit","contain","styles","root","width","height","display","loadingStyle","justifyContent","alignItems","isParticipantStreamSelected","renderRemoteStream","container","document","getElementById","isAvailable","renderer","current","createView","scalingMode","childElementCount","appendChild","target","dispose","undefined","on","xSmall"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\n\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Label, Spinner, SpinnerSize } from '@fluentui/react';\r\nimport { RemoteVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\r\nimport { videoHint, mediaContainer } from './styles/StreamMedia.styles';\r\nimport { utils } from 'Utils/Utils';\r\nimport staticMediaSVG from '../assets/staticmedia.svg';\r\nimport { Image, ImageFit } from '@fluentui/react';\r\n\r\nexport interface RemoteStreamMediaProps {\r\n  label: string;\r\n  stream: RemoteVideoStream | undefined;\r\n  isParticipantStreamSelected: boolean;\r\n}\r\n\r\nexport default (props: RemoteStreamMediaProps): JSX.Element => {\r\n  const rendererViewRef = useRef<VideoStreamRendererView>();\r\n\r\n  const streamId = props.stream ? utils.getStreamId(props.label, props.stream) : `${props.label} - no stream`;\r\n\r\n  const [activeStreamBeingRendered, setActiveStreamBeingRendered] = useState(false);\r\n  const [showRenderLoading, setShowRenderLoading] = useState(false);\r\n\r\n  const imageProps = {\r\n    src: staticMediaSVG.toString(),\r\n    imageFit: ImageFit.contain,\r\n    styles: {\r\n      root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: activeStreamBeingRendered ? 'none' : 'block'\r\n      }\r\n    }\r\n  };\r\n\r\n  const loadingStyle = {\r\n    height: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  };\r\n\r\n  const { label, stream, isParticipantStreamSelected } = props;\r\n\r\n  const renderRemoteStream = useCallback(async () => {\r\n    const container = document.getElementById(streamId);\r\n    if (container && stream && stream.isAvailable && isParticipantStreamSelected) {\r\n      // if we are already rendering a stream we don't want to start rendering the same stream\r\n      if (activeStreamBeingRendered) {\r\n        return;\r\n      }\r\n\r\n      // set the flag that a stream is being rendered\r\n      setActiveStreamBeingRendered(true);\r\n      setShowRenderLoading(true);\r\n      const renderer: VideoStreamRenderer = new VideoStreamRenderer(stream);\r\n      // this can block a really long time if we fail to be subscribed to the call and it has to retry\r\n      rendererViewRef.current = await renderer.createView({ scalingMode: 'Crop' });\r\n      setShowRenderLoading(false);\r\n      if (container && container.childElementCount === 0) {\r\n        container.appendChild(rendererViewRef.current.target);\r\n      }\r\n    } else {\r\n      setActiveStreamBeingRendered(false);\r\n\r\n      if (rendererViewRef.current) {\r\n        rendererViewRef.current.dispose();\r\n        rendererViewRef.current = undefined;\r\n      }\r\n    }\r\n  }, [\r\n    stream,\r\n    streamId,\r\n    isParticipantStreamSelected,\r\n    activeStreamBeingRendered,\r\n    setShowRenderLoading,\r\n    setActiveStreamBeingRendered\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!stream) {\r\n      return;\r\n    }\r\n\r\n    stream.on('isAvailableChanged', renderRemoteStream);\r\n\r\n    if (stream.isAvailable) {\r\n      renderRemoteStream();\r\n    }\r\n  }, [stream, isParticipantStreamSelected, renderRemoteStream]);\r\n\r\n  return (\r\n    <div className={mediaContainer}>\r\n      <div style={{ display: activeStreamBeingRendered ? 'block' : 'none' }} className={mediaContainer} id={streamId}>\r\n        {showRenderLoading && <Spinner style={loadingStyle} label={`Rendering stream...`} size={SpinnerSize.xSmall} />}\r\n      </div>\r\n      <Image {...imageProps} />\r\n      <Label className={videoHint}>{label}</Label>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}